# Multi-stage build for astro app with monorepo support
FROM node:20-alpine AS deps
WORKDIR /app
RUN corepack enable && apk add --no-cache git

# Copy only package manifests for better layer caching
COPY package*.json turbo.json tsconfig*.json ./
COPY packages/auth/package.json packages/auth/
COPY packages/integrations/package.json packages/integrations/
COPY packages/config/package.json packages/config/
COPY packages/ui/package.json packages/ui/
COPY apps/astro/package.json apps/astro/

# Install dependencies (cached unless manifests change)
RUN --mount=type=cache,target=/root/.npm npm install

FROM node:20-alpine AS base
WORKDIR /app
RUN corepack enable

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./
COPY --from=deps /app/turbo.json ./
COPY --from=deps /app/tsconfig*.json ./

# Copy source (only now invalidates subsequent layers, not deps)
COPY packages/auth/ packages/auth/
COPY packages/integrations/ packages/integrations/
COPY packages/config/ packages/config/
COPY packages/ui/ packages/ui/
COPY shared/ shared/
COPY apps/astro/ apps/astro/

# Build only essential packages
RUN --mount=type=cache,target=/root/.cache/turbo npm run build --workspace=@cosmichub/integrations \
	&& npm run build --workspace=@cosmichub/auth \
	&& npm run build --workspace=@cosmichub/config \
	&& npm run build --workspace=@cosmichub/ui

FROM base AS development
WORKDIR /app/apps/astro
EXPOSE 3000
# Use the simplified JS config in containers
ENV VITE_CONFIG_FILE=vite.config.js
CMD ["npm", "run", "dev"]

FROM base AS build
RUN --mount=type=cache,target=/root/.cache/turbo npm run build:apps

FROM node:20-alpine AS production
WORKDIR /app
COPY --from=build /app/apps/astro/dist ./dist
EXPOSE 3000
CMD ["npx", "serve", "-s", "dist", "-p", "3000"]
