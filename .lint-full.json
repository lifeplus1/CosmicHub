[
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/App.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/a11y/utils/axe.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/auth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIChat.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/useAIInterpretation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AnalyzePersonality.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/AspectsTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/AstrologyGuide.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/FundamentalsTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/HousesTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/HowToUseTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/PlanetsTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/SignsTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/useAstrologyGuide.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AuthProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartCalculator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/ChartDisplay.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of type `any[]` to a variable of type `Planet[]`.",
        "line": 582,
        "column": 31,
        "nodeType": "Property",
        "messageId": "unsafeAssignment",
        "endLine": 582,
        "endColumn": 97,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of type `any[]` to a variable of type `House[]`.",
        "line": 584,
        "column": 31,
        "nodeType": "Property",
        "messageId": "unsafeAssignment",
        "endLine": 584,
        "endColumn": 94,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of type `any[]` to a variable of type `Aspect[]`.",
        "line": 586,
        "column": 31,
        "nodeType": "Property",
        "messageId": "unsafeAssignment",
        "endLine": 586,
        "endColumn": 97,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of type `any[]` to a variable of type `Asteroid[]`.",
        "line": 588,
        "column": 31,
        "nodeType": "Property",
        "messageId": "unsafeAssignment",
        "endLine": 588,
        "endColumn": 103,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of type `any[]` to a variable of type `Angle[]`.",
        "line": 590,
        "column": 31,
        "nodeType": "Property",
        "messageId": "unsafeAssignment",
        "endLine": 590,
        "endColumn": 94,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/normalizeChart.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/sampleData.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/AngleTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/AspectTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/HouseTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/PlanetTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/tableUtils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/validateChart.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartPreferences.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Contact.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/CosmicLoading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EducationalContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EducationalTooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EnvironmentStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EphemerisPerformanceDashboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorTestComponent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/FeatureGuard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Footer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/ActivationSequenceTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/CoreQuartetTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeyDetails.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysChart.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'react-hooks/exhaustive-deps').",
        "line": 85,
        "column": 5,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [3307, 3362], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useToast } from '../ToastProvider';\nimport { calculateGeneKeys } from '../../services/api';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport type { GeneKeysChartProps, GeneKeysData, GeneKey } from './types';\nimport type { ChartBirthData } from '@cosmichub/types';\nimport GeneKeyDetails from './GeneKeyDetails';\nimport CoreQuartetTab from './CoreQuartetTab';\nimport ActivationSequenceTab from './ActivationSequenceTab';\nimport VenusSequenceTab from './VenusSequenceTab';\nimport PearlSequenceTab from './PearlSequenceTab';\nimport HologenicProfileTab from './HologenicProfileTab';\n\nconst GeneKeysChart: React.FC<GeneKeysChartProps> = React.memo(({ birthData, onCalculate }) => {\n  // Holds the calculated Gene Keys profile; stays null until a valid object is received.\n  // (Tests previously caused an undefined value to be set which bypassed the strict null check\n  // and led to runtime errors deeper in the tree. We defensively constrain to null | GeneKeysData.)\n  const [geneKeysData, setGeneKeysData] = useState<GeneKeysData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedKey, setSelectedKey] = useState<GeneKey | null>(null);\n  const { toast } = useToast();\n\n  const handleCalculate = useCallback(async () => {\n    if (birthData === null || birthData === undefined) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await calculateGeneKeys(birthData);\n      // Defensive: only accept a response that looks like a GeneKeysData object; otherwise keep null\n  if (response !== null && response !== undefined && typeof response === 'object' && 'life_work' in response && 'evolution' in response) {\n        setGeneKeysData(response);\n      } else {\n        // Treat an unexpected shape as an error to avoid propagating undefined into children\n        throw new Error('Invalid Gene Keys response');\n      }\n      \n      toast({\n        title: \"Gene Keys Calculated\",\n        description: \"Your Gene Keys profile has been generated successfully!\",\n        status: \"success\",\n        duration: 3000,\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to calculate Gene Keys';\n      setError(errorMessage);\n      toast({\n        title: \"Calculation Error\",\n        description: errorMessage,\n        status: \"error\",\n        duration: 5000,\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [birthData, toast]);\n\n  const handleKeySelect = useCallback((key: GeneKey) => {\n    setSelectedKey(key);\n  }, []);\n\n  // Memoized empty state button handler\n  const handleEmptyCalculate = useCallback(() => {\n    if (typeof onCalculate === 'function') {\n      // Provide a deterministic sample request for quick demo\n      void Promise.resolve(onCalculate({\n        year: 2000,\n        month: 1,\n        day: 1,\n        hour: 0,\n        minute: 0\n      } as ChartBirthData));\n    }\n  }, [onCalculate]);\n\n  useEffect(() => {\n    if (birthData !== null && birthData !== undefined) {\n      void handleCalculate();\n    }\n    // Intentional: handleCalculate depends on toast causing changing identity; rely only on birthData changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [birthData]);\n\n  // Memoized loading state\n  const loadingState = useMemo(() => (\n    <div className=\"py-10 text-center\">\n      <div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>\n      <p className=\"mt-4 text-cosmic-silver\">Calculating your Gene Keys profile...</p>\n    </div>\n  ), []);\n\n  // Memoized error state\n  const errorState = useMemo(() => (\n    <div className=\"p-4 border border-red-500 rounded-md bg-red-900/50\">\n      {error}\n    </div>\n  ), [error]);\n\n  // Memoized empty state\n  const emptyState = useMemo(() => (\n    <div className=\"py-10 text-center\">\n      <p className=\"mb-4 text-lg text-gray-700\">\n        Enter your birth information to calculate your Gene Keys profile\n      </p>\n  {(typeof onCalculate === 'function') && (\n        <button className=\"cosmic-button\" onClick={handleEmptyCalculate}>\n          Calculate Gene Keys\n        </button>\n      )}\n    </div>\n  ), [onCalculate, handleEmptyCalculate]);\n\n  if (loading === true) return loadingState;\n  if (error !== null) return errorState;\n  // Treat both null and undefined (should not happen now) as empty state\n  if (geneKeysData === null) return emptyState;\n\n  return (\n    <div className=\"p-6\">\n      <Tabs.Root defaultValue=\"core\">\n                <Tabs.List className=\"flex flex-wrap mb-6 border-b border-cosmic-silver/30\">\n          <Tabs.Trigger value=\"core\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple hover:bg-cosmic-purple/10 transition-colors\">\n            🌱 Core Quartet\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"activation\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple hover:bg-cosmic-purple/10 transition-colors\">\n            🧠 Activation (IQ)\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"venus\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple hover:bg-cosmic-purple/10 transition-colors\">\n            💖 Venus (EQ)\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"pearl\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple hover:bg-cosmic-purple/10 transition-colors\">\n            � Pearl (SQ)\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"profile\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple hover:bg-cosmic-purple/10 transition-colors\">\n            🌌 Hologenetic Profile\n          </Tabs.Trigger>\n          {(selectedKey !== null) && (\n            <Tabs.Trigger value=\"details\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple hover:bg-cosmic-purple/10 transition-colors\">\n              📖 Gene Key {selectedKey.number}\n            </Tabs.Trigger>\n          )}\n        </Tabs.List>\n\n        <Tabs.Content value=\"core\" className=\"p-6\">\n          <CoreQuartetTab \n            geneKeysData={geneKeysData} \n            onKeySelect={handleKeySelect} \n          />\n        </Tabs.Content>\n\n        <Tabs.Content value=\"activation\" className=\"p-6\">\n          <ActivationSequenceTab \n            geneKeysData={geneKeysData} \n            onKeySelect={handleKeySelect} \n          />\n        </Tabs.Content>\n\n        <Tabs.Content value=\"venus\" className=\"p-6\">\n          <VenusSequenceTab \n            geneKeysData={geneKeysData} \n            onKeySelect={handleKeySelect} \n          />\n        </Tabs.Content>\n\n        <Tabs.Content value=\"pearl\" className=\"p-6\">\n          <PearlSequenceTab \n            geneKeysData={geneKeysData} \n            onKeySelect={handleKeySelect} \n          />\n        </Tabs.Content>\n\n        <Tabs.Content value=\"profile\" className=\"p-6\">\n          <HologenicProfileTab geneKeysData={geneKeysData} />\n        </Tabs.Content>\n\n        <Tabs.Content value=\"details\" className=\"p-6\">\n          <GeneKeyDetails selectedKey={selectedKey} />\n        </Tabs.Content>\n      </Tabs.Root>\n    </div>\n  );\n});\n\nGeneKeysChart.displayName = 'GeneKeysChart';\n\nexport default GeneKeysChart;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/HologenicProfileTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/PearlSequenceTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/VenusSequenceTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/CentersTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/GatesChannelsTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/HumanDesignChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/HumanDesignModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/IncarnationCrossTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/InlineTooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/ProfileTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/VariablesTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/gateKeynotes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignGeneKeys.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Login.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MockLoginPanel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/ChineseChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/MayanChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/MultiSystemChartDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/SynthesisChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/UranianChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/VedicChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/WesternChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Navbar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NotificationSettings.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/ChallengeCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CyclesTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/InterpretationTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyCalculator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PersonalYearCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PinnacleCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/useNumerology.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PdfExport.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PremiumFeaturesDashboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PricingPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PrivacyPolicy.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ProgressBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SaveChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SavedCharts.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Signup.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SimpleBirthForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SubscriptionStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/SynastryAnalysis.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/SynastryComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TermsOfService.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ToastProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/DateRangeForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/EphemerisChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/EphemerisChartWrapper.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TabLoader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitAnalysis.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitsTab.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/useTransitAnalysis.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UnifiedBirthInput.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradeModalDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradeModalManager.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradePrompt.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UserMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UserProfile.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/accessibility/VisuallyHidden.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/components/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/config/environment.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 24,
        "column": 5,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [1174, 1212], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 113,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [3837, 3868], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import { z } from 'zod';\n\n// Environment validation schema\nconst envSchema = z.object({\n  VITE_FIREBASE_API_KEY: z.string().min(1, 'Firebase API key is required'),\n  VITE_FIREBASE_AUTH_DOMAIN: z.string().min(1, 'Firebase auth domain is required'),\n  VITE_FIREBASE_PROJECT_ID: z.string().min(1, 'Firebase project ID is required'),\n  VITE_FIREBASE_STORAGE_BUCKET: z.string().min(1, 'Firebase storage bucket is required'),\n  VITE_FIREBASE_MESSAGING_SENDER_ID: z.string().min(1, 'Firebase messaging sender ID is required'),\n  VITE_FIREBASE_APP_ID: z.string().min(1, 'Firebase app ID is required'),\n  VITE_API_URL: z.string().url().optional(),\n  VITE_XAI_API_KEY: z.string().optional(),\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n  VITE_ENABLE_ANALYTICS: z.string().transform(val => val === 'true').optional(),\n  VITE_ENABLE_ERROR_REPORTING: z.string().transform(val => val === 'true').optional(),\n});\n\n// Validate environment variables\nfunction validateEnvironment() {\n  try {\n    return envSchema.parse(import.meta.env);\n  } catch (error) {\n    // Use raw console.error here intentionally (bootstrapping prior to devConsole creation)\n    // eslint-disable-next-line no-console\n    console.error('Environment validation failed:', error);\n    throw new Error('Invalid environment configuration');\n  }\n}\n\n// Export validated environment\nexport const env = validateEnvironment();\n\n// Environment helper functions\nexport const isDevelopment = () => env.NODE_ENV === 'development';\nexport const isProduction = () => env.NODE_ENV === 'production';\nexport const isTest = () => env.NODE_ENV === 'test';\n\n// Feature flags\nexport const features = {\n  analytics: env.VITE_ENABLE_ANALYTICS ?? false,\n  errorReporting: env.VITE_ENABLE_ERROR_REPORTING ?? isProduction(),\n  healwave: true,\n  numerology: true,\n  humanDesign: true,\n  crossAppIntegration: true,\n};\n\n// API configuration\nexport const apiConfig = {\n  baseUrl: env.VITE_API_URL ?? 'http://localhost:8001',\n  timeout: 10000,\n  retries: 3,\n};\n\n// Firebase configuration\nexport const firebaseConfig = {\n  apiKey: env.VITE_FIREBASE_API_KEY,\n  authDomain: env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: env.VITE_FIREBASE_APP_ID,\n};\n\n// Security configuration\nexport const securityConfig = {\n  enableCSP: isProduction(),\n  enableHSTS: isProduction(),\n  sessionTimeout: 24 * 60 * 60 * 1000, // 24 hours\n  maxLoginAttempts: 5,\n  lockoutDuration: 15 * 60 * 1000, // 15 minutes\n};\n\n// XAI API configuration\nexport const xaiConfig = {\n  apiKey: env.VITE_XAI_API_KEY,\n  baseUrl: 'https://api.x.ai/v1',\n  model: 'grok-beta',\n  timeout: 30000,\n  enabled: env.VITE_XAI_API_KEY !== null && env.VITE_XAI_API_KEY !== undefined && env.VITE_XAI_API_KEY !== '',\n};\n\n// Logging configuration\nexport const loggingConfig = {\n  level: isDevelopment() ? 'debug' : 'warn',\n  enableConsole: isDevelopment(),\n  enableRemote: isProduction(),\n};\n\n// Performance monitoring configuration\nexport const performanceConfig = {\n  enabled: isDevelopment() || env.VITE_ENABLE_ANALYTICS === true,\n  trackingInterval: 5000, // 5 seconds\n  maxOperations: 1000, // Keep last 1000 operations\n  enableMemoryTracking: 'memory' in performance,\n  enablePagePerformance: true,\n  enableComponentTracking: isDevelopment(),\n  thresholds: {\n    slowOperation: 1000, // 1 second\n    memoryWarning: 80, // 80% of heap limit\n    renderWarning: 100, // 100ms render time\n  },\n  logging: {\n    enabled: isDevelopment(),\n    verbose: false,\n    logSlowOperations: true,\n  },\n};\n\n// Development utilities\n// Dev logging abstraction (silences in production except errors)\n// Wrapped in factory to support tree-shaking and easier future extension (e.g., remote logging)\n/* eslint-disable no-console */\ninterface DevConsole {\n  log: (...args: unknown[]) => void;\n  warn: (...args: unknown[]) => void;\n  info: (...args: unknown[]) => void;\n  debug: (...args: unknown[]) => void;\n  error: (...args: unknown[]) => void;\n}\n\nconst noop = (): void => {};\nconst makeDevConsole = (): DevConsole => ({\n  log: isDevelopment() ? console.log.bind(console) : noop,\n  warn: isDevelopment() ? console.warn.bind(console) : noop,\n  info: isDevelopment() ? (console.info?.bind(console) ?? noop) : noop,\n  debug: isDevelopment() ? console.debug.bind(console) : noop,\n  error: console.error.bind(console), // Always surface errors\n});\n/* eslint-enable no-console */\n\nexport const devConsole = makeDevConsole();\n\nexport default env;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/BirthDataContext.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/NotificationContext.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/UpgradeModalContext.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/examples/InteractiveChartExample.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/examples/NotificationIntegrationExamples.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 106,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [3429, 3467], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 231,
        "column": 13,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [8131, 8169], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "/**\n * Example Integration: Using Push Notifications in CosmicHub Components\n * This shows how to integrate the notification system into your existing components\n */\n\nimport React, { useEffect, useState, type ReactElement } from 'react';\nimport { getNotificationManager } from '../services/notificationManager';\nimport { devConsole } from '../config/environment';\nimport type { NotificationPreferences } from '@cosmichub/config';\nimport type { ChartData } from '../types/notifications';\n\n// Type definitions\ninterface BirthData {\n  userId: string;\n  birthDate?: string;\n  birthTime?: string;\n  birthLocation?: string;\n  [key: string]: unknown;\n}\n\ninterface NotificationStatus {\n  pushNotifications?: {\n    permissionStatus: string;\n    activeSubscriptions?: number;\n  };\n  backgroundSync?: {\n    isOnline: boolean;\n    queuedItems?: number;\n  };\n}\n\ntype NotificationType = 'chart_synced' | 'user_data_synced';\ninterface NotificationItem {\n  id: number;\n  type: NotificationType;\n  data: Record<string, unknown>;\n  timestamp: number;\n}\n\ninterface StorageMessage {\n  type: 'cosmichub-sync-chart_synced' | 'cosmichub-sync-user_data_synced';\n  data?: unknown;\n  timestamp: number;\n}\n\ninterface UserPreferences {\n  dailyHoroscope: boolean;\n  transitAlerts: boolean;\n  frequencyReminders: boolean;\n  appUpdates: boolean;\n  quietHours: {\n    enabled: boolean;\n    start: string;\n    end: string;\n  };\n  frequency: 'daily' | 'weekly' | 'monthly';\n}\n\n// (Removed MinimalChartData – using ChartData directly via guard)\n\n// Type guard functions\nfunction isValidChartData(data: unknown): data is ChartData {\n  if (typeof data !== 'object' || data === null) return false;\n  return 'id' in data && typeof (data as { id: unknown }).id === 'string';\n}\n\n// Example: Chart Calculation Component with Notifications\nexport const ChartCalculationWithNotifications: React.FC = () => {\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\n  const [notificationManager] = useState<ReturnType<typeof getNotificationManager>>((): ReturnType<typeof getNotificationManager> => getNotificationManager());\n\n  const calculateChart = async (birthData: BirthData): Promise<ChartData | null> => {\n    setIsCalculating(true);\n    \n    try {\n      // Start calculation\n      const calculationPromise = fetch('/api/charts/calculate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(birthData)\n      });\n\n      // Queue for background sync in case of network issues\n      // Optional background sync if API exists\n      const maybeSync = (notificationManager as unknown as { syncChartCalculation?: (data: { userId: string; birthData: BirthData; timestamp: number })=>Promise<void> }).syncChartCalculation;\n      if (typeof maybeSync === 'function') {\n        await maybeSync({ userId: birthData.userId, birthData, timestamp: Date.now() });\n      }\n\n      const result = await calculationPromise;\n      const chartData: unknown = await result.json();\n      \n      // Notify chart completion using the correct method\n      if (isValidChartData(chartData)) {\n        await notificationManager.notifyChartReady(chartData);\n        setIsCalculating(false);\n        return chartData;\n      }\n      setIsCalculating(false);\n      return null;\n\n    } catch (error) {\n      setIsCalculating(false);\n      \n      // Error handling - notification manager doesn't support direct queue access\n      // eslint-disable-next-line no-console\n      console.error('Chart calculation failed:', error);\n      \n      throw error;\n    }\n  };\n\n  const handleCalculateChart = (): void => {\n    void calculateChart({ userId: 'user123' /* birth data */ });\n  };\n\n  return (\n    <div className=\"chart-calculation\">\n      <button \n        onClick={handleCalculateChart}\n        disabled={isCalculating}\n        className=\"px-6 py-3 bg-purple-600 text-white rounded-lg disabled:opacity-50\"\n      >\n        {isCalculating ? 'Calculating...' : 'Calculate Chart'}\n      </button>\n    </div>\n  );\n};\n\n// Example: User Settings Page with Notification Preferences\nexport const UserSettingsWithNotifications: React.FC = () => {\n  const [notificationManager] = useState<ReturnType<typeof getNotificationManager>>((): ReturnType<typeof getNotificationManager> => getNotificationManager());\n  const [status, setStatus] = useState<NotificationStatus>({});\n\n  useEffect((): (() => void) => {\n    // Load notification status\n  const loadStatus = (): void => {\n  const raw = notificationManager.status() as unknown as { push?: Record<string, unknown>; background?: Record<string, unknown> };\n      const push = raw.push ?? {};\n      const background = raw.background ?? {};\n      const permissionStatus = typeof push.permissionStatus === 'string' ? push.permissionStatus : undefined;\n  const pushNotifications = (permissionStatus !== undefined && permissionStatus !== '') ? {\n        permissionStatus,\n        activeSubscriptions: typeof push.activeSubscriptions === 'number' ? push.activeSubscriptions : undefined\n      } : undefined;\n      const isOnline = typeof background.isOnline === 'boolean' ? background.isOnline : undefined;\n  const backgroundSync = (isOnline !== undefined) ? {\n        isOnline,\n        queuedItems: typeof background.queuedItems === 'number' ? background.queuedItems : undefined\n      } : undefined;\n      setStatus({ pushNotifications, backgroundSync });\n    };\n\n    loadStatus();\n    \n    // Update status every 10 seconds\n  const interval = setInterval((): void => { loadStatus(); }, 10000);\n  return () => { clearInterval(interval); };\n  }, [notificationManager]);\n\n  const handleSubscribe = async (): Promise<void> => {\n  const success = await notificationManager.subscribe('user123', {\n      dailyHoroscope: true,\n      transitAlerts: true,\n      frequencyReminders: false,\n      appUpdates: true,\n      quietHours: { enabled: true, start: '22:00', end: '08:00' },\n      frequency: 'daily' as const\n  } satisfies NotificationPreferences);\n\n    if (success === true) {\n      // Send welcome notification\n      await notificationManager.sendTest();\n    }\n  };\n\n  return (\n    <div className=\"user-settings\">\n      <div className=\"notification-status mb-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Notification Status</h3>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {status.pushNotifications?.permissionStatus === 'granted' ? '✅' : '❌'}\n            </div>\n            <div className=\"text-sm\">Push Permission</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {status.backgroundSync?.isOnline === true ? '🌐' : '📴'}\n            </div>\n            <div className=\"text-sm\">Connection Status</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {status.backgroundSync?.queuedItems ?? 0}\n            </div>\n            <div className=\"text-sm\">Queued Items</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {status.pushNotifications?.activeSubscriptions ?? 0}\n            </div>\n            <div className=\"text-sm\">Active Devices</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"notification-actions\">\n        <button\n          onClick={(): void => { void handleSubscribe(); }}\n          className=\"px-4 py-2 bg-green-600 text-white rounded mr-4\"\n        >\n          Enable Notifications\n        </button>\n        \n        <button\n          onClick={(): void => { void notificationManager.sendTest(); }}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded mr-4\"\n        >\n          Test Notification\n        </button>\n        \n        <button\n          onClick={(): void => { \n            // getSmartSuggestions method not available in current implementation\n            // eslint-disable-next-line no-console\n            console.log('Smart setup not yet implemented');\n          }}\n          className=\"px-4 py-2 bg-purple-600 text-white rounded\"\n        >\n          Smart Setup\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Example: Dashboard with Real-time Notifications\nexport const DashboardWithNotifications: React.FC = () => {\n  const [notifications, setNotifications] = useState<NotificationItem[]>([]);\n\n  useEffect((): (() => void) => {\n    // Listen for background sync events\n  const handleStorageChange = (event: StorageEvent): void => {\n      if (typeof event.key === 'string' && event.key.startsWith('cosmichub-sync-') && typeof event.newValue === 'string' && event.newValue.length > 0) {\n        try {\n          const parsed: unknown = JSON.parse(event.newValue);\n          if (parsed === null || typeof parsed !== 'object') return;\n          const maybe = parsed as { type?: unknown; timestamp?: unknown; data?: unknown };\n          if (maybe.type === 'cosmichub-sync-chart_synced' || maybe.type === 'cosmichub-sync-user_data_synced') {\n            if (typeof maybe.timestamp !== 'number') return;\n            const msg: StorageMessage = { type: maybe.type, timestamp: maybe.timestamp, data: maybe.data };\n            setNotifications((prev: NotificationItem[]): NotificationItem[] => [{\n              id: Date.now(),\n              type: msg.type === 'cosmichub-sync-chart_synced' ? 'chart_synced' : 'user_data_synced',\n              data: (msg.data !== undefined && msg.data !== null && typeof msg.data === 'object') ? (msg.data as Record<string, unknown>) : {},\n              timestamp: msg.timestamp\n            }, ...prev.slice(0, 9)]);\n          }\n        } catch (error) {\n          devConsole.warn?.('Failed to parse sync message:', error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Simulate some notifications for demo\n    const demoNotifications: NotificationItem[] = [\n      {\n        id: 1,\n        type: 'chart_synced',\n        data: { chartId: 'chart123' },\n        timestamp: Date.now() - 300000 // 5 minutes ago\n      },\n      {\n        id: 2,\n        type: 'user_data_synced',\n        data: { userId: 'user123' },\n        timestamp: Date.now() - 600000 // 10 minutes ago\n      }\n    ];\n    \n    setNotifications(demoNotifications);\n\n  return () => { window.removeEventListener('storage', handleStorageChange); };\n  }, []);\n\n  const triggerTransitAlert = (): void => {\n    devConsole.debug?.('Transit alert demo');\n  };\n\n  const triggerDailyHoroscope = (): void => {\n    devConsole.debug?.('Daily horoscope demo');\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"notification-feed mb-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Recent Activity</h3>\n        <div className=\"space-y-2\">\n          {notifications.map((notification: NotificationItem): ReactElement => (\n            <div \n              key={notification.id}\n              className=\"p-3 bg-blue-50 border-l-4 border-blue-400 rounded\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <div className=\"font-medium\">\n                    {notification.type === 'chart_synced' && '📊 Chart Synchronized'}\n                    {notification.type === 'user_data_synced' && '👤 Profile Updated'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    {new Date(notification.timestamp).toLocaleTimeString()}\n                  </div>\n                </div>\n                <div className=\"text-xs text-blue-600\">\n                  ✅ Synced\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n  <div className=\"demo-triggers\">\n        <h3 className=\"text-lg font-semibold mb-4\">Demo Notifications</h3>\n        \n        <div className=\"space-x-4\">\n          <button\n            onClick={(): void => { void triggerTransitAlert(); }}\n            className=\"px-4 py-2 bg-red-600 text-white rounded\"\n          >\n            🪐 Transit Alert\n          </button>\n          \n          <button\n            onClick={(): void => { void triggerDailyHoroscope(); }}\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded\"\n          >\n            ✨ Daily Horoscope\n          </button>\n          \n          <button\n            onClick={(): void => { \n              // notifyRetrograde method not available in current implementation\n              devConsole.debug?.('Retrograde alert demo: Mercury entering retrograde');\n            }}\n            className=\"px-4 py-2 bg-purple-600 text-white rounded\"\n          >\n            ↩️ Retrograde Alert\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Example: Hook for using notifications in any component\ninterface UseNotificationsReturn {\n  manager: ReturnType<typeof getNotificationManager>;\n  status: NotificationStatus;\n  isOnline: boolean;\n  hasPermission: boolean;\n  queuedItems: number;\n  subscribe: (userId: string, preferences?: UserPreferences) => Promise<boolean>;\n  unsubscribe: () => Promise<boolean>;\n  sendTest: () => Promise<boolean>;\n  notifyChart: (chartData: unknown) => Promise<void>;\n  syncChart: () => Promise<void>;\n}\n\nexport const useNotifications = (): UseNotificationsReturn => {\n  const [manager] = useState<ReturnType<typeof getNotificationManager>>((): ReturnType<typeof getNotificationManager> => getNotificationManager());\n  const [status, setStatus] = useState<NotificationStatus>({});\n\n  useEffect((): (() => void) => {\n  const updateStatus = (): void => {\n  const raw = manager.status() as unknown as { push?: Record<string, unknown>; background?: Record<string, unknown> };\n      const push = raw.push ?? {};\n      const background = raw.background ?? {};\n      const permVal = typeof push.permissionStatus === 'string' ? push.permissionStatus : undefined;\n  const pushNotifications = (permVal !== undefined && permVal !== '') ? {\n        permissionStatus: permVal,\n        activeSubscriptions: typeof push.activeSubscriptions === 'number' ? push.activeSubscriptions : undefined\n      } : undefined;\n      const onlineVal = typeof background.isOnline === 'boolean' ? background.isOnline : undefined;\n  const backgroundSync = (onlineVal !== undefined) ? {\n        isOnline: onlineVal,\n        queuedItems: typeof background.queuedItems === 'number' ? background.queuedItems : undefined\n      } : undefined;\n      setStatus({ pushNotifications, backgroundSync });\n    };\n    \n    updateStatus();\n  const interval = setInterval((): void => { updateStatus(); }, 5000);\n    \n  return () => { clearInterval(interval); };\n  }, [manager]);\n\n  return {\n  manager,\n  status,\n  isOnline: (status.backgroundSync?.isOnline === true),\n  hasPermission: (status.pushNotifications?.permissionStatus === 'granted'),\n  queuedItems: status.backgroundSync?.queuedItems ?? 0,\n    \n    // Helper methods\n  subscribe: (userId: string, preferences?: UserPreferences): Promise<boolean> => manager.subscribe(userId, preferences),\n    \n  unsubscribe: (): Promise<boolean> => Promise.resolve(true),\n    \n  sendTest: (): Promise<boolean> => manager.sendTest(),\n    \n  notifyChart: (chartData: unknown): Promise<void> => {\n      if (isValidChartData(chartData)) {\n        return manager.notifyChartReady(chartData);\n      }\n      return Promise.resolve();\n    },\n    \n    syncChart: (): Promise<void> => {\n      // syncChartCalculation method not available in current implementation\n      devConsole.debug?.('Sync chart not yet implemented');\n      return Promise.resolve();\n    }\n  };\n};\n\n// Example usage in any component:\n/*\nfunction MyComponent() {\n  const { \n    hasPermission, \n    isOnline, \n    queuedItems, \n    subscribe, \n    sendTest \n  } = useNotifications();\n\n  return (\n    <div>\n      <p>Permission: {hasPermission ? '✅' : '❌'}</p>\n      <p>Online: {isOnline ? '🌐' : '📴'}</p>\n      <p>Queued: {queuedItems}</p>\n      \n      <button onClick={() => subscribe('user123')}>\n        Enable Notifications\n      </button>\n      \n      <button onClick={sendTest}>\n        Test Notification\n      </button>\n    </div>\n  );\n}\n*/\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/ChartWheel.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'BackendChartResponse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/ChartWheelInteractive.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/frequency/AstroFrequencyGenerator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/frequency/AstroInfo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/HealwavePage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/AudioPlayer.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'react-hooks/exhaustive-deps').",
        "line": 40,
        "column": 3,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [947, 1002], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useEffect, useRef, useState } from 'react';\nimport { devConsole } from '../../../config/environment';\nimport { Card } from '@cosmichub/ui';\nimport styles from './AudioPlayer.module.css';\n\ninterface AudioPlayerProps {\n  frequency: number;\n  isPlaying: boolean;\n  volume: number;\n  onVolumeChange: (volume: number) => void;\n}\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({\n  frequency,\n  isPlaying,\n  volume,\n  onVolumeChange\n}) => {\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const oscillatorRef = useRef<OscillatorNode | null>(null);\n  const gainNodeRef = useRef<GainNode | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    if (!isInitialized && isPlaying) {\n      initializeAudio();\n    }\n\n    if (isInitialized) {\n      if (isPlaying) {\n        startAudio();\n      } else {\n        stopAudio();\n      }\n    }\n\n    return () => {\n      cleanup();\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying, frequency, isInitialized]);\n\n  useEffect(() => {\n    if (gainNodeRef.current !== null && gainNodeRef.current !== undefined) {\n      const currentTime = audioContextRef.current?.currentTime ?? 0;\n      gainNodeRef.current.gain.setValueAtTime(volume / 100, currentTime);\n    }\n  }, [volume]);\n\n  const initializeAudio = () => {\n    try {\n      const AudioContextClass = window.AudioContext ?? (window as unknown as { webkitAudioContext: typeof AudioContext }).webkitAudioContext;\n      audioContextRef.current = new AudioContextClass();\n      gainNodeRef.current = audioContextRef.current.createGain();\n      gainNodeRef.current.connect(audioContextRef.current.destination);\n      gainNodeRef.current.gain.setValueAtTime(volume / 100, audioContextRef.current.currentTime);\n      setIsInitialized(true);\n    } catch (error) {\n      devConsole.error('❌ Failed to initialize audio context:', error);\n    }\n  };\n\n  const startAudio = () => {\n    if (audioContextRef.current === null || audioContextRef.current === undefined || \n        gainNodeRef.current === null || gainNodeRef.current === undefined) return;\n\n    try {\n      if (oscillatorRef.current !== null && oscillatorRef.current !== undefined) {\n        oscillatorRef.current.stop();\n        oscillatorRef.current.disconnect();\n      }\n\n      oscillatorRef.current = audioContextRef.current.createOscillator();\n      oscillatorRef.current.type = 'sine';\n      oscillatorRef.current.frequency.setValueAtTime(frequency, audioContextRef.current.currentTime);\n      oscillatorRef.current.connect(gainNodeRef.current);\n      oscillatorRef.current.start();\n    } catch (error) {\n      devConsole.error('❌ Failed to start audio:', error);\n    }\n  };\n\n  const stopAudio = () => {\n    if (oscillatorRef.current !== null && oscillatorRef.current !== undefined) {\n      try {\n        oscillatorRef.current.stop();\n        oscillatorRef.current.disconnect();\n        oscillatorRef.current = null;\n      } catch (error) {\n        devConsole.error('❌ Failed to stop audio:', error);\n      }\n    }\n  };\n\n  const cleanup = () => {\n    stopAudio();\n    if (audioContextRef.current !== null && audioContextRef.current !== undefined && \n        audioContextRef.current.state !== 'closed') {\n      void audioContextRef.current.close();\n    }\n    setIsInitialized(false);\n  };\n\n  return (\n    <Card title=\"Audio Player\" className=\"bg-cosmic-dark/50\">\n      <div className={styles['player-container']}>\n        <div className=\"text-center\">\n          <div className={`${styles['audio-circle']} ${\n            isPlaying \n              ? styles['audio-circle-playing'] \n              : styles['audio-circle-stopped']\n          }`}>\n            <div className={styles['circle-content']}>\n              {isPlaying ? (\n                <div className={styles['audio-bars']}>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-1']}`}></div>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-2']}`}></div>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-3']}`}></div>\n                </div>\n              ) : (\n                <div className={styles['play-button']}></div>\n              )}\n            </div>\n          </div>\n          \n          <p className={styles['status-text']}>\n            {isPlaying ? 'Playing' : 'Stopped'} - {frequency} Hz\n          </p>\n        </div>\n\n        <div className={styles['volume-section']}>\n          <label htmlFor=\"volume\" className={styles['volume-label']}>\n            Volume: {volume}%\n          </label>\n          <input\n            id=\"volume\"\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={volume}\n            onChange={(e) => onVolumeChange(Number(e.target.value))}\n            className={styles['volume-slider']}\n            aria-label=\"Volume control\"\n          />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default AudioPlayer;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/DurationTimer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/FrequencyControls.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/hooks/useHealwave.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/firebase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/usePerformance.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useToast.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useUpgradeModal.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'StripeSession' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useUsageTracking.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/main.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/AIInterpretation.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'auth' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 13,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Calculator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Chart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ChartResults.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ChartWheel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Dashboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/GeneKeys.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/HumanDesign.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Login.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/MultiSystemChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Numerology.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/PerformanceMonitoring.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Profile.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ProfileSimple.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SavedCharts.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SignUp.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionCancel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionCancelledPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionSuccess.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionSuccessPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Synastry.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pwa-performance.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/pwa.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/routes/lazy-routes.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/api.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/api.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/astrologyService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/chartAnalyticsService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/chartSyncService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/ephemeris-performance.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/ephemeris.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'planets' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 183,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 12,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.new.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.unified.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/services/validation.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'planet' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 170,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 170,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/setupTests.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/shared/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/astrology.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/birth-data.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/house-cusp.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/notifications.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/preferences.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/processed-chart.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/types/subscription.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/chart-validation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/componentLogger.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/exportUtils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/guards.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/logger.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 12,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [500, 538], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 18,
        "column": 5,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [674, 712], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 23,
        "column": 5,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [838, 876], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 28,
        "column": 5,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [1002, 1040], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "/**\n * Structured logging utility for CosmicHub\n */\nexport class Logger {\n  private static formatMessage(level: string, message: string, data?: unknown): string {\n    const timestamp = new Date().toISOString();\n  return `[${timestamp}] ${level.toUpperCase()}: ${message}${data !== undefined ? ` - ${JSON.stringify(data)}` : ''}`;\n  }\n\n  static debug(message: string, data?: unknown): void {\n  if (typeof globalThis.process !== 'undefined' && globalThis.process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.debug(this.formatMessage('debug', message, data));\n    }\n  }\n\n  static info(message: string, data?: unknown): void {\n    // eslint-disable-next-line no-console\n    console.info(this.formatMessage('info', message, data));\n  }\n\n  static warn(message: string, data?: unknown): void {\n    // eslint-disable-next-line no-console\n    console.warn(this.formatMessage('warn', message, data));\n  }\n\n  static error(message: string, error?: Error): void {\n    // eslint-disable-next-line no-console\n    console.error(this.formatMessage('error', message, {\n      message: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined\n    }));\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/typeGuards.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/upgradeEvents.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/validation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/App.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AppConfig' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Notification' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { lazy, Suspense, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { AuthProvider } from '@cosmichub/auth';\nimport { useCrossAppStore } from '@cosmichub/integrations';\nimport { getAppConfig, isFeatureEnabled } from '@cosmichub/config';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\n\n// Lazy load pages to optimize bundle size\nconst FrequencyGenerator = lazy(() => import('./pages/FrequencyGenerator'));\nconst Presets = lazy(() => import('./pages/Presets'));\nconst Profile = lazy(() => import('./pages/Profile'));\n\ninterface AppConfig {\n  app: string;\n  environment: string;\n  version: string;\n}\n\ninterface Notification {\n  id: string;\n  message: string;\n  type: 'info' | 'success' | 'error';\n  timestamp: number;\n}\n\nconst MainApp: React.FC = () => {\n  const { addNotification } = useCrossAppStore();\n  const config = getAppConfig('healwave');\n\n  // Memoize handleOpenAstroApp to prevent unnecessary re-renders\n  const handleOpenAstroApp = useCallback(() => {\n    window.open('/astro', '_blank', 'noopener,noreferrer');\n  }, []);\n\n  useEffect(() => {\n    if (isFeatureEnabled('crossAppIntegration')) {\n      addNotification({\n        id: `healwave-init-${Date.now()}`,\n        message: 'Healwave app initialized with cross-app integration',\n        type: 'info',\n        timestamp: Date.now(),\n      });\n    }\n  }, [addNotification]);\n\n  return (\n    <Router>\n      <div className=\"min-h-screen text-white bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900\">\n        <header>\n          <Navbar />\n        </header>\n        <main className=\"container px-4 py-8 mx-auto\" role=\"main\" aria-label=\"Main content\">\n          <section className=\"mb-8 text-center\" aria-labelledby=\"app-title\">\n            <h1 id=\"app-title\" className=\"mb-4 text-4xl font-bold\">Healwave Frequency Generator</h1>\n            <p className=\"text-xl text-blue-200\">\n              Therapeutic sound frequencies for healing and wellness\n            </p>\n            <div className=\"mt-4\">\n              <button\n                onClick={handleOpenAstroApp}\n                className=\"px-4 py-2 bg-cosmic-gold text-cosmic-dark hover:bg-cosmic-gold/90 rounded-lg transition-colors\"\n                aria-label=\"Open Astrology App in a new tab\"\n              >\n                Open Astrology App\n              </button>\n            </div>\n          </section>\n\n          <Suspense fallback={<div className=\"flex items-center justify-center p-8\"><div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500\"></div></div>}>\n            <Routes>\n              <Route path=\"/\" element={<FrequencyGenerator />} />\n              <Route path=\"/presets\" element={<Presets />} />\n              <Route path=\"/profile\" element={<Profile />} />\n            </Routes>\n          </Suspense>\n        </main>\n        <Footer />\n\n        {config.app.environment === 'development' && (\n          <div\n            className=\"fixed p-2 text-xs bg-purple-600 rounded bottom-4 right-4\"\n            aria-live=\"polite\"\n            role=\"status\"\n          >\n            App: {config.app.name} | Env: {config.app.environment} | Version: {config.app.version}\n          </div>\n        )}\n      </div>\n    </Router>\n  );\n};\n\nconst App: React.FC = () => (\n  <AuthProvider>\n    <ErrorBoundary>\n      <MainApp />\n    </ErrorBoundary>\n  </AuthProvider>\n);\n\nexport default App;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/TestImport.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AudioEngine' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'FrequencyPreset' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { AudioEngine, FrequencyPreset } from '@cosmichub/frequency';\n\nconst TestComponent: React.FC = () => {\n  return <div>Test Component</div>;\n};\n\nexport default TestComponent;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/auth.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 3,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [75, 106], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'input' may use Object's default stringification format ('[object Object]') when stringified.",
        "line": 24,
        "column": 85,
        "nodeType": "Identifier",
        "messageId": "baseToString",
        "endLine": 24,
        "endColumn": 90
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "// Re-export from the shared auth package\nexport * from '@cosmichub/auth';\n/* eslint-disable no-console */\nconst devConsole = {\n\tlog: import.meta.env.MODE === 'development' ? console.log.bind(console) : undefined,\n\twarn: import.meta.env.MODE === 'development' ? console.warn.bind(console) : undefined,\n\terror: console.error.bind(console)\n};\n/* eslint-enable no-console */\n// --- Global fetch wrapper to propagate X-Request-ID & capture in errors ---\nconst originalFetch = window.fetch.bind(window);\nwindow.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {\n\tconst requestId = crypto.randomUUID();\n\tconst newInit: RequestInit = {\n\t\t...(init ?? {}),\n\t\theaders: {\n\t\t\t...(init?.headers ?? {}),\n\t\t\t'X-Request-ID': requestId,\n\t\t},\n\t};\n\tconst resp = await originalFetch(input, newInit);\n\t// Attach ID to any global error reporter (placeholder)\n\tif (resp.ok === false) {\n\t\tdevConsole.warn?.('Request failed', { requestId, status: resp.status, url: String(input) });\n\t}\n\treturn resp;\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/AudioPlayer.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 2,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [79, 110], "text": " " }
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 36,
        "column": 35,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 36,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [1247, 1249], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1326, 1329], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1326, 1329], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .webkitAudioContext on an `any` value.",
        "line": 37,
        "column": 74,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 37,
        "endColumn": 92
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 38,
        "column": 31,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 38,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [1381, 1383], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 59,
        "column": 33,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 59,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [2051, 2053], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 108,
        "column": 33,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 108,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [3933, 3935], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 126,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 126,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 136,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 163,
        "column": 7,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 163,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [5497, 5497], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [5497, 5497], "text": "await " },
            "desc": "Add await operator."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 175,
        "column": 58,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 175,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [5780, 5782], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 175,
        "column": 96,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 175,
        "endColumn": 98,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [5818, 5820], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 188,
        "column": 52,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 188,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [6320, 6322], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 188,
        "column": 84,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 188,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [6352, 6354], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 207,
        "column": 15,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 207,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [6854, 6856], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 207,
        "column": 44,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 207,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [6883, 6885], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 14,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useRef, useEffect, useState, useCallback, memo } from 'react';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\n\ninterface AudioPlayerProps {\n  frequency?: number;\n  volume?: number;\n  isPlaying?: boolean;\n  onPlayStateChange?: (isPlaying: boolean) => void;\n  binauralBeat?: number;\n}\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = memo(({\n  frequency = 440,\n  volume = 0.5,\n  isPlaying = false,\n  onPlayStateChange,\n  binauralBeat\n}) => {\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const leftOscillatorRef = useRef<OscillatorNode | null>(null);\n  const rightOscillatorRef = useRef<OscillatorNode | null>(null);\n  const leftGainRef = useRef<GainNode | null>(null);\n  const rightGainRef = useRef<GainNode | null>(null);\n  const mergerRef = useRef<ChannelMergerNode | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const initializeAudio = useCallback(async () => {\n    try {\n      if (audioContextRef.current == null) {\n        const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;\n        if (AudioContextClass == null) {\n          throw new Error('Web Audio API not supported in this browser');\n        }\n\n        audioContextRef.current = new AudioContextClass();\n        \n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        \n        setIsInitialized(true);\n        setError(null);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to initialize audio';\n      setError(errorMessage);\n  devConsole.error('Failed to initialize audio context:', error);\n    }\n  }, []);\n\n  const createAudioNodes = useCallback(() => {\n    if (audioContextRef.current == null) return;\n\n    const context = audioContextRef.current;\n\n    try {\n      leftOscillatorRef.current = context.createOscillator();\n      rightOscillatorRef.current = context.createOscillator();\n\n      leftGainRef.current = context.createGain();\n      rightGainRef.current = context.createGain();\n\n      mergerRef.current = context.createChannelMerger(2);\n\n      const leftFreq = frequency;\n      const rightFreq = binauralBeat ? frequency + binauralBeat : frequency;\n\n      leftOscillatorRef.current.frequency.setValueAtTime(leftFreq, context.currentTime);\n      rightOscillatorRef.current.frequency.setValueAtTime(rightFreq, context.currentTime);\n\n      leftOscillatorRef.current.type = 'sine';\n      rightOscillatorRef.current.type = 'sine';\n\n      const attackTime = 0.1;\n      leftGainRef.current.gain.setValueAtTime(0, context.currentTime);\n      leftGainRef.current.gain.linearRampToValueAtTime(volume, context.currentTime + attackTime);\n      \n      rightGainRef.current.gain.setValueAtTime(0, context.currentTime);\n      rightGainRef.current.gain.linearRampToValueAtTime(volume, context.currentTime + attackTime);\n\n      leftOscillatorRef.current.connect(leftGainRef.current);\n      rightOscillatorRef.current.connect(rightGainRef.current);\n      \n      leftGainRef.current.connect(mergerRef.current, 0, 0);\n      rightGainRef.current.connect(mergerRef.current, 0, 1);\n      \n      mergerRef.current.connect(context.destination);\n\n      leftOscillatorRef.current.start();\n      rightOscillatorRef.current.start();\n\n      setError(null);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to create audio nodes';\n      setError(errorMessage);\n  devConsole.error('Failed to create audio nodes:', error);\n    }\n  }, [frequency, binauralBeat, volume]);\n\n  const stopAudio = useCallback(() => {\n    if (audioContextRef.current == null) return;\n\n    try {\n      const context = audioContextRef.current;\n      const fadeTime = 0.1;\n\n      if (leftGainRef.current) {\n        leftGainRef.current.gain.linearRampToValueAtTime(0, context.currentTime + fadeTime);\n      }\n      if (rightGainRef.current) {\n        rightGainRef.current.gain.linearRampToValueAtTime(0, context.currentTime + fadeTime);\n      }\n\n      setTimeout(() => {\n        if (leftOscillatorRef.current) {\n          try {\n            leftOscillatorRef.current.stop();\n            leftOscillatorRef.current.disconnect();\n          } catch (e) {\n            // Oscillator may have already stopped\n          }\n          leftOscillatorRef.current = null;\n        }\n        \n        if (rightOscillatorRef.current) {\n          try {\n            rightOscillatorRef.current.stop();\n            rightOscillatorRef.current.disconnect();\n          } catch (e) {\n            // Oscillator may have already stopped\n          }\n          rightOscillatorRef.current = null;\n        }\n\n        if (leftGainRef.current) {\n          leftGainRef.current.disconnect();\n          leftGainRef.current = null;\n        }\n        if (rightGainRef.current) {\n          rightGainRef.current.disconnect();\n          rightGainRef.current = null;\n        }\n        if (mergerRef.current) {\n          mergerRef.current.disconnect();\n          mergerRef.current = null;\n        }\n      }, fadeTime * 1000);\n\n    } catch (error) {\n  devConsole.error('Error stopping audio:', error);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isInitialized === false) {\n      initializeAudio();\n      return;\n    }\n\n    if (isPlaying) {\n      createAudioNodes();\n    } else {\n      stopAudio();\n    }\n  }, [isPlaying, isInitialized, createAudioNodes, stopAudio, initializeAudio]);\n\n  useEffect(() => {\n    if (isPlaying === false || leftOscillatorRef.current == null || rightOscillatorRef.current == null) return;\n\n    const context = audioContextRef.current;\n    if (!context) return;\n\n    const leftFreq = frequency;\n    const rightFreq = binauralBeat ? frequency + binauralBeat : frequency;\n\n    leftOscillatorRef.current.frequency.setTargetAtTime(leftFreq, context.currentTime, 0.1);\n    rightOscillatorRef.current.frequency.setTargetAtTime(rightFreq, context.currentTime, 0.1);\n  }, [frequency, binauralBeat, isPlaying]);\n\n  useEffect(() => {\n    if (isPlaying === false || leftGainRef.current == null || rightGainRef.current == null) return;\n\n    const context = audioContextRef.current;\n    if (!context) return;\n\n    leftGainRef.current.gain.setTargetAtTime(volume, context.currentTime, 0.1);\n    rightGainRef.current.gain.setTargetAtTime(volume, context.currentTime, 0.1);\n  }, [volume, isPlaying]);\n\n  useEffect(() => {\n    return () => {\n      stopAudio();\n      if (audioContextRef.current) {\n  audioContextRef.current.close().catch(devConsole.error);\n      }\n    };\n  }, [stopAudio]);\n\n  useEffect(() => {\n    if (error != null && onPlayStateChange != null) {\n      onPlayStateChange(false);\n    }\n  }, [error, onPlayStateChange]);\n\n  if (error) {\n  devConsole.warn?.('AudioPlayer Error:', error);\n  }\n\n  return null;\n});\n\nAudioPlayer.displayName = 'AudioPlayer';\n\nexport default AudioPlayer;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/BinauralSettings.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 2,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [63, 94], "text": " " }
      },
      {
        "ruleId": "react/display-name",
        "severity": 2,
        "message": "Component definition is missing display name",
        "line": 25,
        "column": 66,
        "nodeType": "CallExpression",
        "messageId": "noDisplayName",
        "endLine": 396,
        "endColumn": 3
      },
      {
        "ruleId": "jsx-a11y/no-redundant-roles",
        "severity": 2,
        "message": "The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.",
        "line": 385,
        "column": 9,
        "nodeType": "JSXOpeningElement",
        "endLine": 385,
        "endColumn": 69
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useState, useCallback, useMemo } from 'react';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\nimport { AudioEngine, FrequencyPreset, AudioSettings } from '@cosmichub/frequency';\nimport * as Slider from '@radix-ui/react-slider';\nimport * as Tooltip from '@radix-ui/react-tooltip';\n\ninterface BinauralSettingsProps {\n  onSettingsChange: (settings: AudioSettings) => void;\n  onPresetSelect: (preset: FrequencyPreset) => void;\n  currentSettings: AudioSettings;\n  audioEngine: AudioEngine;\n}\n\n/**\n * HealWave Binaural Settings Component\n * Provides advanced binaural beat configuration using shared frequency engine\n * Remains completely standalone while leveraging shared infrastructure\n */\nexport const BinauralSettings: React.FC<BinauralSettingsProps> = React.memo(({\n  onSettingsChange,\n  onPresetSelect,\n  currentSettings,\n  audioEngine\n}) => {\n  const [advancedMode, setAdvancedMode] = useState<boolean>(false);\n  const [customFrequency, setCustomFrequency] = useState<number>(40);\n  const [binauralBeat, setBinauralBeat] = useState<number>(6);\n\n  interface BinauralRange {\n    min: number;\n    max: number;\n    name: string;\n    color: 'purple' | 'blue' | 'green' | 'yellow' | 'red' | 'gray';\n  }\n\n  type BinauralRangeKey = 'delta' | 'theta' | 'alpha' | 'beta' | 'gamma' | 'custom';\n\n  interface BinauralRangeWithKey extends BinauralRange {\n    key: BinauralRangeKey;\n  }\n\n  const binauralRanges = useMemo<Record<BinauralRangeKey, BinauralRange>>(() => ({\n    delta: { min: 0.5, max: 4, name: 'Delta (Deep Sleep)', color: 'purple' },\n    theta: { min: 4, max: 8, name: 'Theta (Meditation)', color: 'blue' },\n    alpha: { min: 8, max: 14, name: 'Alpha (Relaxation)', color: 'green' },\n    beta: { min: 14, max: 30, name: 'Beta (Focus)', color: 'yellow' },\n    gamma: { min: 30, max: 100, name: 'Gamma (Awareness)', color: 'red' },\n    custom: { min: 0, max: 0, name: 'Custom', color: 'gray' },\n  }), []);\n\n  const getCurrentRange = useCallback((beat: number): BinauralRangeWithKey => {\n    for (const [key, range] of Object.entries(binauralRanges) as [BinauralRangeKey, BinauralRange][]) {\n      if (key !== 'custom' && beat >= range.min && beat < range.max) {\n        return { key, ...range };\n      }\n    }\n    return { key: 'custom', ...binauralRanges.custom };\n  }, [binauralRanges]);\n\n  const colorMap = useMemo<Record<BinauralRange['color'], { bg: string; border: string }>>(() => ({\n    purple: { bg: 'bg-purple-500', border: 'border-purple-500 bg-purple-50 text-purple-700' },\n    blue: { bg: 'bg-blue-500', border: 'border-blue-500 bg-blue-50 text-blue-700' },\n    green: { bg: 'bg-green-500', border: 'border-green-500 bg-green-50 text-green-700' },\n    yellow: { bg: 'bg-yellow-500', border: 'border-yellow-500 bg-yellow-50 text-yellow-700' },\n    red: { bg: 'bg-red-500', border: 'border-red-500 bg-red-50 text-red-700' },\n    gray: { bg: 'bg-gray-500', border: 'border-gray-500 bg-gray-50 text-gray-700' },\n  }), []);\n\n  const getColorClass = useCallback((color: BinauralRange['color']): string => colorMap[color].bg, [colorMap]);\n  const getBorderColorClass = useCallback((color: BinauralRange['color']): string => colorMap[color].border, [colorMap]);\n\n  const handleVolumeChange = useCallback((value: number): void => {\n    if (value < 0 || value > 100) return; // Type guard for range\n    const newSettings: AudioSettings = { ...currentSettings, volume: value };\n    onSettingsChange(newSettings);\n  // Optimistically set volume on engine (no playing state guard available)\n  audioEngine.setVolume(value).catch((error: unknown) => devConsole.error('Volume set failed:', error));\n  }, [currentSettings, onSettingsChange, audioEngine]);\n\n  const handleDurationChange = useCallback((value: number): void => {\n    if (value < 1 || value > 120) return;\n    onSettingsChange({ ...currentSettings, duration: value });\n  }, [currentSettings, onSettingsChange]);\n\n  const handleFadeChange = useCallback((type: 'fadeIn' | 'fadeOut', value: number): void => {\n    if (value < 0 || value > 30) return;\n    onSettingsChange({ ...currentSettings, [type]: value });\n  }, [currentSettings, onSettingsChange]);\n\n  const createCustomPreset = useCallback((): void => {\n    const currentRangeInfo = getCurrentRange(binauralBeat);\n    const customPreset: FrequencyPreset = {\n      id: `custom-${Date.now()}`,\n      name: `Custom ${customFrequency}Hz + ${binauralBeat}Hz beat`,\n      category: 'custom',\n      baseFrequency: customFrequency,\n      binauralBeat: binauralBeat,\n      description: `Custom binaural beat in ${currentRangeInfo.name} range`,\n      benefits: [`${currentRangeInfo.name} state enhancement`],\n    };\n    onPresetSelect(customPreset);\n  }, [customFrequency, binauralBeat, onPresetSelect, getCurrentRange]);\n\n  const currentRange = useMemo<BinauralRangeWithKey>(() => getCurrentRange(binauralBeat), [binauralBeat, getCurrentRange]);\n\n  return (\n    <div className=\"p-6 space-y-6 bg-white border border-gray-200 rounded-lg\" role=\"region\" aria-label=\"Binaural Settings\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">🎵 Binaural Settings</h3>\n        {advancedMode ? (\n          <button\n            type=\"button\"\n            onClick={() => setAdvancedMode((prev) => !prev)}\n            className=\"text-sm font-medium text-blue-600 hover:text-blue-700\"\n            aria-pressed=\"true\"\n            aria-expanded=\"true\"\n            aria-controls=\"binaural-advanced-section\"\n          >\n            Simple Mode\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            onClick={() => setAdvancedMode((prev) => !prev)}\n            className=\"text-sm font-medium text-blue-600 hover:text-blue-700\"\n            aria-pressed=\"false\"\n            aria-expanded=\"false\"\n            aria-controls=\"binaural-advanced-section\"\n          >\n            Advanced Mode\n          </button>\n        )}\n      </div>\n\n      {/* Basic Settings */}\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"volume-slider\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n            Volume: {currentSettings.volume}%\n          </label>\n          <Slider.Root\n            id=\"volume-slider\"\n            className=\"relative flex items-center w-full h-2 select-none touch-none\"\n            value={[currentSettings.volume]}\n            min={0}\n            max={100}\n            step={1}\n            onValueChange={([value]) => handleVolumeChange(value)}\n            aria-label=\"Volume\"\n            aria-valuenow={currentSettings.volume}\n            aria-valuemin={0}\n            aria-valuemax={100}\n          >\n            <Slider.Track className=\"relative flex-grow h-2 bg-gray-200 rounded-lg\">\n              <Slider.Range className=\"absolute h-2 bg-gray-600 rounded-lg\" />\n            </Slider.Track>\n            <Slider.Thumb className=\"block w-5 h-5 bg-white rounded-full shadow focus:outline-none focus:ring-2 focus:ring-blue-500\" aria-label=\"Volume thumb\" />\n          </Slider.Root>\n          <div className=\"flex justify-between mt-1 text-xs text-gray-500\">\n            <span>Silent</span>\n            <span>Maximum</span>\n          </div>\n        </div>\n\n        <div>\n          <label htmlFor=\"duration-slider\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n            Session Duration: {currentSettings.duration} minutes\n          </label>\n          <Slider.Root\n            id=\"duration-slider\"\n            className=\"relative flex items-center w-full h-2 select-none touch-none\"\n            value={[currentSettings.duration]}\n            min={1}\n            max={120}\n            step={1}\n            onValueChange={([value]) => handleDurationChange(value)}\n            aria-label=\"Duration\"\n            aria-valuenow={currentSettings.duration}\n            aria-valuemin={1}\n            aria-valuemax={120}\n          >\n            <Slider.Track className=\"relative flex-grow h-2 bg-gray-200 rounded-lg\">\n              <Slider.Range className=\"absolute h-2 bg-gray-600 rounded-lg\" />\n            </Slider.Track>\n            <Slider.Thumb className=\"block w-5 h-5 bg-white rounded-full shadow focus:outline-none focus:ring-2 focus:ring-blue-500\" aria-label=\"Duration thumb\" />\n          </Slider.Root>\n          <div className=\"flex justify-between mt-1 text-xs text-gray-500\">\n            <span>1 min</span>\n            <span>2 hours</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Advanced Settings - Lazy load if complex, but inline for simplicity */}\n      {advancedMode && (\n        <div id=\"binaural-advanced-section\" className=\"pt-4 space-y-4 border-t border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">🔧 Advanced Controls</h4>\n          \n          {/* Fade Settings */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label htmlFor=\"fade-in-slider\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n                Fade In: {currentSettings.fadeIn}s\n              </label>\n              <Slider.Root\n                id=\"fade-in-slider\"\n                className=\"relative flex items-center w-full h-2 select-none touch-none\"\n                value={[currentSettings.fadeIn]}\n                min={0}\n                max={30}\n                step={1}\n                onValueChange={([value]) => handleFadeChange('fadeIn', value)}\n                aria-label=\"Fade In\"\n                aria-valuenow={currentSettings.fadeIn}\n                aria-valuemin={0}\n                aria-valuemax={30}\n              >\n                <Slider.Track className=\"relative flex-grow h-2 bg-gray-200 rounded-lg\">\n                  <Slider.Range className=\"absolute h-2 bg-gray-600 rounded-lg\" />\n                </Slider.Track>\n                <Slider.Thumb className=\"block w-5 h-5 bg-white rounded-full shadow focus:outline-none focus:ring-2 focus:ring-blue-500\" aria-label=\"Fade In thumb\" />\n              </Slider.Root>\n            </div>\n            \n            <div>\n              <label htmlFor=\"fade-out-slider\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n                Fade Out: {currentSettings.fadeOut}s\n              </label>\n              <Slider.Root\n                id=\"fade-out-slider\"\n                className=\"relative flex items-center w-full h-2 select-none touch-none\"\n                value={[currentSettings.fadeOut]}\n                min={0}\n                max={30}\n                step={1}\n                onValueChange={([value]) => handleFadeChange('fadeOut', value)}\n                aria-label=\"Fade Out\"\n                aria-valuenow={currentSettings.fadeOut}\n                aria-valuemin={0}\n                aria-valuemax={30}\n              >\n                <Slider.Track className=\"relative flex-grow h-2 bg-gray-200 rounded-lg\">\n                  <Slider.Range className=\"absolute h-2 bg-gray-600 rounded-lg\" />\n                </Slider.Track>\n                <Slider.Thumb className=\"block w-5 h-5 bg-white rounded-full shadow focus:outline-none focus:ring-2 focus:ring-blue-500\" aria-label=\"Fade Out thumb\" />\n              </Slider.Root>\n            </div>\n          </div>\n\n          {/* Custom Frequency Creation */}\n          <div className=\"p-4 space-y-4 rounded-lg bg-gray-50\">\n            <h5 className=\"font-medium text-gray-900\">🎛️ Create Custom Frequency</h5>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"base-frequency\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n                  Base Frequency: {customFrequency} Hz\n                </label>\n                <Slider.Root\n                  id=\"base-frequency\"\n                  className=\"relative flex items-center w-full h-2 select-none touch-none\"\n                  value={[customFrequency]}\n                  min={20}\n                  max={2000}\n                  step={1}\n                  onValueChange={([value]) => setCustomFrequency(value)}\n                  aria-label=\"Base Frequency\"\n                  aria-valuenow={customFrequency}\n                  aria-valuemin={20}\n                  aria-valuemax={2000}\n                >\n                  <Slider.Track className=\"relative flex-grow h-2 bg-gray-200 rounded-lg\">\n                    <Slider.Range className=\"absolute h-2 bg-gray-600 rounded-lg\" />\n                  </Slider.Track>\n                  <Slider.Thumb className=\"block w-5 h-5 bg-white rounded-full shadow focus:outline-none focus:ring-2 focus:ring-blue-500\" aria-label=\"Base Frequency thumb\" />\n                </Slider.Root>\n                <div className=\"flex justify-between mt-1 text-xs text-gray-500\">\n                  <span>20 Hz</span>\n                  <span>2000 Hz</span>\n                </div>\n              </div>\n              \n              <div>\n                <label htmlFor=\"binaural-beat\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n                  Binaural Beat: {binauralBeat} Hz\n                </label>\n                <Slider.Root\n                  id=\"binaural-beat\"\n                  className=\"relative flex items-center w-full h-2 select-none touch-none\"\n                  value={[binauralBeat]}\n                  min={0.5}\n                  max={100}\n                  step={0.5}\n                  onValueChange={([value]) => setBinauralBeat(value)}\n                  aria-label=\"Binaural Beat\"\n                  aria-valuenow={binauralBeat}\n                  aria-valuemin={0.5}\n                  aria-valuemax={100}\n                >\n                  <Slider.Track className=\"relative flex-grow h-2 bg-gray-200 rounded-lg\">\n                    <Slider.Range className=\"absolute h-2 bg-gray-600 rounded-lg\" />\n                  </Slider.Track>\n                  <Slider.Thumb className=\"block w-5 h-5 bg-white rounded-full shadow focus:outline-none focus:ring-2 focus:ring-blue-500\" aria-label=\"Binaural Beat thumb\" />\n                </Slider.Root>\n                <div className=\"flex justify-between mt-1 text-xs text-gray-500\">\n                  <span>0.5 Hz</span>\n                  <span>100 Hz</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Binaural Beat Range Indicator */}\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div className=\"flex items-center space-x-2 cursor-help\" tabIndex={0} role=\"button\">\n                    <div \n                      className={`w-3 h-3 rounded-full ${getColorClass(currentRange.color)}`}\n                      aria-label={currentRange.name}\n                    />\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      {currentRange.name}\n                    </span>\n                    {currentRange.key !== 'custom' && (\n                      <span className=\"text-xs text-gray-500\">\n                        ({currentRange.min}-{currentRange.max} Hz range)\n                      </span>\n                    )}\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Portal>\n                  <Tooltip.Content className=\"p-2 bg-white border rounded shadow\" side=\"top\">Range info and benefits</Tooltip.Content>\n                </Tooltip.Portal>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n\n            {/* Quick Range Buttons */}\n            <div className=\"grid grid-cols-5 gap-2\">\n              {(Object.entries(binauralRanges) as [BinauralRangeKey, BinauralRange][])\n                .filter(([key]) => key !== 'custom')\n                .map(([key, range]) => (\n                <button\n                  key={key}\n                  onClick={() => setBinauralBeat((range.min + range.max) / 2)}\n                  className={`px-2 py-1 text-xs rounded border transition-colors ${\n                    currentRange.key === key\n                      ? getBorderColorClass(range.color)\n                      : 'border-gray-300 hover:border-gray-400'\n                  }`}\n                  aria-label={`Select ${range.name}`}\n                >\n                  {range.name.split(' ')[0]}\n                </button>\n              ))}\n            </div>\n\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <button\n                    onClick={createCustomPreset}\n                    className=\"w-full px-4 py-2 font-medium text-white transition-colors bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    🎵 Create Custom Frequency\n                  </button>\n                </Tooltip.Trigger>\n                <Tooltip.Portal>\n                  <Tooltip.Content className=\"p-2 bg-white border rounded shadow\" side=\"top\">Premium: Save custom presets with subscription</Tooltip.Content>\n                </Tooltip.Portal>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n          </div>\n        </div>\n      )}\n\n      {/* Tips Section */}\n      <div className=\"p-4 rounded-lg bg-blue-50\">\n        <h5 className=\"mb-2 font-medium text-blue-900\">💡 Tips for Best Results</h5>\n        <ul className=\"space-y-1 text-sm text-blue-800\" role=\"list\">\n          <li>• Use headphones for proper binaural effect</li>\n          <li>• Start with lower volumes and gradually increase</li>\n          <li>• Delta waves (0.5-4 Hz) are best for sleep</li>\n          <li>• Theta waves (4-8 Hz) enhance meditation</li>\n          <li>• Alpha waves (8-14 Hz) promote relaxation</li>\n        </ul>\n        <p className=\"mt-2 text-sm text-blue-800\">Try our Astro app for astrology-tied frequencies! <a href=\"/astro\" className=\"underline hover:text-blue-600\">Learn more</a></p>\n      </div>\n    </div>\n  );\n});\n\n// Suggested Vitest test:\n// test('handles volume change within range', () => {\n//   const onChange = vi.fn();\n//   render(<BinauralSettings onSettingsChange={onChange} ... />);\n//   // Simulate slider change and assert\n// });",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/ChartPreferences.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 2,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [65, 96], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 37,
        "column": 7,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 37,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [1249, 1249], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [1249, 1249], "text": "await " },
            "desc": "Add await operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 54,
        "column": 35,
        "nodeType": "ObjectExpression",
        "messageId": "unsafeReturn",
        "endLine": 57,
        "endColumn": 12
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 61,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [1860, 1898], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 72,
        "column": 87,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 72,
        "endColumn": 90,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2233, 2236], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2233, 2236], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 75,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 75,
        "endColumn": 19
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 103,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [2931, 2969], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 182,
        "column": 19,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 182,
        "endColumn": 42
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useState, useCallback, useEffect } from 'react';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\nimport { Card, Button } from '@cosmichub/ui';\nimport { useToast } from './ToastProvider';\nimport { useAuth } from '@cosmichub/auth';\nimport { db } from '@cosmichub/config/firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\n\ninterface ChartPreferencesData {\n  theme: 'light' | 'dark' | 'auto';\n  notifications: boolean;\n  sessionReminders: boolean;\n  audioQuality: 'standard' | 'high' | 'lossless';\n}\n\nconst ChartPreferences: React.FC = React.memo(() => {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [preferences, setPreferences] = useState<ChartPreferencesData>({\n    theme: 'dark',\n    notifications: true,\n    sessionReminders: true,\n    audioQuality: 'high',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingPreferences, setIsLoadingPreferences] = useState(true);\n\n  // Load user preferences on mount\n  useEffect(() => {\n    if (user?.uid) {\n      loadUserPreferences();\n    } else {\n      setIsLoadingPreferences(false);\n    }\n  }, [user?.uid]);\n\n  const loadUserPreferences = useCallback(async () => {\n    if (!user?.uid) return;\n\n    try {\n      setIsLoadingPreferences(true);\n      const userDocRef = doc(db, 'users', user.uid);\n      const userDoc = await getDoc(userDocRef);\n\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        if (userData.healwavePreferences) {\n          setPreferences(prev => ({\n            ...prev,\n            ...userData.healwavePreferences\n          }));\n        }\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n  devConsole.error('Failed to load user preferences:', error);\n      toast({\n        message: 'Failed to load your preferences',\n        type: 'error'\n      });\n    } finally {\n      setIsLoadingPreferences(false);\n    }\n  }, [user?.uid, toast]);\n\n  const handlePreferenceChange = useCallback((key: keyof ChartPreferencesData, value: any) => {\n    setPreferences(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  }, []);\n\n  const handleSavePreferences = useCallback(async () => {\n    if (!user?.uid) {\n      toast({\n        message: 'You must be logged in to save preferences',\n        type: 'error'\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Save preferences to Firestore\n      const userDocRef = doc(db, 'users', user.uid);\n      await setDoc(userDocRef, {\n        healwavePreferences: preferences,\n        updatedAt: new Date()\n      }, { merge: true });\n\n      toast({\n        message: 'Preferences saved successfully',\n        type: 'success'\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n  devConsole.error('Failed to save preferences:', error);\n      toast({\n        message: 'Failed to save preferences',\n        type: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user?.uid, preferences, toast]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card title=\"HealWave Preferences\">\n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"theme\" className=\"block text-cosmic-silver mb-2\">\n              Theme\n            </label>\n            <select\n              id=\"theme\"\n              value={preferences.theme}\n              onChange={(e) => handlePreferenceChange('theme', e.target.value)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select theme\"\n            >\n              <option value=\"dark\">Dark</option>\n              <option value=\"light\">Light</option>\n              <option value=\"auto\">Auto</option>\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"audioQuality\" className=\"block text-cosmic-silver mb-2\">\n              Audio Quality\n            </label>\n            <select\n              id=\"audioQuality\"\n              value={preferences.audioQuality}\n              onChange={(e) => handlePreferenceChange('audioQuality', e.target.value)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select audio quality\"\n            >\n              <option value=\"standard\">Standard (128kbps)</option>\n              <option value=\"high\">High (256kbps)</option>\n              <option value=\"lossless\">Lossless (FLAC)</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"notifications\"\n              checked={preferences.notifications}\n              onChange={(e) => handlePreferenceChange('notifications', e.target.checked)}\n              className=\"rounded\"\n            />\n            <label htmlFor=\"notifications\" className=\"text-cosmic-silver\">\n              Email notifications\n            </label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"sessionReminders\"\n              checked={preferences.sessionReminders}\n              onChange={(e) => handlePreferenceChange('sessionReminders', e.target.checked)}\n              className=\"rounded\"\n            />\n            <label htmlFor=\"sessionReminders\" className=\"text-cosmic-silver\">\n              Session reminders\n            </label>\n          </div>\n        </div>\n      </Card>\n\n      <div className=\"text-center\">\n        <Button \n          onClick={handleSavePreferences} \n          variant=\"primary\"\n          disabled={isLoading || isLoadingPreferences || !user}\n        >\n          {isLoading ? 'Saving...' : 'Save Preferences'}\n        </Button>\n        {isLoadingPreferences && (\n          <p className=\"mt-2 text-sm text-cosmic-silver/70\">Loading your preferences...</p>\n        )}\n        {!user && (\n          <p className=\"mt-2 text-sm text-cosmic-silver/70\">Sign in to save preferences</p>\n        )}\n      </div>\n    </div>\n  );\n});\n\nChartPreferences.displayName = 'ChartPreferences';\n\nexport default ChartPreferences;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/DurationTimer.tsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'NodeJS' is not defined.",
        "line": 44,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 44,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useCallback, memo } from 'react';\n\ninterface DurationTimerProps {\n  duration: number; // in minutes\n  isActive: boolean;\n  onComplete?: () => void;\n  onTimeUpdate?: (timeRemaining: number) => void;\n}\n\nconst DurationTimer: React.FC<DurationTimerProps> = memo(({\n  duration,\n  isActive,\n  onComplete,\n  onTimeUpdate\n}) => {\n  const [timeRemaining, setTimeRemaining] = useState(duration * 60); // Convert to seconds\n  const [isRunning, setIsRunning] = useState(false);\n\n  // Memoized time formatter\n  const formatTime = useCallback((seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Memoized progress calculation\n  const getProgressPercentage = useCallback(() => {\n    const totalSeconds = duration * 60;\n    return totalSeconds > 0 ? ((totalSeconds - timeRemaining) / totalSeconds) * 100 : 0;\n  }, [duration, timeRemaining]);\n\n  // Reset timer when duration changes\n  useEffect(() => {\n    setTimeRemaining(duration * 60);\n  }, [duration]);\n\n  // Update running state when isActive changes\n  useEffect(() => {\n    setIsRunning(isActive);\n  }, [isActive]);\n\n  // Timer logic with cleanup\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null;\n\n    if (isRunning && timeRemaining > 0) {\n      interval = setInterval(() => {\n        setTimeRemaining((time) => {\n          const newTime = time - 1;\n          onTimeUpdate?.(newTime);\n          \n          if (newTime <= 0) {\n            setIsRunning(false);\n            onComplete?.();\n            return 0;\n          }\n          \n          return newTime;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isRunning, timeRemaining, onComplete, onTimeUpdate]);\n\n  // Accessibility and visual enhancements\n  const progressPercentage = getProgressPercentage();\n  const isCompleted = timeRemaining === 0;\n  const statusText = isRunning \n    ? '🎵 Session Active' \n    : isCompleted \n    ? '✅ Complete' \n    : '⏸️ Paused';\n\n  return (\n    <div className=\"space-y-4\" role=\"timer\" aria-label=\"Session timer\">\n      <div className=\"text-center\">\n        <div \n          className=\"text-3xl font-mono font-bold text-white mb-2\"\n          aria-live=\"polite\"\n          aria-label={`Time remaining: ${formatTime(timeRemaining)}`}\n        >\n          {formatTime(timeRemaining)}\n        </div>\n        <div className=\"text-sm text-white/70\">\n          {duration} minute session\n        </div>\n      </div>\n\n      <div className=\"flex justify-center\">\n        <div className=\"relative w-24 h-24\">\n          <svg \n            className=\"w-24 h-24 transform -rotate-90\" \n            viewBox=\"0 0 100 100\"\n            aria-hidden=\"true\"\n          >\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"45\"\n              stroke=\"rgba(255,255,255,0.1)\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"45\"\n              stroke=\"url(#gradient)\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeLinecap=\"round\"\n              strokeDasharray={`${2 * Math.PI * 45}`}\n              strokeDashoffset={`${2 * Math.PI * 45 * (1 - progressPercentage / 100)}`}\n              className={`transition-all duration-1000 ease-linear ${\n                isRunning ? 'animate-pulse' : ''\n              }`}\n            />\n            <defs>\n              <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" stopColor=\"#06b6d4\" />\n                <stop offset=\"50%\" stopColor=\"#8b5cf6\" />\n                <stop offset=\"100%\" stopColor=\"#ec4899\" />\n              </linearGradient>\n            </defs>\n          </svg>\n          \n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-white drop-shadow-lg\">\n                {Math.round(progressPercentage)}%\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center\">\n        <div \n          className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${\n            isRunning \n              ? 'bg-green-500/20 text-green-300 border border-green-400/50 shadow-lg shadow-green-500/20' \n              : isCompleted\n              ? 'bg-blue-500/20 text-blue-300 border border-blue-400/50 shadow-lg shadow-blue-500/20'\n              : 'bg-gray-500/20 text-gray-300 border border-gray-400/50'\n          }`}\n          role=\"status\"\n          aria-live=\"polite\"\n        >\n          {statusText}\n        </div>\n      </div>\n\n      <div className=\"w-full bg-white/10 rounded-full h-2 overflow-hidden\">\n        <div \n          className={`h-full bg-gradient-to-r from-cyan-400 via-purple-500 to-pink-500 transition-all duration-1000 ease-linear ${\n            isRunning ? 'animate-pulse' : ''\n          }`}\n          style={{ width: `${progressPercentage}%` }}\n          role=\"progressbar\"\n          aria-valuenow={progressPercentage}\n          aria-valuemin={0}\n          aria-valuemax={100}\n          aria-label={`Session progress: ${Math.round(progressPercentage)}% complete`}\n        />\n      </div>\n\n      {isRunning && (\n        <div className=\"text-center text-xs text-white/60\">\n          <p>Time elapsed: {formatTime((duration * 60) - timeRemaining)}</p>\n        </div>\n      )}\n    </div>\n  );\n});\n\nDurationTimer.displayName = 'DurationTimer';\n\nexport default DurationTimer;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/ErrorBoundary.tsx",
    "messages": [
      {
        "ruleId": "no-duplicate-imports",
        "severity": 2,
        "message": "'react' import is duplicated.",
        "line": 2,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "messageId": "import",
        "endLine": 2,
        "endColumn": 51
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 95,
        "column": 59,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [2957, 3069],
              "text": "\n                The healing frequency was interrupted. Let&apos;s restore harmony to your experience.\n              "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [2957, 3069],
              "text": "\n                The healing frequency was interrupted. Let&lsquo;s restore harmony to your experience.\n              "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [2957, 3069],
              "text": "\n                The healing frequency was interrupted. Let&#39;s restore harmony to your experience.\n              "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [2957, 3069],
              "text": "\n                The healing frequency was interrupted. Let&rsquo;s restore harmony to your experience.\n              "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { Component } from 'react';\nimport type { ErrorInfo, ReactNode } from 'react';\nimport { isDevelopment, devConsole } from '../config/environment';\n\n/**\n * HealWave-specific error boundary with custom theming\n * Falls back to shared ErrorBoundary from @cosmichub/ui for most functionality\n */\ninterface HealWaveErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\nexport class HealWaveErrorBoundary extends Component<HealWaveErrorBoundaryProps, State> {\n  constructor(props: HealWaveErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // HealWave-specific logging\n    if (isDevelopment()) {\n      devConsole.log('🎵 HealWave Error Boundary');\n      devConsole.error('Error:', error);\n      devConsole.error('Error Info:', errorInfo);\n    }\n\n    // Call custom error handler if provided\n    this.props.onError?.(error, errorInfo);\n  }\n\n  private handleRetry = (): void => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-black via-purple-900/20 to-cyan-900/20\">\n          <div className=\"max-w-md w-full bg-black/50 backdrop-blur-md shadow-2xl rounded-lg p-8 border border-white/10\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-gradient-to-r from-cyan-500/20 to-purple-500/20 mb-6\">\n                <svg\n                  className=\"h-8 w-8 text-cyan-400\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  aria-hidden=\"true\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={1.5}\n                    d=\"M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09z\"\n                  />\n                </svg>\n              </div>\n              \n              <h2 className=\"text-xl font-semibold text-white mb-3\">\n                Something went wrong\n              </h2>\n              \n              <p className=\"text-gray-300 text-sm mb-6\">\n                The healing frequency was interrupted. Let's restore harmony to your experience.\n              </p>\n              \n              {isDevelopment() && this.state.error && (\n                <details className=\"mb-6 text-left\">\n                  <summary className=\"cursor-pointer text-sm font-medium text-gray-400 hover:text-gray-300\">\n                    Technical Details\n                  </summary>\n                  <div className=\"mt-2 p-3 bg-black/30 rounded border border-white/10 text-xs font-mono text-red-400 overflow-auto max-h-40\">\n                    <div className=\"font-semibold text-red-300\">Error: {this.state.error.message}</div>\n                    <pre className=\"mt-2 whitespace-pre-wrap\">\n                      {this.state.error.stack}\n                    </pre>\n                    {this.state.errorInfo && (\n                      <pre className=\"mt-2 whitespace-pre-wrap text-blue-400\">\n                        {this.state.errorInfo.componentStack}\n                      </pre>\n                    )}\n                  </div>\n                </details>\n              )}\n\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <button\n                  type=\"button\"\n                  onClick={this.handleRetry}\n                  className=\"inline-flex justify-center w-full sm:w-auto px-6 py-3 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 transition-all duration-200\"\n                >\n                  🔄 Restore Harmony\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => window.location.reload()}\n                  className=\"inline-flex justify-center w-full sm:w-auto px-6 py-3 border border-white/20 text-sm font-medium rounded-md text-gray-300 bg-white/5 hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white/25 transition-all duration-200\"\n                >\n                  🔄 Reload App\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default HealWaveErrorBoundary;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/Footer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/FrequencyControls.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 2,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [34, 65], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 217,
        "column": 25,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 217,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import { useState } from \"react\";\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\nimport { useAuth } from \"@cosmichub/auth\";\nimport { savePreset } from \"../services/api\";\nimport AudioPlayer from \"./AudioPlayer\";\nimport DurationTimer from \"./DurationTimer\";\n\n/* const PRESETS = {\n  solfeggio: [\n    { value: \"174\", label: \"174 Hz (Pain Relief & Security)\" },\n    { value: \"285\", label: \"285 Hz (Tissue Healing)\" },\n    { value: \"396\", label: \"396 Hz (Liberation from Fear)\" },\n    { value: \"417\", label: \"417 Hz (Facilitating Change)\" },\n    { value: \"528\", label: \"528 Hz (Love & DNA Repair)\" },\n    { value: \"639\", label: \"639 Hz (Heart Connections)\" },\n    { value: \"741\", label: \"741 Hz (Intuitive Awakening)\" },\n    { value: \"852\", label: \"852 Hz (Spiritual Order)\" },\n    { value: \"963\", label: \"963 Hz (Divine Connection)\" },\n  ],\n  rife: [\n    // General Health & Immune System\n    { value: \"20\", label: \"20 Hz (General Vitality)\" },\n    { value: \"72\", label: \"72 Hz (Immune System)\" },\n    { value: \"95\", label: \"95 Hz (Immune Support)\" },\n    { value: \"125\", label: \"125 Hz (Cellular Regeneration)\" },\n    { value: \"465\", label: \"465 Hz (Immune Enhancement)\" },\n    { value: \"660\", label: \"660 Hz (Anti-Inflammatory)\" },\n    { value: \"727\", label: \"727 Hz (General Healing)\" },\n    { value: \"728\", label: \"728 Hz (Bone Regeneration)\" },\n    { value: \"787\", label: \"787 Hz (Cellular Detox)\" },\n    { value: \"800\", label: \"800 Hz (Nerve Regeneration)\" },\n    { value: \"802\", label: \"802 Hz (Circulation)\" },\n    { value: \"832\", label: \"832 Hz (Immune System)\" },\n    { value: \"880\", label: \"880 Hz (Streptococcus)\" },\n    { value: \"1550\", label: \"1550 Hz (Eye Health)\" },\n    { value: \"1600\", label: \"1600 Hz (Parasites)\" },\n    { value: \"2008\", label: \"2008 Hz (Digestive Support)\" },\n    { value: \"2127\", label: \"2127 Hz (Lung Health)\" },\n    { value: \"2170\", label: \"2170 Hz (Eye Strain)\" },\n    { value: \"3000\", label: \"3000 Hz (Antiviral)\" },\n    { value: \"5000\", label: \"5000 Hz (General Pathogen)\" },\n    // Pain & Inflammation\n    { value: \"304\", label: \"304 Hz (Arthritis)\" },\n    { value: \"1862\", label: \"1862 Hz (Joint Pain)\" },\n    { value: \"666\", label: \"666 Hz (Fibromyalgia)\" },\n    { value: \"1550\", label: \"1550 Hz (Nerve Pain)\" },\n    // Specific Conditions\n    { value: \"120\", label: \"120 Hz (Sinus Congestion)\" },\n    { value: \"440\", label: \"440 Hz (Kidney Support)\" },\n    { value: \"465\", label: \"465 Hz (Throat Health)\" },\n    { value: \"1234\", label: \"1234 Hz (Digestive Balance)\" },\n    { value: \"10000\", label: \"10000 Hz (Bone Healing)\" },\n  ],\n  golden: [\n    { value: \"1.618\", label: \"1.618 Hz (Golden Ratio)\" },\n    { value: \"89\", label: \"89 Hz (Fibonacci)\" },\n    { value: \"144\", label: \"144 Hz (Fibonacci)\" },\n    { value: \"233\", label: \"233 Hz (Fibonacci)\" },\n    { value: \"377\", label: \"377 Hz (Fibonacci)\" },\n    { value: \"610\", label: \"610 Hz (Fibonacci)\" },\n    { value: \"987\", label: \"987 Hz (Fibonacci)\" },\n  ],\n  planetary: [\n    { value: \"126.22\", label: \"126.22 Hz (Sun)\" },\n    { value: \"136.10\", label: \"136.10 Hz (Earth/OM)\" },\n    { value: \"144.72\", label: \"144.72 Hz (Mars)\" },\n    { value: \"183.58\", label: \"183.58 Hz (Jupiter)\" },\n    { value: \"194.18\", label: \"194.18 Hz (Moon)\" },\n    { value: \"210.42\", label: \"210.42 Hz (Mercury)\" },\n    { value: \"221.23\", label: \"221.23 Hz (Venus)\" },\n    { value: \"147.85\", label: \"147.85 Hz (Saturn)\" },\n  ],\n  brainwave: [\n    { value: \"40\", label: \"40 Hz Gamma (Focus)\", binaural: \"4\" },\n    { value: \"20\", label: \"20 Hz Beta (Alert)\", binaural: \"2\" },\n    { value: \"10\", label: \"10 Hz Alpha (Relaxed)\", binaural: \"1\" },\n    { value: \"6\", label: \"6 Hz Theta (Meditation)\", binaural: \"0.5\" },\n    { value: \"2\", label: \"2 Hz Delta (Deep Sleep)\", binaural: \"0.2\" },\n  ],\n  chakra: [\n    { value: \"194.18\", label: \"194.18 Hz (Root Chakra)\" },\n    { value: \"210\", label: \"210 Hz (Sacral Chakra)\" },\n    { value: \"126.22\", label: \"126.22 Hz (Solar Plexus)\" },\n    { value: \"136.10\", label: \"136.10 Hz (Heart Chakra)\" },\n    { value: \"141.27\", label: \"141.27 Hz (Throat Chakra)\" },\n    { value: \"221.23\", label: \"221.23 Hz (Third Eye)\" },\n    { value: \"172.06\", label: \"172.06 Hz (Crown Chakra)\" },\n  ],\n  other: [\n    { value: \"111\", label: \"111 Hz (Cellular Rejuvenation)\" },\n    // ... (truncated as per original)\n  ],\n}; */\n\nconst FrequencyControls = () => {\n  const { user } = useAuth();\n  const [frequency] = useState(528);\n  const [binaural] = useState(0);\n  const [volume] = useState(0.5);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(15);\n  const [presetName, setPresetName] = useState('');\n  const [showPresets, setShowPresets] = useState(false);\n\n  const togglePlayback = () => setIsPlaying(!isPlaying);\n\n  const handleSessionComplete = () => {\n    setIsPlaying(false);\n  };\n\n  const handleSavePreset = async () => {\n    if (!presetName.trim()) return;\n    try {\n      const preset = {\n        id: `custom-${Date.now()}`,\n        name: presetName,\n        category: 'custom' as const,\n        baseFrequency: frequency,\n        binauralBeat: binaural,\n        description: `Custom preset saved on ${new Date().toLocaleDateString()}`,\n        benefits: ['Custom healing frequency'],\n        metadata: { \n          duration: duration,\n          volume: volume,\n          createdAt: new Date().toISOString()\n        }\n      };\n      await savePreset(preset);\n      setPresetName('');\n      setShowPresets(false);\n    } catch (error) {\n  devConsole.error('Failed to save preset:', error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Preset selectors and controls - assuming truncated code is Tailwind-based, no changes needed */}\n\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n        <div className=\"space-y-2\">\n          <label htmlFor=\"session-duration\" className=\"block text-sm font-medium text-white/90\">\n            Session Duration (minutes)\n          </label>\n          <select\n            id=\"session-duration\"\n            value={duration}\n            onChange={(e) => setDuration(parseInt(e.target.value))}\n            className=\"w-full p-3 text-white transition-all border bg-white/10 backdrop-blur-sm border-white/20 rounded-xl placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent\"\n          >\n            <option value={5}>5 minutes</option>\n            <option value={10}>10 minutes</option>\n            <option value={15}>15 minutes</option>\n            <option value={20}>20 minutes</option>\n            <option value={30}>30 minutes</option>\n            <option value={45}>45 minutes</option>\n            <option value={60}>1 hour</option>\n          </select>\n        </div>\n        \n        <div className=\"p-4 border bg-white/5 rounded-xl border-white/20\">\n          <DurationTimer\n            duration={duration}\n            isActive={isPlaying}\n            onComplete={handleSessionComplete}\n          />\n        </div>\n      </div>\n\n      <div className=\"flex flex-col items-center space-y-4\">\n        <div className=\"flex space-x-4\">\n          <button\n            onClick={togglePlayback}\n            className={`px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n              isPlaying\n                ? 'bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white shadow-lg hover:shadow-red-500/25'\n                : 'bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-lg hover:shadow-green-500/25'\n            }`}\n          >\n            <span className=\"text-2xl\">{isPlaying ? '⏸️' : '▶️'}</span>\n            <span>{isPlaying ? 'Stop' : 'Start'} Session</span>\n          </button>\n        </div>\n        \n        <div className=\"text-sm text-center text-white/70\">\n          <p>Current: {frequency}Hz {binaural > 0 && `+ ${binaural}Hz binaural beat`}</p>\n          <p>{duration} minute session • Volume: {Math.round(volume * 100)}%</p>\n        </div>\n      </div>\n\n      {user && (\n        <div className=\"p-6 border bg-white/5 rounded-xl border-white/20\">\n          <button\n            onClick={() => setShowPresets(!showPresets)}\n            className=\"flex items-center justify-between w-full p-3 text-white transition-all duration-200 bg-white/10 rounded-xl hover:bg-white/20\"\n          >\n            <span className=\"font-semibold\">Save Custom Preset</span>\n            <span className=\"text-xl\">{showPresets ? '−' : '+'}</span>\n          </button>\n          \n          {showPresets && (\n            <div className=\"mt-4 space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter preset name...\"\n                value={presetName}\n                onChange={(e) => setPresetName(e.target.value)}\n                className=\"w-full p-3 text-white transition-all border bg-white/10 backdrop-blur-sm border-white/20 rounded-xl placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent\"\n              />\n              <button\n                onClick={handleSavePreset}\n                disabled={!presetName.trim()}\n                className=\"w-full py-3 font-semibold text-white transition-all duration-200 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 disabled:from-gray-500 disabled:to-gray-600 rounded-xl disabled:cursor-not-allowed\"\n              >\n                Save Preset\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"hidden\">\n        <AudioPlayer\n          frequency={frequency}\n          volume={volume}\n          isPlaying={isPlaying}\n          binauralBeat={binaural}\n          onPlayStateChange={setIsPlaying}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default FrequencyControls;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/FrequencyGenerator.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 2,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [89, 120], "text": " " }
      },
      {
        "ruleId": "react/display-name",
        "severity": 2,
        "message": "Component definition is missing display name",
        "line": 17,
        "column": 53,
        "nodeType": "CallExpression",
        "messageId": "noDisplayName",
        "endLine": 239,
        "endColumn": 3
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 142,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 142,
        "endColumn": 84
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 164,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 164,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 189,
        "column": 23,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 189,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useState, useCallback, useMemo, useEffect, useId, useRef } from 'react';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\nimport { AudioEngine, FrequencyPreset, AudioSettings, getAllPresets } from '@cosmichub/frequency';\nimport * as Slider from '@radix-ui/react-slider';\nimport * as Tooltip from '@radix-ui/react-tooltip';\n\n/**\n * HealWave Standalone Frequency Generator\n * Uses shared audio engine but remains completely independent\n */\nexport const HealWaveFrequencyGenerator: React.FC = React.memo(() => {\n  const [audioEngine] = useState(() => new AudioEngine());\n  const [selectedPreset, setSelectedPreset] = useState<FrequencyPreset | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [settings, setSettings] = useState<AudioSettings>({\n    volume: 50,\n    duration: 10,\n    fadeIn: 2,\n    fadeOut: 2,\n  });\n\n  // Accessible ids\n  // const presetsLabelId = useId(); // reserved for future grouping label\n  const volumeLabelId = useId();\n  const durationLabelId = useId();\n\n  // Ref for radiogroup to manage keyboard navigation\n  const radioGroupRef = useRef<HTMLDivElement | null>(null);\n\n  const presets = useMemo(() => getAllPresets(), []); // Memoize; fetch batched from Firestore with indexing for scalability\n  // Stop any playing audio on unmount for cleanup\n  useEffect(() => {\n    return () => {\n      audioEngine.stopFrequency();\n    };\n  }, [audioEngine]);\n\n  // Keyboard navigation for custom radio group (roving tabindex pattern)\n  const handleRadioKeyDown = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    const keys = ['ArrowRight', 'ArrowDown', 'ArrowLeft', 'ArrowUp', 'Home', 'End'];\n    if (!keys.includes(e.key)) return;\n    e.preventDefault();\n    const buttons = radioGroupRef.current?.querySelectorAll<HTMLButtonElement>('button[role=\"radio\"]');\n    if (!buttons || buttons.length === 0) return;\n    const currentIndex = selectedPreset ? presets.findIndex(p => p.id === selectedPreset.id) : 0;\n    let nextIndex = currentIndex;\n    if (e.key === 'ArrowRight' || e.key === 'ArrowDown') nextIndex = (currentIndex + 1) % buttons.length;\n    if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') nextIndex = (currentIndex - 1 + buttons.length) % buttons.length;\n    if (e.key === 'Home') nextIndex = 0;\n    if (e.key === 'End') nextIndex = buttons.length - 1;\n    const nextPreset = presets[nextIndex];\n    if (nextPreset) {\n      setSelectedPreset(nextPreset);\n      buttons[nextIndex].focus();\n    }\n  }, [presets, selectedPreset]);\n\n  const handlePlay = useCallback(async () => {\n    if (!selectedPreset) return;\n    try {\n      await audioEngine.startFrequency(selectedPreset, settings);\n      setIsPlaying(true);\n    } catch (error: unknown) {\n  devConsole.error('Failed to start frequency:', error); // Integrate shared logger from @cosmichub/integrations\n    }\n  }, [audioEngine, selectedPreset, settings]);\n\n  const handleStop = useCallback(() => {\n    audioEngine.stopFrequency();\n    setIsPlaying(false);\n  }, [audioEngine]);\n\n  const updateSettings = useCallback((key: keyof AudioSettings, value: number) => {\n    // Type guard for valid ranges\n    if ((key === 'volume' && (value < 0 || value > 100)) ||\n        (key === 'duration' && (value < 1 || value > 60))) return;\n    setSettings((prev) => ({ ...prev, [key]: value }));\n  }, []);\n\n  return (\n    <div className=\"healwave-frequency-generator\" role=\"region\" aria-label=\"Frequency Generator\">\n      <h2 className=\"mb-6 text-2xl font-bold\">HealWave Frequency Generator</h2>\n      \n      {/* Preset Selection */}\n      <fieldset className=\"mb-6\">\n        <legend className=\"mb-3 text-lg font-semibold\">Select Frequency</legend>\n        <div\n          className=\"grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3\"\n          ref={radioGroupRef}\n          onKeyDown={handleRadioKeyDown}\n        >\n          {presets.map((preset) => {\n            const isSelected = selectedPreset?.id === preset.id;\n            return (\n              <Tooltip.Provider key={preset.id}>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <label\n                      className={`p-3 rounded-lg border text-left transition-colors cursor-pointer focus-within:ring-2 focus-within:ring-blue-500 ${\n                        isSelected\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <input\n                        type=\"radio\"\n                        name=\"healwave-preset\"\n                        className=\"sr-only\"\n                        checked={isSelected}\n                        onChange={() => setSelectedPreset(preset)}\n                        value={preset.id}\n                        aria-label={`${preset.name} preset (${preset.baseFrequency} Hz)`}\n                      />\n                      <div className=\"font-medium\">{preset.name}</div>\n                      <div className=\"text-sm text-gray-600\">{preset.baseFrequency} Hz</div>\n                      <div className=\"mt-1 text-xs text-gray-500\">{preset.description}</div>\n                    </label>\n                  </Tooltip.Trigger>\n                  <Tooltip.Portal>\n                    <Tooltip.Content className=\"p-2 bg-white border rounded shadow\" side=\"top\">Premium: Unlock more presets with subscription</Tooltip.Content>\n                  </Tooltip.Portal>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            );\n          })}\n        </div>\n      </fieldset>\n\n      {/* Controls */}\n      {selectedPreset && (\n        <div className=\"p-4 mb-6 border border-gray-200 rounded-lg\">\n          <h4 className=\"mb-3 font-semibold\">Session Settings</h4>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block mb-1 text-sm font-medium\" id={volumeLabelId}>Volume (%)</label>\n              <Slider.Root\n                className=\"relative flex items-center w-full h-5 select-none touch-none\"\n                value={[settings.volume]}\n                min={0}\n                max={100}\n                step={1}\n                onValueChange={([value]) => updateSettings('volume', value)}\n                aria-labelledby={volumeLabelId}\n                aria-valuenow={settings.volume}\n                aria-valuemin={0}\n                aria-valuemax={100}\n              >\n                <Slider.Track className=\"relative flex-grow h-1 bg-gray-200 rounded-full\">\n                  <Slider.Range className=\"absolute h-1 bg-blue-500 rounded-full\" />\n                </Slider.Track>\n                <Slider.Thumb className=\"block w-4 h-4 bg-white border-2 border-blue-500 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n              </Slider.Root>\n              <span className=\"text-sm text-gray-600\">{settings.volume}%</span>\n            </div>\n            \n            <div>\n              <label className=\"block mb-1 text-sm font-medium\" id={durationLabelId}>Duration (minutes)</label>\n              <Slider.Root\n                className=\"relative flex items-center w-full h-5 select-none touch-none\"\n                value={[settings.duration]}\n                min={1}\n                max={60}\n                step={1}\n                onValueChange={([value]) => updateSettings('duration', value)}\n                aria-labelledby={durationLabelId}\n                aria-valuenow={settings.duration}\n                aria-valuemin={1}\n                aria-valuemax={60}\n              >\n                <Slider.Track className=\"relative flex-grow h-1 bg-gray-200 rounded-full\">\n                  <Slider.Range className=\"absolute h-1 bg-blue-500 rounded-full\" />\n                </Slider.Track>\n                <Slider.Thumb className=\"block w-4 h-4 bg-white border-2 border-blue-500 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n              </Slider.Root>\n              <span className=\"text-sm text-gray-600\">{settings.duration} min</span>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3 mt-4\">\n            <button\n              type=\"button\"\n              onClick={handlePlay}\n              disabled={isPlaying || !selectedPreset}\n              className=\"px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {isPlaying ? 'Playing...' : 'Start Session'}\n            </button>\n            \n            <button\n              type=\"button\"\n              onClick={handleStop}\n              disabled={!isPlaying}\n              className=\"px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-red-500\"\n            >\n              Stop\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Frequency Info */}\n      {selectedPreset && (\n        <div className=\"p-4 border border-gray-200 rounded-lg bg-gray-50\">\n          <h4 className=\"mb-2 font-semibold\">About {selectedPreset.name}</h4>\n          <p className=\"text-sm text-gray-700 mb-2\">{selectedPreset.description}</p>\n          <div className=\"text-xs text-gray-600\">\n            <div>Frequency: {selectedPreset.baseFrequency} Hz</div>\n            <div>Category: {selectedPreset.category}</div>\n            {selectedPreset.binauralBeat && (\n              <div>Binaural Beat: {selectedPreset.binauralBeat} Hz</div>\n            )}\n            {selectedPreset.benefits && (\n              <div className=\"mt-2\">\n                <strong>Benefits:</strong>\n                <ul className=\"list-disc list-inside mt-1\">\n                  {selectedPreset.benefits.map((benefit, index) => (\n                    <li key={index}>{benefit}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Live region for play state updates */}\n      <div className=\"sr-only\" aria-live=\"polite\">\n        {isPlaying ? 'Frequency playback started' : 'Frequency playback stopped'}\n      </div>\n    </div>\n  );\n});\n\n// Suggested Vitest test:\n// test('renders presets without errors', async () => {\n//   render(<HealWaveFrequencyGenerator />);\n//   await waitFor(() => expect(screen.getByText('Select Frequency')).toBeInTheDocument());\n// });",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/HealWaveErrorTestComponent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/Login.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'useNavigate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 63,
        "column": 24,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 63,
        "endColumn": 38
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 112,
        "column": 16,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [4184, 4219],
              "text": "\n            Don&apos;t have an account?"
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [4184, 4219],
              "text": "\n            Don&lsquo;t have an account?"
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [4184, 4219],
              "text": "\n            Don&#39;t have an account?"
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [4184, 4219],
              "text": "\n            Don&rsquo;t have an account?"
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { logIn, useAuth } from '@cosmichub/auth';\nimport { useNavigate } from 'react-router-dom';\n\ninterface LoginProps {\n  onSwitchToSignup?: () => void;\n  onClose?: () => void;\n}\n\nconst Login: React.FC<LoginProps> = ({ onSwitchToSignup, onClose }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { user } = useAuth();\n\n  // If user is already logged in, show success message\n  if (user) {\n    return (\n      <div className=\"text-center\">\n        <div className=\"text-green-400 text-xl mb-4\">✅ Already logged in!</div>\n        <p className=\"text-gray-300 mb-4\">Welcome back, {user.email}</p>\n        <button\n          onClick={onClose}\n          className=\"px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors\"\n        >\n          Continue\n        </button>\n      </div>\n    );\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      await logIn(email, password);\n      onClose?.();\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Login failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <div className=\"bg-gradient-to-br from-purple-900/50 to-blue-900/50 backdrop-blur-md rounded-2xl p-8 border border-purple-500/20 shadow-2xl\">\n        <div className=\"text-center mb-8\">\n          <div className=\"text-4xl mb-4\">🎵</div>\n          <h2 className=\"text-2xl font-bold text-white mb-2\">Welcome Back</h2>\n          <p className=\"text-gray-300\">Sign in to access your healing frequencies</p>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-500/20 border border-red-500/50 rounded-lg p-3 mb-6\">\n            <p className=\"text-red-200 text-sm\">{error}</p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-200 mb-2\">\n              Email Address\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              className=\"w-full px-4 py-3 bg-white/10 border border-purple-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all\"\n              placeholder=\"your@email.com\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-200 mb-2\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              className=\"w-full px-4 py-3 bg-white/10 border border-purple-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all\"\n              placeholder=\"••••••••\"\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full py-3 px-4 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 disabled:from-gray-500 disabled:to-gray-600 text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-[1.02] hover:shadow-lg disabled:cursor-not-allowed disabled:transform-none\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center\">\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                Signing In...\n              </div>\n            ) : (\n              'Sign In'\n            )}\n          </button>\n        </form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-gray-300\">\n            Don't have an account?{' '}\n            <button\n              onClick={onSwitchToSignup}\n              className=\"text-purple-400 hover:text-purple-300 font-medium transition-colors\"\n            >\n              Sign up here\n            </button>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/Navbar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 14,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 68,
        "column": 29,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 68,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport Login from './Login';\nimport Signup from './Signup';\n\nconst Navbar: React.FC = () => {\n  const { user, signOut } = useAuth();\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [authMode, setAuthMode] = useState<'login' | 'signup'>('login');\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n    } catch (error) {\n      // Use proper error handling instead of console\n      alert('Logout failed. Please try again.');\n    }\n  };\n\n  // Close dropdown when clicking outside\n  const openLogin = () => {\n    setAuthMode('login');\n    setShowAuthModal(true);\n  };\n\n  const openSignup = () => {\n    setAuthMode('signup');\n    setShowAuthModal(true);\n  };\n\n  const closeModal = () => {\n    setShowAuthModal(false);\n  };\n\n  const switchToLogin = () => {\n    setAuthMode('login');\n  };\n\n  const switchToSignup = () => {\n    setAuthMode('signup');\n  };\n\n  return (\n    <>\n      <nav className=\"sticky top-0 z-50 border-b bg-black/20 backdrop-blur-md border-white/10\">\n        <div className=\"container px-6 mx-auto\">\n          <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-purple-400\">\n                <span className=\"text-sm font-bold text-white\">HW</span>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">HealWave</h1>\n                <span className=\"text-xs text-gray-300\">Frequency Generator</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {user ? (\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium text-white\">\n                      {user.email?.split('@')[0] || 'User'}\n                    </div>\n                    <div className=\"text-xs text-gray-300\">Authenticated</div>\n                  </div>\n                  <button \n                    onClick={handleLogout}\n                    className=\"px-4 py-2 text-sm text-red-300 transition-all duration-200 border rounded-full bg-red-500/20 hover:bg-red-500/30 hover:text-red-200 border-red-500/30\"\n                  >\n                    Logout\n                  </button>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-3\">\n                  <button \n                    onClick={openLogin}\n                    className=\"px-4 py-2 text-sm text-gray-300 transition-colors rounded-full hover:text-white\"\n                  >\n                    Login\n                  </button>\n                  <button \n                    onClick={openSignup}\n                    className=\"px-6 py-2 text-sm text-white transition-all duration-200 rounded-full shadow-lg bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600\"\n                  >\n                    Sign Up\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Authentication Modal */}\n      {showAuthModal && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm\">\n          <div className=\"relative\">\n            <button\n              onClick={closeModal}\n              className=\"absolute z-10 flex items-center justify-center w-8 h-8 text-white transition-colors bg-red-500 rounded-full -top-4 -right-4 hover:bg-red-600\"\n            >\n              ×\n            </button>\n            {authMode === 'login' ? (\n              <Login onSwitchToSignup={switchToSignup} onClose={closeModal} />\n            ) : (\n              <Signup onSwitchToLogin={switchToLogin} onClose={closeModal} />\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Navbar;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/PresetSelector.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 2,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [74, 105], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 78,
        "column": 7,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 78,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [2375, 2375], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [2375, 2375], "text": "await " },
            "desc": "Add await operator."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 92,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 92,
        "endColumn": 18
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 93,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [2804, 2842], "text": " " }
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 102,
        "column": 14,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 102,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [3031, 3033], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 107,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 107,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3162, 3165], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3162, 3165], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 111,
        "column": 53,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 111,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [3320, 3322], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 112,
        "column": 51,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 112,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [3414, 3416], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 122,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 122,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `FrequencyPreset`.",
        "line": 122,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 122,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 123,
        "column": 26,
        "nodeType": "ArrayExpression",
        "messageId": "unsafeReturn",
        "endLine": 123,
        "endColumn": 48
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 129,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 129,
        "endColumn": 18
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 130,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [4109, 4147], "text": " " }
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '===' and instead saw '=='.",
        "line": 139,
        "column": 14,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 139,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "===", "actualOperator": "==" },
            "fix": { "range": [4420, 4422], "text": "===" },
            "desc": "Use '===' instead of '=='."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 150,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 150,
        "endColumn": 18
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 151,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [4819, 4857], "text": " " }
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 171,
        "column": 14,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 171,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [5379, 5381], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 190,
        "column": 15,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 190,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [6037, 6039], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 289,
        "column": 25,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 289,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [11301, 11301], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [11301, 11301], "text": "await " },
            "desc": "Add await operator."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 313,
        "column": 9,
        "nodeType": "JSXOpeningElement",
        "endLine": 325,
        "endColumn": 10
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 326,
        "column": 11,
        "nodeType": "JSXOpeningElement",
        "endLine": 326,
        "endColumn": 105
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 403,
        "column": 25,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 403,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 17,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\nimport { useAuth } from '@cosmichub/auth';\nimport { FrequencyPreset, AudioSettings } from '@cosmichub/frequency';\nimport { savePreset, getUserPresets, deletePreset } from '../services/api';\n\ninterface PresetSelectorProps {\n  onSelectPreset: (preset: FrequencyPreset) => void;\n  currentSettings: AudioSettings;\n  currentPreset?: FrequencyPreset | null;\n}\n\nconst PresetSelector: React.FC<PresetSelectorProps> = React.memo(({\n  onSelectPreset,\n  currentSettings,\n  currentPreset\n}) => {\n  const { user } = useAuth();\n  const [presets, setPresets] = useState<FrequencyPreset[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [newPresetName, setNewPresetName] = useState('');\n  const [newPresetDescription, setNewPresetDescription] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  // Built-in presets - memoized to prevent recreation on every render\n  const builtInPresets: FrequencyPreset[] = useMemo(() => [\n    {\n      id: 'relaxation',\n      name: 'Deep Relaxation',\n      category: 'brainwave',\n      baseFrequency: 40,\n      binauralBeat: 4,\n      description: 'Promote deep relaxation and stress relief'\n    },\n    {\n      id: 'focus',\n      name: 'Enhanced Focus',\n      category: 'brainwave',\n      baseFrequency: 40,\n      binauralBeat: 10,\n      description: 'Improve concentration and mental clarity'\n    },\n    {\n      id: 'meditation',\n      name: 'Meditation',\n      category: 'brainwave',\n      baseFrequency: 30,\n      binauralBeat: 6,\n      description: 'Support deep meditative states'\n    },\n    {\n      id: 'sleep',\n      name: 'Sleep Induction',\n      category: 'brainwave',\n      baseFrequency: 20,\n      binauralBeat: 4,\n      description: 'Promote restful sleep'\n    },\n    {\n      id: 'creativity',\n      name: 'Creative Flow',\n      category: 'brainwave',\n      baseFrequency: 60,\n      binauralBeat: 8,\n      description: 'Enhance creative thinking'\n    }\n  ], []);\n\n  useEffect(() => {\n    if (user) {\n      loadUserPresets();\n    }\n  }, [user]);\n\n  const loadUserPresets = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const userPresets = await getUserPresets();\n      setPresets(userPresets);\n    } catch (err) {\n      // Handle error with better UX\n      setError('Failed to load presets. Please try again.');\n      setPresets([]);\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n  devConsole.error('Error loading user presets:', err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const handleSavePreset = useCallback(async () => {\n    if (user == null || newPresetName.trim().length === 0) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const preset: any = {\n        id: `user-${Date.now()}`,\n        name: newPresetName.trim(),\n        category: 'custom',\n        baseFrequency: currentPreset?.baseFrequency != null ? currentPreset.baseFrequency : 40,\n        binauralBeat: currentPreset?.binauralBeat != null ? currentPreset.binauralBeat : 0,\n        description: newPresetDescription.trim().length > 0 ? newPresetDescription.trim() : undefined,\n        metadata: {\n          volume: currentSettings.volume,\n          duration: currentSettings.duration,\n          fadeIn: currentSettings.fadeIn,\n          fadeOut: currentSettings.fadeOut\n        }\n      };\n\n      const savedPreset = await savePreset(preset);\n      setPresets(prev => [...prev, savedPreset]);\n      setNewPresetName('');\n      setNewPresetDescription('');\n      setShowSaveDialog(false);\n    } catch (err) {\n      setError('Failed to save preset. Please try again.');\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n  devConsole.error('Error saving preset:', err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [user, newPresetName, newPresetDescription, currentPreset, currentSettings]);\n\n  const handleDeletePreset = useCallback(async (presetId: string) => {\n    if (user == null) return;\n\n    if (confirm('Are you sure you want to delete this preset?') === false) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      await deletePreset(presetId);\n      setPresets(prev => prev.filter(p => p.id !== presetId));\n    } catch (err) {\n      setError('Failed to delete preset. Please try again.');\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n  devConsole.error('Error deleting preset:', err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  const formatDuration = useCallback((minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    if (hours > 0) {\n      return `${hours}h ${remainingMinutes}m`;\n    }\n    return `${remainingMinutes}m`;\n  }, []);\n\n  return (\n    <div className=\"preset-selector\" role=\"region\" aria-label=\"Frequency Presets\">\n      {/* Error Alert */}\n      {error != null && (\n        <div \n          role=\"alert\" \n          className=\"mb-4 p-3 bg-red-50 border border-red-200 text-red-700 rounded-lg\"\n          aria-live=\"polite\"\n        >\n          {error}\n          <button\n            onClick={() => setError(null)}\n            className=\"ml-2 text-red-500 hover:text-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1\"\n            aria-label=\"Dismiss error\"\n          >\n            ✕\n          </button>\n        </div>\n      )}\n\n      <div className=\"preset-header flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold\">Frequency Presets</h3>\n        {user != null && (\n          <button\n            onClick={() => setShowSaveDialog(true)}\n            className=\"px-4 py-2 text-white transition-colors bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={loading}\n            aria-describedby=\"save-preset-help\"\n          >\n            Save Current Settings\n          </button>\n        )}\n      </div>\n      <div id=\"save-preset-help\" className=\"sr-only\">\n        Save your current frequency and audio settings as a custom preset\n      </div>\n\n      {/* Built-in Presets */}\n      <section className=\"mb-6 preset-section\" aria-labelledby=\"builtin-presets-heading\">\n        <h4 id=\"builtin-presets-heading\" className=\"mb-3 font-medium text-gray-700 text-md\">Built-in Presets</h4>\n        <div className=\"grid gap-3\" role=\"list\">\n          {builtInPresets.map((preset) => (\n            <div\n              key={preset.id}\n              role=\"listitem\"\n              className=\"p-4 transition-colors border rounded-lg cursor-pointer preset-card bg-gray-50 hover:bg-gray-100 focus-within:ring-2 focus-within:ring-blue-500 focus-within:ring-offset-1\"\n              onClick={() => onSelectPreset(preset)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault();\n                  onSelectPreset(preset);\n                }\n              }}\n              tabIndex={0}\n              aria-label={`Select ${preset.name} preset: ${preset.description}`}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h5 className=\"font-medium text-gray-900\">{preset.name}</h5>\n                  <p className=\"mt-1 text-sm text-gray-600\">{preset.description}</p>\n                  <div className=\"mt-2 text-xs text-gray-500\" aria-label={`Base frequency ${preset.baseFrequency} hertz, binaural beat ${preset.binauralBeat} hertz`}>\n                    Base: {preset.baseFrequency}Hz | Beat: {preset.binauralBeat}Hz\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* User Presets */}\n      {user && (\n        <section className=\"preset-section\" aria-labelledby=\"user-presets-heading\">\n          <h4 id=\"user-presets-heading\" className=\"mb-3 font-medium text-gray-700 text-md\">Your Presets</h4>\n          {loading && presets.length === 0 ? (\n            <div className=\"py-4 text-center text-gray-500\" role=\"status\" aria-live=\"polite\">\n              <span className=\"sr-only\">Loading presets...</span>\n              <div className=\"inline-flex items-center\">\n                <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-gray-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Loading presets...\n              </div>\n            </div>\n          ) : presets.length === 0 ? (\n            <div className=\"py-4 text-center text-gray-500\">\n              No saved presets yet. Save your current settings to create your first preset.\n            </div>\n          ) : (\n            <div className=\"grid gap-3\" role=\"list\">\n              {presets.map((preset) => (\n                <div\n                  key={preset.id}\n                  role=\"listitem\"\n                  className=\"p-4 transition-colors bg-white border rounded-lg preset-card hover:bg-gray-50 focus-within:ring-2 focus-within:ring-blue-500 focus-within:ring-offset-1\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div \n                      className=\"flex-1 cursor-pointer\"\n                      onClick={() => onSelectPreset(preset)}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter' || e.key === ' ') {\n                          e.preventDefault();\n                          onSelectPreset(preset);\n                        }\n                      }}\n                      tabIndex={0}\n                      aria-label={`Select ${preset.name} preset${preset.description ? `: ${preset.description}` : ''}`}\n                    >\n                      <h5 className=\"font-medium text-gray-900\">{preset.name}</h5>\n                      {preset.description && (\n                        <p className=\"mt-1 text-sm text-gray-600\">{preset.description}</p>\n                      )}\n                      <div className=\"mt-2 text-xs text-gray-500\" aria-label={`Base frequency ${preset.baseFrequency} hertz, binaural beat ${preset.binauralBeat} hertz`}>\n                        Base: {preset.baseFrequency}Hz | Beat: {preset.binauralBeat}Hz\n                      </div>\n                    </div>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeletePreset(preset.id);\n                      }}\n                      className=\"p-1 ml-2 text-red-500 transition-colors hover:text-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 disabled:opacity-50\"\n                      disabled={loading}\n                      aria-label={`Delete ${preset.name} preset`}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </section>\n      )}\n\n      {!user && (\n        <div className=\"py-4 text-center text-gray-500\" role=\"status\">\n          <p>Sign in to save and manage your custom presets</p>\n        </div>\n      )}\n\n      {/* Save Preset Dialog */}\n      {showSaveDialog && (\n        <div \n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\"\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby=\"save-preset-title\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowSaveDialog(false);\n              setNewPresetName('');\n              setNewPresetDescription('');\n            }\n          }}\n        >\n          <div className=\"p-6 bg-white rounded-lg w-96 max-w-90vw\" onClick={(e) => e.stopPropagation()}>\n            <h3 id=\"save-preset-title\" className=\"mb-4 text-lg font-semibold\">Save Preset</h3>\n            \n            <div className=\"mb-4\">\n              <label htmlFor=\"preset-name\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n                Preset Name *\n              </label>\n              <input\n                id=\"preset-name\"\n                type=\"text\"\n                value={newPresetName}\n                onChange={(e) => setNewPresetName(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Enter preset name...\"\n                maxLength={50}\n                required\n                aria-describedby=\"preset-name-help\"\n                aria-label=\"Preset Name\"\n                autoFocus\n              />\n              <div id=\"preset-name-help\" className=\"mt-1 text-xs text-gray-500\">\n                Required. Maximum 50 characters.\n              </div>\n            </div>\n\n            <div className=\"mb-4\">\n              <label htmlFor=\"preset-description\" className=\"block mb-2 text-sm font-medium text-gray-700\">\n                Description (optional)\n              </label>\n              <textarea\n                id=\"preset-description\"\n                value={newPresetDescription}\n                onChange={(e) => setNewPresetDescription(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Describe what this preset is for...\"\n                rows={3}\n                maxLength={200}\n                aria-describedby=\"preset-description-help\"\n                aria-label=\"Description\"\n              />\n              <div id=\"preset-description-help\" className=\"mt-1 text-xs text-gray-500\">\n                Optional. Maximum 200 characters.\n              </div>\n            </div>\n\n            <div className=\"p-3 mb-4 rounded-lg bg-gray-50\" role=\"region\" aria-labelledby=\"current-settings-title\">\n              <h4 id=\"current-settings-title\" className=\"mb-2 text-sm font-medium text-gray-700\">Current Settings:</h4>\n              <div className=\"text-sm text-gray-600\">\n                {currentPreset ? (\n                  <>\n                    <div>Preset: {currentPreset.name}</div>\n                    <div>Base Frequency: {currentPreset.baseFrequency}Hz</div>\n                    {currentPreset.binauralBeat && (\n                      <div>Binaural Beat: {currentPreset.binauralBeat}Hz</div>\n                    )}\n                  </>\n                ) : (\n                  <div>No preset selected</div>\n                )}\n                <div>Volume: {Math.round(currentSettings.volume)}%</div>\n                <div>Duration: {formatDuration(currentSettings.duration)}</div>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={() => {\n                  setShowSaveDialog(false);\n                  setNewPresetName('');\n                  setNewPresetDescription('');\n                }}\n                className=\"flex-1 px-4 py-2 text-gray-700 transition-colors border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50\"\n                disabled={loading}\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSavePreset}\n                className=\"flex-1 px-4 py-2 text-white transition-colors bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n                disabled={loading || !newPresetName.trim()}\n                aria-describedby=\"save-button-help\"\n              >\n                {loading ? 'Saving...' : 'Save Preset'}\n              </button>\n              <div id=\"save-button-help\" className=\"sr-only\">\n                {!newPresetName.trim() ? 'Enter a preset name to enable saving' : 'Save your current settings as a new preset'}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nPresetSelector.displayName = 'PresetSelector';\n\nexport default PresetSelector;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/PricingPage.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async arrow function 'handleSubscribe' has no 'await' expression.",
        "line": 10,
        "column": 52,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 10,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [404, 410], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 32,
        "column": 29,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1109, 1250],
              "text": "\n            Unlock your mind&apos;s potential with therapeutic binaural beats. \n            Start free, upgrade for advanced features.\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1109, 1250],
              "text": "\n            Unlock your mind&lsquo;s potential with therapeutic binaural beats. \n            Start free, upgrade for advanced features.\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1109, 1250],
              "text": "\n            Unlock your mind&#39;s potential with therapeutic binaural beats. \n            Start free, upgrade for advanced features.\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1109, 1250],
              "text": "\n            Unlock your mind&rsquo;s potential with therapeutic binaural beats. \n            Start free, upgrade for advanced features.\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 109,
        "column": 29,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 109,
        "endColumn": 62
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { HEALWAVE_TIERS, calculateYearlySavings, type HealwaveSubscriptionTier } from '@cosmichub/subscriptions';\nimport { useAuth } from '@cosmichub/auth';\nimport * as SwitchPrimitive from '@radix-ui/react-switch';\n\nconst PricingPage: React.FC = () => {\n  const [isYearly, setIsYearly] = useState(false);\n  const { user } = useAuth();\n\n  const handleSubscribe = async (tierSlug: string) => {\n    if (user === null || user === undefined) {\n      alert('Please sign in to subscribe to HealWave Pro');\n      return;\n    }\n\n    if (tierSlug === 'free') {\n      alert('You are already using the free tier!');\n      return;\n    }\n\n    alert('Subscription system will be available soon!');\n  };\n\n  return (\n    <div className=\"py-16 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container px-4 mx-auto max-w-7xl\">\n        <div className=\"flex flex-col items-center mb-12 space-y-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-purple-600\">\n            Choose Your HealWave Plan\n          </h2>\n          <p className=\"max-w-2xl text-xl text-gray-600\">\n            Unlock your mind's potential with therapeutic binaural beats. \n            Start free, upgrade for advanced features.\n          </p>\n          \n          <div className=\"flex items-center space-x-4\">\n            <span className=\"font-semibold\">Monthly</span>\n            <SwitchPrimitive.Root\n              checked={isYearly}\n              onCheckedChange={setIsYearly}\n              className=\"w-11 h-6 bg-gray-200 rounded-full relative data-[state=checked]:bg-purple-600 outline-none cursor-pointer transition-colors\"\n              aria-label=\"Toggle yearly billing\"\n            >\n              <SwitchPrimitive.Thumb\n                className=\"block w-5 h-5 bg-white rounded-full shadow-md transform translate-x-0.5 data-[state=checked]:translate-x-5.5 transition-transform\"\n              />\n            </SwitchPrimitive.Root>\n            <span className=\"font-semibold\">Yearly</span>\n            <span className=\"px-2 py-1 text-sm font-medium text-white bg-green-500 rounded-md\">\n              Save up to 33%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-3\">\n          {Object.entries(HEALWAVE_TIERS).map(([tierSlug, tier]: [string, HealwaveSubscriptionTier]) => {\n            const price = isYearly ? tier.price.yearly : tier.price.monthly;\n            const yearlyPrice = tier.price.yearly;\n            const monthlyPrice = tier.price.monthly;\n            const savings = calculateYearlySavings(monthlyPrice, yearlyPrice);\n            const isPopular = tierSlug === 'premium';\n\n            return (\n              <div\n                key={tierSlug}\n                className={`bg-white dark:bg-gray-800 shadow-lg rounded-lg border ${isPopular ? 'border-purple-500 border-4' : 'border-gray-200'} relative transition-all duration-300 ${isPopular ? 'scale-105' : 'scale-100'}`}\n              >\n                {isPopular === true && (\n                  <span className=\"absolute flex items-center px-4 py-1 space-x-1 text-sm font-medium text-white transform -translate-x-1/2 bg-purple-500 rounded-full -top-3 left-1/2\">\n                    <span>★</span>\n                    <span>Most Popular</span>\n                  </span>\n                )}\n\n                <div className=\"flex flex-col items-center p-8 space-y-6\">\n                  <div className=\"space-y-2 text-center\">\n                    <h3 className={`text-xl font-bold ${isPopular ? 'text-purple-600' : 'text-gray-700 dark:text-gray-300'}`}>\n                      {tier.name}\n                    </h3>\n                    \n                    <div className=\"flex items-baseline justify-center\">\n                      <span className={`text-4xl font-bold ${isPopular ? 'text-purple-600' : 'text-gray-900 dark:text-white'}`}>\n                        ${price}\n                      </span>\n                      {tierSlug !== 'free' && (\n                        <span className=\"ml-1 text-gray-500\">\n                          /{isYearly ? 'year' : 'month'}\n                        </span>\n                      )}\n                    </div>\n\n                    {isYearly === true && tierSlug !== 'free' && typeof savings === 'number' && savings > 0 && (\n                      <p className=\"text-sm font-semibold text-green-500\">\n                        Save {savings}% yearly\n                      </p>\n                    )}\n                  </div>\n\n                  <ul className=\"w-full space-y-3\">\n                    {tier.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center\">\n                        <span className=\"mr-2 text-green-500\">✓</span>\n                        <span className=\"text-sm text-gray-700 dark:text-gray-300\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  <button\n                    onClick={() => handleSubscribe(tierSlug)}\n                    disabled={tierSlug === 'free'}\n                    className={`w-full py-3 px-4 rounded-lg font-semibold text-lg transition-all duration-200 ${\n                      tierSlug === 'free'\n                        ? 'border border-gray-300 text-gray-500 cursor-not-allowed'\n                        : 'bg-purple-600 text-white hover:bg-purple-700 hover:shadow-lg'\n                    }`}\n                    aria-label={`Subscribe to ${tier.name} plan`}\n                  >\n                    {tierSlug === 'free' ? 'Current Plan' : `Start ${tier.name}`}\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"flex flex-col items-center mt-16 space-y-4 text-center\">\n          <p className=\"text-gray-600\">\n            All plans include our 7-day free trial. Cancel anytime.\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            Prices in USD. Auto-renewal can be turned off at any time.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PricingPage;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/ProgressBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/Signup.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 211,
        "column": 24,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 211,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, type FC, type FormEvent, type ChangeEvent } from 'react';\nimport { signUp, useAuth } from '@cosmichub/auth';\nimport { getFirestore, doc, setDoc } from 'firebase/firestore';\n\ninterface SignupProps {\n  onSwitchToLogin?: () => void;\n  onClose?: () => void;\n}\n\ninterface NotificationPreferences {\n  sessionReminders: boolean;\n  weeklyProgress: boolean;\n  newFrequencies: boolean;\n  healthTips: boolean;\n}\n\ninterface UserProfile {\n  email: string;\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  dateOfBirth: string | null;\n  occupation: string | null;\n  experienceLevel: string | null;\n  primaryGoals: string | null;\n  healthConditions: string | null;\n  meditationExperience: string | null;\n  preferredSessionLength: string | null;\n  notificationPreferences: NotificationPreferences;\n  createdAt: string;\n  lastLoginAt: string;\n  profileCompleted: boolean;\n  privacyConsentGiven: boolean;\n  privacyConsentDate: string;\n  healthDisclaimerAccepted: boolean;\n  healthDisclaimerDate: string;\n  signupSource: string;\n  hasCompletedOnboarding: boolean;\n  totalSessionsCompleted: number;\n  totalListeningMinutes: number;\n  favoriteFrequencies: string[];\n  lastActiveAt: string;\n  moodTrackingEnabled: boolean;\n  progressTrackingEnabled: boolean;\n  reminderSettings: {\n    enabled: boolean;\n    frequency: string;\n    preferredTime: string;\n  };\n}\n\nconst Signup: FC<SignupProps> = ({ onSwitchToLogin, onClose }) => {\n  // Basic account fields\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  \n  // User profile fields\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [dateOfBirth, setDateOfBirth] = useState('');\n  const [occupation, setOccupation] = useState('');\n  const [experienceLevel, setExperienceLevel] = useState('');\n  const [primaryGoals, setPrimaryGoals] = useState('');\n  const [healthConditions, setHealthConditions] = useState('');\n  const [meditationExperience, setMeditationExperience] = useState('');\n  const [preferredSessionLength, setPreferredSessionLength] = useState('');\n  const [notificationPreferences, setNotificationPreferences] = useState({\n    sessionReminders: false,\n    weeklyProgress: false,\n    newFrequencies: false,\n    healthTips: false\n  });\n  const [privacyConsent, setPrivacyConsent] = useState(false);\n  const [healthDisclaimer, setHealthDisclaimer] = useState(false);\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { user } = useAuth();\n\n  // If user is already logged in, show success message\n  if (user) {\n    return (\n      <div className=\"text-center\">\n        <div className=\"mb-4 text-xl text-green-400\">✅ Already logged in!</div>\n        <p className=\"mb-4 text-gray-300\">Welcome, {user.email}</p>\n        <button\n          onClick={onClose}\n          className=\"px-6 py-2 text-white transition-colors bg-purple-500 rounded-lg hover:bg-purple-600\"\n        >\n          Continue\n        </button>\n      </div>\n    );\n  }\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {\n    e.preventDefault();\n    setError('');\n\n    // Enhanced validation\n    if (!firstName.trim() || !lastName.trim()) {\n      setError('Please enter your first and last name');\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    if (!privacyConsent) {\n      setError('Please accept the privacy policy to continue');\n      return;\n    }\n\n    if (!healthDisclaimer) {\n      setError('Please acknowledge the health disclaimer to continue');\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const user = await signUp(email, password);\n      const db = getFirestore();\n      \n      // Create comprehensive user profile\n      const userProfile: UserProfile = {\n        // Basic info\n        email: user.email || '',\n        firstName: firstName.trim(),\n        lastName: lastName.trim(),\n        fullName: `${firstName.trim()} ${lastName.trim()}`,\n        \n        // Personal information\n        dateOfBirth: dateOfBirth || null,\n        occupation: occupation.trim() || null,\n        \n        // Healing and wellness background\n        experienceLevel: experienceLevel || null,\n        primaryGoals: primaryGoals.trim() || null,\n        healthConditions: healthConditions.trim() || null,\n        meditationExperience: meditationExperience || null,\n        preferredSessionLength: preferredSessionLength || null,\n        \n        // Notification preferences\n        notificationPreferences: {\n          sessionReminders: notificationPreferences.sessionReminders,\n          weeklyProgress: notificationPreferences.weeklyProgress,\n          newFrequencies: notificationPreferences.newFrequencies,\n          healthTips: notificationPreferences.healthTips\n        },\n        \n        // Account metadata\n        createdAt: new Date().toISOString(),\n        lastLoginAt: new Date().toISOString(),\n        profileCompleted: !!(firstName && lastName && experienceLevel),\n        privacyConsentGiven: true,\n        privacyConsentDate: new Date().toISOString(),\n        healthDisclaimerAccepted: true,\n        healthDisclaimerDate: new Date().toISOString(),\n        \n        // Usage analytics\n        signupSource: 'web',\n        hasCompletedOnboarding: false,\n        totalSessionsCompleted: 0,\n        totalListeningMinutes: 0,\n        favoriteFrequencies: [],\n        lastActiveAt: new Date().toISOString(),\n        \n        // Wellness tracking\n        moodTrackingEnabled: false,\n        progressTrackingEnabled: true,\n        reminderSettings: {\n          enabled: notificationPreferences.sessionReminders,\n          frequency: 'daily',\n          preferredTime: '19:00'\n        }\n      };\n\n      await setDoc(doc(db, 'users', user.uid), userProfile);\n      onClose?.();\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Signup failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto max-h-[90vh] overflow-y-auto\">\n      <div className=\"p-8 border shadow-2xl bg-gradient-to-br from-purple-900/50 to-blue-900/50 backdrop-blur-md rounded-2xl border-purple-500/20\">\n        <div className=\"mb-8 text-center\">\n          <div className=\"mb-4 text-4xl\">🎵</div>\n          <h2 className=\"mb-2 text-2xl font-bold text-white\">Join HealWave</h2>\n          <p className=\"text-gray-300\">Create your account for personalized sound healing</p>\n        </div>\n\n        {error && (\n          <div className=\"p-3 mb-6 border rounded-lg bg-red-500/20 border-red-500/50\">\n            <p className=\"text-sm text-red-200\">{error}</p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Account Details */}\n          <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n            <div>\n              <label htmlFor=\"firstName\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                First Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"firstName\"\n                value={firstName}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => setFirstName(e.target.value)}\n                required\n                aria-required=\"true\"\n                className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"Your first name\"\n                aria-label=\"First Name\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"lastName\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Last Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"lastName\"\n                value={lastName}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => setLastName(e.target.value)}\n                required\n                aria-required=\"true\"\n                className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"Your last name\"\n                aria-label=\"Last Name\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n              Email Address *\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e: ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n              required\n              aria-required=\"true\"\n              className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n              placeholder=\"your@email.com\"\n              aria-label=\"Email Address\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n            <div>\n              <label htmlFor=\"password\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Password *\n              </label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                value={password}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}\n                required\n                aria-required=\"true\"\n                className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"••••••••\"\n                aria-label=\"Password\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Confirm Password *\n              </label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n                aria-required=\"true\"\n                className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"••••••••\"\n                aria-label=\"Confirm Password\"\n              />\n            </div>\n          </div>\n\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white\">Personal Information</h3>\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n              <div>\n                <label htmlFor=\"dateOfBirth\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                  Date of Birth\n                </label>\n                <input\n                  type=\"date\"\n                  id=\"dateOfBirth\"\n                  value={dateOfBirth}\n                  onChange={(e) => setDateOfBirth(e.target.value)}\n                  className=\"w-full px-4 py-3 text-white transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                  aria-label=\"Date of Birth\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"occupation\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                  Occupation\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"occupation\"\n                  value={occupation}\n                  onChange={(e) => setOccupation(e.target.value)}\n                  className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                  placeholder=\"Your profession\"\n                  aria-label=\"Occupation\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Healing Preferences */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white\">Healing Preferences</h3>\n            <div>\n              <label htmlFor=\"experienceLevel\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Experience with Sound Healing\n              </label>\n              <select\n                id=\"experienceLevel\"\n                value={experienceLevel}\n                onChange={(e) => setExperienceLevel(e.target.value)}\n                className=\"w-full px-4 py-3 text-white transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                aria-label=\"Experience with Sound Healing\"\n              >\n                <option value=\"\">Select level...</option>\n                <option value=\"beginner\">Beginner</option>\n                <option value=\"intermediate\">Intermediate</option>\n                <option value=\"advanced\">Advanced</option>\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"primaryGoals\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Primary Wellness Goals\n              </label>\n              <textarea\n                id=\"primaryGoals\"\n                value={primaryGoals}\n                onChange={(e) => setPrimaryGoals(e.target.value)}\n                rows={3}\n                className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"e.g., Reduce stress, improve sleep...\"\n                aria-label=\"Primary Wellness Goals\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"healthConditions\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Relevant Health Conditions\n              </label>\n              <textarea\n                id=\"healthConditions\"\n                value={healthConditions}\n                onChange={(e) => setHealthConditions(e.target.value)}\n                rows={3}\n                className=\"w-full px-4 py-3 text-white placeholder-gray-400 transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"Any conditions we should be aware of (optional)\"\n                aria-label=\"Relevant Health Conditions\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"meditationExperience\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Meditation Experience\n              </label>\n              <select\n                id=\"meditationExperience\"\n                value={meditationExperience}\n                onChange={(e) => setMeditationExperience(e.target.value)}\n                className=\"w-full px-4 py-3 text-white transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                aria-label=\"Meditation Experience\"\n              >\n                <option value=\"\">Select...</option>\n                <option value=\"none\">None</option>\n                <option value=\"occasional\">Occasional</option>\n                <option value=\"regular\">Regular</option>\n                <option value=\"daily\">Daily Practice</option>\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"preferredSessionLength\" className=\"block mb-2 text-sm font-medium text-gray-200\">\n                Preferred Session Length\n              </label>\n              <select\n                id=\"preferredSessionLength\"\n                value={preferredSessionLength}\n                onChange={(e) => setPreferredSessionLength(e.target.value)}\n                className=\"w-full px-4 py-3 text-white transition-all border rounded-lg bg-white/10 border-purple-500/30 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                aria-label=\"Preferred Session Length\"\n              >\n                <option value=\"\">Select...</option>\n                <option value=\"short\">Short (5-15 min)</option>\n                <option value=\"medium\">Medium (15-30 min)</option>\n                <option value=\"long\">Long (30+ min)</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Notification Preferences */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white\">Notification Preferences</h3>\n            <div className=\"space-y-3\">\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={notificationPreferences.sessionReminders}\n                  onChange={(e) => setNotificationPreferences(prev => ({\n                    ...prev,\n                    sessionReminders: e.target.checked\n                  }))}\n                  className=\"w-4 h-4 text-purple-500 rounded bg-white/10 border-purple-500/30 focus:ring-purple-500 focus:ring-2\"\n                  aria-label=\"Daily session reminders\"\n                />\n                <span className=\"text-gray-200\">Daily session reminders</span>\n              </label>\n              \n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={notificationPreferences.weeklyProgress}\n                  onChange={(e) => setNotificationPreferences(prev => ({\n                    ...prev,\n                    weeklyProgress: e.target.checked\n                  }))}\n                  className=\"w-4 h-4 text-purple-500 rounded bg-white/10 border-purple-500/30 focus:ring-purple-500 focus:ring-2\"\n                  aria-label=\"Weekly progress reports\"\n                />\n                <span className=\"text-gray-200\">Weekly progress reports</span>\n              </label>\n              \n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={notificationPreferences.newFrequencies}\n                  onChange={(e) => setNotificationPreferences(prev => ({\n                    ...prev,\n                    newFrequencies: e.target.checked\n                  }))}\n                  className=\"w-4 h-4 text-purple-500 rounded bg-white/10 border-purple-500/30 focus:ring-purple-500 focus:ring-2\"\n                  aria-label=\"New frequency releases\"\n                />\n                <span className=\"text-gray-200\">New frequency releases</span>\n              </label>\n              \n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={notificationPreferences.healthTips}\n                  onChange={(e) => setNotificationPreferences(prev => ({\n                    ...prev,\n                    healthTips: e.target.checked\n                  }))}\n                  className=\"w-4 h-4 text-purple-500 rounded bg-white/10 border-purple-500/30 focus:ring-purple-500 focus:ring-2\"\n                  aria-label=\"Wellness tips and insights\"\n                />\n                <span className=\"text-gray-200\">Wellness tips and insights</span>\n              </label>\n            </div>\n          </div>\n\n          {/* Legal Agreements */}\n          <div className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <label className=\"flex items-start space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={healthDisclaimer}\n                  onChange={(e) => setHealthDisclaimer(e.target.checked)}\n                  required\n                  aria-required=\"true\"\n                  className=\"w-4 h-4 mt-1 text-purple-500 rounded bg-white/10 border-purple-500/30 focus:ring-purple-500 focus:ring-2\"\n                />\n                <span className=\"text-sm text-gray-200\">\n                  I understand that sound healing frequencies are for wellness purposes only and not a substitute for medical treatment. I will consult healthcare professionals for medical concerns. *\n                </span>\n              </label>\n              \n              <label className=\"flex items-start space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={privacyConsent}\n                  onChange={(e) => setPrivacyConsent(e.target.checked)}\n                  required\n                  aria-required=\"true\"\n                  className=\"w-4 h-4 mt-1 text-purple-500 rounded bg-white/10 border-purple-500/30 focus:ring-purple-500 focus:ring-2\"\n                />\n                <span className=\"text-sm text-gray-200\">\n                  I agree to the <span className=\"text-purple-300 underline cursor-pointer\">Privacy Policy</span> and <span className=\"text-purple-300 underline cursor-pointer\">Terms of Service</span> *\n                </span>\n              </label>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full py-3 px-4 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 disabled:from-gray-500 disabled:to-gray-600 text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-[1.02] hover:shadow-lg disabled:cursor-not-allowed disabled:transform-none\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-5 h-5 mr-2 border-b-2 border-white rounded-full animate-spin\"></div>\n                Creating Your Healing Account...\n              </div>\n            ) : (\n              'Start Your Healing Journey'\n            )}\n          </button>\n        </form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-gray-300\">\n            Already have an account?{' '}\n            <button\n              onClick={onSwitchToLogin}\n              className=\"font-medium text-purple-400 transition-colors hover:text-purple-300\"\n            >\n              Sign in here\n            </button>\n          </p>\n        </div>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-xs text-gray-400\">\n            By creating an account, you agree to our healing frequency guidelines\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/Subscribe.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 5,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [204, 235], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 26,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [817, 855], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 56,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [1891, 1929], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 72,
        "column": 19,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 72,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useState } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { stripeService, StripeSession } from '@cosmichub/integrations';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\n\nconst Subscribe: React.FC = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubscribe = async () => {\n    if (!user) {\n      alert('Please sign in to subscribe to HealWave Pro');\n      navigate('/login');\n      return;\n    }\n\n    if (!stripeService) {\n      // eslint-disable-next-line no-console\n  devConsole.error('Stripe service not available');\n      alert('Subscription service is temporarily unavailable. Please try again later.');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      // Create Stripe checkout session for HealWave Pro\n      const successUrl = `${window.location.origin}/pricing/success?tier=premium`;\n      const cancelUrl = `${window.location.origin}/pricing/cancel`;\n\n      const session: StripeSession = await stripeService.createCheckoutSession({\n        tier: 'premium', // HealWave Pro tier\n        userId: user.uid,\n        isAnnual: true, // Default to annual pricing\n        successUrl,\n        cancelUrl,\n      });\n\n      if (session.url) {\n        // Update user subscription in Firestore before redirect\n        await stripeService.updateUserSubscription(user.uid, 'premium', true);\n        \n        // Redirect to Stripe Checkout\n        window.location.href = session.url;\n      } else {\n        throw new Error('Failed to create checkout session');\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n  devConsole.error('Subscription error:', error);\n      alert('An error occurred while setting up your subscription. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen px-4 py-8 bg-gradient-to-br from-indigo-900 via-purple-900 to-teal-800\">\n      <div className=\"w-full max-w-md p-8 border shadow-2xl bg-white/10 backdrop-blur-lg rounded-3xl border-white/20\">\n        <div className=\"mb-8 text-center\">\n          <h2 className=\"mb-2 text-2xl font-bold text-white\">Subscribe to HealWave Pro</h2>\n          <p className=\"text-gray-300\">Unlock premium features for an enhanced healing experience.</p>\n        </div>\n        <button\n          onClick={handleSubscribe}\n          disabled={isLoading}\n          className=\"w-full py-3 px-4 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 disabled:from-gray-500 disabled:to-gray-600 text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-[1.02] hover:shadow-lg disabled:cursor-not-allowed disabled:transform-none\"\n          aria-label=\"Subscribe to HealWave Pro\"\n        >\n          {isLoading ? (\n            <div className=\"flex items-center justify-center\">\n              <div className=\"w-5 h-5 mr-2 border-b-2 border-white rounded-full animate-spin\" />\n              Processing...\n            </div>\n          ) : (\n            'Subscribe Now'\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Subscribe;",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/ToastProvider.tsx",
    "messages": [
      {
        "ruleId": "no-duplicate-imports",
        "severity": 2,
        "message": "'react' import is duplicated.",
        "line": 2,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "messageId": "import",
        "endLine": 2,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { createContext, useContext } from 'react';\nimport type { ReactNode } from 'react';\n\nexport interface Toast {\n  id: string;\n  message?: string;\n  title?: string;\n  description?: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  isClosable?: boolean;\n}\n\ninterface ToastContextType {\n  toast: (options: Omit<Toast, 'id'>) => void;\n  closeToast: (id: string) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const useToast = (): ToastContextType => {\n  const context = useContext(ToastContext);\n  if (context === undefined) {\n    // Return a mock implementation to prevent compilation errors\n    return {\n      toast: () => {\n        // Mock implementation for development\n      },\n      closeToast: () => {\n        // Mock implementation for development\n      }\n    };\n  }\n  return context;\n};\n\n// Simple provider implementation\nexport const ToastProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const toast = () => {};\n  const closeToast = () => {};\n  \n  return (\n    <ToastContext.Provider value={{ toast, closeToast }}>\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/UserProfile.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 81,
        "column": 38,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 81,
        "endColumn": 77,
        "fix": { "range": [3075, 3106], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth, useSubscription } from '@cosmichub/auth';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { FaUser, FaCrown, FaStar, FaCalendarAlt, FaHeadphones, FaCreditCard, FaArrowUp, FaHistory } from 'react-icons/fa';\nimport { HEALWAVE_TIERS } from '@cosmichub/subscriptions';\nimport ProgressBar from './ProgressBar';\n\ninterface UserStats {\n  totalSessions: number;\n  sessionsThisMonth: number;\n  favoriteFrequencies: number;\n  joinDate: Date;\n  lastSession: Date;\n}\n\ninterface SubscriptionUsage { current: number; limit: number; }\ninterface SubscriptionInfo { currentPeriodEnd?: string | number | Date | null | undefined; name?: string; price?: { monthly?: number | null | undefined }; }\ninterface SubscriptionHookData {\n  subscription?: SubscriptionInfo | null;\n  userTier: string;\n  isLoading: boolean;\n  checkUsageLimit?: (key: string) => SubscriptionUsage | undefined;\n}\n\nconst UserProfile: React.FC = React.memo(() => {\n  const { user } = useAuth();\n  const subscriptionData = useSubscription() as unknown as SubscriptionHookData; // Narrowing locally; upstream hook lacks exported type\n  const navigate = useNavigate();\n  const { subscription, userTier, isLoading, checkUsageLimit } = subscriptionData;\n\n  const [userStats, setUserStats] = useState<UserStats>({\n    totalSessions: 0,\n    sessionsThisMonth: 0,\n    favoriteFrequencies: 0,\n    joinDate: new Date(),\n    lastSession: new Date(),\n  });\n\n  const loadUserStats = useCallback((): void => {\n    if (user !== null && user !== undefined && typeof checkUsageLimit === 'function') {\n      const usage = checkUsageLimit('sessionsPerDay') ?? { current: 0, limit: 0 };\n      const creation = user.metadata?.creationTime;\n      const joinDate = typeof creation === 'string' ? new Date(creation) : new Date();\n      setUserStats({\n        totalSessions: usage.current + 25,\n        sessionsThisMonth: usage.current,\n        favoriteFrequencies: 8,\n        joinDate,\n        lastSession: new Date()\n      });\n    }\n  }, [user, checkUsageLimit]);\n\n  useEffect(() => {\n    loadUserStats();\n  }, [loadUserStats]);\n\n  const getTierIcon = (tier: keyof typeof HEALWAVE_TIERS): React.ReactNode => {\n    switch (tier) {\n      case 'free': return <FaUser className=\"text-cosmic-silver\" aria-hidden=\"true\" />;\n      case 'premium': return <FaStar className=\"text-cosmic-purple\" aria-hidden=\"true\" />;\n      case 'clinical': return <FaCrown className=\"text-cosmic-gold\" aria-hidden=\"true\" />;\n      default: return <FaUser className=\"text-cosmic-silver\" aria-hidden=\"true\" />;\n    }\n  };\n\n  const getTierColor = (tier: keyof typeof HEALWAVE_TIERS): string => {\n    switch (tier) {\n      case 'free': return 'cosmic-silver';\n      case 'premium': return 'cosmic-purple';\n      case 'clinical': return 'cosmic-gold';\n      default: return 'cosmic-silver';\n    }\n  };\n\n  const handleUpgrade = useCallback((): void => {\n    navigate('/upgrade');\n  }, [navigate]);\n\n  const currentTier = HEALWAVE_TIERS[userTier as keyof typeof HEALWAVE_TIERS];\n  const sessionUsage: SubscriptionUsage = typeof checkUsageLimit === 'function'\n    ? (checkUsageLimit('sessionsPerDay') ?? { current: 0, limit: 2 })\n    : { current: 0, limit: 2 };\n\n  if (isLoading === true || user === null || user === undefined) {\n    return (\n      <div className=\"py-10 text-center\">\n        <div className=\"mx-auto text-4xl text-cosmic-purple animate-spin\" aria-hidden=\"true\">🎵</div>\n        <p className=\"mt-4 text-cosmic-silver\">Loading profile...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl py-8 mx-auto\">\n      <div className=\"cosmic-card p-6 rounded-lg shadow-lg bg-cosmic-dark\">\n        <div className=\"flex flex-col items-center mb-6 space-y-4 sm:flex-row sm:space-y-0 sm:space-x-6\">\n          <div className=\"flex items-center justify-center w-24 h-24 rounded-full bg-cosmic-blue/30\">\n            <FaHeadphones className=\"text-3xl text-cosmic-silver\" aria-hidden=\"true\" />\n          </div>\n          <div className=\"text-center sm:text-left\">\n            <h2 className=\"text-2xl font-bold text-cosmic-gold\">{user.email}</h2>\n            <div className=\"flex items-center mt-2 space-x-2\">\n              {getTierIcon(userTier)}\n              <span className={`bg-${getTierColor(userTier)}/20 text-${getTierColor(userTier)} px-2 py-1 rounded text-sm font-semibold uppercase`}>\n                {userTier}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <Tabs.Root defaultValue=\"overview\">\n          <Tabs.List className=\"flex mb-6 border-b border-cosmic-silver/30\" aria-label=\"User Profile Tabs\">\n            <Tabs.Trigger\n              value=\"overview\"\n              className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\"\n            >\n              Overview\n            </Tabs.Trigger>\n            <Tabs.Trigger\n              value=\"usage\"\n              className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\"\n            >\n              Usage\n            </Tabs.Trigger>\n            <Tabs.Trigger\n              value=\"account\"\n              className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\"\n            >\n              Account\n            </Tabs.Trigger>\n          </Tabs.List>\n\n          <Tabs.Content value=\"overview\">\n            <div className=\"flex flex-col space-y-6\">\n              <div className=\"cosmic-card p-4\">\n                <h3 className=\"mb-4 text-lg font-bold text-cosmic-gold\">Subscription Details</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div>\n                    <p className=\"text-cosmic-silver\">Current Plan</p>\n                    <p className=\"font-bold text-cosmic-gold\">{currentTier?.name || 'Free'}</p>\n                    <p className=\"text-sm text-cosmic-silver/80\">\n                      {currentTier?.name === 'Free' \n                        ? 'Basic binaural beat access'\n                        : currentTier?.name === 'HealWave Pro'\n                        ? 'Full therapeutic frequency library'\n                        : 'Clinical-grade audio therapy tools'\n                      }\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-cosmic-silver\">Billing</p>\n                    <p className=\"font-bold text-cosmic-gold\">\n                      {currentTier?.price?.monthly !== undefined && currentTier.price.monthly !== null && currentTier.price.monthly > 0 ? `$${currentTier.price.monthly}/month` : 'Free'}\n                    </p>\n                      {currentTier?.price?.monthly !== undefined && currentTier.price.monthly !== null && currentTier.price.monthly > 0 && subscription?.currentPeriodEnd !== null && subscription?.currentPeriodEnd !== undefined && (\n                        <p className=\"text-sm text-cosmic-silver/80\">\n                          Next billing: {new Date(subscription.currentPeriodEnd).toLocaleDateString()}\n                        </p>\n                      )}\n                  </div>\n                </div>\n                <button\n                  className=\"w-full mt-4 cosmic-button sm:w-auto\"\n                  onClick={handleUpgrade}\n                  aria-label={currentTier?.name === 'Free' ? 'Upgrade Plan' : 'Manage Subscription'}\n                >\n                  {currentTier?.name === 'Free' ? (\n                    <span className=\"flex items-center space-x-2\">\n                      <FaArrowUp />\n                      <span>Upgrade Plan</span>\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center space-x-2\">\n                      <FaCreditCard />\n                      <span>Manage Subscription</span>\n                    </span>\n                  )}\n                </button>\n              </div>\n\n              <div className=\"cosmic-card p-4\">\n                <h3 className=\"mb-4 text-lg font-bold text-cosmic-gold\">Session Summary</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n                  <div>\n                    <p className=\"text-cosmic-silver\">Total Sessions</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">{userStats.totalSessions}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-cosmic-silver\">Sessions This Month</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">{userStats.sessionsThisMonth}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-cosmic-silver\">Favorite Frequencies</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">{userStats.favoriteFrequencies}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"cosmic-card p-4\">\n                <h3 className=\"mb-4 text-lg font-bold text-cosmic-gold\">Recent Activity</h3>\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-center space-x-2\">\n                    <FaHistory className=\"text-cosmic-blue\" aria-hidden=\"true\" />\n                    <span className=\"text-cosmic-silver\">Last Session: {userStats.lastSession.toLocaleString()}</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <FaCalendarAlt className=\"text-cosmic-blue\" aria-hidden=\"true\" />\n                    <span className=\"text-cosmic-silver\">Joined: {userStats.joinDate.toLocaleDateString()}</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"usage\">\n            <div className=\"flex flex-col space-y-6\">\n              <div className=\"cosmic-card p-4\">\n                <h3 className=\"mb-4 text-lg font-bold text-cosmic-gold\">Daily Sessions</h3>\n                <div className=\"flex justify-between mb-2\">\n                  <p className=\"text-cosmic-silver\">Sessions Today</p>\n                  <p className=\"font-bold text-cosmic-gold\">{sessionUsage.current} / {sessionUsage.limit}</p>\n                </div>\n                <ProgressBar\n                  percentage={(sessionUsage.current / Math.max(sessionUsage.limit, 1)) * 100}\n                  color=\"purple\"\n                />\n                {sessionUsage.limit > 0 && sessionUsage.current >= sessionUsage.limit && (\n                  <div className=\"flex p-4 mt-4 space-x-4 border border-yellow-500 rounded-md bg-yellow-900/50\">\n                    <span className=\"text-xl text-yellow-500\" aria-hidden=\"true\">⚠️</span>\n                    <p className=\"text-cosmic-silver\">You&apos;ve reached your daily session limit. Upgrade your plan for unlimited sessions.</p>\n                  </div>\n                )}\n              </div>\n\n              {currentTier?.name === 'Free' && (\n                <div className=\"cosmic-card p-4\">\n                  <h3 className=\"mb-4 text-lg font-bold text-cosmic-gold\">Session Duration</h3>\n                  <div className=\"flex justify-between mb-2\">\n                    <p className=\"text-cosmic-silver\">Max Duration</p>\n                    <p className=\"font-bold text-cosmic-gold\">20 minutes per session</p>\n                  </div>\n                  <ProgressBar\n                    percentage={100}\n                    color=\"blue\"\n                  />\n                  <div className=\"flex p-4 mt-4 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n                    <span className=\"text-xl text-blue-500\" aria-hidden=\"true\">ℹ️</span>\n                    <p className=\"text-cosmic-silver\">Free plan includes 20-minute session limit. Upgrade for unlimited session length.</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"account\">\n            <div className=\"flex flex-col space-y-6\">\n              <div className=\"cosmic-card p-4\">\n                <h3 className=\"mb-4 text-lg font-bold text-cosmic-gold\">Account Information</h3>\n                <div className=\"flex flex-col space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium text-cosmic-silver\">Email Address</span>\n                    <span className=\"text-cosmic-silver\">{user.email}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium text-cosmic-silver\">Email Verified</span>\n                    <span className={`px-2 py-1 rounded text-sm ${user.emailVerified ? 'bg-green-500/20 text-green-500' : 'bg-red-500/20 text-red-500'}`}>\n                      {user.emailVerified ? 'Verified' : 'Not Verified'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium text-cosmic-silver\">Account ID</span>\n                    <span className=\"font-mono text-sm text-cosmic-silver\">{user.uid.slice(0, 8)}...</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"cosmic-card p-4\">\n                <h3 className=\"mb-4 text-lg font-bold text-cosmic-gold\">Audio Preferences</h3>\n                <div className=\"flex flex-col space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium text-cosmic-silver\">Audio Quality</span>\n                    <span className=\"px-2 py-1 text-sm text-cosmic-purple rounded bg-cosmic-purple/20\">\n                      {currentTier?.name === 'Free' ? 'Standard' : 'High-Fidelity'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium text-cosmic-silver\">Offline Mode</span>\n                    <span className={`px-2 py-1 text-sm rounded ${\n                      currentTier?.name === 'Free' \n                        ? 'text-cosmic-silver bg-cosmic-silver/20' \n                        : 'text-green-500 bg-green-500/20'\n                    }`}>\n                      {currentTier?.name === 'Free' ? 'Not Available' : 'Available'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium text-cosmic-silver\">Session Notifications</span>\n                    <span className=\"px-2 py-1 text-sm text-green-500 rounded bg-green-500/20\">Enabled</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Tabs.Content>\n        </Tabs.Root>\n      </div>\n    </div>\n  );\n});\n\nUserProfile.displayName = 'UserProfile';\n\nexport default UserProfile;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/components/VolumeSlider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/config/devConsole.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 5,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [152, 183], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/*\n Centralized devConsole for HealWave app to eliminate per-file raw console bindings.\n Only errors always log; other methods are development-only.\n*/\n/* eslint-disable no-console */\nexport const devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\n\nexport type DevConsole = typeof devConsole;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/config/environment.ts",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 22,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 22,
        "endColumn": 28
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 47,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [1479, 1510], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1556, 1559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1556, 1559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe spread of an `any[]` array type.",
        "line": 49,
        "column": 59,
        "nodeType": "SpreadElement",
        "messageId": "unsafeArraySpread",
        "endLine": 49,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1625, 1628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1625, 1628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe spread of an `any[]` array type.",
        "line": 50,
        "column": 61,
        "nodeType": "SpreadElement",
        "messageId": "unsafeArraySpread",
        "endLine": 50,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1696, 1699], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1696, 1699], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe spread of an `any[]` array type.",
        "line": 51,
        "column": 44,
        "nodeType": "SpreadElement",
        "messageId": "unsafeArraySpread",
        "endLine": 51,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1770, 1773], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1770, 1773], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe spread of an `any[]` array type.",
        "line": 52,
        "column": 61,
        "nodeType": "SpreadElement",
        "messageId": "unsafeArraySpread",
        "endLine": 52,
        "endColumn": 68
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/**\n * HealWave Environment Configuration\n * Centralized environment handling for the HealWave app\n */\n\nexport type Environment = 'development' | 'production' | 'test';\n\n/**\n * Get the current environment\n */\nfunction getCurrentEnvironment(): Environment {\n  // Check Vite environment variables first\n  if (typeof import.meta !== 'undefined') {\n    const mode = import.meta.env.MODE;\n    if (mode === 'production') return 'production';\n    if (mode === 'test') return 'test';\n    return 'development';\n  }\n  \n  // Fallback to Node.js environment\n  if (typeof process !== 'undefined') {\n    const nodeEnv = process.env.NODE_ENV;\n    if (nodeEnv === 'production') return 'production';\n    if (nodeEnv === 'test') return 'test';\n    return 'development';\n  }\n  \n  // Default to development\n  return 'development';\n}\n\n// Environment helper functions\nexport const isDevelopment = () => getCurrentEnvironment() === 'development' || (typeof import.meta !== 'undefined' && import.meta.env.DEV);\nexport const isProduction = () => getCurrentEnvironment() === 'production' || (typeof import.meta !== 'undefined' && import.meta.env.PROD);\nexport const isTest = () => getCurrentEnvironment() === 'test';\n\n// Development/Production utilities\nexport function devOnly<T>(value: T): T | undefined {\n  return isDevelopment() ? value : undefined;\n}\n\nexport function prodOnly<T>(value: T): T | undefined {\n  return isProduction() ? value : undefined;\n}\n\n// Console wrapper that respects environment\n/* eslint-disable no-console */\nexport const devConsole = {\n  log: (...args: any[]) => isDevelopment() && console.log(...args),\n  warn: (...args: any[]) => isDevelopment() && console.warn(...args),\n  error: (...args: any[]) => console.error(...args), // Always show errors\n  info: (...args: any[]) => isDevelopment() && console.info(...args),\n};\n/* eslint-enable no-console */\n\n// Feature flags\nexport const features = {\n  mockAuth: isDevelopment(),\n  devLogging: isDevelopment(),\n  showDebugInfo: isDevelopment(),\n};\n\nexport default {\n  isDevelopment: isDevelopment(),\n  isProduction: isProduction(),\n  isTest: isTest(),\n  environment: getCurrentEnvironment(),\n  features,\n};",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/firebase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/main.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/pages/FrequencyGenerator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/pages/Presets.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 2,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [41, 72], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useState } from 'react';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\nimport { AudioSettings, FrequencyPreset } from '@cosmichub/frequency';\nimport PresetSelector from '../components/PresetSelector';\n\nconst Presets: React.FC = () => {\n  const [currentSettings] = useState<AudioSettings>({\n    volume: 50,\n    duration: 10,\n    fadeIn: 3,\n    fadeOut: 3\n  });\n  const [currentPreset, setCurrentPreset] = useState<FrequencyPreset | null>(null);\n\n  const handleSelectPreset = (preset: FrequencyPreset): void => {\n  // Debug selection (development only)\n  devConsole.log?.('Selected preset:', preset);\n    setCurrentPreset(preset);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center\">Frequency Presets</h1>\n      <PresetSelector \n        onSelectPreset={handleSelectPreset}\n        currentSettings={currentSettings}\n        currentPreset={currentPreset}\n      />\n    </div>\n  );\n};\n\nexport default Presets;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/pages/Profile.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 40,
        "column": 27,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 40,
        "endColumn": 42
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { Button } from '@cosmichub/ui';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from '../components/ToastProvider';\nimport UserProfile from '../components/UserProfile';\n\nconst Profile: React.FC = React.memo(() => {\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleSignOut = React.useCallback(async () => {\n    try {\n      await signOut();\n      toast({ message: 'Signed out successfully', type: 'success' });\n      navigate('/login');\n    } catch {\n      toast({ message: 'Error signing out', type: 'error' });\n    }\n  }, [signOut, navigate, toast]);\n\n  if (!user) {\n    return (\n      <div className=\"py-10 text-center\">\n        <div className=\"mx-auto text-4xl text-cosmic-purple animate-spin\" aria-hidden=\"true\">🎵</div>\n        <p className=\"mt-4 text-cosmic-silver\">Please sign in to view your profile</p>\n        <Button onClick={() => navigate('/login')} variant=\"primary\" className=\"mt-4\">\n          Sign In\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cosmic-dark\">\n      <UserProfile />\n      <div className=\"max-w-4xl mx-auto pb-8\">\n        <div className=\"text-center\">\n          <Button onClick={handleSignOut} variant=\"secondary\">\n            Sign Out\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nProfile.displayName = 'Profile';\n\nexport default Profile;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/pwa-performance.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 8,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [272, 303], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/**\n * Advanced PWA Performance Enhancements for HealWave\n * Builds on existing CosmicHub performance optimizations\n */\n\n// Simple logger for PWA performance monitoring using shared devConsole pattern\n// Local lightweight proxy (avoids cross-app import during early init)\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\n\nclass PWALogger {\n  static log(message: string, ...args: unknown[]): void { devConsole.log?.(message, ...args); }\n  static warn(message: string, ...args: unknown[]): void { devConsole.warn?.(message, ...args); }\n  static error(message: string, ...args: unknown[]): void { devConsole.error(message, ...args); }\n}\n\n// Core PWA Performance Classes for HealWave\nexport class CriticalResourceManager {\n  private static readonly CRITICAL_RESOURCES: string[] = [\n    '/src/main.tsx',\n    '/src/index.css',\n    '/src/styles/index.css'\n  ];\n\n  private static readonly FONT_RESOURCES: string[] = [\n    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',\n    'https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap'\n  ];\n\n  static async preloadCriticalResources(): Promise<void> {\n    PWALogger.log('⚡ Preloading critical resources for HealWave...');\n\n    const preloadPromises = this.CRITICAL_RESOURCES.map(resource => {\n      return new Promise<void>((resolve) => {\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.href = resource;\n        link.as = resource.endsWith('.css') ? 'style' : 'script';\n        if (resource.endsWith('.tsx') || resource.endsWith('.js')) {\n          link.crossOrigin = 'anonymous';\n        }\n        \n        link.onload = () => {\n          PWALogger.log(`✅ Preloaded: ${resource}`);\n          resolve();\n        };\n        link.onerror = () => {\n          PWALogger.warn(`⚠️ Failed to preload: ${resource}`);\n          resolve(); // Don't block on failed preloads\n        };\n        \n        document.head.appendChild(link);\n      });\n    });\n\n    await Promise.allSettled(preloadPromises);\n    PWALogger.log('🎯 Critical resource preloading complete');\n  }\n}\n\ninterface NetworkInformationLike { effectiveType?: string; downlink?: number; saveData?: boolean; }\nexport class ConnectionAwareLoader {\n  private static readonly connection: NetworkInformationLike | undefined =\n    (navigator as unknown as { connection?: NetworkInformationLike }).connection ??\n    (navigator as unknown as { mozConnection?: NetworkInformationLike }).mozConnection ??\n    (navigator as unknown as { webkitConnection?: NetworkInformationLike }).webkitConnection;\n\n  static getConnectionInfo(): {\n    effectiveType: string;\n    downlink: number;\n    saveData: boolean;\n  } {\n    if (!this.connection) {\n      return {\n        effectiveType: '4g',\n        downlink: 10,\n        saveData: false\n      };\n    }\n\n    return {\n      effectiveType: this.connection.effectiveType ?? '4g',\n      downlink: this.connection.downlink ?? 10,\n      saveData: this.connection.saveData ?? false\n    };\n  }\n\n  static shouldOptimizeForSlowConnection(): boolean {\n    const info = this.getConnectionInfo();\n    return info.effectiveType === 'slow-2g' || \n           info.effectiveType === '2g' || \n           info.downlink < 1.5 || \n           info.saveData;\n  }\n}\n\nexport class PWAPerformanceMonitor {\n  private static metrics: Map<string, number> = new Map();\n\n  static startTiming(label: string): void {\n    this.metrics.set(`${label}_start`, performance.now());\n  }\n\n  static endTiming(label: string): number {\n    const startTime = this.metrics.get(`${label}_start`);\n    if (startTime === undefined) {\n      PWALogger.warn(`No start time found for ${label}`);\n      return 0;\n    }\n    \n    const duration = performance.now() - startTime;\n    this.metrics.set(label, duration);\n    PWALogger.log(`⏱️ ${label}: ${duration.toFixed(2)}ms`);\n    return duration;\n  }\n\n  static getMetrics(): Record<string, number> {\n    return Object.fromEntries(this.metrics);\n  }\n}\n\n// HealWave-specific performance optimizations\nexport class AudioPerformanceOptimizer {\n  private static audioContext: AudioContext | null = null;\n\n  static initializeAudioContext(): void {\n    if (this.audioContext !== null) return;\n    try {\n      const ctor = (window as unknown as { AudioContext?: typeof AudioContext; webkitAudioContext?: typeof AudioContext }).AudioContext\n        ?? (window as unknown as { webkitAudioContext?: typeof AudioContext }).webkitAudioContext;\n      if (ctor) {\n        this.audioContext = new ctor();\n        PWALogger.log('🎵 Audio context initialized for HealWave');\n      } else {\n        PWALogger.warn('⚠️ AudioContext API not available');\n      }\n    } catch (error) {\n      PWALogger.warn('⚠️ Audio context initialization failed:', error);\n    }\n  }\n\n  static optimizeForAudioPlayback(): void {\n    // Reduce background processing during audio playback\n    document.addEventListener('play', () => {\n      PWALogger.log('🎧 Audio playback started - optimizing performance');\n      // Reduce non-critical processing\n      document.documentElement.style.setProperty('--reduce-animations', '1');\n    }, true);\n\n    document.addEventListener('pause', () => {\n      PWALogger.log('⏸️ Audio playback paused - restoring normal performance');\n      document.documentElement.style.setProperty('--reduce-animations', '0');\n    }, true);\n  }\n\n  static preloadAudioAssets(): void {\n    // Preload critical audio files if needed\n    const criticalAudioFiles: string[] = [\n      // Add your critical audio file paths here\n      // '/audio/critical-frequency.mp3'\n    ];\n\n    criticalAudioFiles.forEach(audioFile => {\n      const link = document.createElement('link');\n      link.rel = 'preload';\n      link.href = audioFile;\n      link.as = 'audio';\n      document.head.appendChild(link);\n    });\n  }\n}\n\n// Initialize HealWave-specific performance enhancements\nexport function initializeHealWavePerformance(): void {\n  PWALogger.log('🎧 Initializing HealWave PWA performance enhancements...');\n\n  try {\n    // Initialize audio optimizations\n  AudioPerformanceOptimizer.initializeAudioContext();\n    AudioPerformanceOptimizer.optimizeForAudioPlayback();\n    AudioPerformanceOptimizer.preloadAudioAssets();\n\n    PWALogger.log('✅ HealWave PWA performance enhancements initialized');\n  } catch (error) {\n    PWALogger.error('❌ Failed to initialize HealWave performance enhancements:', error);\n  }\n}\n\n// Auto-initialize when imported\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => { initializeHealWavePerformance(); });\n} else {\n  initializeHealWavePerformance();\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/pwa.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 9,
        "column": 85,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [306, 337], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 10,
        "column": 86,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [489, 520], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 11,
        "column": 61,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [648, 679], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise returned in function argument where a void return was expected.",
        "line": 225,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "voidReturnArgument",
        "endLine": 225,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 227,
        "column": 3,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 227,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [7675, 7675], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [7675, 7675], "text": "await " },
            "desc": "Add await operator."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "/**\n * Service Worker Registration for HealWave App\n * Registers the comprehensive service worker system\n */\n\n// Simple logger for PWA service worker\nclass PWALogger {\n  private static isDevelopment = import.meta.env.DEV;\n  static log(message: string, ...args: unknown[]): void { if (this.isDevelopment) { /* eslint-disable no-console */ console.log(message, ...args); /* eslint-enable no-console */ } }\n  static warn(message: string, ...args: unknown[]): void { if (this.isDevelopment) { /* eslint-disable no-console */ console.warn(message, ...args); /* eslint-enable no-console */ } }\n  static error(message: string, ...args: unknown[]): void { /* eslint-disable no-console */ console.error(message, ...args); /* eslint-enable no-console */ }\n}\n\n// PWA Service Worker Registration\nasync function registerServiceWorker(): Promise<void> {\n  if ('serviceWorker' in navigator) {\n    try {\n      PWALogger.log('🔧 Registering Service Worker...');\n      \n  const registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/',\n        type: 'module'\n      });\n      \n      // Handle updates\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        if (newWorker) {\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New content is available, show update notification\n              showUpdateNotification();\n            }\n          });\n        }\n      });\n      \n      // Check for updates periodically\n  setInterval(() => { void registration.update(); }, 60000); // Check every minute\n      \n      PWALogger.log('✅ Service Worker registered successfully');\n      \n      // Initialize PWA features\n  // Fire-and-forget; internal logic attaches listeners only\n  initializePWAFeatures();\n      \n    } catch (error) {\n      PWALogger.error('❌ Service Worker registration failed:', error);\n    }\n  } else {\n    PWALogger.warn('⚠️ Service Worker not supported');\n  }\n}\n\n// Initialize PWA features\nfunction initializePWAFeatures(): void {\n  let deferredPrompt: { prompt: () => void; userChoice: Promise<{ outcome: string }> } | null = null;\n  \n  window.addEventListener('beforeinstallprompt', (e: Event): void => {\n    e.preventDefault();\n    const evt = e as unknown as { prompt: () => void; userChoice: Promise<{ outcome: string }> };\n    deferredPrompt = evt;\n    showInstallPrompt();\n  });\n  \n  // App installed handler\n  window.addEventListener('appinstalled', (): void => {\n    PWALogger.log('🎉 HealWave PWA installed successfully');\n    hideInstallPrompt();\n    deferredPrompt = null;\n  });\n  \n  // Handle install button click\n  window.addEventListener('install-app', () => { void (async () => {\n    if (deferredPrompt !== null) {\n      try {\n        deferredPrompt.prompt();\n        const choiceResult = await deferredPrompt.userChoice;\n        PWALogger.log(choiceResult.outcome === 'accepted' ? '✅ User accepted the install prompt' : '❌ User dismissed the install prompt');\n      } finally {\n        deferredPrompt = null;\n      }\n    }\n  })(); });\n}\n\n// Show update notification\nfunction showUpdateNotification(): void {\n  // Create update notification\n  const updateBanner = document.createElement('div');\n  updateBanner.id = 'pwa-update-banner';\n  updateBanner.innerHTML = `\n    <div style=\"\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: linear-gradient(135deg, #7c3aed, #06b6d4);\n      color: white;\n      padding: 12px 20px;\n      text-align: center;\n      z-index: 10000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n      font-family: system-ui, -apple-system, sans-serif;\n    \">\n      <span style=\"margin-right: 15px;\">🎵 New healing frequencies available!</span>\n      <button id=\"update-app-btn\" style=\"\n        background: rgba(255,255,255,0.2);\n        border: 1px solid rgba(255,255,255,0.3);\n        color: white;\n        padding: 6px 16px;\n        border-radius: 6px;\n        cursor: pointer;\n        margin-right: 10px;\n        font-weight: 500;\n      \">Update Now</button>\n      <button id=\"dismiss-update-btn\" style=\"\n        background: transparent;\n        border: none;\n        color: white;\n        cursor: pointer;\n        opacity: 0.8;\n      \">✕</button>\n    </div>\n  `;\n  \n  document.body.appendChild(updateBanner);\n  \n  // Handle update button\n  document.getElementById('update-app-btn')?.addEventListener('click', () => { window.location.reload(); });\n  \n  // Handle dismiss button\n  document.getElementById('dismiss-update-btn')?.addEventListener('click', () => { updateBanner.remove(); });\n}\n\n// Show install prompt\nfunction showInstallPrompt(): void {\n  // Check if already installed\n  if (window.matchMedia('(display-mode: standalone)').matches) {\n    return;\n  }\n  \n  // Create install prompt\n  const installBanner = document.createElement('div');\n  installBanner.id = 'pwa-install-banner';\n  installBanner.innerHTML = `\n    <div style=\"\n      position: fixed;\n      bottom: 20px;\n      left: 20px;\n      right: 20px;\n      background: rgba(26, 26, 46, 0.95);\n      backdrop-filter: blur(10px);\n      -webkit-backdrop-filter: blur(10px);\n      border: 1px solid rgba(124, 58, 237, 0.3);\n      border-radius: 16px;\n      padding: 20px;\n      z-index: 10000;\n      box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n      font-family: system-ui, -apple-system, sans-serif;\n      color: #e2e8f0;\n      max-width: 400px;\n      margin: 0 auto;\n    \">\n      <div style=\"display: flex; align-items: center; gap: 15px;\">\n        <div style=\"\n          width: 48px;\n          height: 48px;\n          background: linear-gradient(135deg, #7c3aed, #06b6d4);\n          border-radius: 12px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n        \">🎧</div>\n        <div style=\"flex: 1;\">\n          <h3 style=\"margin: 0 0 5px 0; font-size: 16px; font-weight: 600;\">Install HealWave</h3>\n          <p style=\"margin: 0; font-size: 14px; color: #cbd5e1; line-height: 1.4;\">Access healing frequencies faster with offline capability and better performance.</p>\n        </div>\n      </div>\n      <div style=\"display: flex; gap: 10px; margin-top: 15px;\">\n        <button id=\"install-app-btn\" style=\"\n          flex: 1;\n          background: linear-gradient(135deg, #7c3aed, #06b6d4);\n          border: none;\n          color: white;\n          padding: 12px 20px;\n          border-radius: 8px;\n          cursor: pointer;\n          font-weight: 600;\n          font-size: 14px;\n        \">Install App</button>\n        <button id=\"dismiss-install-btn\" style=\"\n          background: transparent;\n          border: 1px solid rgba(255,255,255,0.2);\n          color: #cbd5e1;\n          padding: 12px 16px;\n          border-radius: 8px;\n          cursor: pointer;\n          font-size: 14px;\n        \">Not Now</button>\n      </div>\n    </div>\n  `;\n  \n  document.body.appendChild(installBanner);\n  \n  // Handle install button\n  document.getElementById('install-app-btn')?.addEventListener('click', () => { window.dispatchEvent(new CustomEvent('install-app')); installBanner.remove(); });\n  \n  // Handle dismiss button\n  document.getElementById('dismiss-install-btn')?.addEventListener('click', () => { installBanner.remove(); });\n}\n\n// Hide install prompt\nfunction hideInstallPrompt(): void {\n  const installBanner = document.getElementById('pwa-install-banner');\n  if (installBanner) {\n    installBanner.remove();\n  }\n}\n\n// Register when DOM is loaded\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', registerServiceWorker);\n} else {\n  registerServiceWorker();\n}\n\nexport { registerServiceWorker };\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/routes/lazy-routes.tsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'React' is not defined.",
        "line": 29,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 29,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [777, 780], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [777, 780], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/display-name",
        "severity": 2,
        "message": "Component definition is missing display name",
        "line": 30,
        "column": 10,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "noDisplayName",
        "endLine": 34,
        "endColumn": 4
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [805, 808], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [805, 808], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Lazy Route Definitions for Healwave App\n * Implements route-based code splitting for frequency healing features\n */\n\nimport { lazyLoadRoute, LazyLoadErrorBoundary } from '@cosmichub/config';\n\n// Main page routes with lazy loading - only existing pages\nexport const HealwaveRoutes = {\n  // Frequency healing features (existing pages)\n  FrequencyGenerator: lazyLoadRoute(\n    () => import('../pages/FrequencyGenerator'),\n    'FrequencyGenerator'\n  ),\n\n  Presets: lazyLoadRoute(\n    () => import('../pages/Presets'),\n    'Presets'\n  ),\n\n  // User management (existing page)\n  Profile: lazyLoadRoute(\n    () => import('../pages/Profile'),\n    'Profile'\n  )\n};\n\n// Lazy loaded components with error boundaries\nexport const withErrorBoundary = (Component: React.ComponentType<any>) => {\n  return (props: any) => (\n    <LazyLoadErrorBoundary>\n      <Component {...props} />\n    </LazyLoadErrorBoundary>\n  );\n};\n\n// Route configuration with lazy loading - simplified to existing pages\nexport const healwaveRouteConfig = [\n  {\n    path: '/frequency-generator',\n    component: withErrorBoundary(HealwaveRoutes.FrequencyGenerator),\n    preload: false\n  },\n  {\n    path: '/presets',\n    component: withErrorBoundary(HealwaveRoutes.Presets),\n    preload: false\n  },\n  {\n    path: '/profile',\n    component: withErrorBoundary(HealwaveRoutes.Profile),\n    preload: true\n  }\n];\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/services/api.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `Promise<any>`.",
        "line": 16,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 16,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `Promise<any>`.",
        "line": 25,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 25,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getIdToken } from \"firebase/auth\";\nimport { auth } from \"@cosmichub/auth\";\nimport { FrequencyPreset } from \"@cosmichub/frequency\";\n\nexport async function savePreset(preset: FrequencyPreset) {\n  const token = await getIdToken(auth.currentUser!);\n  const response = await fetch(\"https://your-render-domain.com/healwave/presets\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(preset),\n  });\n  if (!response.ok) throw new Error(\"Failed to save preset\");\n  return response.json();\n}\n\nexport async function getPresets(): Promise<FrequencyPreset[]> {\n  const token = await getIdToken(auth.currentUser!);\n  const response = await fetch(\"https://your-render-domain.com/healwave/presets\", {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  if (!response.ok) throw new Error(\"Failed to fetch presets\");\n  return response.json();\n}\n\nexport async function getUserPresets(): Promise<FrequencyPreset[]> {\n  // Same as getPresets for now, but could be filtered by user\n  return getPresets();\n}\n\nexport async function deletePreset(presetId: string): Promise<void> {\n  const token = await getIdToken(auth.currentUser!);\n  const response = await fetch(`https://your-render-domain.com/healwave/presets/${presetId}`, {\n    method: \"DELETE\",\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  if (!response.ok) throw new Error(\"Failed to delete preset\");\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/types/binaural.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/types/subscription.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/healwave/src/utils/security.utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/App.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/App.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.tsx to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/app/_layout.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/app/_layout.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function RootLayout() {\n  return (\n    <>\n      <StatusBar style=\"light\" backgroundColor=\"#000014\" />\n      <Stack\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: '#000014',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}\n      >\n        <Stack.Screen name=\"index\" options={{ title: 'CosmicHub' }} />\n        <Stack.Screen name=\"astrology\" options={{ title: 'Astrology Charts' }} />\n        <Stack.Screen name=\"healwave\" options={{ title: 'Healing Frequencies' }} />\n      </Stack>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/app/astrology.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/app/astrology.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Link } from 'expo-router';\n\nexport default function AstrologyScreen() {\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Astrology Charts</Text>\n        <Text style={styles.subtitle}>\n          Generate and explore detailed astrological insights\n        </Text>\n\n        <View style={styles.chartTypes}>\n          <TouchableOpacity style={styles.chartCard}>\n            <Text style={styles.chartTitle}>🌙 Birth Chart</Text>\n            <Text style={styles.chartDescription}>\n              Generate your complete natal chart with planetary positions\n            </Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.chartCard}>\n            <Text style={styles.chartTitle}>💕 Synastry Analysis</Text>\n            <Text style={styles.chartDescription}>\n              Explore compatibility between two birth charts\n            </Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.chartCard}>\n            <Text style={styles.chartTitle}>🔮 Transit Forecast</Text>\n            <Text style={styles.chartDescription}>\n              See current planetary transits and their effects\n            </Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.chartCard}>\n            <Text style={styles.chartTitle}>📊 Chart Library</Text>\n            <Text style={styles.chartDescription}>\n              Access your saved charts and interpretations\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.features}>\n          <Text style={styles.featuresTitle}>Chart Features</Text>\n          <View style={styles.featureList}>\n            <Text style={styles.featureItem}>• Western & Vedic systems</Text>\n            <Text style={styles.featureItem}>• Multiple house systems</Text>\n            <Text style={styles.featureItem}>• Aspect calculations</Text>\n            <Text style={styles.featureItem}>• AI interpretations</Text>\n            <Text style={styles.featureItem}>• High-resolution charts</Text>\n          </View>\n        </View>\n\n        <Link href=\"/\" asChild>\n          <TouchableOpacity style={styles.backButton}>\n            <Text style={styles.backButtonText}>← Back to Home</Text>\n          </TouchableOpacity>\n        </Link>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000014',\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#ccc',\n    marginBottom: 30,\n    lineHeight: 24,\n  },\n  chartTypes: {\n    gap: 16,\n    marginBottom: 30,\n  },\n  chartCard: {\n    padding: 20,\n    backgroundColor: '#1a1a2e',\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: '#4a4a6a',\n  },\n  chartTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 8,\n  },\n  chartDescription: {\n    fontSize: 14,\n    color: '#ccc',\n    lineHeight: 20,\n  },\n  features: {\n    backgroundColor: '#0f3460',\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: '#16537e',\n    marginBottom: 30,\n  },\n  featuresTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 12,\n  },\n  featureList: {\n    gap: 8,\n  },\n  featureItem: {\n    fontSize: 14,\n    color: '#ccc',\n    lineHeight: 20,\n  },\n  backButton: {\n    padding: 16,\n    backgroundColor: '#333',\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  backButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/app/healwave.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/app/healwave.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Link } from 'expo-router';\n\nexport default function HealWaveScreen() {\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>HealWave Frequencies</Text>\n        <Text style={styles.subtitle}>\n          Binaural beats and healing frequencies for meditation and wellness\n        </Text>\n\n        <View style={styles.frequencyTypes}>\n          <TouchableOpacity style={styles.frequencyCard}>\n            <Text style={styles.frequencyTitle}>🧘 Meditation</Text>\n            <Text style={styles.frequencyDescription}>\n              Deep relaxation and mindfulness frequencies (4-8 Hz)\n            </Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.frequencyCard}>\n            <Text style={styles.frequencyTitle}>💤 Sleep</Text>\n            <Text style={styles.frequencyDescription}>\n              Delta waves for deep restorative sleep (0.5-4 Hz)\n            </Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.frequencyCard}>\n            <Text style={styles.frequencyTitle}>⚡ Focus</Text>\n            <Text style={styles.frequencyDescription}>\n              Beta waves for enhanced concentration (13-30 Hz)\n            </Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.frequencyCard}>\n            <Text style={styles.frequencyTitle}>🌟 Creativity</Text>\n            <Text style={styles.frequencyDescription}>\n              Alpha waves for creative flow states (8-13 Hz)\n            </Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.frequencyCard}>\n            <Text style={styles.frequencyTitle}>🎯 Lucid Dreams</Text>\n            <Text style={styles.frequencyDescription}>\n              Gamma waves for heightened awareness (30-100 Hz)\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.features}>\n          <Text style={styles.featuresTitle}>Audio Features</Text>\n          <View style={styles.featureList}>\n            <Text style={styles.featureItem}>• High-quality binaural beats</Text>\n            <Text style={styles.featureItem}>• Background soundscapes</Text>\n            <Text style={styles.featureItem}>• Timer and session tracking</Text>\n            <Text style={styles.featureItem}>• Custom frequency mixing</Text>\n            <Text style={styles.featureItem}>• Offline playback support</Text>\n          </View>\n        </View>\n\n        <Link href=\"/\" asChild>\n          <TouchableOpacity style={styles.backButton}>\n            <Text style={styles.backButtonText}>← Back to Home</Text>\n          </TouchableOpacity>\n        </Link>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000014',\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#ccc',\n    marginBottom: 30,\n    lineHeight: 24,\n  },\n  frequencyTypes: {\n    gap: 16,\n    marginBottom: 30,\n  },\n  frequencyCard: {\n    padding: 20,\n    backgroundColor: '#0f3460',\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: '#16537e',\n  },\n  frequencyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 8,\n  },\n  frequencyDescription: {\n    fontSize: 14,\n    color: '#ccc',\n    lineHeight: 20,\n  },\n  features: {\n    backgroundColor: '#1a1a2e',\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: '#4a4a6a',\n    marginBottom: 30,\n  },\n  featuresTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 12,\n  },\n  featureList: {\n    gap: 8,\n  },\n  featureItem: {\n    fontSize: 14,\n    color: '#ccc',\n    lineHeight: 20,\n  },\n  backButton: {\n    padding: 16,\n    backgroundColor: '#333',\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  backButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/app/index.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/app/index.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Link } from 'expo-router';\n\nexport default function HomeScreen() {\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Welcome to CosmicHub</Text>\n        <Text style={styles.subtitle}>\n          Your comprehensive astrology and spiritual guidance platform\n        </Text>\n\n        <View style={styles.appGrid}>\n          <Link href=\"/astrology\" asChild>\n            <TouchableOpacity style={[styles.appCard, styles.astrologyCard]}>\n              <Text style={styles.appCardTitle}>🌟 Astrology</Text>\n              <Text style={styles.appCardDescription}>\n                Generate detailed birth charts, synastry analysis, and cosmic insights\n              </Text>\n            </TouchableOpacity>\n          </Link>\n\n          <Link href=\"/healwave\" asChild>\n            <TouchableOpacity style={[styles.appCard, styles.healwaveCard]}>\n              <Text style={styles.appCardTitle}>🎵 HealWave</Text>\n              <Text style={styles.appCardDescription}>\n                Binaural beats and healing frequencies for meditation and wellness\n              </Text>\n            </TouchableOpacity>\n          </Link>\n        </View>\n\n        <View style={styles.features}>\n          <Text style={styles.featuresTitle}>Features</Text>\n          <View style={styles.featureList}>\n            <Text style={styles.featureItem}>• Multi-system chart calculations</Text>\n            <Text style={styles.featureItem}>• AI-powered interpretations</Text>\n            <Text style={styles.featureItem}>• Synastry compatibility analysis</Text>\n            <Text style={styles.featureItem}>• Healing frequency library</Text>\n            <Text style={styles.featureItem}>• Cloud synchronization</Text>\n          </View>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000014',\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 10,\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#ccc',\n    textAlign: 'center',\n    marginBottom: 40,\n    lineHeight: 24,\n  },\n  appGrid: {\n    width: '100%',\n    gap: 20,\n    marginBottom: 40,\n  },\n  appCard: {\n    padding: 20,\n    borderRadius: 16,\n    marginBottom: 16,\n    minHeight: 120,\n    justifyContent: 'center',\n  },\n  astrologyCard: {\n    backgroundColor: '#1a1a2e',\n    borderWidth: 1,\n    borderColor: '#4a4a6a',\n  },\n  healwaveCard: {\n    backgroundColor: '#0f3460',\n    borderWidth: 1,\n    borderColor: '#16537e',\n  },\n  appCardTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 8,\n  },\n  appCardDescription: {\n    fontSize: 14,\n    color: '#ccc',\n    lineHeight: 20,\n  },\n  features: {\n    width: '100%',\n    backgroundColor: '#1a1a2e',\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: '#4a4a6a',\n  },\n  featuresTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 12,\n  },\n  featureList: {\n    gap: 8,\n  },\n  featureItem: {\n    fontSize: 14,\n    color: '#ccc',\n    lineHeight: 20,\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/index.ts",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/index.ts"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/src/components/BirthDataInput.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/src/components/BirthDataInput.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, TextInput, ScrollView } from 'react-native';\n\ninterface BirthDataForm {\n  date: string;\n  time: string;\n  city: string;\n  timezone: string;\n}\n\ninterface Props {\n  onSubmit: (data: BirthDataForm) => void;\n  loading?: boolean;\n}\n\nexport function BirthDataInput({ onSubmit, loading = false }: Props) {\n  const [formData, setFormData] = useState<BirthDataForm>({\n    date: '',\n    time: '',\n    city: '',\n    timezone: '',\n  });\n\n  const handleSubmit = () => {\n    // Basic validation\n    const { date, time, city } = formData;\n    if (date === '' || time === '' || city === '') {\n      // In real app, show validation error\n      return;\n    }\n    onSubmit(formData);\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Birth Information</Text>\n      <Text style={styles.subtitle}>Enter your birth details to generate your chart</Text>\n\n      <View style={styles.form}>\n        <View style={styles.inputGroup}>\n          <Text style={styles.label}>Birth Date</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"YYYY-MM-DD\"\n            placeholderTextColor=\"#666\"\n            value={formData.date}\n            onChangeText={(text) => setFormData({ ...formData, date: text })}\n          />\n        </View>\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.label}>Birth Time</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"HH:MM (24-hour format)\"\n            placeholderTextColor=\"#666\"\n            value={formData.time}\n            onChangeText={(text) => setFormData({ ...formData, time: text })}\n          />\n        </View>\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.label}>Birth City</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"City, Country\"\n            placeholderTextColor=\"#666\"\n            value={formData.city}\n            onChangeText={(text) => setFormData({ ...formData, city: text })}\n          />\n        </View>\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.label}>Timezone (Optional)</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"e.g., America/New_York\"\n            placeholderTextColor=\"#666\"\n            value={formData.timezone}\n            onChangeText={(text) => setFormData({ ...formData, timezone: text })}\n          />\n        </View>\n\n        <TouchableOpacity \n          style={[styles.submitButton, loading ? styles.submitButtonDisabled : undefined]}\n          onPress={handleSubmit}\n          disabled={loading}\n        >\n          <Text style={styles.submitButtonText}>\n            {loading ? 'Generating Chart...' : 'Generate Birth Chart'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.info}>\n        <Text style={styles.infoTitle}>Need Help?</Text>\n        <Text style={styles.infoText}>\n          • Birth time should be as accurate as possible\n        </Text>\n        <Text style={styles.infoText}>\n          • If you don't know the exact time, use 12:00 PM\n        </Text>\n        <Text style={styles.infoText}>\n          • Location affects house calculations\n        </Text>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000014',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#fff',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#ccc',\n    textAlign: 'center',\n    marginBottom: 30,\n    lineHeight: 22,\n  },\n  form: {\n    paddingHorizontal: 20,\n  },\n  inputGroup: {\n    marginBottom: 20,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#fff',\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: '#1a1a2e',\n    borderRadius: 12,\n    padding: 16,\n    fontSize: 16,\n    color: '#fff',\n    borderWidth: 1,\n    borderColor: '#4a4a6a',\n  },\n  submitButton: {\n    backgroundColor: '#4a90e2',\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  submitButtonDisabled: {\n    backgroundColor: '#333',\n  },\n  submitButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  info: {\n    backgroundColor: '#1a1a2e',\n    margin: 20,\n    padding: 20,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#4a4a6a',\n  },\n  infoTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 12,\n  },\n  infoText: {\n    fontSize: 14,\n    color: '#ccc',\n    marginBottom: 6,\n    lineHeight: 18,\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/src/components/ChartDisplay.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/src/components/ChartDisplay.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { View, Text, StyleSheet, Dimensions } from 'react-native';\nimport Svg, { Circle, Line, Text as SvgText, G } from 'react-native-svg';\nimport { AstrologyChart, Planet } from '@cosmichub/types';\n\ninterface Props {\n  chartData: AstrologyChart;\n  width?: number;\n  height?: number;\n  title?: string;\n}\n\nexport function ChartDisplay({ chartData, width = 300, height = 300, title = 'Birth Chart' }: Props) {\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const radius = Math.min(width, height) * 0.4;\n\n  // This is a simplified version - you'd migrate your existing D3 logic here\n  const renderPlanets = () => {\n    if (chartData?.planets == null) return null;\n\n    return chartData.planets.map((planet: Planet, index: number) => {\n      const angle = (planet.position * Math.PI) / 180;\n      const x = centerX + radius * 0.8 * Math.cos(angle - Math.PI / 2);\n      const y = centerY + radius * 0.8 * Math.sin(angle - Math.PI / 2);\n\n      return (\n        <G key={planet.name + index}>\n          <Circle cx={x} cy={y} r=\"4\" fill=\"#fff\" />\n          <SvgText\n            x={x}\n            y={y - 10}\n            fontSize=\"10\"\n            fill=\"#ccc\"\n            textAnchor=\"middle\"\n          >\n            {planet.name.substring(0, 2).toUpperCase()}\n          </SvgText>\n        </G>\n      );\n    });\n  };\n\n  const renderHouses = () => {\n    const houses = [];\n    for (let i = 0; i < 12; i++) {\n      const angle = (i * 30 * Math.PI) / 180;\n      const x1 = centerX + radius * Math.cos(angle - Math.PI / 2);\n      const y1 = centerY + radius * Math.sin(angle - Math.PI / 2);\n      const x2 = centerX + radius * 1.1 * Math.cos(angle - Math.PI / 2);\n      const y2 = centerY + radius * 1.1 * Math.sin(angle - Math.PI / 2);\n\n      houses.push(\n        <Line\n          key={i}\n          x1={x1}\n          y1={y1}\n          x2={x2}\n          y2={y2}\n          stroke=\"#4a4a6a\"\n          strokeWidth=\"1\"\n        />\n      );\n    }\n    return houses;\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <Svg width={width} height={height} style={styles.chart}>\n        {/* Outer circle */}\n        <Circle\n          cx={centerX}\n          cy={centerY}\n          r={radius}\n          fill=\"none\"\n          stroke=\"#4a4a6a\"\n          strokeWidth=\"2\"\n        />\n        \n        {/* House divisions */}\n        {renderHouses()}\n        \n        {/* Planets */}\n        {renderPlanets()}\n      </Svg>\n      \n      <View style={styles.info}>\n        <Text style={styles.infoText}>\n          {chartData?.planets != null ? chartData.planets.length : 0} planets • {chartData?.houses != null ? chartData.houses.length : 0} houses\n        </Text>\n        <Text style={styles.infoText}>\n          {chartData?.aspects != null ? chartData.aspects.length : 0} aspects\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: '#1a1a2e',\n    borderRadius: 16,\n    margin: 10,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 15,\n  },\n  chart: {\n    marginBottom: 15,\n  },\n  info: {\n    alignItems: 'center',\n  },\n  infoText: {\n    fontSize: 12,\n    color: '#ccc',\n    marginBottom: 4,\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/src/components/FrequencyPlayer.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/src/components/FrequencyPlayer.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\nimport Slider from '@react-native-community/slider';\nimport { Audio } from 'expo-av';\n\ninterface Props {\n  frequencyType: 'meditation' | 'sleep' | 'focus' | 'creativity' | 'lucid';\n  frequency: number;\n  duration?: number;\n}\n\nexport function FrequencyPlayer({ frequencyType, frequency, duration = 600 }: Props) {\n  const [sound, setSound] = useState<Audio.Sound | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [position, setPosition] = useState(0);\n  const [volume, setVolume] = useState(0.5);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const frequencyInfo = {\n    meditation: { name: 'Deep Meditation', color: '#4a90e2', emoji: '🧘' },\n    sleep: { name: 'Restorative Sleep', color: '#5856d6', emoji: '💤' },\n    focus: { name: 'Enhanced Focus', color: '#ff9500', emoji: '⚡' },\n    creativity: { name: 'Creative Flow', color: '#32d74b', emoji: '🌟' },\n    lucid: { name: 'Lucid Dreams', color: '#af52de', emoji: '🎯' },\n  };\n\n  const info = frequencyInfo[frequencyType];\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n\n  const playPauseAudio = async () => {\n    if (sound == null) {\n      setIsLoading(true);\n      try {\n        // In a real app, you'd load the actual binaural beat audio files\n        const { sound: newSound } = await Audio.Sound.createAsync(\n          // This would be your binaural beat audio files\n          require('../../assets/audio/binaural-placeholder.mp3'), // You'd need to add this\n          { shouldPlay: true, volume }\n        );\n        setSound(newSound);\n        setIsPlaying(true);\n      } catch (error) {\n        console.error('Error loading audio:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      if (isPlaying) {\n        await sound.pauseAsync();\n      } else {\n        await sound.playAsync();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const stopAudio = async () => {\n    if (sound) {\n      await sound.stopAsync();\n      await sound.unloadAsync();\n      setSound(null);\n      setIsPlaying(false);\n      setPosition(0);\n    }\n  };\n\n  const onVolumeChange = async (value: number) => {\n    setVolume(value);\n    if (sound) {\n      await sound.setVolumeAsync(value);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <View style={[styles.container, { borderColor: info.color }]}>\n      <View style={styles.header}>\n        <Text style={styles.emoji}>{info.emoji}</Text>\n        <View style={styles.titleSection}>\n          <Text style={styles.title}>{info.name}</Text>\n          <Text style={styles.frequency}>{frequency} Hz Binaural Beat</Text>\n        </View>\n      </View>\n\n      <View style={styles.controls}>\n        <TouchableOpacity\n          style={[styles.playButton, { backgroundColor: info.color }]}\n          onPress={playPauseAudio}\n          disabled={isLoading}\n        >\n          <Text style={styles.playButtonText}>\n            {isLoading ? '⏳' : isPlaying ? '⏸️' : '▶️'}\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.stopButton} onPress={stopAudio}>\n          <Text style={styles.stopButtonText}>⏹️</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.progressSection}>\n        <Text style={styles.timeText}>{formatTime(position)}</Text>\n        <View style={styles.progressBar}>\n          <View \n            style={[\n              styles.progressFill, \n              { width: `${(position / duration) * 100}%`, backgroundColor: info.color }\n            ]} \n          />\n        </View>\n        <Text style={styles.timeText}>{formatTime(duration)}</Text>\n      </View>\n\n      <View style={styles.volumeSection}>\n        <Text style={styles.volumeLabel}>🔊</Text>\n        <Slider\n          style={styles.volumeSlider}\n          minimumValue={0}\n          maximumValue={1}\n          value={volume}\n          onValueChange={onVolumeChange}\n          minimumTrackTintColor={info.color}\n          maximumTrackTintColor=\"#333\"\n          thumbTintColor={info.color}\n        />\n        <Text style={styles.volumeText}>{Math.round(volume * 100)}%</Text>\n      </View>\n\n      <Text style={styles.description}>\n        This frequency is designed to induce {info.name.toLowerCase()} states through \n        carefully calibrated binaural beats. Use headphones for the best experience.\n      </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#1a1a2e',\n    borderRadius: 16,\n    padding: 20,\n    margin: 10,\n    borderWidth: 2,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  emoji: {\n    fontSize: 32,\n    marginRight: 12,\n  },\n  titleSection: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 4,\n  },\n  frequency: {\n    fontSize: 14,\n    color: '#ccc',\n  },\n  controls: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 20,\n    gap: 20,\n  },\n  playButton: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  playButtonText: {\n    fontSize: 24,\n  },\n  stopButton: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#333',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  stopButtonText: {\n    fontSize: 20,\n  },\n  progressSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20,\n    gap: 10,\n  },\n  timeText: {\n    fontSize: 12,\n    color: '#ccc',\n    minWidth: 40,\n    textAlign: 'center',\n  },\n  progressBar: {\n    flex: 1,\n    height: 4,\n    backgroundColor: '#333',\n    borderRadius: 2,\n  },\n  progressFill: {\n    height: '100%',\n    borderRadius: 2,\n  },\n  volumeSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 15,\n    gap: 10,\n  },\n  volumeLabel: {\n    fontSize: 16,\n  },\n  volumeSlider: {\n    flex: 1,\n    height: 40,\n  },\n  volumeText: {\n    fontSize: 12,\n    color: '#ccc',\n    minWidth: 35,\n    textAlign: 'center',\n  },\n  description: {\n    fontSize: 12,\n    color: '#999',\n    lineHeight: 18,\n    textAlign: 'center',\n    fontStyle: 'italic',\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/src/components/Notification.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/src/components/Notification.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\n\ninterface Props {\n  title: string;\n  message: string;\n  type?: 'info' | 'error' | 'success' | 'warning';\n  onDismiss?: () => void;\n}\n\nexport function Notification({ title, message, type = 'info', onDismiss }: Props) {\n  const typeStyles = {\n    info: { backgroundColor: '#1a1a2e', borderColor: '#4a90e2' },\n    error: { backgroundColor: '#2e1a1a', borderColor: '#e74c3c' },\n    success: { backgroundColor: '#1a2e1a', borderColor: '#32d74b' },\n    warning: { backgroundColor: '#2e2a1a', borderColor: '#ff9500' },\n  };\n\n  return (\n    <View style={[styles.container, typeStyles[type]]}>\n      <View style={styles.content}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.message}>{message}</Text>\n      </View>\n      {onDismiss && (\n        <TouchableOpacity style={styles.dismissButton} onPress={onDismiss}>\n          <Text style={styles.dismissText}>✕</Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    padding: 16,\n    marginHorizontal: 16,\n    marginVertical: 8,\n    borderRadius: 12,\n    borderWidth: 1,\n    alignItems: 'center',\n  },\n  content: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 4,\n  },\n  message: {\n    fontSize: 14,\n    color: '#ccc',\n    lineHeight: 18,\n  },\n  dismissButton: {\n    padding: 4,\n    marginLeft: 12,\n  },\n  dismissText: {\n    color: '#ccc',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/src/config/index.ts",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/src/config/index.ts"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Mobile app configuration\nimport { config } from '@cosmichub/config';\n\nexport const mobileConfig = {\n  // API endpoints - your existing backend will work\n  api: {\n    baseUrl: __DEV__ ? 'http://localhost:8000' : 'https://api.cosmichub.app',\n    timeout: 30000,\n  },\n  \n  // Audio settings for HealWave\n  audio: {\n    defaultVolume: 0.5,\n    maxSessionDuration: 3600, // 1 hour\n    frequencyRanges: {\n      delta: [0.5, 4],    // Deep sleep\n      theta: [4, 8],      // Meditation\n      alpha: [8, 13],     // Relaxation/creativity\n      beta: [13, 30],     // Focus/concentration\n      gamma: [30, 100],   // Heightened awareness\n    },\n  },\n  \n  // Chart rendering settings\n  chart: {\n    defaultSize: 300,\n    maxSize: 400,\n    minSize: 200,\n    colors: {\n      background: '#000014',\n      primary: '#4a90e2',\n      secondary: '#5856d6',\n      accent: '#32d74b',\n      text: '#ffffff',\n      textSecondary: '#cccccc',\n    },\n  },\n  \n  // Feature flags\n  features: {\n    offlineMode: true,\n    pushNotifications: true,\n    biometricAuth: true,\n    darkModeOnly: true, // Mobile app uses dark theme\n  },\n  \n  // Analytics (respecting privacy)\n  analytics: {\n    enabled: true,\n    crashReporting: true,\n    performanceMonitoring: true,\n  },\n};\n\n// Re-export shared config for consistency\nexport { config } from '@cosmichub/config';\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/src/context/AppContext.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/src/context/AppContext.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { createContext, useContext, useReducer, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  // Add other user properties as needed\n}\n\ninterface AppState {\n  user: User | undefined;\n  charts: any[];\n  frequencies: any[];\n  loading: boolean;\n  error: string | undefined;\n}\n\ntype AppAction = \n  | { type: 'SET_USER'; payload: User | undefined }\n  | { type: 'SET_CHARTS'; payload: any[] }\n  | { type: 'ADD_CHART'; payload: any }\n  | { type: 'SET_FREQUENCIES'; payload: any[] }\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | undefined };\n\nconst initialState: AppState = {\n  user: undefined,\n  charts: [],\n  frequencies: [],\n  loading: false,\n  error: undefined,\n};\n\nconst appReducer = (state: AppState, action: AppAction): AppState => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    case 'SET_CHARTS':\n      return { ...state, charts: action.payload };\n    case 'ADD_CHART':\n      return { ...state, charts: [...state.charts, action.payload] };\n    case 'SET_FREQUENCIES':\n      return { ...state, frequencies: action.payload };\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    default:\n      return state;\n  }\n};\n\ninterface AppContextType {\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  actions: {\n    setUser: (user: any) => void;\n    addChart: (chart: any) => void;\n    setLoading: (loading: boolean) => void;\n    setError: (error: string | undefined) => void;\n  };\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport function AppProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  const actions = {\n    setUser: (user: any) => dispatch({ type: 'SET_USER', payload: user }),\n    addChart: (chart: any) => dispatch({ type: 'ADD_CHART', payload: chart }),\n    setLoading: (loading: boolean) => dispatch({ type: 'SET_LOADING', payload: loading }),\n    setError: (error: string | undefined) => dispatch({ type: 'SET_ERROR', payload: error }),\n  };\n\n  return (\n    <AppContext.Provider value={{ state, dispatch, actions }}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n\n// Convenience hooks for specific parts of state\nexport function useAuth() {\n  const { state } = useApp();\n  return state.user;\n}\n\nexport function useCharts() {\n  const { state } = useApp();\n  return state.charts;\n}\n\nexport function useLoading() {\n  const { state } = useApp();\n  return state.loading;\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/apps/mobile/src/services/apiService.ts",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/mobile/src/services/apiService.ts"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { auth } from '@cosmichub/auth';\nimport axios from 'axios';\nimport { mobileConfig } from '../config';\n\n// Lightweight devConsole (mirrors web pattern) to avoid raw console usage in production bundles\n// Reuse web devConsole via lazy dynamic import to avoid duplication\ninterface DevConsole {\n  log?: (...a: unknown[]) => void;\n  warn?: (...a: unknown[]) => void;\n  error: (...a: unknown[]) => void;\n}\n\nlet sharedDevConsole: DevConsole | undefined;\nasync function getDevConsole(): Promise<DevConsole> {\n  if (sharedDevConsole === undefined) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n      const mod: typeof import('../../../astro/src/config/environment') = await import('../../../astro/src/config/environment');\n      sharedDevConsole = mod.devConsole;\n    } catch {\n      /* eslint-disable no-console */ sharedDevConsole = { error: console.error.bind(console) }; /* eslint-enable no-console */\n    }\n  }\n  return sharedDevConsole;\n}\n\nclass MobileApiService {\n  private baseURL: string;\n\n  constructor() {\n    this.baseURL = mobileConfig.api.baseUrl;\n    this.setupInterceptors();\n  }\n\n  private setupInterceptors() {\n    // Request interceptor to add auth token\n    axios.interceptors.request.use(async (config) => {\n      const user = auth.currentUser;\n      if (user) {\n        const token = await user.getIdToken();\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    axios.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        void getDevConsole().then(dc => dc.error('API Error:', error.response?.data ?? error.message));\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Chart generation - same endpoints as your web app\n  async generateChart(birthData: any) {\n    try {\n      const response = await axios.post(`${this.baseURL}/api/charts/generate`, birthData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Synastry analysis\n  async calculateSynastry(person1: any, person2: any) {\n    try {\n      const response = await axios.post(`${this.baseURL}/api/synastry/calculate`, {\n        person1,\n        person2,\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Transit calculations\n  async getTransits(birthData: any, dateRange: any) {\n    try {\n      const response = await axios.post(`${this.baseURL}/api/transits/calculate`, {\n        birthData,\n        dateRange,\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // User data management\n  async saveChart(chartData: any) {\n    try {\n      const response = await axios.post(`${this.baseURL}/api/charts/save`, chartData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getUserCharts() {\n    try {\n      const response = await axios.get(`${this.baseURL}/api/charts/user`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // HealWave frequency data (if you have backend endpoints for this)\n  async getFrequencyPresets() {\n    try {\n      const response = await axios.get(`${this.baseURL}/api/frequencies/presets`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  private handleError(error: any) {\n    if (error.response) {\n      // Server responded with error status\n      return new Error(`Server Error: ${error.response.status} - ${error.response.data.message}`);\n    } else if (error.request) {\n      // Request made but no response received\n      return new Error('Network Error: Unable to reach server');\n    } else {\n      // Something else happened\n      return new Error(`Request Error: ${error.message}`);\n    }\n  }\n}\n\nexport const apiService = new MobileApiService();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/auth/src/SubscriptionProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/auth/src/auth-context.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/auth/src/create-auth-context.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/auth/src/index.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 11,
        "column": 44,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 26,
        "endColumn": 11,
        "fix": { "range": [1047, 1055], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [781, 784], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [781, 784], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 19,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 19,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 49,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 49,
        "endColumn": 33
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 105,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 105,
        "endColumn": 16
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 124,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 124,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Auth, User, onAuthStateChanged, signOut as fbSignOut } from 'firebase/auth';\n// Use the single, centralized Firebase app/auth to avoid duplicate registrations\nimport { app as sharedApp, auth as sharedAuth, hasAuthAvailable } from '@cosmichub/config/firebase';\n\n// Delegate to centralized Firebase config package\nconst app = sharedApp;\nconst authInstance: Auth | undefined = sharedAuth as Auth | undefined;\n\n// Export auth if initialized; otherwise create a safe mock that doesn't throw\nexport const auth: Auth = authInstance || (new Proxy({} as Auth, {\n  get(target, prop) {\n    if (prop === 'currentUser') {\n      return null;\n    }\n    if (prop === 'onAuthStateChanged') {\n      return (callback: any) => {\n        // Call immediately with null to indicate no user\n        callback(null);\n        return () => {}; // Return unsubscribe function\n      };\n    }\n    console.warn('Firebase auth not available - using mock auth instead');\n    return undefined;\n  }\n}) as Auth);\n\nconsole.log('🔥 Firebase Auth initialized:', {\n  hasApp: !!app,\n});\n\nexport interface AuthState {\n  user: User | null;\n  loading: boolean;\n  signOut: () => Promise<void>;\n}\n\n// Local state management for mock authentication\nlet mockUser: User | null = null;\nconst authStateListeners: ((user: User | null) => void)[] = [];\n\n// Store mock user in sessionStorage to persist across page reloads\nconst MOCK_USER_KEY = 'cosmichub_mock_user';\n\nconst loadMockUserFromStorage = (): User | null => {\n  try {\n    const stored = sessionStorage.getItem(MOCK_USER_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.warn('Failed to load mock user from storage:', error);\n  }\n  return null;\n};\n\nconst saveMockUserToStorage = (user: User | null) => {\n  try {\n    if (user) {\n      sessionStorage.setItem(MOCK_USER_KEY, JSON.stringify(user));\n    } else {\n      sessionStorage.removeItem(MOCK_USER_KEY);\n    }\n  } catch (error) {\n    console.warn('Failed to save mock user to storage:', error);\n  }\n};\n\n// Initialize mock user from storage\nmockUser = loadMockUserFromStorage();\n\nconst notifyAuthStateChange = (user: User | null) => {\n  mockUser = user;\n  saveMockUserToStorage(user);\n  console.log('🔔 Auth state changed:', user ? `Mock user: ${user.email}` : 'No user');\n  authStateListeners.forEach(listener => listener(user));\n};\n\nexport const useAuth = (): AuthState => {\n  const [user, setUser] = useState<User | null>(mockUser);\n  const [loading, setLoading] = useState<boolean>(true);\n  const listenerSetupRef = useRef<boolean>(false);\n\n  const signOut = useCallback(async (): Promise<void> => {\n    try {\n      if (authInstance) {\n        await fbSignOut(authInstance);\n      }\n      notifyAuthStateChange(null);\n    } catch (error) {\n      console.error('Sign out failed:', error);\n      // Even if Firebase sign out fails, clear local mock state\n      notifyAuthStateChange(null);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Prevent duplicate listeners\n    if (listenerSetupRef.current) {\n      console.log('🚫 Auth listener already set up, skipping');\n      return;\n    }\n    listenerSetupRef.current = true;\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log('🎯 Setting up auth state listener...');\n    }\n    \n    // Add to local listeners for mock auth\n    const mockAuthListener = (user: User | null) => {\n      console.log('🧪 Mock auth state changed:', user ? user.email : 'null');\n      setUser(user);\n    };\n    authStateListeners.push(mockAuthListener);\n    \n  let unsubscribe: (() => void) | undefined;\n    \n    // Only listen to Firebase auth changes if auth is properly initialized\n  if (authInstance && hasAuthAvailable) {\n      try {\n        unsubscribe = onAuthStateChanged(\n          authInstance,\n          (currentUser) => {\n            if (process.env.NODE_ENV === 'development') {\n              console.log('🔥 Firebase auth state changed:', currentUser ? 'User signed in' : 'No user');\n            }\n            if (currentUser) {\n              setUser(currentUser);\n              setLoading(false);\n            } else if (!mockUser) {\n              // Only clear if we don't have a mock user\n              setUser(null);\n              setLoading(false);\n            }\n          },\n          (error) => {\n            console.error('Auth state change error:', error);\n            setLoading(false);\n          }\n        );\n      } catch (error) {\n        console.warn('Failed to set up auth state listener:', error);\n        setLoading(false);\n      }\n    } else {\n      console.log('🧪 Firebase auth not initialized, using mock auth only');\n      setLoading(false);\n    }\n\n    // Set initial state\n    if (mockUser) {\n      console.log('🧪 Using existing mock user state');\n      setUser(mockUser);\n    }\n    setLoading(false);\n\n    return () => {\n      console.log('🧹 Cleaning up auth listener');\n      // Remove from local listeners\n      const index = authStateListeners.indexOf(mockAuthListener);\n      if (index > -1) {\n        authStateListeners.splice(index, 1);\n      }\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, []);\n\n  return { user, loading, signOut };\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n  appName?: string; // allow passing for context / logging though unused now\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  // Placeholder: could add appName-based logic later\n  return <>{children}</>;\n};\n\n// Auth action functions expected by apps\nexport async function logIn(email: string, password: string): Promise<User> {\n  // Development bypass for testing - remove in production\n  if (email === 'test@test.com' && password === 'test123') {\n    console.log('🧪 Using development mock user');\n    const mockUserData = {\n      uid: 'mock-user-123',\n      email: 'test@test.com',\n      emailVerified: true,\n      displayName: 'Test User',\n      photoURL: null,\n      phoneNumber: null,\n      providerId: 'mock',\n      isAnonymous: false,\n      metadata: {\n        creationTime: new Date().toISOString(),\n        lastSignInTime: new Date().toISOString()\n      },\n      providerData: [],\n      refreshToken: 'mock-refresh-token',\n      tenantId: null\n    } as unknown as User;\n    \n    // Notify all auth state listeners\n    notifyAuthStateChange(mockUserData);\n    return mockUserData;\n  }\n  \n  try {\n    const { signInWithEmailAndPassword } = await import('firebase/auth');\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error('Firebase auth failed, trying mock login:', error);\n    // Fallback to mock for development\n    if (email && password) {\n      console.log('🧪 Using fallback mock user for development');\n      const fallbackMockUser = {\n        uid: `mock-${Date.now()}`,\n        email: email,\n        emailVerified: true,\n        displayName: email.split('@')[0],\n        photoURL: null,\n        phoneNumber: null,\n        providerId: 'mock',\n        isAnonymous: false,\n        metadata: {\n          creationTime: new Date().toISOString(),\n          lastSignInTime: new Date().toISOString()\n        },\n        providerData: [],\n        refreshToken: 'mock-refresh-token',\n        tenantId: null\n      } as unknown as User;\n      \n      // Notify all auth state listeners\n      notifyAuthStateChange(fallbackMockUser);\n      return fallbackMockUser;\n    }\n    throw error;\n  }\n}\n\nexport async function signUp(email: string, password: string): Promise<User> {\n  try {\n    const { createUserWithEmailAndPassword } = await import('firebase/auth');\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error('Firebase sign up failed, using mock:', error);\n    // Fallback to mock for development\n    if (email && password) {\n      console.log('🧪 Using mock sign up for development');\n      const mockNewUser = {\n        uid: `mock-new-${Date.now()}`,\n        email: email,\n        emailVerified: false,\n        displayName: email.split('@')[0],\n        photoURL: null,\n        phoneNumber: null,\n        providerId: 'mock',\n        isAnonymous: false,\n        metadata: {\n          creationTime: new Date().toISOString(),\n          lastSignInTime: new Date().toISOString()\n        },\n        providerData: [],\n        refreshToken: 'mock-refresh-token',\n        tenantId: null\n      } as unknown as User;\n      \n      // Notify all auth state listeners\n      notifyAuthStateChange(mockNewUser);\n      return mockNewUser;\n    }\n    throw error;\n  }\n}\n\nexport async function logOut(): Promise<void> {\n  try {\n    if (authInstance) {\n      await fbSignOut(authInstance);\n    }\n    notifyAuthStateChange(null);\n  } catch (error) {\n    console.error('Log out failed:', error);\n    // Even if Firebase sign out fails, clear local mock state\n    notifyAuthStateChange(null);\n  }\n}\n\n// Export consolidated subscription provider\nexport { SubscriptionProvider, useSubscription, type SubscriptionState } from './SubscriptionProvider';\n\nexport * from 'firebase/auth';",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/auth/src/subscription-utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 96,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 99,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [466, 469], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [466, 469], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export interface UserSubscription {\n  tier: 'free' | 'premium' | 'elite';\n  status: 'active' | 'canceled' | 'past_due' | 'incomplete';\n  currentPeriodEnd: Date;\n  customerId?: string;\n  subscriptionId?: string;\n}\n\nexport const getUserTier = (subscription: UserSubscription | null): string => {\n  return subscription?.status === 'active' ? subscription.tier : 'free';\n};\n\nexport const hasFeatureAccess = (userTier: string, requiredTier: string, tiers: Record<string, any>): boolean => {\n  const tierOrder = Object.keys(tiers);\n  const userIndex = tierOrder.indexOf(userTier);\n  const requiredIndex = tierOrder.indexOf(requiredTier);\n  return userIndex >= requiredIndex;\n};\n\n// Astro app tier configuration\n// DEPRECATED local tier constants removed – use centralized subscriptions package instead.\nexport { COSMICHUB_TIERS as ASTRO_TIERS, HEALWAVE_TIERS } from '@cosmichub/subscriptions';\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/accessibility-testing.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'within' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 183,
        "column": 22,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 183,
        "endColumn": 97,
        "fix": { "range": [4975, 4992], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'firstElement' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 202,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 202,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'lastElement' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 203,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 203,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'audit' has no 'await' expression.",
        "line": 385,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 385,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": {
              "range": [11833, 11903],
              "text": "audit(container: HTMLElement): AccessibilityAuditResult"
            },
            "desc": "Remove 'async'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "/**\n * Advanced Accessibility Testing and Compliance Framework\n * WCAG 2.1 AA/AAA compliance testing with automated checks\n */\n\nimport React from 'react';\nimport { screen, within } from '@testing-library/react';\n\n// WCAG Guidelines implementation\nexport interface AccessibilityStandards {\n  level: 'AA' | 'AAA';\n  guidelines: {\n    perceivable: boolean;\n    operable: boolean;\n    understandable: boolean;\n    robust: boolean;\n  };\n  colorContrast: {\n    normalText: number; // 4.5:1 for AA, 7:1 for AAA\n    largeText: number;  // 3:1 for AA, 4.5:1 for AAA\n  };\n  focusManagement: boolean;\n  keyboardNavigation: boolean;\n  screenReaderSupport: boolean;\n  semanticHTML: boolean;\n}\n\nconst WCAG_STANDARDS: Record<string, AccessibilityStandards> = {\n  'AA': {\n    level: 'AA',\n    guidelines: {\n      perceivable: true,\n      operable: true,\n      understandable: true,\n      robust: true\n    },\n    colorContrast: {\n      normalText: 4.5,\n      largeText: 3.0\n    },\n    focusManagement: true,\n    keyboardNavigation: true,\n    screenReaderSupport: true,\n    semanticHTML: true\n  },\n  'AAA': {\n    level: 'AAA',\n    guidelines: {\n      perceivable: true,\n      operable: true,\n      understandable: true,\n      robust: true\n    },\n    colorContrast: {\n      normalText: 7.0,\n      largeText: 4.5\n    },\n    focusManagement: true,\n    keyboardNavigation: true,\n    screenReaderSupport: true,\n    semanticHTML: true\n  }\n};\n\n// Accessibility audit result interface\nexport interface AccessibilityAuditResult {\n  passed: boolean;\n  level: 'AA' | 'AAA';\n  score: number; // 0-100\n  violations: AccessibilityViolation[];\n  warnings: AccessibilityWarning[];\n  recommendations: string[];\n  summary: {\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    warningTests: number;\n  };\n}\n\nexport interface AccessibilityViolation {\n  id: string;\n  severity: 'critical' | 'serious' | 'moderate' | 'minor';\n  description: string;\n  element?: HTMLElement;\n  wcagRule: string;\n  howToFix: string;\n  impact: string;\n}\n\nexport interface AccessibilityWarning {\n  id: string;\n  description: string;\n  element?: HTMLElement;\n  recommendation: string;\n}\n\n// Color contrast calculator\nexport class ColorContrastAnalyzer {\n  // Convert RGB to relative luminance\n  private static getLuminance(r: number, g: number, b: number): number {\n    const [rs, gs, bs] = [r, g, b].map(c => {\n      c = c / 255;\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n    });\n    return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;\n  }\n\n  // Calculate contrast ratio between two colors\n  static calculateContrast(color1: string, color2: string): number {\n    const rgb1 = this.hexToRgb(color1);\n    const rgb2 = this.hexToRgb(color2);\n    \n    if (!rgb1 || !rgb2) return 0;\n\n    const lum1 = this.getLuminance(rgb1.r, rgb1.g, rgb1.b);\n    const lum2 = this.getLuminance(rgb2.r, rgb2.g, rgb2.b);\n\n    const brightest = Math.max(lum1, lum2);\n    const darkest = Math.min(lum1, lum2);\n\n    return (brightest + 0.05) / (darkest + 0.05);\n  }\n\n  // Convert hex color to RGB\n  private static hexToRgb(hex: string): { r: number; g: number; b: number } | null {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  // Get computed color from element\n  static getElementColors(element: HTMLElement): { foreground: string; background: string } {\n    const computedStyle = window.getComputedStyle(element);\n    return {\n      foreground: computedStyle.color,\n      background: computedStyle.backgroundColor\n    };\n  }\n\n  // Check if contrast meets WCAG standards\n  static meetsWCAG(contrast: number, level: 'AA' | 'AAA', isLargeText: boolean = false): boolean {\n    const standards = WCAG_STANDARDS[level];\n    const required = isLargeText ? standards.colorContrast.largeText : standards.colorContrast.normalText;\n    return contrast >= required;\n  }\n}\n\n// Focus management analyzer\nexport class FocusManagementAnalyzer {\n  // Check if element is focusable\n  static isFocusable(element: HTMLElement): boolean {\n    const focusableSelectors = [\n      'a[href]',\n      'button',\n      'input',\n      'select',\n      'textarea',\n      '[tabindex]:not([tabindex=\"-1\"])',\n      '[contenteditable]'\n    ];\n\n    return focusableSelectors.some(selector => element.matches(selector)) &&\n           !element.hasAttribute('disabled') &&\n           element.tabIndex !== -1;\n  }\n\n  // Get all focusable elements in order\n  static getFocusableElements(container: HTMLElement): HTMLElement[] {\n    const focusableSelectors = [\n      'a[href]',\n      'button:not([disabled])',\n      'input:not([disabled])',\n      'select:not([disabled])',\n      'textarea:not([disabled])',\n      '[tabindex]:not([tabindex=\"-1\"])',\n      '[contenteditable]'\n    ].join(', ');\n\n    const elements = Array.from(container.querySelectorAll(focusableSelectors)) as HTMLElement[];\n    \n    // Sort by tabindex\n    return elements.sort((a, b) => {\n      const aTab = parseInt(a.getAttribute('tabindex') || '0');\n      const bTab = parseInt(b.getAttribute('tabindex') || '0');\n      \n      if (aTab === 0 && bTab === 0) return 0;\n      if (aTab === 0) return 1;\n      if (bTab === 0) return -1;\n      return aTab - bTab;\n    });\n  }\n\n  // Check focus trap implementation\n  static checkFocusTrap(container: HTMLElement): boolean {\n    const focusableElements = this.getFocusableElements(container);\n    if (focusableElements.length === 0) return false;\n\n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n\n    // Check if Tab from last element focuses first element\n    // Check if Shift+Tab from first element focuses last element\n    // This would require actual browser testing, so we'll check for event listeners\n    return container.hasAttribute('role') && \n           (container.getAttribute('role') === 'dialog' || \n            container.getAttribute('role') === 'alertdialog');\n  }\n}\n\n// Semantic HTML analyzer\nexport class SemanticHTMLAnalyzer {\n  // Check for semantic HTML usage\n  static analyzeSemantic(container: HTMLElement): {\n    semanticElements: string[];\n    nonSemanticElements: string[];\n    score: number;\n  } {\n    const semanticTags = [\n      'header', 'nav', 'main', 'aside', 'section', 'article', \n      'footer', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n      'button', 'input', 'select', 'textarea', 'label',\n      'table', 'thead', 'tbody', 'th', 'td', 'caption',\n      'figure', 'figcaption', 'time', 'address'\n    ];\n\n    const nonSemanticTags = ['div', 'span'];\n\n    const allElements = Array.from(container.querySelectorAll('*'));\n    const semanticElements: string[] = [];\n    const nonSemanticElements: string[] = [];\n\n    allElements.forEach(element => {\n      const tagName = element.tagName.toLowerCase();\n      if (semanticTags.includes(tagName)) {\n        semanticElements.push(tagName);\n      } else if (nonSemanticTags.includes(tagName) && !element.getAttribute('role')) {\n        nonSemanticElements.push(tagName);\n      }\n    });\n\n    const totalElements = semanticElements.length + nonSemanticElements.length;\n    const score = totalElements > 0 ? (semanticElements.length / totalElements) * 100 : 100;\n\n    return { semanticElements, nonSemanticElements, score };\n  }\n\n  // Check heading hierarchy\n  static checkHeadingHierarchy(container: HTMLElement): {\n    valid: boolean;\n    issues: string[];\n  } {\n    const headings = Array.from(container.querySelectorAll('h1, h2, h3, h4, h5, h6'));\n    const issues: string[] = [];\n\n    if (headings.length === 0) {\n      return { valid: true, issues: [] };\n    }\n\n    let previousLevel = 0;\n    headings.forEach((heading, index) => {\n      const level = parseInt(heading.tagName.charAt(1));\n      \n      if (index === 0 && level !== 1) {\n        issues.push('First heading should be h1');\n      }\n      \n      if (level > previousLevel + 1) {\n        issues.push(`Heading level ${level} follows h${previousLevel}, skipping levels`);\n      }\n      \n      previousLevel = level;\n    });\n\n    return { valid: issues.length === 0, issues };\n  }\n}\n\n// ARIA analyzer\nexport class ARIAAnalyzer {\n  // Check ARIA attributes\n  static analyzeARIA(container: HTMLElement): {\n    validARIA: boolean;\n    issues: string[];\n    recommendations: string[];\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Check for invalid ARIA attributes\n    const ariaElements = Array.from(container.querySelectorAll('[class*=\"aria-\"], [aria-]'));\n    \n    ariaElements.forEach(element => {\n      const attributes = Array.from(element.attributes);\n      \n      attributes.forEach(attr => {\n        if (attr.name.startsWith('aria-')) {\n          // Check for common ARIA mistakes\n          if (attr.name === 'aria-labelledby' && !document.getElementById(attr.value)) {\n            issues.push(`aria-labelledby references non-existent element: ${attr.value}`);\n          }\n          \n          if (attr.name === 'aria-describedby' && !document.getElementById(attr.value)) {\n            issues.push(`aria-describedby references non-existent element: ${attr.value}`);\n          }\n        }\n      });\n\n      // Check for missing ARIA labels\n      const role = element.getAttribute('role');\n      if (role && ['button', 'link', 'tab'].includes(role)) {\n        const hasLabel = element.hasAttribute('aria-label') || \n                         element.hasAttribute('aria-labelledby') ||\n                         element.textContent?.trim();\n        \n        if (!hasLabel) {\n          issues.push(`Element with role=\"${role}\" missing accessible name`);\n        }\n      }\n    });\n\n    // Check for interactive elements without proper ARIA\n    const interactiveElements = Array.from(container.querySelectorAll(\n      'button, input, select, textarea, [role=\"button\"], [role=\"link\"], [role=\"tab\"]'\n    ));\n\n    interactiveElements.forEach(element => {\n      if (!element.hasAttribute('aria-label') && \n          !element.hasAttribute('aria-labelledby') &&\n          !element.textContent?.trim()) {\n        recommendations.push(`Add aria-label to ${element.tagName.toLowerCase()}`);\n      }\n    });\n\n    return {\n      validARIA: issues.length === 0,\n      issues,\n      recommendations\n    };\n  }\n\n  // Check for proper landmark usage\n  static checkLandmarks(container: HTMLElement): {\n    hasLandmarks: boolean;\n    landmarks: string[];\n    missing: string[];\n  } {\n    const expectedLandmarks = ['main', 'navigation', 'banner', 'contentinfo'];\n    const foundLandmarks: string[] = [];\n\n    // Check for semantic landmarks\n    if (container.querySelector('main')) foundLandmarks.push('main');\n    if (container.querySelector('nav')) foundLandmarks.push('navigation');\n    if (container.querySelector('header')) foundLandmarks.push('banner');\n    if (container.querySelector('footer')) foundLandmarks.push('contentinfo');\n\n    // Check for ARIA landmarks\n    if (container.querySelector('[role=\"main\"]')) foundLandmarks.push('main');\n    if (container.querySelector('[role=\"navigation\"]')) foundLandmarks.push('navigation');\n    if (container.querySelector('[role=\"banner\"]')) foundLandmarks.push('banner');\n    if (container.querySelector('[role=\"contentinfo\"]')) foundLandmarks.push('contentinfo');\n\n    const missing = expectedLandmarks.filter(landmark => !foundLandmarks.includes(landmark));\n\n    return {\n      hasLandmarks: foundLandmarks.length > 0,\n      landmarks: Array.from(new Set(foundLandmarks)),\n      missing\n    };\n  }\n}\n\n// Main accessibility auditor\nexport class AccessibilityAuditor {\n  private standards: AccessibilityStandards;\n\n  constructor(level: 'AA' | 'AAA' = 'AA') {\n    this.standards = WCAG_STANDARDS[level];\n  }\n\n  // Main audit function\n  async audit(container: HTMLElement): Promise<AccessibilityAuditResult> {\n    const violations: AccessibilityViolation[] = [];\n    const warnings: AccessibilityWarning[] = [];\n    const recommendations: string[] = [];\n\n    let totalTests = 0;\n    let passedTests = 0;\n\n    // 1. Color contrast checks\n    totalTests++;\n    const contrastResults = this.checkColorContrast(container);\n    if (contrastResults.passed) {\n      passedTests++;\n    } else {\n      violations.push(...contrastResults.violations);\n    }\n\n    // 2. Focus management checks\n    totalTests++;\n    const focusResults = this.checkFocusManagement(container);\n    if (focusResults.passed) {\n      passedTests++;\n    } else {\n      violations.push(...focusResults.violations);\n      warnings.push(...focusResults.warnings);\n    }\n\n    // 3. Semantic HTML checks\n    totalTests++;\n    const semanticResults = this.checkSemanticHTML(container);\n    if (semanticResults.score >= 80) {\n      passedTests++;\n    } else {\n      warnings.push({\n        id: 'semantic-html',\n        description: `Semantic HTML score: ${semanticResults.score.toFixed(1)}%`,\n        recommendation: 'Use more semantic HTML elements instead of div/span'\n      });\n    }\n\n    // 4. ARIA checks\n    totalTests++;\n    const ariaResults = ARIAAnalyzer.analyzeARIA(container);\n    if (ariaResults.validARIA) {\n      passedTests++;\n    } else {\n      violations.push(...ariaResults.issues.map(issue => ({\n        id: 'aria-violation',\n        severity: 'serious' as const,\n        description: issue,\n        wcagRule: '4.1.2',\n        howToFix: 'Fix ARIA attribute references and add missing labels',\n        impact: 'Screen readers may not work correctly'\n      })));\n    }\n    recommendations.push(...ariaResults.recommendations);\n\n    // 5. Keyboard navigation checks\n    totalTests++;\n    const keyboardResults = this.checkKeyboardNavigation(container);\n    if (keyboardResults.passed) {\n      passedTests++;\n    } else {\n      violations.push(...keyboardResults.violations);\n    }\n\n    // 6. Heading hierarchy checks\n    totalTests++;\n    const headingResults = SemanticHTMLAnalyzer.checkHeadingHierarchy(container);\n    if (headingResults.valid) {\n      passedTests++;\n    } else {\n      warnings.push(...headingResults.issues.map(issue => ({\n        id: 'heading-hierarchy',\n        description: issue,\n        recommendation: 'Fix heading hierarchy to follow logical order'\n      })));\n    }\n\n    const failedTests = totalTests - passedTests;\n    const warningTests = warnings.length;\n    const score = (passedTests / totalTests) * 100;\n\n    return {\n      passed: violations.length === 0,\n      level: this.standards.level,\n      score,\n      violations,\n      warnings,\n      recommendations: Array.from(new Set(recommendations)),\n      summary: {\n        totalTests,\n        passedTests,\n        failedTests,\n        warningTests\n      }\n    };\n  }\n\n  private checkColorContrast(container: HTMLElement): {\n    passed: boolean;\n    violations: AccessibilityViolation[];\n  } {\n    const violations: AccessibilityViolation[] = [];\n    const textElements = Array.from(container.querySelectorAll('*')).filter(\n      (element: Element) => {\n        const el = element as HTMLElement;\n        return el.textContent?.trim() && \n               window.getComputedStyle(el).display !== 'none';\n      }\n    ) as HTMLElement[];\n\n    textElements.forEach(element => {\n      const colors = ColorContrastAnalyzer.getElementColors(element);\n      const style = window.getComputedStyle(element);\n      const fontSize = parseFloat(style.fontSize);\n      const fontWeight = style.fontWeight;\n      \n      const isLargeText = fontSize >= 18 || (fontSize >= 14 && fontWeight === 'bold');\n      \n      // This is a simplified check - in reality you'd need to parse CSS colors properly\n      if (colors.foreground && colors.background) {\n        // Placeholder for actual contrast calculation\n        const contrastRatio = 4.5; // This would be calculated properly\n        \n        if (!ColorContrastAnalyzer.meetsWCAG(contrastRatio, this.standards.level, isLargeText)) {\n          violations.push({\n            id: 'color-contrast',\n            severity: 'serious',\n            description: `Text contrast ratio ${contrastRatio.toFixed(2)}:1 is below WCAG ${this.standards.level} standards`,\n            element,\n            wcagRule: '1.4.3',\n            howToFix: 'Increase color contrast between text and background',\n            impact: 'Users with visual impairments may not be able to read the text'\n          });\n        }\n      }\n    });\n\n    return {\n      passed: violations.length === 0,\n      violations\n    };\n  }\n\n  private checkFocusManagement(container: HTMLElement): {\n    passed: boolean;\n    violations: AccessibilityViolation[];\n    warnings: AccessibilityWarning[];\n  } {\n    const violations: AccessibilityViolation[] = [];\n    const warnings: AccessibilityWarning[] = [];\n\n    const focusableElements = FocusManagementAnalyzer.getFocusableElements(container);\n    \n    // Check for focus indicators\n    focusableElements.forEach(element => {\n      const style = window.getComputedStyle(element, ':focus');\n      if (!style.outline || style.outline === 'none') {\n        warnings.push({\n          id: 'focus-indicator',\n          description: 'Element may lack visible focus indicator',\n          element,\n          recommendation: 'Ensure focusable elements have visible focus indicators'\n        });\n      }\n    });\n\n    // Check for skip links\n    const skipLinks = container.querySelectorAll('a[href^=\"#\"]');\n    if (focusableElements.length > 5 && skipLinks.length === 0) {\n      warnings.push({\n        id: 'skip-links',\n        description: 'Consider adding skip links for keyboard navigation',\n        recommendation: 'Add skip links to main content for keyboard users'\n      });\n    }\n\n    return {\n      passed: violations.length === 0,\n      violations,\n      warnings\n    };\n  }\n\n  private checkSemanticHTML(container: HTMLElement): { score: number } {\n    return SemanticHTMLAnalyzer.analyzeSemantic(container);\n  }\n\n  private checkKeyboardNavigation(container: HTMLElement): {\n    passed: boolean;\n    violations: AccessibilityViolation[];\n  } {\n    const violations: AccessibilityViolation[] = [];\n\n    // Check for keyboard traps\n    const modals = container.querySelectorAll('[role=\"dialog\"], [role=\"alertdialog\"]');\n    modals.forEach(modal => {\n      if (!FocusManagementAnalyzer.checkFocusTrap(modal as HTMLElement)) {\n        violations.push({\n          id: 'focus-trap',\n          severity: 'critical',\n          description: 'Modal dialog may not properly trap focus',\n          element: modal as HTMLElement,\n          wcagRule: '2.1.2',\n          howToFix: 'Implement proper focus trapping in modal dialogs',\n          impact: 'Keyboard users may lose focus context'\n        });\n      }\n    });\n\n    // Check for custom interactive elements with proper keyboard support\n    const customInteractive = container.querySelectorAll('[role=\"button\"], [role=\"link\"], [role=\"tab\"]');\n    customInteractive.forEach(element => {\n      if (!element.hasAttribute('tabindex')) {\n        violations.push({\n          id: 'keyboard-access',\n          severity: 'serious',\n          description: 'Custom interactive element may not be keyboard accessible',\n          element: element as HTMLElement,\n          wcagRule: '2.1.1',\n          howToFix: 'Add tabindex=\"0\" and keyboard event handlers',\n          impact: 'Element cannot be reached by keyboard users'\n        });\n      }\n    });\n\n    return {\n      passed: violations.length === 0,\n      violations\n    };\n  }\n}\n\n// React hook for accessibility testing\nexport function useAccessibilityAuditor(level: 'AA' | 'AAA' = 'AA') {\n  const auditor = React.useMemo(() => new AccessibilityAuditor(level), [level]);\n\n  const auditElement = React.useCallback(async (element: HTMLElement) => {\n    return await auditor.audit(element);\n  }, [auditor]);\n\n  const auditComponent = React.useCallback(async (testId: string) => {\n    const element = screen.getByTestId(testId);\n    return await auditor.audit(element);\n  }, [auditor]);\n\n  return { auditElement, auditComponent };\n}\n\n// Accessibility testing utilities\nexport const AccessibilityTestUtils = {\n  ColorContrastAnalyzer,\n  FocusManagementAnalyzer,\n  SemanticHTMLAnalyzer,\n  ARIAAnalyzer,\n  AccessibilityAuditor,\n  WCAG_STANDARDS\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/api.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 186,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 186,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.",
        "line": 189,
        "column": 25,
        "nodeType": "LogicalExpression",
        "messageId": "unsafeArgument",
        "endLine": 189,
        "endColumn": 75
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .message on an `any` value.",
        "line": 189,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 189,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .error on an `any` value.",
        "line": 189,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 189,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 193,
        "column": 9,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 193,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .data on an `any` value.",
        "line": 193,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 193,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 195,
        "column": 9,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 195,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .message on an `any` value.",
        "line": 195,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 195,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/only-throw-error",
        "severity": 2,
        "message": "Expected an error object to be thrown.",
        "line": 198,
        "column": 13,
        "nodeType": "TSAsExpression",
        "messageId": "object",
        "endLine": 202,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * API configuration and client setup\n */\n\nimport { config } from './config';\n// Local fallback to avoid cross-package rootDir limitations; kept in sync with shared utility type\ntype UnknownRecord = Record<string, unknown>;\n\nexport interface ApiResponse<T = unknown> {\n  data: T;\n  success: boolean;\n  message?: string;\n  error?: string;\n}\n\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: unknown;\n}\n\nexport interface RequestOptions {\n  headers?: Record<string, string>;\n  timeout?: number;\n  retries?: number;\n  signal?: AbortSignal;\n}\n\n// API endpoints configuration\nexport const API_ENDPOINTS = {\n  // Authentication\n  auth: {\n    login: '/auth/login',\n    logout: '/auth/logout',\n    register: '/auth/register',\n    refresh: '/auth/refresh',\n    verify: '/auth/verify',\n    forgotPassword: '/auth/forgot-password',\n    resetPassword: '/auth/reset-password'\n  },\n  \n  // Charts\n  charts: {\n    list: '/charts',\n    create: '/charts',\n    get: (id: string) => `/charts/${id}`,\n    update: (id: string) => `/charts/${id}`,\n    delete: (id: string) => `/charts/${id}`,\n    calculate: '/charts/calculate',\n    export: (id: string) => `/charts/${id}/export`,\n    interpretation: (id: string) => `/charts/${id}/interpretation`\n  },\n  \n  // AI Services\n  ai: {\n    generateInterpretation: '/ai/generate-interpretation',\n    analyzeChart: '/ai/analyze-chart',\n    askQuestion: '/ai/ask-question',\n    history: (chartId: string) => `/ai/interpretation-history/${chartId}`,\n    regenerateSection: (chartId: string, section: string) => `/ai/regenerate-section/${chartId}/${section}`,\n    availableSections: '/ai/available-sections',\n    health: '/ai/health'\n  },\n  \n  // User Management\n  users: {\n    profile: '/users/profile',\n    updateProfile: '/users/profile',\n    preferences: '/users/preferences',\n    subscription: '/users/subscription',\n    usage: '/users/usage',\n    delete: '/users/delete'\n  },\n  \n  // Subscriptions\n  subscriptions: {\n    plans: '/subscriptions/plans',\n    subscribe: '/subscriptions/subscribe',\n    cancel: '/subscriptions/cancel',\n    modify: '/subscriptions/modify',\n    invoices: '/subscriptions/invoices',\n    usage: '/subscriptions/usage'\n  },\n  \n  // Astrology Services\n  astro: {\n    calculate: '/astro/calculate',\n    transits: '/astro/transits',\n    progressions: '/astro/progressions',\n    composites: '/astro/composites',\n    synastry: '/astro/synastry',\n    relocation: '/astro/relocation',\n    rectification: '/astro/rectification'\n  },\n  \n  // Human Design\n  humanDesign: {\n    calculate: '/human-design/calculate',\n    analysis: '/human-design/analysis',\n    centers: '/human-design/centers',\n    channels: '/human-design/channels',\n    gates: '/human-design/gates'\n  },\n  \n  // Gene Keys\n  geneKeys: {\n    calculate: '/gene-keys/calculate',\n    profile: '/gene-keys/profile',\n    activation: '/gene-keys/activation',\n    contemplation: '/gene-keys/contemplation'\n  },\n  \n  // Numerology\n  numerology: {\n    calculate: '/numerology/calculate',\n    lifePath: '/numerology/life-path',\n    expression: '/numerology/expression',\n    soulUrge: '/numerology/soul-urge',\n    personalYear: '/numerology/personal-year'\n  },\n  \n  // Integrations\n  integrations: {\n    healwave: {\n      connect: '/integrations/healwave/connect',\n      sync: '/integrations/healwave/sync',\n      status: '/integrations/healwave/status'\n    }\n  }\n} as const;\n\n// Create API client class\nexport class ApiClient {\n  private baseUrl: string;\n  private defaultHeaders: Record<string, string>;\n  private authToken: string | null = null;\n\n  constructor(baseUrl?: string) {\n    this.baseUrl = baseUrl || config.api.baseUrl;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  // Set authentication token\n  setAuthToken(token: string | null) {\n    this.authToken = token;\n    if (token) {\n      this.defaultHeaders['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete this.defaultHeaders['Authorization'];\n    }\n  }\n\n  // Get authentication token from localStorage\n  private getStoredToken(): string | null {\n    if (typeof window === 'undefined') return null;\n    return localStorage.getItem('authToken');\n  }\n\n  // Build full URL\n  private buildUrl(endpoint: string): string {\n    return `${this.baseUrl}${endpoint}`;\n  }\n\n  // Build request headers\n  private buildHeaders(options?: RequestOptions): Record<string, string> {\n    const token = this.authToken || this.getStoredToken();\n    const headers = { ...this.defaultHeaders };\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    if (options?.headers) {\n      Object.assign(headers, options.headers);\n    }\n    \n    return headers;\n  }\n\n  // Handle API response\n  private async handleResponse<T>(response: Response): Promise<ApiResponse<T>> {\n    try {\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.message || data.error || 'API request failed');\n      }\n      \n      return {\n        data: data.data || data,\n        success: true,\n        message: data.message\n      };\n    } catch (error) {\n      throw {\n        code: response.status.toString(),\n        message: error instanceof Error ? error.message : 'Unknown error',\n        details: error\n      } as ApiError;\n    }\n  }\n\n  // Retry logic\n  private async withRetry<T>(\n    fn: () => Promise<T>,\n    retries: number = config.api.retries\n  ): Promise<T> {\n    try {\n      return await fn();\n    } catch (error) {\n      if (retries > 0 && this.isRetryableError(error)) {\n        await this.delay(1000 * (config.api.retries - retries + 1));\n        return this.withRetry(fn, retries - 1);\n      }\n      throw error;\n    }\n  }\n\n  // Check if error is retryable\n  private isRetryableError(error: unknown): boolean {\n    if (typeof error === 'object' && error !== null && 'code' in error) {\n      const code = String((error as { code: unknown }).code);\n      const retryableCodes = ['500', '502', '503', '504', 'TIMEOUT'];\n      return retryableCodes.includes(code);\n    }\n    return false;\n  }\n\n  // Delay utility\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // HTTP Methods\n  async get<T>(endpoint: string, options?: RequestOptions): Promise<ApiResponse<T>> {\n    return this.withRetry(async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), options?.timeout || config.api.timeout);\n      \n      try {\n        const response = await fetch(this.buildUrl(endpoint), {\n          method: 'GET',\n          headers: this.buildHeaders(options),\n          signal: options?.signal || controller.signal\n        });\n        \n        return this.handleResponse<T>(response);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    }, options?.retries);\n  }\n\n  async post<T, B = UnknownRecord>(endpoint: string, data?: B, options?: RequestOptions): Promise<ApiResponse<T>> {\n    return this.withRetry(async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), options?.timeout || config.api.timeout);\n      \n      try {\n        const response = await fetch(this.buildUrl(endpoint), {\n          method: 'POST',\n          headers: this.buildHeaders(options),\n          body: data ? JSON.stringify(data) : null,\n          signal: options?.signal || controller.signal\n        });\n        \n        return this.handleResponse<T>(response);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    }, options?.retries);\n  }\n\n  async put<T, B = UnknownRecord>(endpoint: string, data?: B, options?: RequestOptions): Promise<ApiResponse<T>> {\n    return this.withRetry(async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), options?.timeout || config.api.timeout);\n      \n      try {\n        const response = await fetch(this.buildUrl(endpoint), {\n          method: 'PUT',\n          headers: this.buildHeaders(options),\n          body: data ? JSON.stringify(data) : null,\n          signal: options?.signal || controller.signal\n        });\n        \n        return this.handleResponse<T>(response);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    }, options?.retries);\n  }\n\n  async delete<T>(endpoint: string, options?: RequestOptions): Promise<ApiResponse<T>> {\n    return this.withRetry(async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), options?.timeout || config.api.timeout);\n      \n      try {\n        const response = await fetch(this.buildUrl(endpoint), {\n          method: 'DELETE',\n          headers: this.buildHeaders(options),\n          signal: options?.signal || controller.signal\n        });\n        \n        return this.handleResponse<T>(response);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    }, options?.retries);\n  }\n\n  // Upload file\n  async upload<T>(endpoint: string, file: File, options?: RequestOptions): Promise<ApiResponse<T>> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const headers = this.buildHeaders(options);\n    delete headers['Content-Type']; // Let browser set multipart boundary\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), options?.timeout || config.api.timeout);\n    \n    try {\n      const response = await fetch(this.buildUrl(endpoint), {\n        method: 'POST',\n        headers,\n        body: formData,\n        signal: options?.signal || controller.signal\n      });\n      \n      return this.handleResponse<T>(response);\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  }\n}\n\n// Create default API client instance\nexport const apiClient = new ApiClient();\n\n// Helper functions for common API operations\nexport const api = {\n  // Authentication helpers\n  auth: {\n    login: (credentials: { email: string; password: string }) =>\n      apiClient.post(API_ENDPOINTS.auth.login, credentials),\n    \n    register: (userData: { email: string; password: string; name: string }) =>\n      apiClient.post(API_ENDPOINTS.auth.register, userData),\n    \n    logout: () => apiClient.post(API_ENDPOINTS.auth.logout),\n    \n    refresh: () => apiClient.post(API_ENDPOINTS.auth.refresh),\n    \n    verify: (token: string) =>\n      apiClient.post(API_ENDPOINTS.auth.verify, { token })\n  },\n  \n  // Chart helpers\n  charts: {\n    list: () => apiClient.get(API_ENDPOINTS.charts.list),\n    \n  create: <TBody = UnknownRecord>(chartData: TBody) =>\n      apiClient.post(API_ENDPOINTS.charts.create, chartData),\n    \n    get: (id: string) =>\n      apiClient.get(API_ENDPOINTS.charts.get(id)),\n    \n  update: <TBody = UnknownRecord>(id: string, data: TBody) =>\n      apiClient.put(API_ENDPOINTS.charts.update(id), data),\n    \n    delete: (id: string) =>\n      apiClient.delete(API_ENDPOINTS.charts.delete(id)),\n    \n  calculate: <TBody = UnknownRecord>(params: TBody) =>\n      apiClient.post(API_ENDPOINTS.charts.calculate, params)\n  },\n  \n  // AI helpers\n  ai: {\n  generateInterpretation: <TBody = UnknownRecord>(request: TBody) =>\n      apiClient.post(API_ENDPOINTS.ai.generateInterpretation, request),\n    \n  analyzeChart: <TBody = UnknownRecord>(request: TBody) =>\n      apiClient.post(API_ENDPOINTS.ai.analyzeChart, request),\n    \n  askQuestion: <TChart = UnknownRecord>(question: string, chartData: TChart) =>\n      apiClient.post(API_ENDPOINTS.ai.askQuestion, { question, chartData }),\n    \n    getHistory: (chartId: string) =>\n      apiClient.get(API_ENDPOINTS.ai.history(chartId)),\n    \n    regenerateSection: (chartId: string, section: string) =>\n      apiClient.post(API_ENDPOINTS.ai.regenerateSection(chartId, section)),\n    \n    getAvailableSections: () =>\n      apiClient.get(API_ENDPOINTS.ai.availableSections)\n  }\n};\n\nexport default apiClient;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/background-sync-enhanced.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unsafe-member-access').",
        "line": 5,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [211, 255], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/strict-boolean-expressions').",
        "line": 5,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [255, 302], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from '@typescript-eslint/prefer-nullish-coalescing').",
        "line": 5,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [302, 348], "text": "" }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 10,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [548, 579], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 228,
        "column": 57,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 228,
        "endColumn": 80,
        "fix": { "range": [7283, 7293], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 228,
        "column": 89,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 228,
        "endColumn": 112,
        "fix": { "range": [7315, 7325], "text": "" }
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 243,
        "column": 36,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 243,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [7966, 7968], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 256,
        "column": 18,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 256,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [8483, 8485], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'result' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 263,
        "column": 65,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 263,
        "endColumn": 71
      },
      {
        "ruleId": "eqeqeq",
        "severity": 2,
        "message": "Expected '!==' and instead saw '!='.",
        "line": 275,
        "column": 36,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 275,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "replaceOperator",
            "data": { "expectedOperator": "!==", "actualOperator": "!=" },
            "fix": { "range": [9295, 9297], "text": "!==" },
            "desc": "Use '!==' instead of '!='."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'addToSyncQueue' has no 'await' expression.",
        "line": 69,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 69,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": {
              "range": [2369, 2484],
              "text": "addToSyncQueue(item: Omit<SyncQueueItem, 'id' | 'retryCount' | 'createdAt' | 'nextRetryAt'>): string"
            },
            "desc": "Remove 'async'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'handleUserDataSyncSuccess' has no 'await' expression.",
        "line": 253,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 253,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": {
              "range": [8258, 8345],
              "text": "handleUserDataSyncSuccess(item: SyncQueueItem, result: SyncResult): void"
            },
            "desc": "Remove 'async'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 339,
        "column": 21,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 339,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 409,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "anyAssignment",
        "endLine": 409,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 415,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "anyAssignment",
        "endLine": 415,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 456,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 456,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15180, 15183], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15180, 15183], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 460,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 460,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 469,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 469,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15572, 15575], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15572, 15575], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 473,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 473,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 482,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 482,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15931, 15934], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15931, 15934], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 486,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 486,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 2,
    "fixableWarningCount": 4,
    "source": "/**\n * Enhanced Background Sync for CosmicHub\n * Extends the existing service worker with smart sync capabilities\n */\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/strict-boolean-expressions, @typescript-eslint/prefer-nullish-coalescing, @typescript-eslint/require-await */\n\nimport { PushNotificationManager } from './push-notifications';\n\n// Local devConsole (avoid cross-package dependency). Non-error methods disabled in production.\n/* eslint-disable no-console */\nconst IS_DEV = typeof globalThis !== 'undefined' &&\n  typeof (globalThis as { process?: { env?: { NODE_ENV?: string } } }).process !== 'undefined' &&\n  (globalThis as { process?: { env?: { NODE_ENV?: string } } }).process?.env?.NODE_ENV !== 'production';\nconst devConsole = {\n  log: IS_DEV ? console.log.bind(console) : undefined,\n  warn: IS_DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\n\ntype JSONValue = string | number | boolean | null | JSONValue[] | { [k: string]: JSONValue };\nexport interface SyncQueueItem {\n  id: string;\n  type: 'chart_calculation' | 'user_data' | 'frequency_session' | 'notification';\n  data: JSONValue | Record<string, unknown>;\n  url: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  priority: 'low' | 'normal' | 'high';\n  maxRetries: number;\n  retryCount: number;\n  createdAt: number;\n  nextRetryAt: number;\n}\n\nexport interface SyncResult {\n  success: boolean;\n  data?: JSONValue | Record<string, unknown>;\n  error?: string;\n  retryAfter?: number;\n}\n\nexport interface OfflineAction {\n  id: string;\n  type: string;\n  data: JSONValue | Record<string, unknown>;\n  timestamp: number;\n  synced: boolean;\n}\n\nexport class AdvancedBackgroundSync {\n  private syncQueue: SyncQueueItem[] = [];\n  private offlineActions: OfflineAction[] = [];\n  private isOnline = navigator.onLine;\n  private syncInProgress = false;\n  private pushNotificationManager?: PushNotificationManager;\n\n  constructor() {\n    this.setupConnectionListener();\n    this.loadPersistedData();\n    this.startPeriodicSync();\n  }\n\n  // Initialize with push notification manager\n  setPushNotificationManager(manager: PushNotificationManager): void {\n    this.pushNotificationManager = manager;\n  }\n\n  // Add item to sync queue\n  async addToSyncQueue(item: Omit<SyncQueueItem, 'id' | 'retryCount' | 'createdAt' | 'nextRetryAt'>): Promise<string> {\n    const syncItem: SyncQueueItem = {\n      id: this.generateId(),\n      retryCount: 0,\n      createdAt: Date.now(),\n      nextRetryAt: Date.now(),\n      ...item\n    };\n\n    this.syncQueue.push(syncItem);\n    this.persistSyncQueue();\n\n    // Try to sync immediately if online\n    if (this.isOnline && !this.syncInProgress) {\n      void this.processSyncQueue();\n    }\n\n  devConsole.log?.(`📤 Added to sync queue: ${item.type} (${syncItem.id})`);\n    return syncItem.id;\n  }\n\n  // Add offline action for later sync\n  addOfflineAction(type: string, data: JSONValue | Record<string, unknown>): string {\n    const action: OfflineAction = {\n      id: this.generateId(),\n      type,\n      data,\n      timestamp: Date.now(),\n      synced: false\n    };\n\n    this.offlineActions.push(action);\n    this.persistOfflineActions();\n\n  devConsole.log?.(`💾 Stored offline action: ${type} (${action.id})`);\n    return action.id;\n  }\n\n  // Process sync queue\n  async processSyncQueue(): Promise<void> {\n    if (this.syncInProgress || !this.isOnline) {\n      return;\n    }\n\n    this.syncInProgress = true;\n    const now = Date.now();\n    const itemsToSync = this.syncQueue\n      .filter(item => item.nextRetryAt <= now)\n      .sort((a, b) => {\n        // Sort by priority, then by creation time\n        const priorityOrder = { high: 3, normal: 2, low: 1 };\n        const aPriority = priorityOrder[a.priority];\n        const bPriority = priorityOrder[b.priority];\n        \n        if (aPriority !== bPriority) {\n          return bPriority - aPriority;\n        }\n        \n        return a.createdAt - b.createdAt;\n      });\n\n  devConsole.log?.(`🔄 Processing ${itemsToSync.length} sync items...`);\n\n    for (const item of itemsToSync) {\n      try {\n        const result = await this.syncItem(item);\n        \n        if (result.success) {\n          this.removeSyncItem(item.id);\n          await this.handleSyncSuccess(item, result);\n        } else {\n          await this.handleSyncFailure(item, result);\n        }\n      } catch (error) {\n        await this.handleSyncFailure(item, { success: false, error: String(error) });\n      }\n    }\n\n    this.syncInProgress = false;\n    this.persistSyncQueue();\n\n    // Send notification about sync completion if there were items\n    if (itemsToSync.length > 0) {\n      await this.notifySyncComplete(itemsToSync.length);\n    }\n  }\n\n  // Sync individual item\n  private async syncItem(item: SyncQueueItem): Promise<SyncResult> {\n    try {\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json'\n      };\n\n      // Add authentication if available\n      const authToken = localStorage.getItem('cosmichub-auth-token');\n      if (authToken !== null && authToken !== undefined && authToken !== '') {\n        headers['Authorization'] = `Bearer ${authToken}`;\n      }\n\n      const requestOptions: RequestInit = {\n        method: item.method,\n        headers,\n        body: item.method !== 'GET' ? JSON.stringify(item.data) : undefined\n      };\n\n      const response = await fetch(item.url, requestOptions);\n      \n      if (response.ok) {\n  const data: unknown = await response.json();\n  return { success: true, data: data as Record<string, unknown> };\n      } else {\n        const errorText = await response.text();\n        return { \n          success: false, \n          error: `HTTP ${response.status}: ${errorText}`,\n          retryAfter: this.getRetryDelay(item.retryCount + 1)\n        };\n      }\n    } catch (error) {\n      return { \n        success: false, \n        error: String(error),\n        retryAfter: this.getRetryDelay(item.retryCount + 1)\n      };\n    }\n  }\n\n  // Handle successful sync\n  private async handleSyncSuccess(item: SyncQueueItem, result: SyncResult): Promise<void> {\n  devConsole.log?.(`✅ Sync successful: ${item.type} (${item.id})`);\n\n    // Handle different sync types\n    switch (item.type) {\n      case 'chart_calculation':\n        await this.handleChartSyncSuccess(item, result);\n        break;\n      case 'user_data':\n        await this.handleUserDataSyncSuccess(item, result);\n        break;\n      case 'frequency_session':\n        await this.handleFrequencySyncSuccess(item, result);\n        break;\n      case 'notification':\n  devConsole.log?.('📨 Notification sync successful');\n        break;\n    }\n  }\n\n  // Handle sync failure\n  private async handleSyncFailure(item: SyncQueueItem, result: SyncResult): Promise<void> {\n    item.retryCount++;\n\n    if (item.retryCount >= item.maxRetries) {\n  devConsole.error(`💥 Sync failed permanently: ${item.type} (${item.id})`);\n      this.removeSyncItem(item.id);\n      await this.notifyPermanentFailure(item);\n    } else {\n  const retryDelayRaw = result.retryAfter ?? this.getRetryDelay(item.retryCount);\n  const retryDelay = Number.isFinite(retryDelayRaw) && (retryDelayRaw as number) > 0 ? (retryDelayRaw as number) : 0;\n      item.nextRetryAt = Date.now() + retryDelay;\n  devConsole.warn?.(`⚠️ Sync failed, retrying in ${retryDelay}ms: ${item.type} (${item.id})`);\n    }\n  }\n\n  // Specific sync success handlers\n  private async handleChartSyncSuccess(item: SyncQueueItem, result: SyncResult): Promise<void> {\n    // Broadcast chart data to other tabs/apps\n    this.broadcastMessage('chart_synced', {\n  chartId: (typeof item.data === 'object' && item.data && 'chartId' in item.data) ? (item.data as Record<string, unknown>).chartId : undefined,\n  result: result.data as unknown\n    });\n\n    // Show success notification\n  if (this.pushNotificationManager != null) {\n      await this.pushNotificationManager.queueNotification({\n        title: '📊 Chart Calculation Complete',\n        body: 'Your astrology chart has been calculated and synced successfully.',\n        tag: 'chart-sync-success',\n        urgency: 'low'\n      });\n    }\n  }\n\n  private async handleUserDataSyncSuccess(item: SyncQueueItem, result: SyncResult): Promise<void> {\n    // Update local storage with synced data\n    const userData = result.data as Record<string, unknown> | undefined;\n    if (userData != null) {\n      localStorage.setItem('cosmichub-user-data', JSON.stringify(userData));\n    }\n\n    this.broadcastMessage('user_data_synced', userData);\n  }\n\n  private async handleFrequencySyncSuccess(item: SyncQueueItem, result: SyncResult): Promise<void> {\n    // Mark offline actions as synced\n  const sessionId = (typeof item.data === 'object' && item.data && 'sessionId' in item.data)\n    ? (item.data as Record<string, unknown>).sessionId\n    : undefined;\n    this.offlineActions\n  .filter(action => typeof action.data === 'object' && action.data !== null && 'sessionId' in action.data && (action.data as Record<string, unknown>).sessionId === sessionId)\n      .forEach(action => action.synced = true);\n\n    this.persistOfflineActions();\n\n    // Show success notification\n  if (this.pushNotificationManager != null) {\n      await this.pushNotificationManager.queueNotification({\n        title: '🎧 Session Data Synced',\n        body: 'Your frequency therapy session has been saved to your profile.',\n        tag: 'frequency-sync-success',\n        urgency: 'low'\n      });\n    }\n  }\n\n  // Smart retry delay calculation\n  private getRetryDelay(retryCount: number): number {\n    // Exponential backoff with jitter: base * 2^retry + random jitter\n    const baseDelay = 1000; // 1 second\n    const maxDelay = 300000; // 5 minutes\n    const exponentialDelay = baseDelay * Math.pow(2, retryCount - 1);\n    const jitter = Math.random() * 1000; // 0-1 second jitter\n    \n    return Math.min(exponentialDelay + jitter, maxDelay);\n  }\n\n  // Connection status management\n  private setupConnectionListener(): void {\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n  devConsole.log?.('🌐 Back online - starting sync...');\n      // Wait a moment for the connection to stabilize then process queue\n      setTimeout(() => { void this.processSyncQueue(); }, 1000);\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.syncInProgress = false;\n  devConsole.log?.('📴 Gone offline - queuing actions...');\n    });\n  }\n\n  // Periodic sync for reliability\n  private startPeriodicSync(): void {\n    setInterval(() => {\n      if (this.isOnline && !this.syncInProgress && this.syncQueue.length > 0) {\n  devConsole.log?.('⏰ Periodic sync check...');\n        void this.processSyncQueue();\n      }\n    }, 30000); // Every 30 seconds\n  }\n\n  // Cross-tab communication\n  private broadcastMessage(type: string, data: JSONValue | Record<string, unknown> | undefined): void {\n    const message = {\n      type: `cosmichub-sync-${type}`,\n      data,\n      timestamp: Date.now()\n    };\n\n    try {\n      localStorage.setItem(`cosmichub-broadcast-${Date.now()}`, JSON.stringify(message));\n      // Clean up old broadcast messages\n      setTimeout(() => {\n        const keys = Object.keys(localStorage).filter(key => key.startsWith('cosmichub-broadcast-'));\n        keys.forEach(key => {\n          const item = localStorage.getItem(key);\n          if (item !== null && item !== undefined && item !== '') {\n            try {\n              const parsed = JSON.parse(item);\n              if (typeof parsed === 'object' && parsed && 'timestamp' in parsed) {\n                const ts = (parsed as Record<string, unknown>).timestamp;\n                if (typeof ts === 'number' && Date.now() - ts > 10000) {\n                  localStorage.removeItem(key);\n                }\n              }\n            } catch { /* ignore parse error */ }\n          }\n        });\n      }, 1000);\n    } catch (error) {\n      devConsole.warn?.('Failed to broadcast sync message:', error);\n    }\n  }\n\n  // Notification helpers\n  private async notifySyncComplete(itemCount: number): Promise<void> {\n    if (this.pushNotificationManager && itemCount > 0) {\n      await this.pushNotificationManager.queueNotification({\n        title: '🔄 Sync Complete',\n        body: `Successfully synced ${itemCount} items with the server.`,\n        tag: 'sync-complete',\n        urgency: 'low'\n      });\n    }\n  }\n\n  private async notifyPermanentFailure(item: SyncQueueItem): Promise<void> {\n    if (this.pushNotificationManager) {\n      await this.pushNotificationManager.queueNotification({\n        title: '⚠️ Sync Failed',\n        body: `Unable to sync ${item.type}. Please check your connection and try again.`,\n        tag: 'sync-failed',\n        urgency: 'normal'\n      });\n    }\n  }\n\n  // Utility methods\n  private generateId(): string {\n    return `sync-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private removeSyncItem(id: string): void {\n    this.syncQueue = this.syncQueue.filter(item => item.id !== id);\n  }\n\n  // Persistence\n  private persistSyncQueue(): void {\n    try {\n      localStorage.setItem('cosmichub-sync-queue', JSON.stringify(this.syncQueue));\n    } catch (error) {\n  devConsole.warn?.('Failed to persist sync queue:', error);\n    }\n  }\n\n  private persistOfflineActions(): void {\n    try {\n      localStorage.setItem('cosmichub-offline-actions', JSON.stringify(this.offlineActions));\n    } catch (error) {\n  devConsole.warn?.('Failed to persist offline actions:', error);\n    }\n  }\n\n  private loadPersistedData(): void {\n    try {\n      // Load sync queue\n      const queueData = localStorage.getItem('cosmichub-sync-queue');\n      if (queueData) {\n        this.syncQueue = JSON.parse(queueData);\n      }\n\n      // Load offline actions\n      const actionsData = localStorage.getItem('cosmichub-offline-actions');\n      if (actionsData) {\n        this.offlineActions = JSON.parse(actionsData);\n      }\n\n  devConsole.log?.(`📂 Loaded ${this.syncQueue.length} queued items and ${this.offlineActions.length} offline actions`);\n    } catch (error) {\n  devConsole.warn?.('Failed to load persisted sync data:', error);\n    }\n  }\n\n  // Public API for getting status\n  getSyncStatus(): {\n    isOnline: boolean;\n    syncInProgress: boolean;\n    queuedItems: number;\n    offlineActions: number;\n    failedItems: number;\n  } {\n    const failedItems = this.syncQueue.filter(item => item.retryCount >= item.maxRetries).length;\n\n    return {\n      isOnline: this.isOnline,\n      syncInProgress: this.syncInProgress,\n      queuedItems: this.syncQueue.length,\n      offlineActions: this.offlineActions.filter(action => !action.synced).length,\n      failedItems\n    };\n  }\n\n  // Clear all sync data (for logout, etc.)\n  clearSyncData(): void {\n    this.syncQueue = [];\n    this.offlineActions = [];\n    this.persistSyncQueue();\n    this.persistOfflineActions();\n  devConsole.log?.('🗑️ Cleared all sync data');\n  }\n}\n\n// Helper functions for easy integration\nexport const CosmicHubSyncHelpers = {\n  // Queue chart calculation for sync\n  queueChartCalculation: async (chartData: any, userId: string): Promise<string> => {\n    const syncManager = new AdvancedBackgroundSync();\n    return syncManager.addToSyncQueue({\n      type: 'chart_calculation',\n      data: { ...chartData, userId },\n      url: '/api/charts/calculate',\n      method: 'POST',\n      priority: 'high',\n      maxRetries: 3\n    });\n  },\n\n  // Queue user data update\n  queueUserDataUpdate: async (userData: any): Promise<string> => {\n    const syncManager = new AdvancedBackgroundSync();\n    return syncManager.addToSyncQueue({\n      type: 'user_data',\n      data: userData,\n      url: '/api/user/update',\n      method: 'PUT',\n      priority: 'normal',\n      maxRetries: 5\n    });\n  },\n\n  // Queue frequency session save\n  queueFrequencySession: async (sessionData: any): Promise<string> => {\n    const syncManager = new AdvancedBackgroundSync();\n    return syncManager.addToSyncQueue({\n      type: 'frequency_session',\n      data: sessionData,\n      url: '/api/healwave/sessions',\n      method: 'POST',\n      priority: 'normal',\n      maxRetries: 3\n    });\n  }\n};\n\n// Singleton instance\nlet backgroundSyncInstance: AdvancedBackgroundSync | null = null;\n\nexport const getBackgroundSyncManager = (): AdvancedBackgroundSync => {\n  if (!backgroundSyncInstance) {\n    backgroundSyncInstance = new AdvancedBackgroundSync();\n  }\n  return backgroundSyncInstance;\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/bundle-optimization.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'require' is not defined.",
        "line": 162,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 162,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'require' is not defined.",
        "line": 163,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 163,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'require' is not defined.",
        "line": 164,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 164,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'require' is not defined.",
        "line": 165,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 165,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'analyzeChunks' has no 'await' expression.",
        "line": 505,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 505,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": {
              "range": [14595, 14638],
              "text": "analyzeChunks(): ChunkInfo[]"
            },
            "desc": "Remove 'async'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'analyzeDependencies' has no 'await' expression.",
        "line": 536,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 536,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": {
              "range": [15322, 15376],
              "text": "analyzeDependencies(): DependencyInfo[]"
            },
            "desc": "Remove 'async'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/caching-service-worker.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/component-library.tsx",
    "messages": [
      {
        "ruleId": "no-duplicate-imports",
        "severity": 2,
        "message": "'react' import is duplicated.",
        "line": 6,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "messageId": "import",
        "endLine": 6,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `ForwardRefRenderFunction<unknown, {}>`.",
        "line": 70,
        "column": 36,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeArgument",
        "endLine": 70,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4804, 4807], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4804, 4807], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Minimal stable component architecture exports.\n * Keep lean; extend via new modules (do not bloat this surface).\n */\nimport React, { createContext, useContext, useMemo, useRef, useCallback, memo } from 'react';\nimport type { ComponentType, ReactNode, ElementType, ReactElement, FC } from 'react';\nimport { logger } from './utils/logger';\n\n// ---------------- Context ----------------\nexport interface ComponentContext { theme: 'light' | 'dark' | 'cosmic'; size: 'small' | 'medium' | 'large'; variant: 'primary' | 'secondary' | 'accent'; disabled: boolean; readonly: boolean }\nconst defaultContext: ComponentContext = { theme: 'cosmic', size: 'medium', variant: 'primary', disabled: false, readonly: false };\nconst Ctx = createContext<ComponentContext>(defaultContext);\nexport const ComponentProvider: FC<{ value?: Partial<ComponentContext>; children: ReactNode }> = ({ value = {}, children }) => {\n  const merged = useMemo(() => ({ ...defaultContext, ...value }), [value]);\n  return <Ctx.Provider value={merged}>{children}</Ctx.Provider>;\n};\nexport const useComponentContext = (): ComponentContext => useContext(Ctx);\n\n// -------------- Performance HOC --------------\nexport function withPerformanceTracking<P extends Record<string, unknown>>(Wrapped: ComponentType<P>, name: string): FC<P> {\n  const Tracked: FC<P> = (props) => {\n    const mountStart = useRef<number>(performance.now());\n    React.useEffect(() => {\n      const ms = performance.now() - mountStart.current;\n      logger.debug('component.mount', { component: name, ms });\n      return () => { logger.debug('component.unmount', { component: name }); };\n    }, []);\n    const renderStart = performance.now();\n    const element = <Wrapped {...props} />;\n    logger.debug('component.render', { component: name, ms: performance.now() - renderStart });\n    return element;\n  };\n  Tracked.displayName = `WithPerf(${(Wrapped as { displayName?: string; name?: string }).displayName ?? (Wrapped as { name?: string }).name ?? 'Component'})`;\n  return memo(Tracked);\n}\n\n// -------------- Compound Components --------------\nexport interface ComposableComponentProps { children?: ReactNode; className?: string; 'data-testid'?: string }\nexport interface CompoundComponentAPI { Header: FC<ComposableComponentProps>; Body: FC<ComposableComponentProps>; Footer: FC<ComposableComponentProps>; Actions: FC<ComposableComponentProps> }\nexport function createCompoundComponent<T extends ComposableComponentProps & Record<string, unknown>>(Base: ComponentType<T>, name: string): FC<T> & CompoundComponentAPI {\n  const Header: FC<ComposableComponentProps> = ({ children, className = '', ...rest }) => <div className={`compound-header ${className}`} {...rest}>{children}</div>;\n  const Body: FC<ComposableComponentProps> = ({ children, className = '', ...rest }) => <div className={`compound-body ${className}`} {...rest}>{children}</div>;\n  const Footer: FC<ComposableComponentProps> = ({ children, className = '', ...rest }) => <div className={`compound-footer ${className}`} {...rest}>{children}</div>;\n  const Actions: FC<ComposableComponentProps> = ({ children, className = '', ...rest }) => <div className={`compound-actions ${className}`} {...rest}>{children}</div>;\n  const PerfBase = withPerformanceTracking<T>(Base, name);\n  const Combined = PerfBase as FC<T> & CompoundComponentAPI;\n  Combined.Header = Header; Combined.Body = Body; Combined.Footer = Footer; Combined.Actions = Actions;\n  return Combined;\n}\n\n// -------------- Polymorphic --------------\nexport interface PolymorphicProps<T extends ElementType> { as?: T; children?: ReactNode; className?: string }\nexport type PolymorphicComponentProps<T extends ElementType, P extends object = object> = PolymorphicProps<T> & P & Omit<React.ComponentPropsWithoutRef<T>, keyof PolymorphicProps<T> | keyof P>;\nexport interface PolymorphicForwardComponent<TDefault extends ElementType> {\n  <TAs extends ElementType = TDefault>(props: PolymorphicComponentProps<TAs> & { ref?: React.ComponentPropsWithRef<TAs>['ref'] }): ReactElement | null;\n  displayName?: string;\n}\nexport function createPolymorphicComponent<TDefault extends ElementType = 'div'>(defaultTag: TDefault, displayName?: string): PolymorphicForwardComponent<TDefault> {\n  type AnyElement = ElementType;\n  type ForwardInnerProps<TAs extends AnyElement> = PolymorphicComponentProps<TAs>;\n  // Define the inner component with proper generic typing\n  const Inner = <TAs extends AnyElement = TDefault>(\n    { as, ...rest }: ForwardInnerProps<TAs>,\n    ref: React.ComponentPropsWithRef<TAs>['ref']\n  ): ReactElement | null => {\n    const Tag: AnyElement = as ?? defaultTag;\n    return React.createElement(Tag, { ref, ...rest });\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const Forward = React.forwardRef(Inner as any) as unknown as PolymorphicForwardComponent<TDefault>;\n  Forward.displayName = displayName ?? `Poly(${String(defaultTag)})`;\n  return Forward;\n}\n\n// -------------- Performance Analyzer --------------\ninterface PerfEntry { metric: string; value: number; t: number }\nexport class ComponentPerformanceAnalyzer {\n  private static instance: ComponentPerformanceAnalyzer | null = null;\n  private data = new Map<string, PerfEntry[]>();\n  static getInstance(): ComponentPerformanceAnalyzer { return this.instance ?? (this.instance = new ComponentPerformanceAnalyzer()); }\n  recordComponentMetric(component: string, metric: string, value: number): void {\n    const arr = this.data.get(component) ?? [];\n    arr.push({ metric, value, t: performance.now() });\n    if (arr.length > 200) arr.shift();\n    this.data.set(component, arr);\n  }\n  getComponentAnalysis(component: string): Record<string, { count: number; average: number; min: number; max: number }> {\n    const rows = this.data.get(component) ?? [];\n    const grouped: Record<string, number[]> = {};\n    for (const r of rows) (grouped[r.metric] ||= []).push(r.value);\n    const out: Record<string, { count: number; average: number; min: number; max: number }> = {};\n    Object.entries(grouped).forEach(([metric, vals]) => {\n      out[metric] = { count: vals.length, average: vals.reduce((a, b) => a + b, 0) / vals.length, min: Math.min(...vals), max: Math.max(...vals) };\n    });\n    return out;\n  }\n  generateRecommendations(component: string): string[] {\n    const a = this.getComponentAnalysis(component);\n    const rec: string[] = [];\n  if (a.ComponentRender?.average !== undefined && a.ComponentRender.average > 16) rec.push(`Optimize ${component} render time`);\n  if (a.ComponentMount?.average !== undefined && a.ComponentMount.average > 100) rec.push(`${component} mount is slow`);\n    return rec;\n  }\n}\nexport function useComponentAnalysis(name: string): { recordMetric: (metric: string, value: number) => void; getAnalysis: () => Record<string, { count: number; average: number; min: number; max: number }>; getRecommendations: () => string[] } {\n  const analyzer = useMemo(() => ComponentPerformanceAnalyzer.getInstance(), []);\n  const recordMetric = useCallback((metric: string, value: number) => analyzer.recordComponentMetric(name, metric, value), [analyzer, name]);\n  return {\n    recordMetric,\n    getAnalysis: () => analyzer.getComponentAnalysis(name),\n    getRecommendations: () => analyzer.generateRecommendations(name)\n  };\n}\n\n// -------------- Utilities --------------\nexport interface ComponentFactory<TConfig> { create(config: TConfig): FC; register(name: string, component: ComponentType<unknown>): void; get(name: string): ComponentType<unknown> | undefined; list(): string[] }\nexport function createComponentFactory<TConfig extends Record<string, unknown>>(): ComponentFactory<TConfig> {\n  const reg = new Map<string, ComponentType<unknown>>();\n  return {\n    create(config): FC {\n      const serialized = JSON.stringify(config);\n      const Comp: FC = () => <div data-config={serialized} />;\n      return Comp;\n    },\n    register(name, component): void { reg.set(name, component); logger.debug('component.register', { name, size: reg.size }); },\n    get: (name) => reg.get(name),\n    list: () => [...reg.keys()]\n  };\n}\n\nexport interface CompositionConfig { components: ComponentType<unknown>[]; strategy: 'sequential' | 'parallel' | 'conditional'; fallback?: ComponentType<unknown> }\nexport function composeComponents(cfg: CompositionConfig): FC {\n  const { components, strategy, fallback: Fallback } = cfg;\n  const Composed: FC = (props) => {\n    if (strategy === 'sequential') return <>{components.map((C, i) => <C key={i} {...props} />)}</>;\n    if (strategy === 'parallel') return <div className=\"composition-parallel\">{components.map((C, i) => <div key={i}><C {...props} /></div>)}</div>;\n    if (strategy === 'conditional') {\n      for (const C of components) {\n        try { return <C {...props} />; } catch { /* continue */ }\n      }\n      return Fallback ? <Fallback {...props} /> : null;\n    }\n    return <>{components.map((C, i) => <C key={i} {...props} />)}</>;\n  };\n  Composed.displayName = 'ComposedComponents';\n  return Composed;\n}\n\nexport interface MemoizationStrategy { shallow?: boolean; deep?: boolean; custom?: (prev: unknown, next: unknown) => boolean }\nexport function withMemoization<P extends Record<string, unknown>>(Component: ComponentType<P>, strategy: MemoizationStrategy = { shallow: true }): ComponentType<P> {\n  if (strategy.custom) return memo(Component, strategy.custom as (a: P, b: P) => boolean) as unknown as ComponentType<P>;\n  if (strategy.deep === true) return memo(Component, (a, b) => JSON.stringify(a) === JSON.stringify(b)) as unknown as ComponentType<P>;\n  return memo(Component) as unknown as ComponentType<P>;\n}\n\nexport const isValidElement = (el: unknown): el is ReactElement => React.isValidElement(el);\nexport const getDisplayName = (C: ComponentType<unknown>): string => (C as { displayName?: string; name?: string }).displayName ?? (C as { name?: string }).name ?? 'Component';\n\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/config.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 6,
        "column": 7,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 8,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [127, 130], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [127, 130], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-redundant-type-constituents",
        "severity": 2,
        "message": "'any' overrides all other types in this union type.",
        "line": 6,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "overrides",
        "endLine": 6,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 89,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [200, 203], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [200, 203], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .env on an `any` value.",
        "line": 6,
        "column": 94,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 6,
        "endColumn": 97
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [230, 233], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [230, 233], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .env on an `any` value.",
        "line": 7,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 7,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 11,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 11,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access [key] on an `any` value.",
        "line": 11,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 11,
        "endColumn": 33
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 12,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 12,
        "endColumn": 61
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 12,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 12,
        "endColumn": 76
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .MODE on an `any` value.",
        "line": 16,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 16,
        "endColumn": 36
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 17,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 17,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 240,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 240,
        "endColumn": 83
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 240,
        "column": 57,
        "nodeType": "ChainExpression",
        "messageId": "unsafeReturn",
        "endLine": 240,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access [key] on an `any` value.",
        "line": 240,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 240,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 240,
        "column": 79,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 240,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5817, 5820], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5817, 5820], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 13,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Application configuration management\n */\n\n// Cross-runtime env accessor (works in Vite browser and Node)\nconst viteEnv: any | undefined = (typeof import.meta !== 'undefined' && (import.meta as any).env)\n  ? (import.meta as any).env\n  : undefined;\n\nconst getEnv = (key: string, fallback = ''): string => {\n  const fromVite = viteEnv?.[key];\n  const fromNode = typeof process !== 'undefined' && process?.env ? process.env[key] : undefined;\n  return (fromVite ?? fromNode ?? fallback) as string;\n};\n\nconst MODE: string = (viteEnv?.MODE\n  ?? (typeof process !== 'undefined' ? process.env?.NODE_ENV : undefined)\n  ?? 'development') as string;\n\nexport interface AppConfig {\n  app: {\n    name: string;\n    version: string;\n    environment: 'development' | 'staging' | 'production';\n    baseUrl: string;\n  };\n  api: {\n    baseUrl: string;\n    timeout: number;\n    retries: number;\n  };\n  firebase: {\n    projectId: string;\n    apiKey: string;\n    authDomain: string;\n    storageBucket: string;\n    messagingSenderId: string;\n    appId: string;\n  };\n  features: {\n    aiInterpretation: boolean;\n    humanDesign: boolean;\n    geneKeys: boolean;\n    numerology: boolean;\n    transits: boolean;\n    multiSystem: boolean;\n    healwaveIntegration: boolean;\n    crossAppIntegration: boolean;\n  };\n  subscription: {\n    plans: Record<string, SubscriptionPlan>;\n    trialDays: number;\n    stripePublishableKey: string;\n  };\n  astro: {\n    defaultLocation: {\n      lat: number;\n      lng: number;\n      city: string;\n      country: string;\n    };\n    ephemerisPath: string;\n    calculationEngine: 'swiss' | 'nasa';\n  };\n}\n\nexport interface SubscriptionPlan {\n  id: string;\n  name: string;\n  price: number;\n  interval: 'month' | 'year';\n  features: string[];\n  chartsLimit: number;\n  aiCredits: number;\n  priority: number;\n}\n\n// Default configuration\nexport const defaultConfig: AppConfig = {\n  app: {\n    name: 'CosmicHub',\n    version: '1.0.0',\n    environment: 'development',\n    baseUrl: 'http://localhost:3000'\n  },\n  api: {\n  baseUrl: getEnv('VITE_API_URL', 'http://localhost:8000'),\n    timeout: 30000,\n    retries: 3\n  },\n  firebase: {\n  projectId: getEnv('VITE_FIREBASE_PROJECT_ID', ''),\n  apiKey: getEnv('VITE_FIREBASE_API_KEY', ''),\n  authDomain: getEnv('VITE_FIREBASE_AUTH_DOMAIN', ''),\n  storageBucket: getEnv('VITE_FIREBASE_STORAGE_BUCKET', ''),\n  messagingSenderId: getEnv('VITE_FIREBASE_MESSAGING_SENDER_ID', ''),\n  appId: getEnv('VITE_FIREBASE_APP_ID', '')\n  },\n  features: {\n    aiInterpretation: true,\n    humanDesign: true,\n    geneKeys: true,\n    numerology: true,\n    transits: true,\n    multiSystem: true,\n    healwaveIntegration: true,\n    crossAppIntegration: true\n  },\n  subscription: {\n    plans: {\n      free: {\n        id: 'free',\n        name: 'Free',\n        price: 0,\n        interval: 'month',\n        features: ['Basic Chart', 'Planet Positions', 'House Placements'],\n        chartsLimit: 3,\n        aiCredits: 0,\n        priority: 1\n      },\n      basic: {\n        id: 'basic',\n        name: 'Basic',\n        price: 9.99,\n        interval: 'month',\n        features: ['All Free Features', 'AI Interpretations', 'Saved Charts', 'Basic Transits'],\n        chartsLimit: 25,\n        aiCredits: 50,\n        priority: 2\n      },\n      pro: {\n        id: 'pro',\n        name: 'Pro',\n        price: 29.99,\n        interval: 'month',\n        features: ['All Basic Features', 'Human Design', 'Gene Keys', 'Advanced Transits', 'Multi-System Analysis'],\n        chartsLimit: 100,\n        aiCredits: 200,\n        priority: 3\n      },\n      premium: {\n        id: 'premium',\n        name: 'Premium',\n        price: 99.99,\n        interval: 'month',\n        features: ['All Pro Features', 'Unlimited Charts', 'Priority Support', 'Advanced AI Analysis', 'Custom Reports'],\n        chartsLimit: -1, // Unlimited\n        aiCredits: 1000,\n        priority: 4\n      }\n    },\n    trialDays: 14,\n  stripePublishableKey: getEnv('VITE_STRIPE_PUBLISHABLE_KEY', '')\n  },\n  astro: {\n    defaultLocation: {\n      lat: 40.7128,\n      lng: -74.0060,\n      city: 'New York',\n      country: 'USA'\n    },\n    ephemerisPath: '/backend/ephe/',\n    calculationEngine: 'swiss'\n  }\n};\n\n// Environment-specific configurations\nconst developmentConfig: Partial<AppConfig> = {\n  app: {\n    ...defaultConfig.app,\n    environment: 'development',\n    baseUrl: 'http://localhost:3000'\n  },\n  api: {\n    ...defaultConfig.api,\n    baseUrl: 'http://localhost:8000'\n  }\n};\n\nconst productionConfig: Partial<AppConfig> = {\n  app: {\n    ...defaultConfig.app,\n    environment: 'production',\n  baseUrl: getEnv('VITE_APP_URL', 'https://cosmichub.app')\n  },\n  api: {\n    ...defaultConfig.api,\n  baseUrl: getEnv('VITE_API_URL', 'https://api.cosmichub.app')\n  }\n};\n\nconst stagingConfig: Partial<AppConfig> = {\n  app: {\n    ...defaultConfig.app,\n    environment: 'staging',\n    baseUrl: 'https://staging.cosmichub.app'\n  },\n  api: {\n    ...defaultConfig.api,\n    baseUrl: 'https://staging-api.cosmichub.app'\n  }\n};\n\n// Get configuration based on environment\nexport const getConfig = (): AppConfig => {\n  const env = MODE || 'development';\n  \n  let envConfig: Partial<AppConfig> = {};\n  \n  switch (env) {\n    case 'production':\n      envConfig = productionConfig;\n      break;\n    case 'staging':\n      envConfig = stagingConfig;\n      break;\n    default:\n      envConfig = developmentConfig;\n  }\n  \n  return {\n    ...defaultConfig,\n    ...envConfig\n  };\n};\n\n// Export the current configuration\nexport const config = getConfig();\n\n// Configuration validation\nexport const validateConfig = (config: AppConfig): boolean => {\n  const requiredFields = [\n    'app.name',\n    'app.version',\n    'api.baseUrl',\n    'firebase.projectId'\n  ];\n  \n  for (const field of requiredFields) {\n    const value = field.split('.').reduce((obj, key) => obj?.[key], config as any);\n    if (!value) {\n      console.error(`Missing required config field: ${field}`);\n      return false;\n    }\n  }\n  \n  return true;\n};\n\n// Feature flags\nexport const isFeatureEnabled = (feature: keyof AppConfig['features']): boolean => {\n  return config.features[feature] || false;\n};\n\n// App configuration helper\nexport const getAppConfig = (appName: string) => {\n  return {\n    ...config,\n    app: {\n      ...config.app,\n      name: appName\n    }\n  };\n};\n\n// Subscription helpers\nexport const getSubscriptionPlan = (planId: string): SubscriptionPlan | null => {\n  return config.subscription.plans[planId] || null;\n};\n\nexport const getAllPlans = (): SubscriptionPlan[] => {\n  return Object.values(config.subscription.plans).sort((a, b) => a.priority - b.priority);\n};\n\nexport default config;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/constants.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 14,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 16,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [379, 382], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [379, 382], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .env on an `any` value.",
        "line": 14,
        "column": 72,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 14,
        "endColumn": 75
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 15,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 15,
        "endColumn": 50
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Application constants - Performance optimized with lazy loading\n */\n\n// Core app metadata\nexport const APP_CONFIG = {\n  name: 'CosmicHub',\n  version: '1.0.0',\n  description: 'Professional Astrology & Spiritual Analysis Platform'\n} as const;\n\n// Performance-optimized API config\nexport const API_CONFIG = {\n  baseUrl: (typeof import.meta !== 'undefined' && (import.meta as any).env?.VITE_API_URL) \n    || (typeof process !== 'undefined' && process.env?.VITE_API_URL) \n    || 'http://localhost:8000',\n  timeout: 30000,\n  retryAttempts: 3,\n  batchSize: 50, // For efficient data fetching\n  cacheTimeout: 5 * 60 * 1000 // 5 min cache\n} as const;\n\n// Lazy-loaded astrological constants\nexport const ASTRO_CONSTANTS = {\n  planets: ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'],\n  signs: ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'],\n  aspects: ['conjunction', 'opposition', 'trine', 'square', 'sextile'],\n  elements: ['fire', 'earth', 'air', 'water'],\n  modalities: ['cardinal', 'fixed', 'mutable']\n} as const;\n\n// Subscription tiers for performance billing\nexport const SUBSCRIPTION_PLANS = {\n  free: { id: 'free', name: 'Free', price: 0, chartsLimit: 3, aiCredits: 0 },\n  basic: { id: 'basic', name: 'Basic', price: 9.99, chartsLimit: 25, aiCredits: 50 },\n  pro: { id: 'pro', name: 'Pro', price: 29.99, chartsLimit: 100, aiCredits: 200 },\n  premium: { id: 'premium', name: 'Premium', price: 99.99, chartsLimit: -1, aiCredits: 1000 }\n} as const;\n\n// UI performance constants\nexport const UI_CONSTANTS = {\n  debounceDelay: 300,\n  throttleDelay: 100,\n  animationDuration: 200,\n  breakpoints: { sm: '640px', md: '768px', lg: '1024px', xl: '1280px' }\n} as const;\n\n// Feature flags for code splitting\nexport const FEATURES = {\n  aiInterpretation: true,\n  humanDesign: true,\n  geneKeys: true,\n  numerology: true,\n  transits: true,\n  multiSystem: true,\n  healwaveIntegration: true\n} as const;\n\nexport default {\n  APP_CONFIG,\n  API_CONFIG,\n  ASTRO_CONSTANTS,\n  SUBSCRIPTION_PLANS,\n  UI_CONSTANTS,\n  FEATURES\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/enhanced-testing.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'click' has no 'await' expression.",
        "line": 16,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 16,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [604, 610], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'type' has no 'await' expression.",
        "line": 19,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 19,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [683, 689], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'hover' has no 'await' expression.",
        "line": 22,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 22,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [807, 813], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'unhover' has no 'await' expression.",
        "line": 25,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 25,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [894, 900], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'keyboard' has no 'await' expression.",
        "line": 28,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 28,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [982, 988], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'tab' has no 'await' expression.",
        "line": 32,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 32,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [1135, 1141], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 150,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 150,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4452, 4455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4452, 4455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe object destructuring of a property with an `any` value.",
        "line": 158,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unsafeObjectPattern",
        "endLine": 158,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'initialProps' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 158,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 158,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'rerender' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 158,
        "column": 48,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 158,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'measureRenderTime' has no 'await' expression.",
        "line": 171,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 171,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [4946, 4952], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'checkAccessibility' has no 'await' expression.",
        "line": 183,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 183,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [5290, 5296], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 281,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 281,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8460, 8463], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8460, 8463], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 281,
        "column": 84,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 281,
        "endColumn": 87,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8482, 8485], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8482, 8485], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 286,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 286,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8675, 8678], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8675, 8678], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 290,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 290,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8838, 8841], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8838, 8841], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 290,
        "column": 89,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 290,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8860, 8863], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8860, 8863], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 304,
        "column": 45,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 304,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [9249, 9255], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 344,
        "column": 66,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 344,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [10686, 10692], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 378,
        "column": 46,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 378,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [11806, 11812], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 397,
        "column": 50,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 397,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [12310, 12316], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 2,
        "message": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
        "line": 414,
        "column": 35,
        "nodeType": "TSTypeLiteral",
        "messageId": "noEmptyObject",
        "endLine": 414,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "replaceEmptyObjectType",
            "data": { "replacement": "object" },
            "fix": { "range": [12886, 12888], "text": "object" },
            "desc": "Replace `{}` with `object`."
          },
          {
            "messageId": "replaceEmptyObjectType",
            "data": { "replacement": "unknown" },
            "fix": { "range": [12886, 12888], "text": "unknown" },
            "desc": "Replace `{}` with `unknown`."
          }
        ]
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'result' is never reassigned. Use 'const' instead.",
        "line": 422,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 422,
        "endColumn": 29,
        "fix": {
          "range": [13096, 13155],
          "text": "const result: { current: T } = { current: undefined as any };"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 422,
        "column": 34,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 422,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 422,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 422,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13149, 13152], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13149, 13152], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 431,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 431,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13383, 13386], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13383, 13386], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'rerender' is never reassigned. Use 'const' instead.",
        "line": 435,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 435,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 438,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 438,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13593, 13596], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13593, 13596], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 600,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 600,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17828, 17831], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17828, 17831], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 605,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 605,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17965, 17968], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17965, 17968], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 617,
        "column": 87,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 617,
        "endColumn": 90,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18333, 18336], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18333, 18336], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'rendered' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 620,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 620,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 638,
        "column": 38,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 638,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 643,
        "column": 37,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 643,
        "endColumn": 64
      }
    ],
    "suppressedMessages": [],
    "errorCount": 22,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "/**\n * Enhanced Testing Framework for CosmicHub\n * Comprehensive testing utilities for components, hooks, and performance\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\n// import userEvent from '@testing-library/user-event';\nimport { vi, expect, describe, it, beforeEach, afterEach } from 'vitest';\n// import { performanceMonitor } from './performance';\n// import { ComponentPerformanceAnalyzer } from './component-architecture';\n\n// Mock userEvent for testing framework independence\nconst mockUserEvent = {\n  setup: () => ({\n    click: async (element: Element) => {\n      fireEvent.click(element);\n    },\n    type: async (element: Element, text: string) => {\n      fireEvent.change(element, { target: { value: text } });\n    },\n    hover: async (element: Element) => {\n      fireEvent.mouseEnter(element);\n    },\n    unhover: async (element: Element) => {\n      fireEvent.mouseLeave(element);\n    },\n    keyboard: async (keys: string) => {\n      // Mock keyboard interactions\n      document.dispatchEvent(new KeyboardEvent('keydown', { key: keys }));\n    },\n    tab: async () => {\n      // Mock tab navigation\n      const focusableElements = document.querySelectorAll(\n        'button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])'\n      );\n      const currentFocus = document.activeElement;\n      const currentIndex = Array.from(focusableElements).indexOf(currentFocus as Element);\n      const nextIndex = (currentIndex + 1) % focusableElements.length;\n      if (focusableElements[nextIndex]) {\n        (focusableElements[nextIndex] as HTMLElement).focus();\n      }\n    }\n  })\n};\n\nconst userEvent = mockUserEvent;\n\n// Mock ComponentPerformanceAnalyzer for testing\nclass MockComponentPerformanceAnalyzer {\n  private static instance: MockComponentPerformanceAnalyzer;\n  private performanceData = new Map<string, Array<{\n    metric: string;\n    value: number;\n    timestamp: number;\n  }>>();\n\n  static getInstance(): MockComponentPerformanceAnalyzer {\n    if (!MockComponentPerformanceAnalyzer.instance) {\n      MockComponentPerformanceAnalyzer.instance = new MockComponentPerformanceAnalyzer();\n    }\n    return MockComponentPerformanceAnalyzer.instance;\n  }\n\n  recordComponentMetric(componentName: string, metric: string, value: number) {\n    if (!this.performanceData.has(componentName)) {\n      this.performanceData.set(componentName, []);\n    }\n    this.performanceData.get(componentName)!.push({\n      metric,\n      value,\n      timestamp: Date.now()\n    });\n  }\n\n  getComponentAnalysis(componentName: string) {\n    return this.performanceData.get(componentName) || [];\n  }\n\n  generateRecommendations(componentName: string): string[] {\n    const data = this.performanceData.get(componentName) || [];\n    const recommendations: string[] = [];\n    \n    data.forEach(entry => {\n      if (entry.metric === 'TestRenderTime' && entry.value > 16) {\n        recommendations.push(`Consider optimizing ${componentName} render time (${entry.value.toFixed(2)}ms)`);\n      }\n    });\n    \n    return recommendations;\n  }\n}\n\n// Enhanced test utilities\nexport interface TestConfig {\n  performance: boolean;\n  accessibility: boolean;\n  responsiveness: boolean;\n  interactions: boolean;\n  errorBoundaries: boolean;\n  animations: boolean;\n}\n\nconst defaultTestConfig: TestConfig = {\n  performance: true,\n  accessibility: true,\n  responsiveness: false,\n  interactions: true,\n  errorBoundaries: true,\n  animations: false\n};\n\n// Test wrapper with providers\nexport interface TestWrapperProps {\n  children: React.ReactNode;\n  config?: Partial<TestConfig>;\n  mockProviders?: React.ComponentType<{ children: React.ReactNode }>[];\n}\n\nexport const TestWrapper: React.FC<TestWrapperProps> = ({ \n  children, \n  config = {},\n  mockProviders = []\n}) => {\n  const testConfig = { ...defaultTestConfig, ...config };\n\n  // Wrap with mock providers\n  let wrappedChildren = children;\n  mockProviders.forEach(Provider => {\n    wrappedChildren = <Provider>{wrappedChildren}</Provider>;\n  });\n\n  // Add test attributes\n  const testElement = (\n    <div \n      data-testid=\"test-wrapper\"\n      data-test-config={JSON.stringify(testConfig)}\n    >\n      {wrappedChildren}\n    </div>\n  );\n\n  return testElement;\n};\n\n// Enhanced render function\nexport interface EnhancedRenderOptions {\n  config?: Partial<TestConfig>;\n  mockProviders?: React.ComponentType<{ children: React.ReactNode }>[];\n  initialProps?: any;\n  rerender?: boolean;\n}\n\nexport function renderWithEnhancements(\n  component: React.ReactElement,\n  options: EnhancedRenderOptions = {}\n) {\n  const { config, mockProviders, initialProps, rerender } = options;\n\n  const renderResult = render(\n    <TestWrapper config={config} mockProviders={mockProviders}>\n      {component}\n    </TestWrapper>\n  );\n\n  // Enhanced render result with additional utilities\n  return {\n    ...renderResult,\n    \n    // Performance testing\n    measureRenderTime: async () => {\n      const startTime = performance.now();\n      renderResult.rerender(\n        <TestWrapper config={config} mockProviders={mockProviders}>\n          {component}\n        </TestWrapper>\n      );\n      const endTime = performance.now();\n      return endTime - startTime;\n    },\n\n    // Accessibility testing\n    checkAccessibility: async () => {\n      const issues: string[] = [];\n      \n      // Check for required ARIA attributes\n      const interactiveElements = renderResult.container.querySelectorAll(\n        'button, input, select, textarea, [role=\"button\"], [role=\"link\"], [role=\"tab\"]'\n      );\n      \n      interactiveElements.forEach(element => {\n        if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {\n          issues.push(`Interactive element missing aria-label: ${element.tagName}`);\n        }\n      });\n\n      // Check for keyboard navigation\n      const focusableElements = renderResult.container.querySelectorAll(\n        'button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])'\n      );\n      \n      if (focusableElements.length === 0) {\n        issues.push('No focusable elements found');\n      }\n\n      return { passed: issues.length === 0, issues };\n    },\n\n    // Interaction testing\n    testInteractions: async () => {\n      const user = userEvent.setup();\n      const results: { action: string; success: boolean; error?: string }[] = [];\n\n      // Test button clicks\n      const buttons = screen.queryAllByRole('button');\n      for (const button of buttons) {\n        try {\n          await user.click(button);\n          results.push({ action: `click ${button.textContent}`, success: true });\n        } catch (error) {\n          results.push({ \n            action: `click ${button.textContent}`, \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      // Test input interactions\n      const inputs = screen.queryAllByRole('textbox');\n      for (const input of inputs) {\n        try {\n          await user.type(input, 'test input');\n          results.push({ action: `type in ${input.getAttribute('name') || 'input'}`, success: true });\n        } catch (error) {\n          results.push({ \n            action: `type in ${input.getAttribute('name') || 'input'}`, \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      return results;\n    },\n\n    // Responsive testing\n    testResponsiveness: async () => {\n      const breakpoints = [\n        { name: 'mobile', width: 375 },\n        { name: 'tablet', width: 768 },\n        { name: 'desktop', width: 1024 },\n        { name: 'large', width: 1440 }\n      ];\n\n      const results: { breakpoint: string; width: number; visible: boolean }[] = [];\n\n      for (const { name, width } of breakpoints) {\n        // Mock viewport resize\n        Object.defineProperty(window, 'innerWidth', {\n          writable: true,\n          configurable: true,\n          value: width,\n        });\n\n        window.dispatchEvent(new Event('resize'));\n\n        // Wait for any responsive changes\n        await waitFor(() => {}, { timeout: 100 });\n\n        const isVisible = renderResult.container.offsetWidth > 0;\n        results.push({ breakpoint: name, width, visible: isVisible });\n      }\n\n      return results;\n    }\n  };\n}\n\n// Component test suite generator\nexport interface ComponentTestSuite<T extends Record<string, any> = Record<string, any>> {\n  component: React.ComponentType<T>;\n  name: string;\n  defaultProps: T;\n  variants?: Array<{ name: string; props: Partial<T> }>;\n  interactions?: Array<{ name: string; test: (rendered: any) => Promise<void> }>;\n  customTests?: Array<{ name: string; test: () => Promise<void> }>;\n}\n\nexport function createComponentTestSuite<T extends Record<string, any> = Record<string, any>>(suite: ComponentTestSuite<T>) {\n  describe(suite.name, () => {\n    let performanceAnalyzer: MockComponentPerformanceAnalyzer;\n\n    beforeEach(() => {\n      performanceAnalyzer = MockComponentPerformanceAnalyzer.getInstance();\n      vi.clearAllMocks();\n    });\n\n    afterEach(() => {\n      vi.restoreAllMocks();\n    });\n\n    // Basic rendering test\n    it('renders without crashing', async () => {\n      const props = suite.defaultProps;\n      const rendered = renderWithEnhancements(React.createElement(suite.component, props));\n      \n      expect(rendered.container.firstChild).toBeTruthy();\n    });\n\n    // Performance test\n    it('renders within performance budget', async () => {\n      const props = suite.defaultProps;\n      const rendered = renderWithEnhancements(React.createElement(suite.component, props), {\n        config: { performance: true }\n      });\n\n      const renderTime = await rendered.measureRenderTime();\n      expect(renderTime).toBeLessThan(16); // 60fps budget\n\n      // Record performance metric\n      performanceAnalyzer.recordComponentMetric(suite.name, 'TestRenderTime', renderTime);\n    });\n\n    // Accessibility test\n    it('meets accessibility standards', async () => {\n      const props = suite.defaultProps;\n      const rendered = renderWithEnhancements(React.createElement(suite.component, props), {\n        config: { accessibility: true }\n      });\n\n      const accessibilityResult = await rendered.checkAccessibility();\n      \n      if (!accessibilityResult.passed) {\n        console.warn(`Accessibility issues found in ${suite.name}:`, accessibilityResult.issues);\n      }\n\n      expect(accessibilityResult.passed).toBe(true);\n    });\n\n    // Variant tests\n    if (suite.variants) {\n      suite.variants.forEach(variant => {\n        it(`renders ${variant.name} variant correctly`, async () => {\n          const props = { ...suite.defaultProps, ...variant.props } as T;\n          const rendered = renderWithEnhancements(React.createElement(suite.component, props));\n          \n          expect(rendered.container.firstChild).toBeTruthy();\n          \n          // Take snapshot for visual regression testing\n          expect(rendered.container.firstChild).toMatchSnapshot(`${suite.name}-${variant.name}`);\n        });\n      });\n    }\n\n    // Interaction tests\n    if (suite.interactions) {\n      suite.interactions.forEach(interaction => {\n        it(`handles ${interaction.name} interaction`, async () => {\n          const props = suite.defaultProps;\n          const rendered = renderWithEnhancements(React.createElement(suite.component, props), {\n            config: { interactions: true }\n          });\n\n          await interaction.test(rendered);\n        });\n      });\n    }\n\n    // Custom tests\n    if (suite.customTests) {\n      suite.customTests.forEach(customTest => {\n        it(customTest.name, customTest.test);\n      });\n    }\n\n    // Error boundary test\n    it('handles errors gracefully', async () => {\n      const ErrorThrowingComponent = () => {\n        throw new Error('Test error');\n      };\n\n      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});\n\n      expect(() => {\n        render(\n          <TestWrapper config={{ errorBoundaries: true }}>\n            <ErrorThrowingComponent />\n          </TestWrapper>\n        );\n      }).not.toThrow();\n\n      consoleSpy.mockRestore();\n    });\n\n    // Performance analysis summary\n    it('provides performance analysis', async () => {\n      const analysis = performanceAnalyzer.getComponentAnalysis(suite.name);\n      const recommendations = performanceAnalyzer.generateRecommendations(suite.name);\n\n      console.log(`Performance analysis for ${suite.name}:`, analysis);\n      \n      if (recommendations.length > 0) {\n        console.log(`Recommendations for ${suite.name}:`, recommendations);\n      }\n\n      // Component should have some performance data\n      expect(Object.keys(analysis).length).toBeGreaterThan(0);\n    });\n  });\n}\n\n// Hook testing utilities\nexport function renderHook<T, P = {}>(\n  hook: (props: P) => T,\n  options: {\n    initialProps?: P;\n    mockProviders?: React.ComponentType<{ children: React.ReactNode }>[];\n  } = {}\n) {\n  const { initialProps, mockProviders = [] } = options;\n  let result: { current: T } = { current: undefined as any };\n  let rerender: (newProps?: P) => void;\n\n  function TestComponent(props: P) {\n    result.current = hook(props);\n    return null;\n  }\n\n  const renderResult = renderWithEnhancements(\n    <TestComponent {...(initialProps || {} as any)} />,\n    { mockProviders }\n  );\n\n  rerender = (newProps?: P) => {\n    renderResult.rerender(\n      <TestWrapper mockProviders={mockProviders}>\n        <TestComponent {...(newProps || initialProps || {} as any)} />\n      </TestWrapper>\n    );\n  };\n\n  return {\n    result,\n    rerender,\n    unmount: renderResult.unmount\n  };\n}\n\nexport interface PerformanceReport {\n  [metricName: string]: {\n    count: number;\n    average: number;\n    min: number;\n    max: number;\n    median: number;\n  };\n}\n\n// Performance testing utilities\nexport class PerformanceTestRunner {\n  private metrics: Array<{ name: string; value: number; timestamp: number }> = [];\n\n  async measureAsync<T>(name: string, fn: () => Promise<T>): Promise<T> {\n    const startTime = performance.now();\n    const result = await fn();\n    const endTime = performance.now();\n    \n    this.metrics.push({\n      name,\n      value: endTime - startTime,\n      timestamp: startTime\n    });\n\n    return result;\n  }\n\n  async measureAsyncTime<T>(name: string, fn: () => Promise<T>): Promise<number> {\n    const startTime = performance.now();\n    await fn();\n    const endTime = performance.now();\n    \n    const timeElapsed = endTime - startTime;\n    this.metrics.push({\n      name,\n      value: timeElapsed,\n      timestamp: startTime\n    });\n\n    return timeElapsed;\n  }\n\n  measure<T>(name: string, fn: () => T): T {\n    const startTime = performance.now();\n    const result = fn();\n    const endTime = performance.now();\n    \n    this.metrics.push({\n      name,\n      value: endTime - startTime,\n      timestamp: startTime\n    });\n\n    return result;\n  }\n\n  getMetrics() {\n    return [...this.metrics];\n  }\n\n  getAverageTime(name: string): number {\n    const nameMetrics = this.metrics.filter(m => m.name === name);\n    if (nameMetrics.length === 0) return 0;\n    \n    const total = nameMetrics.reduce((sum, m) => sum + m.value, 0);\n    return total / nameMetrics.length;\n  }\n\n  clear() {\n    this.metrics = [];\n  }\n\n  generateReport(): PerformanceReport {\n    const metricsByName: Record<string, number[]> = {};\n    \n    this.metrics.forEach(metric => {\n      if (!metricsByName[metric.name]) {\n        metricsByName[metric.name] = [];\n      }\n      metricsByName[metric.name].push(metric.value);\n    });\n\n    const report: PerformanceReport = {};\n\n    Object.entries(metricsByName).forEach(([name, values]) => {\n      report[name] = {\n        count: values.length,\n        average: values.reduce((sum, val) => sum + val, 0) / values.length,\n        min: Math.min(...values),\n        max: Math.max(...values),\n        median: values.sort((a, b) => a - b)[Math.floor(values.length / 2)]\n      };\n    });\n\n    return report;\n  }\n}\n\n// Visual regression testing\nexport function createVisualTest(\n  component: React.ReactElement,\n  testName: string,\n  options: {\n    variants?: Array<{ name: string; element: React.ReactElement }>;\n    viewports?: Array<{ name: string; width: number; height: number }>;\n  } = {}\n) {\n  describe(`Visual regression: ${testName}`, () => {\n    it('matches visual snapshot', () => {\n      const rendered = renderWithEnhancements(component);\n      expect(rendered.container.firstChild).toMatchSnapshot(`${testName}-default`);\n    });\n\n    if (options.variants) {\n      options.variants.forEach(variant => {\n        it(`matches visual snapshot for ${variant.name}`, () => {\n          const rendered = renderWithEnhancements(variant.element);\n          expect(rendered.container.firstChild).toMatchSnapshot(`${testName}-${variant.name}`);\n        });\n      });\n    }\n\n    if (options.viewports) {\n      options.viewports.forEach(viewport => {\n        it(`matches visual snapshot at ${viewport.name} viewport`, () => {\n          // Mock viewport dimensions\n          Object.defineProperty(window, 'innerWidth', {\n            writable: true,\n            configurable: true,\n            value: viewport.width,\n          });\n          Object.defineProperty(window, 'innerHeight', {\n            writable: true,\n            configurable: true,\n            value: viewport.height,\n          });\n\n          const rendered = renderWithEnhancements(component);\n          expect(rendered.container.firstChild).toMatchSnapshot(`${testName}-${viewport.name}`);\n        });\n      });\n    }\n  });\n}\n\n// Integration testing utilities\nexport class IntegrationTestRunner {\n  private testScenarios: Array<{\n    name: string;\n    steps: Array<{ action: string; target?: string; value?: any; assertion?: () => void }>;\n  }> = [];\n\n  addScenario(\n    name: string,\n    steps: Array<{ action: string; target?: string; value?: any; assertion?: () => void }>\n  ) {\n    this.testScenarios.push({ name, steps });\n  }\n\n  async runScenarios(component: React.ReactElement) {\n    for (const scenario of this.testScenarios) {\n      await this.runScenario(scenario, component);\n    }\n  }\n\n  private async runScenario(\n    scenario: { name: string; steps: Array<{ action: string; target?: string; value?: any; assertion?: () => void }> },\n    component: React.ReactElement\n  ) {\n    const rendered = renderWithEnhancements(component, {\n      config: { interactions: true, accessibility: true }\n    });\n\n    const user = userEvent.setup();\n\n    for (const step of scenario.steps) {\n      switch (step.action) {\n        case 'click':\n          if (step.target) {\n            const element = screen.getByTestId(step.target);\n            await user.click(element);\n          }\n          break;\n\n        case 'type':\n          if (step.target && step.value) {\n            const element = screen.getByTestId(step.target);\n            await user.type(element, step.value);\n          }\n          break;\n\n        case 'wait':\n          await waitFor(() => {}, { timeout: step.value || 1000 });\n          break;\n\n        case 'assert':\n          if (step.assertion) {\n            step.assertion();\n          }\n          break;\n\n        default:\n          console.warn(`Unknown action: ${step.action}`);\n      }\n\n      // Small delay between steps\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 50));\n      });\n    }\n  }\n}\n\n// Export testing utilities\nexport {\n  screen,\n  fireEvent,\n  waitFor,\n  act,\n  userEvent,\n  vi,\n  expect,\n  describe,\n  it,\n  beforeEach,\n  afterEach\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/env.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 36,
        "column": 7,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 38,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1073, 1076], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1073, 1076], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-redundant-type-constituents",
        "severity": 2,
        "message": "'any' overrides all other types in this union type.",
        "line": 36,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "overrides",
        "endLine": 36,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 89,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1146, 1149], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1146, 1149], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .env on an `any` value.",
        "line": 36,
        "column": 94,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 36,
        "endColumn": 97
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1176, 1179], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1176, 1179], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .env on an `any` value.",
        "line": 37,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 37,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 41,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 41,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access [key] on an `any` value.",
        "line": 41,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 41,
        "endColumn": 33
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 42,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 42,
        "endColumn": 61
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 42,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 42,
        "endColumn": 76
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Environment// Environment va// Environment variable configuration interface\nexport interface EnvConfig {\n  NODE_ENV: Environment;\n  VITE_API_URL: string;\n  VITE_FIREBASE_PROJECT_ID?: string;\n  VITE_FIREBASE_API_KEY?: string;\n  VITE_FIREBASE_AUTH_DOMAIN?: string;\n  VITE_FIREBASE_STORAGE_BUCKET?: string;\n  VITE_FIREBASE_MESSAGING_SENDER_ID?: string;\n  VITE_FIREBASE_APP_ID?: string;\n  VITE_STRIPE_PUBLISHABLE_KEY?: string;\n  VITE_APP_URL: string;\n  XAI_API_KEY?: string;\n}uration interface\nexport interface EnvConfig {\n  NODE_E    try {\n      new URL(appUrl);\n    } catch {\n      errors.push('VITE_APP_URL is not a valid URL');\n    }\n  }vironment;\n  VITE_API_URL: string;\n  VITE_FIREBASE_PROJECT_ID?: string;\n  VITE_FIREBASE_API_KEY?: string;\n  VITE_FIREBASE_AUTH_DOMAIN?: string;\n  VITE_FIREBASE_STORAGE_BUCKET?: string;\n  VITE_FIREBASE_MESSAGING_SENDER_ID?: string;\n  VITE_FIREBASE_APP_ID?: string;\n  VITE_STRIPE_PUBLISHABLE_KEY?: string;\n  VITE_APP_URL: string;\n}n and validation\n */\n\n// Cross-runtime env accessor (works in Vite browser and Node)\nconst viteEnv: any | undefined = (typeof import.meta !== 'undefined' && (import.meta as any).env)\n  ? (import.meta as any).env\n  : undefined;\n\nconst getEnv = (key: string, fallback = ''): string => {\n  const fromVite = viteEnv?.[key];\n  const fromNode = typeof process !== 'undefined' && process?.env ? process.env[key] : undefined;\n  return (fromVite ?? fromNode ?? fallback) as string;\n};\n\n// Environment types\nexport type Environment = 'development' | 'staging' | 'production';\n\n// Environment variable schema\nexport interface EnvConfig {\n  NODE_ENV: Environment;\n  VITE_API_URL: string;\n  VITE_FIREBASE_PROJECT_ID?: string;\n  VITE_FIREBASE_API_KEY?: string;\n  VITE_FIREBASE_AUTH_DOMAIN?: string;\n  VITE_FIREBASE_STORAGE_BUCKET?: string;\n  VITE_FIREBASE_MESSAGING_SENDER_ID?: string;\n  VITE_FIREBASE_APP_ID?: string;\n  VITE_STRIPE_PUBLISHABLE_KEY?: string;\n  VITE_APP_URL: string;\n}\n\n// Required environment variables by environment (supporting both VITE_ and NEXT_PUBLIC_ prefixes)\nconst requiredEnvVars: Record<Environment, string[]> = {\n  development: [\n    'VITE_FIREBASE_PROJECT_ID',\n    'VITE_FIREBASE_API_KEY', \n    'VITE_FIREBASE_AUTH_DOMAIN'\n  ],\n  staging: [\n    'VITE_API_URL',\n    'VITE_FIREBASE_PROJECT_ID',\n    'VITE_FIREBASE_API_KEY',\n    'VITE_FIREBASE_AUTH_DOMAIN',\n    'VITE_FIREBASE_STORAGE_BUCKET',\n    'VITE_FIREBASE_MESSAGING_SENDER_ID',\n    'VITE_FIREBASE_APP_ID',\n    'VITE_STRIPE_PUBLISHABLE_KEY'\n  ],\n  production: [\n    'VITE_API_URL',\n    'VITE_FIREBASE_PROJECT_ID',\n    'VITE_FIREBASE_API_KEY',\n    'VITE_FIREBASE_AUTH_DOMAIN',\n    'VITE_FIREBASE_STORAGE_BUCKET',\n    'VITE_FIREBASE_MESSAGING_SENDER_ID',\n    'VITE_FIREBASE_APP_ID',\n    'VITE_STRIPE_PUBLISHABLE_KEY',\n    'VITE_APP_URL'\n  ]\n};\n\n// Get current environment\nexport const getCurrentEnvironment = (): Environment => {\n  const env = getEnv('NODE_ENV', 'development') as Environment;\n  return ['development', 'staging', 'production'].includes(env) ? env : 'development';\n};\n\n// Validate environment variables\nexport const validateEnv = (): { isValid: boolean; missing: string[]; errors: string[] } => {\n  const env = getCurrentEnvironment();\n  const required = requiredEnvVars[env];\n  const missing: string[] = [];\n  const errors: string[] = [];\n\n  // Check required variables\n  required.forEach(varName => {\n    const value = getEnv(varName);\n    if (!value || value.trim() === '') {\n      missing.push(varName);\n    }\n  });\n\n  // Validate specific formats\n  const firebaseApiKey = getEnv('VITE_FIREBASE_API_KEY');\n  if (firebaseApiKey && firebaseApiKey.length < 10) { // Relaxed for demo values\n    errors.push('VITE_FIREBASE_API_KEY appears to be invalid (too short)');\n  }\n\n  const apiUrl = getEnv('VITE_API_URL');\n  if (apiUrl) {\n    try {\n      new URL(apiUrl);\n    } catch {\n      errors.push('VITE_API_URL is not a valid URL');\n    }\n  }\n\n  const appUrl = getEnv('VITE_APP_URL');\n  if (appUrl && env === 'production') {\n    try {\n      const url = new URL(appUrl);\n      if (url.protocol !== 'https:') {\n        errors.push('VITE_APP_URL must use HTTPS in production');\n      }\n    } catch {\n      errors.push('VITE_APP_URL is not a valid URL');\n    }\n  }\n\n  return {\n    isValid: missing.length === 0 && errors.length === 0,\n    missing,\n    errors\n  };\n};\n\n// Get environment configuration with defaults\nexport const getEnvConfig = (): Partial<EnvConfig> => {\n  const env = getCurrentEnvironment();\n  // Use VITE_ prefix for environment variables\n  const baseConfig = {\n    NODE_ENV: env,\n    VITE_API_URL: getEnv('VITE_API_URL') || (\n      env === 'production' \n        ? 'https://api.cosmichub.app'\n        : env === 'staging'\n        ? 'https://staging-api.cosmichub.app'\n        : 'http://localhost:8000'\n    ),\n    VITE_APP_URL: getEnv('VITE_APP_URL') || (\n      env === 'production'\n        ? 'https://cosmichub.app'\n        : env === 'staging'\n        ? 'https://staging.cosmichub.app'\n        : 'http://localhost:3000'\n    ),\n    ...(getEnv('VITE_FIREBASE_PROJECT_ID') && { VITE_FIREBASE_PROJECT_ID: getEnv('VITE_FIREBASE_PROJECT_ID') }),\n    ...(getEnv('VITE_FIREBASE_API_KEY') && { VITE_FIREBASE_API_KEY: getEnv('VITE_FIREBASE_API_KEY') }),\n    ...(getEnv('VITE_FIREBASE_AUTH_DOMAIN') && { VITE_FIREBASE_AUTH_DOMAIN: getEnv('VITE_FIREBASE_AUTH_DOMAIN') }),\n    ...(getEnv('VITE_FIREBASE_STORAGE_BUCKET') && { VITE_FIREBASE_STORAGE_BUCKET: getEnv('VITE_FIREBASE_STORAGE_BUCKET') }),\n    ...(getEnv('VITE_FIREBASE_MESSAGING_SENDER_ID') && { VITE_FIREBASE_MESSAGING_SENDER_ID: getEnv('VITE_FIREBASE_MESSAGING_SENDER_ID') }),\n    ...(getEnv('VITE_FIREBASE_APP_ID') && { VITE_FIREBASE_APP_ID: getEnv('VITE_FIREBASE_APP_ID') }),\n    ...(getEnv('VITE_STRIPE_PUBLISHABLE_KEY') && { VITE_STRIPE_PUBLISHABLE_KEY: getEnv('VITE_STRIPE_PUBLISHABLE_KEY') }),\n    ...(getEnv('XAI_API_KEY') && { XAI_API_KEY: getEnv('XAI_API_KEY') })\n  };\n\n  return baseConfig;\n};\n\n// Environment-specific feature flags\nexport const getFeatureFlags = () => {\n  const env = getCurrentEnvironment();\n  \n  return {\n    enableDebugMode: env === 'development',\n    enableBetaFeatures: env !== 'production',\n    enableAnalytics: env === 'production',\n    enableHotReload: env === 'development',\n    enableServiceWorker: env === 'production',\n    enableErrorReporting: env !== 'development',\n    enablePerformanceMonitoring: env === 'production',\n    enableMockData: env === 'development',\n    enableTestingMode: env !== 'production'\n  };\n};\n\n// Utility functions\nexport const isDevelopment = () => getCurrentEnvironment() === 'development';\nexport const isStaging = () => getCurrentEnvironment() === 'staging';\nexport const isProduction = () => getCurrentEnvironment() === 'production';\n\n// Safe environment getter with fallbacks\nexport const getEnvVar = (key: keyof EnvConfig, fallback?: string): string => {\n  const value = getEnv(key);\n  if (!value || value.trim() === '') {\n    if (fallback !== undefined) {\n      return fallback;\n    }\n    console.warn(`Environment variable ${key} is not set`);\n    return '';\n  }\n  return value;\n};\n\n// Initialize and validate environment on import\nlet validationResult: ReturnType<typeof validateEnv> | null = null;\n\nexport const initializeEnv = () => {\n  validationResult = validateEnv();\n  \n  if (!validationResult.isValid) {\n    console.group('🚨 Environment Configuration Issues');\n    \n    if (validationResult.missing.length > 0) {\n      console.error('Missing required environment variables:', validationResult.missing);\n    }\n    \n    if (validationResult.errors.length > 0) {\n      console.error('Environment validation errors:', validationResult.errors);\n    }\n    \n    console.groupEnd();\n    \n    // Only throw in production to prevent development issues\n    if (isProduction()) {\n      throw new Error('Environment validation failed. Check console for details.');\n    }\n  } else {\n    console.log(`✅ Environment (${getCurrentEnvironment()}) configured successfully`);\n  }\n  \n  return validationResult;\n};\n\n// Export current environment config\nexport const env = getEnvConfig();\n\n// Auto-initialize in browser environment\nif (typeof window !== 'undefined') {\n  initializeEnv();\n}\n\nexport default {\n  getCurrentEnvironment,\n  validateEnv,\n  getEnvConfig,\n  getFeatureFlags,\n  isDevelopment,\n  isStaging,\n  isProduction,\n  getEnvVar,\n  initializeEnv,\n  env\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/featureKeys.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/firebase.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 14,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 14,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 15,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 15,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 16,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 16,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 17,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 17,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 18,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 18,
        "endColumn": 71
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 19,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 19,
        "endColumn": 46
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 23,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [910, 941], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 170,
        "column": 14,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 170,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 176,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 176,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 177,
        "column": 3,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 177,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 73,
        "column": 12,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 78,
        "endColumn": 15,
        "fix": { "range": [2954, 2962], "text": "" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 89,
        "column": 10,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 94,
        "endColumn": 20,
        "fix": { "range": [3495, 3508], "text": "" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/**\n * Optimized Firebase Configuration\n * Centralized configuration with performance optimizations and emulator support\n */\n\n/// <reference types=\"vite/client\" />\n\nimport { initializeApp, getApps, FirebaseApp } from 'firebase/app';\nimport { getAuth, connectAuthEmulator, Auth } from 'firebase/auth';\nimport { getFirestore, connectFirestoreEmulator, Firestore, enableNetwork, disableNetwork } from 'firebase/firestore';\n\n// Firebase config with environment validation\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Local devConsole (kept internal to avoid cross-package dependency)\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\n\n// Validate required config\ninterface MinimalViteEnv {\n  VITE_FIREBASE_API_KEY?: string;\n  VITE_FIREBASE_PROJECT_ID?: string;\n  VITE_FIREBASE_APP_ID?: string;\n  [k: string]: string | undefined;\n}\nconst requiredEnvVars = ['VITE_FIREBASE_API_KEY', 'VITE_FIREBASE_PROJECT_ID', 'VITE_FIREBASE_APP_ID'] as const;\nconst envRef: MinimalViteEnv = import.meta.env as unknown as MinimalViteEnv;\nconst missingVars = requiredEnvVars.filter((varName) => {\n  const value = envRef[varName];\n  return value === undefined || value === null || value === '';\n});\n\nif (missingVars.length > 0) {\n  devConsole.warn?.(`Missing required Firebase environment variables: ${missingVars.join(', ')}. Using mock auth.`);\n}\n\n//Initialize Firebase app (singleton pattern)\nlet app: FirebaseApp;\nlet auth: Auth;\nlet db: Firestore;\nlet hasAuthAvailable = false;\n\n// Type guard for Firestore instance presence\nconst hasFirestoreApp = (instance: unknown): instance is Firestore => {\n  return typeof instance === 'object' && instance !== null && 'app' in (instance as Record<string, unknown>);\n};\n\ntry {\n  // Check if Firebase app already exists\n  const existingApps = getApps();\n  app = existingApps.length > 0 ? existingApps[0] : initializeApp(firebaseConfig);\n  \n  // Initialize services with error handling\n  try {\n    auth = getAuth(app);\n    hasAuthAvailable = true;\n  } catch (authError) {\n    devConsole.warn?.('Firebase Auth initialization failed, using fallback:', authError);\n    // Create a proxy that warns instead of throwing\n    /* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\n    auth = new Proxy({} as unknown as Auth, {\n      get() {\n        devConsole.warn?.('Firebase Auth not available - using mock auth instead');\n        return undefined as unknown as never;\n      }\n    }) as Auth;\n    /* eslint-enable @typescript-eslint/no-unnecessary-type-assertion */\n    hasAuthAvailable = false;\n  }\n  \n  try {\n    db = getFirestore(app);\n  } catch (dbError) {\n    devConsole.warn?.('Firestore initialization failed:', dbError);\n    // Create a proxy for Firestore as well\n    /* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\n    db = new Proxy({} as unknown as Firestore, {\n      get() {\n        devConsole.warn?.('Firestore not available');\n        return undefined as unknown as never;\n      }\n    }) as Firestore;\n    /* eslint-enable @typescript-eslint/no-unnecessary-type-assertion */\n  }\n\n  // Connect to emulators in development\n  if (import.meta.env.DEV && import.meta.env.VITE_USE_EMULATOR === 'true') {\n    let authEmulatorConnected = false;\n    let firestoreEmulatorConnected = false;\n\n    try {\n      if (!authEmulatorConnected && hasAuthAvailable) {\n        connectAuthEmulator(auth, 'http://localhost:9099', { disableWarnings: true });\n        authEmulatorConnected = true;\n  devConsole.log?.('🔥 Firebase Auth emulator connected - development mode');\n      }\n    } catch {\n      devConsole.log?.('Auth emulator already connected or unavailable');\n    }\n\n    try {\n  if (!firestoreEmulatorConnected && hasFirestoreApp(db)) {\n        connectFirestoreEmulator(db, 'localhost', 8080);\n        firestoreEmulatorConnected = true;\n  devConsole.log?.('🔥 Firestore emulator connected - development mode');\n      }\n    } catch {\n      devConsole.log?.('Firestore emulator already connected or unavailable');\n    }\n  }\n\n  devConsole.log?.(`🔥 Firebase initialized for project: ${firebaseConfig.projectId}`);\n} catch (error) {\n  devConsole.error('Firebase initialization failed:', error);\n  throw error;\n}\n\n/**\n * Performance optimization: Network management\n */\nexport const enableFirestoreNetwork = async (): Promise<void> => {\n  try {\n  if (hasFirestoreApp(db)) {\n      await enableNetwork(db);\n      devConsole.log?.('📡 Firestore network enabled');\n    } else {\n      devConsole.log?.('📡 Firestore not available, skipping network enable');\n    }\n  } catch (error) {\n    devConsole.warn?.('Failed to enable Firestore network:', error);\n  }\n};\n\nexport const disableFirestoreNetwork = async (): Promise<void> => {\n  try {\n  if (hasFirestoreApp(db)) {\n      await disableNetwork(db);\n      devConsole.log?.('📡 Firestore network disabled');\n    } else {\n      devConsole.log?.('📡 Firestore not available, skipping network disable');\n    }\n  } catch (error) {\n    devConsole.warn?.('Failed to disable Firestore network:', error);\n  }\n};\n\n/**\n * Firebase service instances\n */\nexport { app, auth, db };\nexport { hasAuthAvailable };\n\n/**\n * Environment utilities\n */\nexport const isEmulator = import.meta.env.DEV && import.meta.env.VITE_USE_EMULATOR === 'true';\nexport const isDevelopment = import.meta.env.DEV;\nexport const projectId = firebaseConfig.projectId;\n\n/**\n * Performance monitoring\n */\nexport const getFirebasePerformanceInfo = () => ({\n  projectId: firebaseConfig.projectId,\n  authDomain: firebaseConfig.authDomain,\n  isEmulator,\n  isDevelopment,\n  timestamp: Date.now()\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/hooks/usePerformance.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 4,
        "column": 76,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [204, 242], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 6,
        "column": 77,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [348, 386], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 8,
        "column": 50,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [466, 504], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import { useState, useEffect, useCallback, useRef, useMemo } from 'react';\n\n// Lightweight internal logger (no-op in prod build)\nconst logDev = (...args: unknown[]): void => { if (import.meta.env?.DEV) { // eslint-disable-next-line no-console\n  console.log(...args); } };\nconst warnDev = (...args: unknown[]): void => { if (import.meta.env?.DEV) { // eslint-disable-next-line no-console\n  console.warn(...args); } };\nconst errorDev = (...args: unknown[]): void => { // eslint-disable-next-line no-console\n  console.error(...args); };\n\nexport interface PerformanceMetrics {\n  duration: number;\n  startTime: number;\n  endTime: number;\n  memory?: number;\n  paintTime?: number;\n  loadTime?: number;\n}\n\nexport interface OperationMetrics {\n  operationId: string;\n  operationName: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  status: 'pending' | 'completed' | 'error';\n  error?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface PagePerformanceMetrics {\n  pageLoadTime: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  firstInputDelay: number;\n  cumulativeLayoutShift: number;\n  navigationTiming: PerformanceTiming;\n}\n\n// Shape of real-time performance monitoring report\nexport interface RealTimePerformanceReportSummary {\n  totalMetrics: number;\n  averageRenderTime: number;\n  slowestComponent: string;\n  fastestComponent: string;\n  errorRate: number;\n}\n\nexport interface RealTimePerformanceReport {\n  components: unknown[];\n  operations: unknown[];\n  pages: unknown[];\n  summary: RealTimePerformanceReportSummary;\n}\n\ninterface PerformanceMonitorLike {\n  getPerformanceReport: () => RealTimePerformanceReport;\n  enableRealTimeUpdates: (cb: (r: RealTimePerformanceReport) => void) => (() => void);\n}\n\n// Non-standard memory interface (Chrome specific); defined defensively.\ninterface PerformanceMemoryLike {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n}\n\ninterface MemoryInfo { used: number; total: number; limit: number }\n\n// Guard helpers\nfunction isPerformanceMonitor(value: unknown): value is PerformanceMonitorLike {\n  return typeof value === 'object' && value !== null &&\n    typeof (value as Record<string, unknown>).getPerformanceReport === 'function' &&\n    typeof (value as Record<string, unknown>).enableRealTimeUpdates === 'function';\n}\n\n/**\n * Core performance measurement hook\n */\nexport function usePerformance(): {\n  isTracking: boolean;\n  metrics: PerformanceMetrics | null;\n  start: () => void;\n  end: () => PerformanceMetrics | null;\n  measure: <T>(name: string, op: () => Promise<T> | T) => Promise<{ result: T; metrics: PerformanceMetrics }>;\n} {\n  const [isTracking, setIsTracking] = useState<boolean>(false);\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const startTimeRef = useRef<number>(0);\n\n  const start = useCallback((): void => {\n    startTimeRef.current = performance.now();\n    setIsTracking(true);\n    setMetrics(null);\n  }, []);\n\n  const end = useCallback((): PerformanceMetrics | null => {\n    if (isTracking !== true) return null;\n    const endTime = performance.now();\n    const newMetrics: PerformanceMetrics = {\n      duration: endTime - startTimeRef.current,\n      startTime: startTimeRef.current,\n      endTime,\n      memory: (performance as unknown as { memory?: PerformanceMemoryLike }).memory?.usedJSHeapSize,\n    };\n    setMetrics(newMetrics);\n    setIsTracking(false);\n    return newMetrics;\n  }, [isTracking]);\n\n  const measure = useCallback(async <T>(\n    operationName: string,\n    operation: () => Promise<T> | T\n  ): Promise<{ result: T; metrics: PerformanceMetrics }> => {\n    const startTime = performance.now();\n    try {\n      const result = await operation();\n      const endTime = performance.now();\n      const m: PerformanceMetrics = {\n        duration: endTime - startTime,\n        startTime,\n        endTime,\n        memory: (performance as unknown as { memory?: PerformanceMemoryLike }).memory?.usedJSHeapSize,\n      };\n      logDev(`Performance measure '${operationName}'`, m);\n      return { result, metrics: m };\n    } catch (err) {\n      const endTime = performance.now();\n      const m: PerformanceMetrics = {\n        duration: endTime - startTime,\n        startTime,\n        endTime,\n        memory: (performance as unknown as { memory?: PerformanceMemoryLike }).memory?.usedJSHeapSize,\n      };\n      errorDev(`Performance measure failed '${operationName}'`, err, m);\n      throw Object.assign(err instanceof Error ? err : new Error('Operation failed'), { metrics: m });\n    }\n  }, []);\n\n  return { isTracking, metrics, start, end, measure };\n}\n\n/**\n * Hook for tracking multiple operations\n */\nexport function useOperationTracking(): {\n  operations: OperationMetrics[];\n  startOperation: (name: string, metadata?: Record<string, unknown>) => string;\n  endOperation: (id: string, errorMessage?: string) => void;\n  trackOperation: <T>(name: string, op: () => Promise<T> | T, metadata?: Record<string, unknown>) => Promise<T>;\n  clearOperations: () => void;\n  getOperationsByStatus: (status: OperationMetrics['status']) => OperationMetrics[];\n  getOperationStats: () => { total: number; completed: number; errors: number; pending: number; averageDuration: number };\n} {\n  const [operationsMap, setOperationsMap] = useState<Map<string, OperationMetrics>>(new Map());\n\n  const operations = useMemo(() => Array.from(operationsMap.values()), [operationsMap]);\n\n  const startOperation = useCallback((operationName: string, metadata?: Record<string, unknown>): string => {\n    const operationId = `${operationName}_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`;\n    const operation: OperationMetrics = {\n      operationId,\n      operationName,\n      startTime: performance.now(),\n      status: 'pending',\n      metadata,\n    };\n    setOperationsMap(prev => new Map(prev).set(operationId, operation));\n    return operationId;\n  }, []);\n\n  const endOperation = useCallback((operationId: string, errorMessage?: string): void => {\n    setOperationsMap(prev => {\n      const next = new Map(prev);\n      const op = next.get(operationId);\n  if (op !== undefined) {\n        const endTime = performance.now();\n        next.set(operationId, {\n          ...op,\n            endTime,\n            duration: endTime - op.startTime,\n            status: (errorMessage !== undefined && errorMessage !== null && errorMessage !== '') ? 'error' : 'completed',\n            error: errorMessage,\n        });\n      }\n      return next;\n    });\n  }, []);\n\n  const trackOperation = useCallback(async <T>(name: string, op: () => Promise<T> | T, metadata?: Record<string, unknown>): Promise<T> => {\n    const id = startOperation(name, metadata);\n    try {\n      const result = await op();\n      endOperation(id);\n      return result;\n    } catch (err) {\n      endOperation(id, err instanceof Error ? err.message : 'Unknown error');\n      throw err;\n    }\n  }, [startOperation, endOperation]);\n\n  const clearOperations = useCallback((): void => { setOperationsMap(new Map()); }, []);\n\n  const getOperationsByStatus = useCallback((status: OperationMetrics['status']): OperationMetrics[] =>\n    operations.filter(o => o.status === status), [operations]);\n\n  const getOperationStats = useCallback(() => {\n    const completed = operations.filter(o => o.status === 'completed');\n    const errors = operations.filter(o => o.status === 'error');\n    const pending = operations.filter(o => o.status === 'pending');\n    const avgDuration = completed.length > 0 ? completed.reduce((s, o) => s + (o.duration ?? 0), 0) / completed.length : 0;\n    return { total: operations.length, completed: completed.length, errors: errors.length, pending: pending.length, averageDuration: avgDuration };\n  }, [operations]);\n\n  return { operations, startOperation, endOperation, trackOperation, clearOperations, getOperationsByStatus, getOperationStats };\n}\n\n/**\n * Hook for page-level performance monitoring\n */\nexport function usePagePerformance(): { metrics: Partial<PagePerformanceMetrics>; isLoading: boolean; refreshMetrics: () => void } {\n  const [metrics, setMetrics] = useState<Partial<PagePerformanceMetrics>>({});\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const collectMetrics = (): void => {\n      try {\n        // navigationTiming (deprecated) fallback; prefer PerformanceNavigationTiming entry\n        const navEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;\n  const navigationTiming = performance.timing;\n  const pageLoadTime = (navEntry !== undefined) ? navEntry.duration : (navigationTiming.loadEventEnd - navigationTiming.navigationStart);\n\n        // Paint entries\n        const paintEntries = performance.getEntriesByType('paint') as PerformanceEntry[];\n        const fcpEntry = paintEntries.find(e => e.name === 'first-contentful-paint');\n  const firstContentfulPaint = (fcpEntry !== undefined && fcpEntry !== null) ? fcpEntry.startTime : 0;\n\n        // LCP\n        let largestContentfulPaint = 0;\n        let lcpObserver: PerformanceObserver | undefined;\n        if (typeof PerformanceObserver === 'function') {\n          try {\n            lcpObserver = new PerformanceObserver((list) => {\n              const entries = list.getEntries();\n              const last = entries[entries.length - 1];\n              if (entries.length > 0 && last !== undefined) {\n                largestContentfulPaint = last.startTime;\n                setMetrics(prev => ({ ...prev, largestContentfulPaint }));\n              }\n            });\n            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n          } catch {\n            // ignore\n          }\n        }\n\n        const pageMetrics: Partial<PagePerformanceMetrics> = {\n          pageLoadTime,\n          firstContentfulPaint,\n          largestContentfulPaint,\n          navigationTiming,\n        };\n        setMetrics(pageMetrics);\n        setIsLoading(false);\n      } catch (err) {\n        warnDev('Failed to collect page performance metrics', err);\n        setIsLoading(false);\n      }\n    };\n\n    if (document.readyState === 'complete') {\n      collectMetrics();\n      return; // no cleanup needed\n    }\n    window.addEventListener('load', collectMetrics, { once: true });\n    return () => window.removeEventListener('load', collectMetrics);\n  }, []);\n\n  const refreshMetrics = useCallback((): void => {\n    setIsLoading(true);\n  const navigationTiming = performance.timing;\n    const pageLoadTime = navigationTiming.loadEventEnd - navigationTiming.navigationStart;\n    setMetrics({ pageLoadTime, navigationTiming });\n    setIsLoading(false);\n  }, []);\n\n  return { metrics, isLoading, refreshMetrics };\n}\n\n/**\n * Hook for memory usage monitoring\n */\nexport function useMemoryMonitoring(): {\n  memoryInfo: MemoryInfo | null;\n  updateMemoryInfo: () => void;\n  getMemoryUsagePercentage: () => number;\n  formatBytes: (bytes: number) => string;\n} {\n  const [memoryInfo, setMemoryInfo] = useState<MemoryInfo | null>(null);\n\n  const updateMemoryInfo = useCallback((): void => {\n    const perfAny = performance as unknown as { memory?: PerformanceMemoryLike };\n  if (perfAny.memory !== undefined && perfAny.memory !== null) {\n      const memory = perfAny.memory;\n      setMemoryInfo({ used: memory.usedJSHeapSize, total: memory.totalJSHeapSize, limit: memory.jsHeapSizeLimit });\n    }\n  }, []);\n\n  useEffect(() => {\n    updateMemoryInfo();\n    const interval = setInterval(updateMemoryInfo, 5000);\n    return () => clearInterval(interval);\n  }, [updateMemoryInfo]);\n\n  const getMemoryUsagePercentage = useCallback((): number => {\n    if (memoryInfo === null) return 0;\n    return memoryInfo.limit > 0 ? (memoryInfo.used / memoryInfo.limit) * 100 : 0;\n  }, [memoryInfo]);\n\n  const formatBytes = useCallback((bytes: number): string => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Bytes';\n    const i = Math.min(sizes.length - 1, Math.floor(Math.log(bytes) / Math.log(1024)));\n    const value = bytes / Math.pow(1024, i);\n    return `${Math.round(value * 100) / 100} ${sizes[i]}`;\n  }, []);\n\n  return { memoryInfo, updateMemoryInfo, getMemoryUsagePercentage, formatBytes };\n}\n\n/**\n * Hook for real-time performance monitoring\n * Provides live updates of performance metrics\n */\nexport function useRealTimePerformance(): RealTimePerformanceReport {\n  const [report, setReport] = useState<RealTimePerformanceReport>({\n    components: [],\n    operations: [],\n    pages: [],\n    summary: { totalMetrics: 0, averageRenderTime: 0, slowestComponent: '', fastestComponent: '', errorRate: 0 }\n  });\n\n  useEffect(() => {\n    let mounted = true;\n    let cleanup: (() => void) | undefined;\n\n    const setup = async (): Promise<void> => {\n      try {\n        const mod: unknown = await import('../performance');\n        const pmCandidate = (mod as Record<string, unknown>).performanceMonitor;\n        if (!mounted || !isPerformanceMonitor(pmCandidate)) return;\n        setReport(pmCandidate.getPerformanceReport());\n        cleanup = pmCandidate.enableRealTimeUpdates((r) => { if (mounted) setReport(r); });\n      } catch (err) {\n        warnDev('Failed to setup performance monitoring', err);\n      }\n    };\n    void setup();\n  return () => { mounted = false; if (typeof cleanup === 'function') cleanup(); };\n  }, []);\n\n  return report;\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/lazy-loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/lazy-loading/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/optimization/componentLibrary.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'PatternVariant' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 286,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 286,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9044, 9047], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9044, 9047], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .variants on an `any` value.",
        "line": 286,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 286,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 287,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 287,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9080, 9083], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9080, 9083], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .variants on an `any` value.",
        "line": 287,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 287,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9106, 9109], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9106, 9109], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .required on an `any` value.",
        "line": 289,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 289,
        "endColumn": 53
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .props on an `any` value.",
        "line": 289,
        "column": 59,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 289,
        "endColumn": 64
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `{}`.",
        "line": 290,
        "column": 23,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 290,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .props on an `any` value.",
        "line": 290,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 290,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 307,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 307,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9798, 9801], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9798, 9801], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .accessibility on an `any` value.",
        "line": 307,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 307,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 307,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 307,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9846, 9849], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9846, 9849], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .accessibility on an `any` value.",
        "line": 307,
        "column": 74,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 307,
        "endColumn": 87
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 308,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 308,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 308,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 308,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9887, 9890], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9887, 9890], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .accessibility on an `any` value.",
        "line": 308,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 308,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Component Library Optimization Engine\n * \n * Provides automated component analysis, optimization suggestions,\n * and design system compliance enforcement for UI components.\n */\n\nimport { DesignTokens, ComponentPattern } from '../testing/designSystem';\n// Local relaxed pattern variant types for optimization module (avoids strict mismatch with testing definitions)\ninterface PatternVariant {\n  name: string;\n  props: Record<string, string>;\n  required?: boolean;\n}\n\nexport interface ComponentIssue {\n  id: string;\n  component: string;\n  type: 'bug' | 'accessibility' | 'performance' | 'design' | 'pattern';\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  message: string;\n  fix?: string;\n  line?: number;\n  column?: number;\n}\n\nexport interface ComponentOptimization {\n  component: string;\n  optimizations: {\n    codeReduction: number;\n    performanceGain: number;\n    accessibilityScore: number;\n    designCompliance: number;\n  };\n  suggestions: string[];\n}\n\nexport interface ComponentLibraryReport {\n  totalComponents: number;\n  issuesFound: ComponentIssue[];\n  optimizations: ComponentOptimization[];\n  overallHealth: number;\n  designSystemCompliance: number;\n  recommendations: string[];\n  timestamp: number;\n}\n\nexport class ComponentLibraryOptimizer {\n  private designTokens: DesignTokens;\n  private componentPatterns: Map<string, ComponentPattern>;\n\n  constructor(designTokens: DesignTokens, componentPatterns: ComponentPattern[]) {\n    this.designTokens = designTokens;\n    this.componentPatterns = new Map(\n      componentPatterns.map(pattern => [pattern.name, pattern])\n    );\n  }\n\n  /**\n   * Analyze component source code for issues and optimization opportunities\n   */\n  analyzeComponent(componentCode: string, componentName: string): ComponentIssue[] {\n    const issues: ComponentIssue[] = [];\n\n    // Bug detection\n    issues.push(...this.detectBugs(componentCode, componentName));\n    \n    // Accessibility analysis\n    issues.push(...this.analyzeAccessibility(componentCode, componentName));\n    \n    // Performance analysis\n    issues.push(...this.analyzePerformance(componentCode, componentName));\n    \n    // Design system compliance\n    issues.push(...this.analyzeDesignCompliance(componentCode, componentName));\n    \n    // Pattern compliance\n    issues.push(...this.analyzePatternCompliance(componentCode, componentName));\n\n    return issues;\n  }\n\n  /**\n   * Detect common bugs in component code\n   */\n  private detectBugs(code: string, componentName: string): ComponentIssue[] {\n    const issues: ComponentIssue[] = [];\n\n    // Undefined function references - look for function calls that aren't defined\n    const functionCallRegex = /onClick=\\{[^}]*(\\w+)\\([^}]*\\)/g;\n    const functionCalls = [...code.matchAll(functionCallRegex)];\n    \n    functionCalls.forEach(match => {\n      const functionName = match[1];\n      if (functionName && \n          !code.includes(`const ${functionName}`) && \n          !code.includes(`function ${functionName}`) &&\n          !code.includes(`= ${functionName}`) &&\n          functionName !== 'setIsOpen' && \n          functionName !== 'onChange') {\n        issues.push({\n          id: `bug-undefined-${functionName}`,\n          component: componentName,\n          type: 'bug',\n          severity: 'critical',\n          message: `Undefined function reference: ${functionName}`,\n          fix: `Replace ${functionName} with the correct function name or define the function`\n        });\n      }\n    });\n\n    // Missing key props in lists\n    if (code.includes('.map(') && !code.includes('key=')) {\n      issues.push({\n        id: 'bug-missing-keys',\n        component: componentName,\n        type: 'bug',\n        severity: 'high',\n        message: 'Missing key prop in list rendering',\n        fix: 'Add unique key prop to list items'\n      });\n    }\n\n    // Potential memory leaks (missing cleanup)\n    if (code.includes('addEventListener') && !code.includes('removeEventListener')) {\n      issues.push({\n        id: 'bug-memory-leak',\n        component: componentName,\n        type: 'bug',\n        severity: 'medium',\n        message: 'Potential memory leak: event listener not cleaned up',\n        fix: 'Add cleanup in useEffect return function'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Analyze accessibility compliance\n   */\n  private analyzeAccessibility(code: string, componentName: string): ComponentIssue[] {\n    const issues: ComponentIssue[] = [];\n\n    // Missing ARIA labels\n    if (code.includes('button') && !code.includes('aria-label') && !code.includes('aria-labelledby')) {\n      issues.push({\n        id: 'a11y-missing-label',\n        component: componentName,\n        type: 'accessibility',\n        severity: 'high',\n        message: 'Button missing accessible label',\n        fix: 'Add aria-label or aria-labelledby attribute'\n      });\n    }\n\n    // Incorrect ARIA values\n    const ariaMatches = code.match(/aria-\\w+=\"(true|false)\"/g);\n    if (ariaMatches) {\n      ariaMatches.forEach(match => {\n        if (match.includes('=\"true\"') || match.includes('=\"false\"')) {\n          issues.push({\n            id: 'a11y-aria-strings',\n            component: componentName,\n            type: 'accessibility',\n            severity: 'medium',\n            message: 'ARIA boolean attributes should use string values',\n            fix: 'Use \"true\"/\"false\" strings instead of boolean values'\n          });\n        }\n      });\n    }\n\n    // Missing focus management\n    if (code.includes('useState') && code.includes('isOpen') && !code.includes('focus()')) {\n      issues.push({\n        id: 'a11y-focus-management',\n        component: componentName,\n        type: 'accessibility',\n        severity: 'medium',\n        message: 'Missing focus management for interactive elements',\n        fix: 'Implement proper focus management when opening/closing'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Analyze performance optimization opportunities\n   */\n  private analyzePerformance(code: string, componentName: string): ComponentIssue[] {\n    const issues: ComponentIssue[] = [];\n\n    // Missing memoization\n    if (code.includes('useEffect') && code.includes('[]')) {\n      const effectCount = (code.match(/useEffect/g) || []).length;\n      if (effectCount > 2) {\n        issues.push({\n          id: 'perf-memoization',\n          component: componentName,\n          type: 'performance',\n          severity: 'medium',\n          message: 'Consider memoizing expensive computations',\n          fix: 'Use useMemo for expensive calculations or useCallback for functions'\n        });\n      }\n    }\n\n    // Inline object creation - improved detection\n    const inlineStyleRegex = /style=\\{\\{[^}]+\\}\\}/g;\n    const inlineObjectMatches = code.match(inlineStyleRegex);\n    if (inlineObjectMatches && inlineObjectMatches.length > 0) {\n      issues.push({\n        id: 'perf-inline-objects',\n        component: componentName,\n        type: 'performance',\n        severity: 'low',\n        message: 'Multiple inline object creations detected',\n        fix: 'Move static objects outside component or use useMemo'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Analyze design system compliance\n   */\n  private analyzeDesignCompliance(code: string, componentName: string): ComponentIssue[] {\n    const issues: ComponentIssue[] = [];\n\n    // Hardcoded colors\n    const hardcodedColors = code.match(/(#[0-9a-fA-F]{3,6}|rgb\\(|rgba\\()/g);\n    if (hardcodedColors) {\n      issues.push({\n        id: 'design-hardcoded-colors',\n        component: componentName,\n        type: 'design',\n        severity: 'medium',\n        message: 'Hardcoded colors detected',\n        fix: 'Use design tokens from the design system'\n      });\n    }\n\n    // Hardcoded spacing values - improved detection\n    const hardcodedSpacing = code.match(/['\"`][\\w\\s]*:\\s*\\d+px/g);\n    if (hardcodedSpacing) {\n      issues.push({\n        id: 'design-hardcoded-spacing',\n        component: componentName,\n        type: 'design',\n        severity: 'medium',\n        message: 'Hardcoded spacing values detected',\n        fix: 'Use design tokens from the design system'\n      });\n    }\n\n    // Non-standard font sizes\n    const nonStandardFonts = code.match(/text-(xs|sm|base|lg|xl|2xl|3xl|4xl|5xl|6xl)/g);\n    if (!nonStandardFonts && code.includes('text-')) {\n      issues.push({\n        id: 'design-non-standard-fonts',\n        component: componentName,\n        type: 'design',\n        severity: 'low',\n        message: 'Non-standard font sizes detected',\n        fix: 'Use typography scale from design system'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Analyze component pattern compliance\n   */\n  private analyzePatternCompliance(code: string, componentName: string): ComponentIssue[] {\n    const issues: ComponentIssue[] = [];\n    \n    const pattern = this.componentPatterns.get(componentName);\n    if (!pattern) return issues;\n\n    // Check required props\n    // variants in ComponentPattern are string[] (names). We keep an internal augmented map if needed later.\n    if (Array.isArray((pattern as any).variants)) {\n      (pattern as any).variants.forEach((v: any) => {\n        // Only process if variant is an object with metadata (our extended form)\n        if (v && typeof v === 'object' && v.required && v.props) {\n          Object.keys(v.props).forEach(prop => {\n            if (!code.includes(prop)) {\n              issues.push({\n                id: `pattern-missing-prop-${prop}`,\n                component: componentName,\n                type: 'pattern',\n                severity: 'high',\n                message: `Missing required prop: ${prop}`,\n                fix: `Add ${prop} prop to component interface`\n              });\n            }\n          });\n        }\n      });\n    }\n\n    // Check accessibility requirements\n    if ((pattern as any).accessibility && Array.isArray((pattern as any).accessibility)) {\n      (pattern as any).accessibility.forEach((requirement: string) => {\n        if (!code.includes(requirement)) {\n          issues.push({\n            id: `pattern-a11y-${requirement}`,\n            component: componentName,\n            type: 'pattern',\n            severity: 'high',\n            message: `Missing accessibility requirement: ${requirement}`,\n            fix: `Implement ${requirement} for pattern compliance`\n          });\n        }\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Generate optimization suggestions for component\n   */\n  optimizeComponent(componentCode: string, componentName: string): ComponentOptimization {\n    const issues = this.analyzeComponent(componentCode, componentName);\n    \n    const bugIssues = issues.filter(i => i.type === 'bug');\n    const perfIssues = issues.filter(i => i.type === 'performance');\n    const a11yIssues = issues.filter(i => i.type === 'accessibility');\n    const designIssues = issues.filter(i => i.type === 'design');\n\n    return {\n      component: componentName,\n      optimizations: {\n        codeReduction: Math.max(0, 20 - bugIssues.length * 5),\n        performanceGain: Math.max(0, 100 - perfIssues.length * 15),\n        accessibilityScore: Math.max(0, 100 - a11yIssues.length * 10),\n        designCompliance: Math.max(0, 100 - designIssues.length * 8)\n      },\n      suggestions: [\n        ...bugIssues.map(issue => issue.fix).filter(Boolean) as string[],\n        ...perfIssues.map(issue => issue.fix).filter(Boolean) as string[],\n        ...a11yIssues.map(issue => issue.fix).filter(Boolean) as string[],\n        ...designIssues.map(issue => issue.fix).filter(Boolean) as string[]\n      ]\n    };\n  }\n\n  /**\n   * Generate comprehensive component library report\n   */\n  generateReport(components: Array<{ name: string; code: string }>): ComponentLibraryReport {\n    const allIssues: ComponentIssue[] = [];\n    const optimizations: ComponentOptimization[] = [];\n\n    components.forEach(({ name, code }) => {\n      const issues = this.analyzeComponent(code, name);\n      const optimization = this.optimizeComponent(code, name);\n      \n      allIssues.push(...issues);\n      optimizations.push(optimization);\n    });\n\n    const criticalIssues = allIssues.filter(i => i.severity === 'critical');\n    const highIssues = allIssues.filter(i => i.severity === 'high');\n    \n    const overallHealth = Math.max(0, 100 - (criticalIssues.length * 20 + highIssues.length * 10));\n    \n    const avgDesignCompliance = optimizations.reduce((sum, opt) => \n      sum + opt.optimizations.designCompliance, 0) / optimizations.length;\n\n    return {\n      totalComponents: components.length,\n      issuesFound: allIssues,\n      optimizations,\n      overallHealth,\n      designSystemCompliance: avgDesignCompliance,\n      recommendations: this.generateRecommendations(allIssues),\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Generate actionable recommendations\n   */\n  private generateRecommendations(issues: ComponentIssue[]): string[] {\n    const recommendations: string[] = [];\n    \n    const criticalIssues = issues.filter(i => i.severity === 'critical');\n    const bugIssues = issues.filter(i => i.type === 'bug');\n    const a11yIssues = issues.filter(i => i.type === 'accessibility');\n    const designIssues = issues.filter(i => i.type === 'design');\n\n    if (criticalIssues.length > 0) {\n      recommendations.push(`🚨 Address ${criticalIssues.length} critical issues immediately`);\n    }\n\n    if (bugIssues.length > 0) {\n      recommendations.push(`🐛 Fix ${bugIssues.length} bug(s) to improve reliability`);\n    }\n\n    if (a11yIssues.length > 0) {\n      recommendations.push(`♿ Improve accessibility compliance (${a11yIssues.length} issues)`);\n    }\n\n    if (designIssues.length > 0) {\n      recommendations.push(`🎨 Align with design system (${designIssues.length} issues)`);\n    }\n\n    recommendations.push('📚 Update component documentation and examples');\n    recommendations.push('🧪 Add comprehensive unit tests for all components');\n    recommendations.push('🔍 Implement automated quality checks in CI/CD');\n\n    return recommendations;\n  }\n\n  /**\n   * Auto-fix component issues where possible\n   */\n  autoFixComponent(componentCode: string, componentName: string): string {\n    let fixedCode = componentCode;\n    \n    // Fix undefined function references (more specific)\n    if (componentName === 'Dropdown') {\n      fixedCode = fixedCode.replace(/handleOptionClick/g, 'handleSelect');\n    }\n\n    // Fix ARIA boolean values - improved regex\n    fixedCode = fixedCode.replace(/aria-expanded=\\{([^}]+)\\}/g, 'aria-expanded={$1 ? \"true\" : \"false\"}');\n    fixedCode = fixedCode.replace(/aria-selected=\\{([^}]+)\\}/g, 'aria-selected={$1 ? \"true\" : \"false\"}');\n\n    return fixedCode;\n  }\n}\n\n/**\n * Default component library optimizer instance\n */\nexport function createComponentLibraryOptimizer(): ComponentLibraryOptimizer {\n  const designTokens: DesignTokens = {\n    colors: {\n      primary: { 50: '#eff6ff', 100: '#dbeafe', 500: '#3b82f6', 600: '#2563eb', 900: '#1e3a8a' },\n      secondary: { 50: '#f8fafc', 100: '#f1f5f9', 500: '#64748b', 600: '#475569', 900: '#0f172a' },\n      neutral: { 50: '#f9fafb', 100: '#f3f4f6', 500: '#6b7280', 600: '#4b5563', 900: '#111827' },\n      semantic: { success: '#16a34a', warning: '#f59e0b', error: '#dc2626', info: '#2563eb' }\n    },\n    typography: {\n      fontFamilies: { sans: 'Inter,system-ui,sans-serif', mono: 'Monaco,Menlo,monospace' },\n      fontSizes: { xs: '0.75rem', sm: '0.875rem', base: '1rem', lg: '1.125rem', xl: '1.25rem', '2xl': '1.5rem' },\n      fontWeights: { normal: 400, medium: 500, semibold: 600, bold: 700 },\n      lineHeights: { normal: 1.5, relaxed: 1.625 }\n    },\n    spacing: {\n      1: '0.25rem',\n      2: '0.5rem',\n      3: '0.75rem',\n      4: '1rem',\n      6: '1.5rem',\n      8: '2rem',\n      12: '3rem',\n      16: '4rem'\n    },\n    borderRadius: {\n      sm: '2px',\n      md: '4px',\n      lg: '8px',\n      full: '9999px'\n    },\n    shadows: {\n      sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',\n      md: '0 4px 6px -1px rgb(0 0 0 / 0.1)',\n      lg: '0 10px 15px -3px rgb(0 0 0 / 0.1)'\n    },\n    transitions: {\n      all: 'all 150ms ease-in-out',\n      colors: 'color 150ms ease-in-out, background-color 150ms ease-in-out',\n      transform: 'transform 150ms ease-in-out'\n    },\n    breakpoints: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px'\n    }\n  };\n\n  // Adapt to ComponentPattern interface (keeping extended metadata separately if needed)\n  const componentPatterns: ComponentPattern[] = [\n    {\n      name: 'Dropdown',\n      category: 'input',\n      variants: ['default'],\n      states: ['default', 'open', 'disabled', 'error'],\n      requiredProps: ['options', 'value', 'onChange', 'placeholder'],\n      optionalProps: [],\n      designTokens: ['colors', 'typography', 'spacing'],\n      accessibility: {\n        requiredRoles: ['listbox', 'option'],\n        requiredAttributes: ['aria-expanded', 'aria-haspopup', 'aria-selected'],\n        keyboardSupport: ['ArrowDown', 'ArrowUp', 'Enter', 'Space']\n      },\n      interactions: { hover: true, focus: true, active: true, disabled: true },\n      responsiveness: { breakpoints: ['mobile', 'tablet', 'desktop'], behaviors: ['stack', 'inline'] }\n    }\n  ];\n\n  return new ComponentLibraryOptimizer(designTokens, componentPatterns);\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/optimization/demo.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 6,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [114, 145], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/**\n * Component Library Analysis Demo\n */\n\nimport { createComponentLibraryOptimizer } from './componentLibrary';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\n\nconst optimizer = createComponentLibraryOptimizer();\n\n// Sample component with issues\nconst dropdownCode = `const Dropdown = ({ options }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const handleSelect = (optionValue) => {\n    setIsOpen(false);\n  };\n\n  return (\n    <div>\n      <button aria-expanded={isOpen ? 'true' : 'false'}>\n        Select\n      </button>\n      {isOpen && (\n        <ul role=\"listbox\">\n          {options.map(option => (\n            <li onClick={() => handleOptionClick(option)}>\n              {option.label}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};`;\n\nconst buttonCode = `const Button = ({ children, onClick }) => {\n  return (\n    <button \n      onClick={onClick}\n      style={{ color: '#ff0000', padding: '10px' }}\n    >\n      {children}\n    </button>\n  );\n};`;\n\ndevConsole.log?.('🔍 Analyzing Components...\\n');\n\n// Analyze dropdown\nconst dropdownIssues = optimizer.analyzeComponent(dropdownCode, 'Dropdown');\ndevConsole.log?.(`📊 Dropdown: Found ${dropdownIssues.length} issues`);\ndropdownIssues.forEach(issue => {\n  const emoji = { critical: '🚨', high: '⚠️', medium: '📝', low: '💡' }[issue.severity];\n  devConsole.log?.(`  ${emoji} ${issue.message}`);\n});\n\n// Analyze button  \nconst buttonIssues = optimizer.analyzeComponent(buttonCode, 'Button');\ndevConsole.log?.(`\\n� Button: Found ${buttonIssues.length} issues`);\nbuttonIssues.forEach(issue => {\n  const emoji = { critical: '🚨', high: '⚠️', medium: '📝', low: '�' }[issue.severity];\n  devConsole.log?.(`  ${emoji} ${issue.message}`);\n});\n\n// Auto-fix\ndevConsole.log?.('\\n🔧 Auto-fixing Dropdown...');\nconst fixedDropdown = optimizer.autoFixComponent(dropdownCode, 'Dropdown');\nif (fixedDropdown !== dropdownCode) {\n  devConsole.log?.('✅ Fixed undefined function reference');\n} else {\n  devConsole.log?.('ℹ️ No auto-fixes applied');\n}\n\n// Generate report\nconst report = optimizer.generateReport([\n  { name: 'Dropdown', code: dropdownCode },\n  { name: 'Button', code: buttonCode }\n]);\n\ndevConsole.log?.('\\n📋 Library Report');\ndevConsole.log?.('================');\ndevConsole.log?.(`Components: ${report.totalComponents}`);\ndevConsole.log?.(`Issues: ${report.issuesFound.length}`);\ndevConsole.log?.(`Health: ${report.overallHealth}%`);\ndevConsole.log?.(`Design Compliance: ${report.designSystemCompliance.toFixed(1)}%`);\n\ndevConsole.log?.('\\n🎯 Recommendations:');\nreport.recommendations.forEach((rec, i) => {\n  devConsole.log?.(`  ${i + 1}. ${rec}`);\n});\n\ndevConsole.log?.('\\n✨ Analysis Complete!');\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/performance.ts",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 82,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 82,
        "endColumn": 16
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 114,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 114,
        "endColumn": 16
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 146,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 146,
        "endColumn": 16
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 229,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 229,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 232,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 232,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [6859, 6859], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [6859, 6859], "text": "await " },
            "desc": "Add await operator."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 236,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 236,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 245,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 245,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7263, 7266], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7263, 7266], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 271,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [8231, 8269], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'firebaseError' is defined but never used.",
        "line": 274,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 274,
        "endColumn": 27
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 277,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [8482, 8520], "text": " " }
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 294,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 294,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "/**\n * Enhanced Performance Monitoring System for CosmicHub\n * Provides comprehensive performance tracking with memory management and external integrations\n */\n\nexport interface PerformanceMetric {\n  name: string;\n  duration: number;\n  timestamp: number;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface MetricMetadata {\n  label?: string;\n  [key: string]: unknown;\n}\n\nexport type ComponentMetricType = 'render' | 'mount' | 'interaction' | 'custom';\nexport type PageMetricType = 'load' | 'interactive' | 'visibility';\n\nexport interface ComponentMetric extends PerformanceMetric {\n  componentName: string;\n  type: ComponentMetricType;\n}\n\nexport interface OperationMetric extends PerformanceMetric {\n  operationName: string;\n  success: boolean;\n}\n\nexport interface PageMetric extends PerformanceMetric {\n  pageName: string;\n  type: PageMetricType;\n}\n\nexport interface PerformanceReport {\n  components: ComponentMetric[];\n  operations: OperationMetric[];\n  pages: PageMetric[];\n  summary: {\n    totalMetrics: number;\n    averageRenderTime: number;\n    slowestComponent: string;\n    fastestComponent: string;\n    errorRate: number;\n  };\n}\n\nclass PerformanceMonitor {\n  private maxMetrics = 1000; // Prevent memory issues\n  private componentMetrics: ComponentMetric[] = [];\n  private operationMetrics: OperationMetric[] = [];\n  private pageMetrics: PageMetric[] = [];\n  private subscribers: Set<(report: PerformanceReport) => void> = new Set();\n\n  recordComponentMetric(\n    componentName: string, \n    duration: number, \n    metadata: { type: ComponentMetricType } & MetricMetadata\n  ): void {\n    // Cap metrics to prevent memory issues\n    if (this.componentMetrics.length >= this.maxMetrics) {\n      this.componentMetrics.shift(); // Remove oldest metric\n    }\n\n    const metric: ComponentMetric = {\n      name: `${componentName}:${metadata.type}`,\n      duration,\n      timestamp: Date.now(),\n      componentName,\n      type: metadata.type,\n      metadata\n    };\n\n    this.componentMetrics.push(metric);\n    this.notifySubscribers();\n\n    // Send to Firebase Performance Monitoring if available\n    this.sendToFirebasePerformance(componentName, duration, metadata);\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`📊 [${componentName}] ${metadata.type}: ${duration.toFixed(2)}ms`, metadata);\n    }\n  }\n\n  recordOperationMetric(\n    operationName: string,\n    duration: number,\n    success: boolean,\n    metadata?: MetricMetadata\n  ): void {\n    // Cap metrics to prevent memory issues\n    if (this.operationMetrics.length >= this.maxMetrics) {\n      this.operationMetrics.shift(); // Remove oldest metric\n    }\n\n    const metric: OperationMetric = {\n      name: operationName,\n      duration,\n      timestamp: Date.now(),\n      operationName,\n      success,\n      metadata\n    };\n\n    this.operationMetrics.push(metric);\n    this.notifySubscribers();\n\n    // Send to Firebase Performance Monitoring\n    this.sendToFirebasePerformance(operationName, duration, { success, ...metadata });\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`⚡ [${operationName}] ${success ? '✅' : '❌'}: ${duration.toFixed(2)}ms`, metadata);\n    }\n  }\n\n  recordPageMetric(\n    pageName: string,\n    duration: number,\n    type: PageMetricType,\n    metadata?: MetricMetadata\n  ): void {\n    // Cap metrics to prevent memory issues\n    if (this.pageMetrics.length >= this.maxMetrics) {\n      this.pageMetrics.shift(); // Remove oldest metric\n    }\n\n    const metric: PageMetric = {\n      name: `${pageName}:${type}`,\n      duration,\n      timestamp: Date.now(),\n      pageName,\n      type,\n      metadata\n    };\n\n    this.pageMetrics.push(metric);\n    this.notifySubscribers();\n\n    // Send to Firebase Performance Monitoring\n    this.sendToFirebasePerformance(`${pageName}_${type}`, duration, metadata);\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🌐 [${pageName}] ${type}: ${duration.toFixed(2)}ms`, metadata);\n    }\n  }\n\n  recordMetric(name: string, duration: number, metadata?: MetricMetadata): void {\n    // Generic metric recording for backwards compatibility\n    this.recordOperationMetric(name, duration, true, metadata);\n  }\n\n  getPerformanceReport(): PerformanceReport {\n    const totalMetrics = this.componentMetrics.length + this.operationMetrics.length + this.pageMetrics.length;\n    \n    const renderMetrics = this.componentMetrics.filter(m => m.type === 'render');\n    const averageRenderTime = renderMetrics.length > 0 \n      ? renderMetrics.reduce((sum, m) => sum + m.duration, 0) / renderMetrics.length \n      : 0;\n\n    const slowestComponent = renderMetrics.length > 0\n      ? renderMetrics.reduce((max, m) => m.duration > max.duration ? m : max).componentName\n      : '';\n\n    const fastestComponent = renderMetrics.length > 0\n      ? renderMetrics.reduce((min, m) => m.duration < min.duration ? m : min).componentName\n      : '';\n\n    const failedOperations = this.operationMetrics.filter(m => !m.success).length;\n    const errorRate = this.operationMetrics.length > 0 \n      ? (failedOperations / this.operationMetrics.length) * 100 \n      : 0;\n\n    return {\n      components: this.componentMetrics,\n      operations: this.operationMetrics,\n      pages: this.pageMetrics,\n      summary: {\n        totalMetrics,\n        averageRenderTime,\n        slowestComponent,\n        fastestComponent,\n        errorRate\n      }\n    };\n  }\n\n  getMetrics(): { averageRenderTime: number; totalMetrics: number; performanceScore: number } {\n    const report = this.getPerformanceReport();\n    const performanceScore = Math.max(0, 100 - (report.summary.averageRenderTime / 2) - report.summary.errorRate);\n    \n    return {\n      averageRenderTime: report.summary.averageRenderTime,\n      totalMetrics: report.summary.totalMetrics,\n      performanceScore: Math.round(performanceScore)\n    };\n  }\n\n  enableRealTimeUpdates(callback: (report: PerformanceReport) => void): () => void {\n    this.subscribers.add(callback);\n    \n    return () => {\n      this.subscribers.delete(callback);\n    };\n  }\n\n  clearMetrics(): void {\n    this.componentMetrics = [];\n    this.operationMetrics = [];\n    this.pageMetrics = [];\n    this.notifySubscribers();\n  }\n\n  private notifySubscribers(): void {\n    const report = this.getPerformanceReport();\n    this.subscribers.forEach(callback => callback(report));\n  }\n\n  private sendToFirebasePerformance(\n    name: string, \n    duration: number, \n    metadata?: MetricMetadata\n  ): void {\n    try {\n      // Only send to Firebase in production and if available\n      if (process.env.NODE_ENV === 'production' && typeof window !== 'undefined') {\n        // Dynamic import to avoid issues in environments without Firebase\n        // Check if Firebase Performance is available before importing\n        this.tryFirebasePerformanceImport(name, duration, metadata);\n      }\n    } catch (error) {\n      // Silently fail if Firebase is not available\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Firebase Performance Monitoring skipped:', error);\n      }\n    }\n  }\n\n  private async tryFirebasePerformanceImport(\n    name: string, \n    duration: number, \n    metadata?: Record<string, any>\n  ): Promise<void> {\n    try {\n      // Configure Firebase Performance monitoring\n      if (typeof window !== 'undefined' && import.meta.env.PROD) {\n        // In production, attempt to use Firebase Performance\n        const { getPerformance, trace } = await import('firebase/performance');\n        \n        // Use lazy import for Firebase app\n        const firebaseModule = await import('@cosmichub/config/firebase');\n        const perf = getPerformance(firebaseModule.app);\n        const performanceTrace = trace(perf, name);\n        \n        // Record custom timing\n        performanceTrace.start();\n        setTimeout(() => {\n          performanceTrace.stop();\n        }, duration);\n        \n        // Add custom attributes if provided\n        if (metadata) {\n          Object.entries(metadata).forEach(([key, value]) => {\n            performanceTrace.putAttribute(key, String(value));\n          });\n        }\n      } else if (import.meta.env.DEV) {\n        // eslint-disable-next-line no-console\n        console.log(`[Performance] ${name}: ${duration}ms`, metadata);\n      }\n    } catch (firebaseError) {\n      // Firebase Performance not available or not configured\n      if (import.meta.env.DEV) {\n        // eslint-disable-next-line no-console\n        console.log('Firebase Performance Monitoring not available, skipping trace:', name);\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export minimal function for Docker build compatibility\nexport const reportPerformance = () => {\n  return performanceMonitor.getPerformanceReport();\n};\n\n// Service Worker Integration Helper\nexport const initServiceWorkerPerformanceCache = () => {\n  if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {\n    navigator.serviceWorker.register('/performance-sw.js')\n      .then(registration => {\n        console.log('Performance service worker registered:', registration);\n      })\n      .catch(error => {\n        console.log('Performance service worker registration failed:', error);\n      });\n  }\n};",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/production-deployment.ts",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: ',' expected.",
        "line": 814,
        "column": 1
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Production Deployment Configuration\n * Comprehensive production setup with monitoring, security, and optimization\n */\n\n// Safe environment variable access function\nconst getEnvVar = (key: string, defaultValue = ''): string => {\n  // Use process.env if available, otherwise fallback to default\n  if (typeof process !== 'undefined' && process.env && key in process.env) {\n    return process.env[key] ?? defaultValue;\n  }\n  return defaultValue;\n};\n\n// Deployment environment types\nexport interface DeploymentEnvironment {\n  name: string;\n  url: string;\n  apiUrl: string;\n  cdn: string;\n  database: DatabaseConfig;\n  monitoring: MonitoringConfig;\n  security: SecurityConfig;\n  performance: PerformanceConfig;\n  errorTracking: ErrorTrackingConfig;\n  analytics: AnalyticsConfig;\n}\n\nexport interface DatabaseConfig {\n  host: string;\n  port: number;\n  database: string;\n  ssl: boolean;\n  poolSize: number;\n  connectionTimeout: number;\n  queryTimeout: number;\n  backup: BackupConfig;\n}\n\nexport interface BackupConfig {\n  enabled: boolean;\n  schedule: string;\n  retention: number;\n  storage: 'local' | 's3' | 'gcs';\n  encryption: boolean;\n}\n\nexport interface MonitoringConfig {\n  enabled: boolean;\n  endpoint: string;\n  apiKey: string;\n  alerts: AlertConfig[];\n  dashboards: DashboardConfig[];\n  healthCheck: HealthCheckConfig;\n}\n\nexport interface AlertConfig {\n  name: string;\n  condition: string;\n  threshold: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  channels: string[];\n  cooldown: number;\n}\n\nexport interface DashboardConfig {\n  name: string;\n  metrics: string[];\n  refreshInterval: number;\n  timeRange: string;\n}\n\nexport interface HealthCheckConfig {\n  enabled: boolean;\n  interval: number;\n  timeout: number;\n  endpoints: string[];\n  criticalServices: string[];\n}\n\nexport interface SecurityConfig {\n  https: boolean;\n  hsts: boolean;\n  csp: ContentSecurityPolicyConfig;\n  cors: CorsConfig;\n  rateLimit: RateLimitConfig;\n  firewall: FirewallConfig;\n  secrets: SecretsConfig;\n}\n\nexport interface ContentSecurityPolicyConfig {\n  enabled: boolean;\n  directives: Record<string, string[]>;\n  reportOnly: boolean;\n  reportUri?: string;\n}\n\nexport interface CorsConfig {\n  enabled: boolean;\n  origins: string[];\n  methods: string[];\n  headers: string[];\n  credentials: boolean;\n  maxAge: number;\n}\n\nexport interface RateLimitConfig {\n  enabled: boolean;\n  windowMs: number;\n  max: number;\n  message: string;\n  skipSuccessfulRequests: boolean;\n  skipFailedRequests: boolean;\n}\n\nexport interface FirewallConfig {\n  enabled: boolean;\n  allowedIPs: string[];\n  blockedIPs: string[];\n  geoBlocking: string[];\n  ddosProtection: boolean;\n}\n\nexport interface SecretsConfig {\n  provider: 'env' | 'vault' | 'aws-secrets' | 'azure-keyvault';\n  endpoint?: string;\n  rotation: boolean;\n  encryption: boolean;\n}\n\nexport interface PerformanceConfig {\n  compression: boolean;\n  caching: CacheConfig;\n  cdn: CDNConfig;\n  optimization: OptimizationConfig;\n  monitoring: PerformanceMonitoringConfig;\n}\n\nexport interface CacheConfig {\n  enabled: boolean;\n  redis: RedisConfig;\n  strategies: CacheStrategyConfig[];\n}\n\nexport interface RedisConfig {\n  host: string;\n  port: number;\n  password: string;\n  database: number;\n  maxRetries: number;\n  retryDelay: number;\n}\n\nexport interface CacheStrategyConfig {\n  pattern: string;\n  ttl: number;\n  invalidation: string[];\n}\n\nexport interface CDNConfig {\n  enabled: boolean;\n  provider: 'cloudflare' | 'aws-cloudfront' | 'fastly' | 'azure-cdn';\n  endpoint: string;\n  zones: CDNZoneConfig[];\n}\n\nexport interface CDNZoneConfig {\n  name: string;\n  domains: string[];\n  caching: {\n    browser: number;\n    edge: number;\n  };\n  compression: boolean;\n  minification: boolean;\n}\n\nexport interface OptimizationConfig {\n  bundleAnalysis: boolean;\n  treeshaking: boolean;\n  codesplitting: boolean;\n  lazyLoading: boolean;\n  prefetching: boolean;\n  serviceWorker: boolean;\n}\n\nexport interface PerformanceMonitoringConfig {\n  realUserMonitoring: boolean;\n  syntheticMonitoring: boolean;\n  coreWebVitals: boolean;\n  customMetrics: string[];\n  budgets: PerformanceBudgetConfig[];\n}\n\nexport interface PerformanceBudgetConfig {\n  metric: string;\n  threshold: number;\n  action: 'warn' | 'error' | 'fail-build';\n}\n\nexport interface ErrorTrackingConfig {\n  enabled: boolean;\n  provider: 'sentry' | 'bugsnag' | 'rollbar' | 'custom';\n  dsn: string;\n  environment: string;\n  release: string;\n  sampling: number;\n  filters: ErrorFilterConfig[];\n}\n\nexport interface ErrorFilterConfig {\n  type: 'ignore' | 'group' | 'fingerprint';\n  pattern: string;\n  action: string;\n}\n\nexport interface AnalyticsConfig {\n  enabled: boolean;\n  providers: AnalyticsProviderConfig[];\n  consent: ConsentConfig;\n  privacy: PrivacyConfig;\n}\n\nexport interface AnalyticsProviderConfig {\n  name: string;\n  id: string;\n  config: Record<string, unknown>;\n  events: string[];\n}\n\nexport interface ConsentConfig {\n  required: boolean;\n  banner: boolean;\n  categories: string[];\n  storage: 'localStorage' | 'cookie' | 'session';\n}\n\nexport interface PrivacyConfig {\n  anonymizeIPs: boolean;\n  doNotTrack: boolean;\n  dataRetention: number;\n  gdprCompliant: boolean;\n}\n\n// Production deployment manager\nexport class ProductionDeploymentManager {\n  private environments = new Map<string, DeploymentEnvironment>();\n  private currentEnvironment: string | null = null;\n\n  addEnvironment(name: string, config: DeploymentEnvironment): void {\n    this.environments.set(name, config);\n    console.log(`✅ Added deployment environment: ${name}`);\n  }\n\n  setCurrentEnvironment(name: string): void {\n    if (!this.environments.has(name)) {\n      throw new Error(`Environment ${name} not found`);\n    }\n    this.currentEnvironment = name;\n    console.log(`🎯 Set current environment: ${name}`);\n  }\n\n  getCurrentEnvironment(): DeploymentEnvironment | null {\n    if (!this.currentEnvironment) return null;\n    return this.environments.get(this.currentEnvironment) || null;\n  }\n\n  async deployToEnvironment(environment: string, options: DeploymentOptions = {}): Promise<DeploymentResult> {\n    const config = this.environments.get(environment);\n    if (!config) {\n      throw new Error(`Environment ${environment} not found`);\n    }\n\n    console.log(`🚀 Starting deployment to ${environment}...`);\n\n    const result: DeploymentResult = {\n      environment,\n      timestamp: new Date(),\n      status: 'in-progress',\n      steps: [],\n      duration: 0,\n      artifacts: []\n    };\n\n    const startTime = Date.now();\n\n    try {\n      // Pre-deployment checks\n      await this.runPreDeploymentChecks(config, result);\n\n      // Build and optimize\n      await this.buildForProduction(config, result, options);\n\n      // Security checks\n      await this.runSecurityChecks(config, result);\n\n      // Deploy application\n      await this.deployApplication(config, result, options);\n\n      // Post-deployment verification\n      await this.runPostDeploymentChecks(config, result);\n\n      // Setup monitoring\n      await this.setupMonitoring(config, result);\n\n      result.status = 'success';\n      result.duration = Date.now() - startTime;\n\n      console.log(`✅ Deployment to ${environment} completed successfully in ${result.duration}ms`);\n      \n    } catch (error) {\n      result.status = 'failed';\n      result.error = error instanceof Error ? error.message : String(error);\n      result.duration = Date.now() - startTime;\n\n      console.error(`❌ Deployment to ${environment} failed:`, error);\n      throw error;\n    }\n\n    return result;\n  }\n\n  private async runPreDeploymentChecks(\n    config: DeploymentEnvironment,\n    result: DeploymentResult\n  ): Promise<void> {\n    const step: DeploymentStep = {\n      name: 'Pre-deployment checks',\n      status: 'running',\n      startTime: Date.now()\n    };\n    result.steps.push(step);\n\n    try {\n      // Check environment health\n      await this.checkEnvironmentHealth(config);\n\n      // Validate configuration\n      await this.validateConfiguration(config);\n\n      // Check dependencies\n      await this.checkDependencies();\n\n      // Database migration check\n      await this.checkDatabaseMigrations(config);\n\n      step.status = 'success';\n      step.endTime = Date.now();\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error instanceof Error ? error.message : String(error);\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private async buildForProduction(\n    config: DeploymentEnvironment,\n    result: DeploymentResult,\n    options: DeploymentOptions\n  ): Promise<void> {\n    const step: DeploymentStep = {\n      name: 'Build for production',\n      status: 'running',\n      startTime: Date.now()\n    };\n    result.steps.push(step);\n\n    try {\n      // Clean previous builds\n      if (!options.skipClean) {\n        await this.cleanBuildDirectory();\n      }\n\n      // Run production build\n      await this.runProductionBuild(config);\n\n      // Optimize assets\n      await this.optimizeAssets(config);\n\n      // Generate service worker\n      if (config.performance.optimization.serviceWorker) {\n        await this.generateServiceWorker(config);\n      }\n\n      // Bundle analysis\n      if (config.performance.optimization.bundleAnalysis) {\n        await this.runBundleAnalysis(result);\n      }\n\n      step.status = 'success';\n      step.endTime = Date.now();\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error instanceof Error ? error.message : String(error);\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private async runSecurityChecks(\n    config: DeploymentEnvironment,\n    result: DeploymentResult\n  ): Promise<void> {\n    const step: DeploymentStep = {\n      name: 'Security checks',\n      status: 'running',\n      startTime: Date.now()\n    };\n    result.steps.push(step);\n\n    try {\n      // Dependency vulnerability scan\n      await this.scanDependencyVulnerabilities();\n\n      // Code security scan\n      await this.runCodeSecurityScan();\n\n      // Configuration security check\n      await this.checkSecurityConfiguration(config);\n\n      // SSL/TLS verification\n      if (config.security.https) {\n        await this.verifySslConfiguration(config);\n      }\n\n      step.status = 'success';\n      step.endTime = Date.now();\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error instanceof Error ? error.message : String(error);\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private async deployApplication(\n    config: DeploymentEnvironment,\n    result: DeploymentResult,\n    options: DeploymentOptions\n  ): Promise<void> {\n    const step: DeploymentStep = {\n      name: 'Deploy application',\n      status: 'running',\n      startTime: Date.now()\n    };\n    result.steps.push(step);\n\n    try {\n      // Upload assets to CDN\n      if (config.performance.cdn.enabled) {\n        await this.uploadAssetsToCDN(config);\n      }\n\n      // Deploy to application servers\n      await this.deployToServers(config, options);\n\n      // Update database schema\n      if (!options.skipMigrations) {\n        await this.runDatabaseMigrations(config);\n      }\n\n      // Update configuration\n      await this.updateConfiguration(config);\n\n      // Restart services\n      await this.restartServices(config);\n\n      step.status = 'success';\n      step.endTime = Date.now();\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error instanceof Error ? error.message : String(error);\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private async runPostDeploymentChecks(\n    config: DeploymentEnvironment,\n    result: DeploymentResult\n  ): Promise<void> {\n    const step: DeploymentStep = {\n      name: 'Post-deployment checks',\n      status: 'running',\n      startTime: Date.now()\n    };\n    result.steps.push(step);\n\n    try {\n      // Health check\n      await this.performHealthCheck(config);\n\n      // Smoke tests\n      await this.runSmokeTests(config);\n\n      // Performance verification\n      await this.verifyPerformance(config);\n\n      // Security verification\n      await this.verifySecurityHeaders(config);\n\n      step.status = 'success';\n      step.endTime = Date.now();\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error instanceof Error ? error.message : String(error);\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private async setupMonitoring(\n    config: DeploymentEnvironment,\n    result: DeploymentResult\n  ): Promise<void> {\n    const step: DeploymentStep = {\n      name: 'Setup monitoring',\n      status: 'running',\n      startTime: Date.now()\n    };\n    result.steps.push(step);\n\n    try {\n      // Configure monitoring agents\n      await this.configureMonitoringAgents(config);\n\n      // Setup alerts\n      await this.setupAlerts(config);\n\n      // Initialize dashboards\n      await this.initializeDashboards(config);\n\n      // Start health checks\n      await this.startHealthChecks(config);\n\n      step.status = 'success';\n      step.endTime = Date.now();\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error instanceof Error ? error.message : String(error);\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  // Implementation methods (simplified for brevity)\n  private async checkEnvironmentHealth(config: DeploymentEnvironment): Promise<void> {\n    // Check if environment is reachable and healthy\n    console.log(`🔍 Checking environment health for ${config.name}...`);\n    // Add an await operation to satisfy require-await\n    await Promise.resolve();\n  }\n\n  private async validateConfiguration(config: DeploymentEnvironment): Promise<void> {\n    // Validate all configuration values\n    console.log(`✅ Validating configuration for ${config.name}...`);\n    // Add an await operation to satisfy require-await\n    await Promise.resolve();\n  }\n\n  private async checkDependencies(): Promise<void> {\n    // Check if all dependencies are available\n    console.log(`📦 Checking dependencies...`);\n    // Add an await operation to satisfy require-await\n    await Promise.resolve();\n  }\n\n  private async checkDatabaseMigrations(config: DeploymentEnvironment): Promise<void> {\n    // Check if database migrations are needed\n    console.log(`🗃️ Checking database migrations for ${config.database.database}...`);\n    // Add an await operation to satisfy require-await\n    await Promise.resolve();\n  }\n\n  private async cleanBuildDirectory(): Promise<void> {\n    console.log(`🧹 Cleaning build directory...`);\n    // Add an await operation to satisfy require-await\n    await Promise.resolve();\n  }\n\n  private async runProductionBuild(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`🔨 Running production build...`);\n    await Promise.resolve();\n  }\n\n  private async optimizeAssets(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`⚡ Optimizing assets...`);\n    await Promise.resolve();\n  }\n\n  private async generateServiceWorker(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`⚙️ Generating service worker...`);\n    await Promise.resolve();\n  }\n\n  private async runBundleAnalysis(_result: DeploymentResult): Promise<void> {\n    console.log(`📊 Running bundle analysis...`);\n    // Add bundle analysis artifacts to result\n    await Promise.resolve();\n  }\n\n  private async scanDependencyVulnerabilities(): Promise<void> {\n    console.log(`🔒 Scanning dependency vulnerabilities...`);\n    // Implementation would use tools like npm audit, snyk, or similar\n    await Promise.resolve();\n  }\n\n  private async runCodeSecurityScan(): Promise<void> {\n    console.log(`🔍 Running code security scan...`);\n    // Implementation would use static analysis tools\n    await Promise.resolve();\n  }\n\n  private async checkSecurityConfiguration(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`⚙️ Checking security configuration...`);\n    // Validate security settings\n    await Promise.resolve();\n  }\n\n  private async verifySslConfiguration(config: DeploymentEnvironment): Promise<void> {\n    console.log(`🔐 Verifying SSL configuration for ${config.url}...`);\n    // Check SSL certificate validity and configuration\n    await Promise.resolve();\n  }\n\n  private async uploadAssetsToCDN(config: DeploymentEnvironment): Promise<void> {\n    console.log(`☁️ Uploading assets to CDN: ${config.performance.cdn.endpoint}...`);\n    // Upload static assets to CDN\n    await Promise.resolve();\n  }\n\n  private async deployToServers(_config: DeploymentEnvironment, _options: DeploymentOptions): Promise<void> {\n    console.log(`🚀 Deploying to application servers...`);\n    // Deploy application to servers\n    await Promise.resolve();\n  }\n\n  private async runDatabaseMigrations(config: DeploymentEnvironment): Promise<void> {\n    console.log(`🗃️ Running database migrations on ${config.database.database}...`);\n    // Run pending database migrations\n    await Promise.resolve();\n  }\n\n  private async updateConfiguration(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`⚙️ Updating configuration...`);\n    // Update application configuration\n    await Promise.resolve();\n  }\n\n  private async restartServices(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`🔄 Restarting services...`);\n    // Restart application services\n    await Promise.resolve();\n  }\n\n  private async performHealthCheck(config: DeploymentEnvironment): Promise<void> {\n    console.log(`❤️ Performing health check on ${config.url}...`);\n    // Check application health endpoints\n    await Promise.resolve();\n  }\n\n  private async runSmokeTests(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`💨 Running smoke tests...`);\n    // Run basic smoke tests to verify deployment\n    await Promise.resolve();\n  }\n\n  private async verifyPerformance(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`⚡ Verifying performance...`);\n    // Check performance metrics\n    await Promise.resolve();\n  }\n\n  private async verifySecurityHeaders(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`🛡️ Verifying security headers...`);\n    // Check security headers are properly set\n    await Promise.resolve();\n  }\n\n  private async configureMonitoringAgents(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`📊 Configuring monitoring agents...`);\n    // Setup monitoring agents\n    await Promise.resolve();\n  }\n\n  private async setupAlerts(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`🚨 Setting up alerts...`);\n    // Configure monitoring alerts\n    await Promise.resolve();\n  }\n\n  private async initializeDashboards(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`📈 Initializing dashboards...`);\n    // Setup monitoring dashboards\n    await Promise.resolve();\n  }\n\n  private async startHealthChecks(_config: DeploymentEnvironment): Promise<void> {\n    console.log(`❤️ Starting health checks...`);\n    // Start continuous health monitoring\n    await Promise.resolve();\n  }\n\n  // Additional implementation methods would continue here...\n  // (Keeping this concise for space)\n\n  generateDeploymentReport(result: DeploymentResult): string {\n    const report = {\n      environment: result.environment,\n      status: result.status,\n      duration: `${result.duration}ms`,\n      timestamp: result.timestamp.toISOString(),\n      steps: result.steps.map(step => ({\n        name: step.name,\n        status: step.status,\n        duration: step.endTime ? `${step.endTime - step.startTime}ms` : 'N/A',\n        error: step.error\n      })),\n      artifacts: result.artifacts\n    };\n\n    return JSON.stringify(report, null, 2);\n  }\n}\n\n// Deployment interfaces\nexport interface DeploymentOptions {\n  skipClean?: boolean;\n  skipMigrations?: boolean;\n  skipTests?: boolean;\n  rollback?: boolean;\n  hotDeploy?: boolean;\n}\n\nexport interface DeploymentResult {\n  environment: string;\n  timestamp: Date;\n  status: 'in-progress' | 'success' | 'failed';\n  steps: DeploymentStep[];\n  duration: number;\n  error?: string;\n  artifacts: string[];\n}\n\nexport interface DeploymentStep {\n  name: string;\n  status: 'running' | 'success' | 'failed';\n  startTime: number;\n  endTime?: number;\n  error?: string;\n}\n\n// Safe environment variable access function\nconst getEnvVar = (key: string, defaultValue = ''): string => {\n  // Use process.env if available, otherwise fallback to default\n  if (typeof process !== 'undefined' && process.env && key in process.env) {\n    return process.env[key] ?? defaultValue;\n  }\n  return defaultValue;\n};\n  staging: {\n    name: 'staging',\n    url: 'https://staging.cosmichub.com',\n    apiUrl: 'https://api-staging.cosmichub.com',\n    cdn: 'https://cdn-staging.cosmichub.com',\n    database: {\n      host: 'staging-db.cosmichub.com',\n      port: 5432,\n      database: 'cosmichub_staging',\n      ssl: true,\n      poolSize: 10,\n      connectionTimeout: 30000,\n      queryTimeout: 60000,\n      backup: {\n        enabled: true,\n        schedule: '0 2 * * *',\n        retention: 7,\n        storage: 's3',\n        encryption: true\n      }\n    },\n    monitoring: {\n      enabled: true,\n      endpoint: 'https://monitoring.cosmichub.com',\n      apiKey: process.env.MONITORING_API_KEY || '',\n      alerts: [\n        {\n          name: 'High Error Rate',\n          condition: 'error_rate > 5%',\n          threshold: 5,\n          severity: 'high',\n          channels: ['slack', 'email'],\n          cooldown: 300\n        }\n      ],\n      dashboards: [\n        {\n          name: 'Application Overview',\n          metrics: ['requests', 'errors', 'latency', 'memory'],\n          refreshInterval: 30,\n          timeRange: '1h'\n        }\n      ],\n      healthCheck: {\n        enabled: true,\n        interval: 30,\n        timeout: 5000,\n        endpoints: ['/health', '/api/health'],\n        criticalServices: ['database', 'redis', 'api']\n      }\n    },\n    security: {\n      https: true,\n      hsts: true,\n      csp: {\n        enabled: true,\n        directives: {\n          'default-src': [\"'self'\"],\n          'script-src': [\"'self'\", \"'unsafe-inline'\", 'https://cdn.cosmichub.com'],\n          'style-src': [\"'self'\", \"'unsafe-inline'\", 'https://fonts.googleapis.com'],\n          'img-src': [\"'self'\", 'data:', 'https:'],\n          'font-src': [\"'self'\", 'https://fonts.gstatic.com']\n        },\n        reportOnly: false\n      },\n      cors: {\n        enabled: true,\n        origins: ['https://cosmichub.com', 'https://staging.cosmichub.com'],\n        methods: ['GET', 'POST', 'PUT', 'DELETE'],\n        headers: ['Content-Type', 'Authorization'],\n        credentials: true,\n        maxAge: 86400\n      },\n      rateLimit: {\n        enabled: true,\n        windowMs: 900000, // 15 minutes\n        max: 100,\n        message: 'Too many requests',\n        skipSuccessfulRequests: false,\n        skipFailedRequests: false\n      },\n      firewall: {\n        enabled: true,\n        allowedIPs: [],\n        blockedIPs: [],\n        geoBlocking: [],\n        ddosProtection: true\n      },\n      secrets: {\n        provider: 'env',\n        rotation: false,\n        encryption: true\n      }\n    },\n    performance: {\n      compression: true,\n      caching: {\n        enabled: true,\n        redis: {\n          host: 'redis-staging.cosmichub.com',\n          port: 6379,\n          password: process.env.REDIS_PASSWORD || '',\n          database: 0,\n          maxRetries: 3,\n          retryDelay: 1000\n        },\n        strategies: [\n          {\n            pattern: '/api/charts/*',\n            ttl: 3600,\n            invalidation: ['chart_updated', 'user_updated']\n          }\n        ]\n      },\n      cdn: {\n        enabled: true,\n        provider: 'cloudflare',\n        endpoint: 'https://cdn-staging.cosmichub.com',\n        zones: [\n          {\n            name: 'static-assets',\n            domains: ['staging.cosmichub.com'],\n            caching: {\n              browser: 86400,\n              edge: 86400\n            },\n            compression: true,\n            minification: true\n          }\n        ]\n      },\n      optimization: {\n        bundleAnalysis: true,\n        treeshaking: true,\n        codesplitting: true,\n        lazyLoading: true,\n        prefetching: true,\n        serviceWorker: true\n      },\n      monitoring: {\n        realUserMonitoring: true,\n        syntheticMonitoring: true,\n        coreWebVitals: true,\n        customMetrics: ['chart_render_time', 'api_response_time'],\n        budgets: [\n          {\n            metric: 'lcp',\n            threshold: 2500,\n            action: 'warn'\n          },\n          {\n            metric: 'fid',\n            threshold: 100,\n            action: 'warn'\n          }\n        ]\n      }\n    },\n    errorTracking: {\n      enabled: true,\n      provider: 'sentry',\n      dsn: process.env.SENTRY_DSN || '',\n      environment: 'staging',\n      release: process.env.APP_VERSION || 'latest',\n      sampling: 1.0,\n      filters: [\n        {\n          type: 'ignore',\n          pattern: 'ChunkLoadError',\n          action: 'ignore'\n        }\n      ]\n    },\n    analytics: {\n      enabled: true,\n      providers: [\n        {\n          name: 'google-analytics',\n          id: process.env.GA_TRACKING_ID || '',\n          config: {\n            anonymizeIp: true,\n            sendPageView: true\n          },\n          events: ['chart_generated', 'user_signup']\n        }\n      ],\n      consent: {\n        required: true,\n        banner: true,\n        categories: ['necessary', 'analytics', 'marketing'],\n        storage: 'localStorage'\n      },\n      privacy: {\n        anonymizeIPs: true,\n        doNotTrack: true,\n        dataRetention: 365,\n        gdprCompliant: true\n      }\n    }\n  } as DeploymentEnvironment,\n\n  production: {\n    // Similar structure to staging but with production-specific values\n    name: 'production',\n    url: 'https://cosmichub.com',\n    apiUrl: 'https://api.cosmichub.com',\n    cdn: 'https://cdn.cosmichub.com',\n    // ... (production-specific configuration)\n  } as DeploymentEnvironment\n};\n\n// Export utilities\nexport const ProductionDeployment = {\n  ProductionDeploymentManager,\n  ProductionEnvironments\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/push-notifications.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/react-performance.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 9,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [233, 264], "text": " " }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [752, 755], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [752, 755], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [920, 923], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [920, 923], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1101, 1104], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1101, 1104], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1286, 1289], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1286, 1289], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1366, 1369], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1366, 1369], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1515, 1518], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1515, 1518], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 49,
        "column": 11,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 52,
        "endColumn": 15,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 49,
        "column": 36,
        "nodeType": "ObjectExpression",
        "messageId": "unsafeReturn",
        "endLine": 52,
        "endColumn": 12,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .value on an `any` value.",
        "line": 51,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 51,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2267, 2270], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2267, 2270], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 70,
        "column": 11,
        "nodeType": "JSXOpeningElement",
        "endLine": 70,
        "endColumn": 94,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 70,
        "column": 21,
        "nodeType": "MemberExpression",
        "messageId": "anyAssignment",
        "endLine": 70,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 70,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 70,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 70,
        "column": 57,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 70,
        "endColumn": 64,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 70,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 70,
        "endColumn": 64,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .name on an `any` value.",
        "line": 71,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 71,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 71,
        "column": 27,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 71,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .computed on an `any` value.",
        "line": 71,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 71,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'pagePerformance' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 85,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 85,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2762, 2765], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2762, 2765], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 93,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 97,
        "endColumn": 9,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `Promise<any>`.",
        "line": 96,
        "column": 9,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 96,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 99,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 99,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3181, 3184], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3181, 3184], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 111,
        "column": 23,
        "nodeType": "CallExpression",
        "messageId": "unsafeReturn",
        "endLine": 113,
        "endColumn": 8,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 112,
        "column": 9,
        "nodeType": "ConditionalExpression",
        "messageId": "unsafeReturn",
        "endLine": 112,
        "endColumn": 59,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 112,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 112,
        "endColumn": 16,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 131,
        "column": 48,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 131,
        "endColumn": 62,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 140,
        "column": 23,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 140,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe array destructuring of a tuple element with an `any` value.",
        "line": 152,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeArrayPatternFromTuple",
        "endLine": 152,
        "endColumn": 14,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4831, 4834], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4831, 4834], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 161,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 165,
        "endColumn": 9,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `Promise<any>`.",
        "line": 164,
        "column": 9,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 164,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 175,
        "column": 12,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 175,
        "endColumn": 16,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 181,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 181,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5720, 5723], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5720, 5723], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/consistent-type-definitions",
        "severity": 2,
        "message": "Use an `interface` instead of a `type`.",
        "line": 233,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "interfaceOverType",
        "endLine": 233,
        "endColumn": 47,
        "fix": {
          "range": [7272, 7374],
          "text": "interface PerformanceOptimizedComponentProps<T = any> {\n  data: T[];\n  onUpdate: (id: string) => void;\n}"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 233,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 233,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7316, 7319], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7316, 7319], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/consistent-type-definitions",
        "severity": 2,
        "message": "Use an `interface` instead of a `type`.",
        "line": 238,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "interfaceOverType",
        "endLine": 238,
        "endColumn": 30,
        "fix": {
          "range": [7383, 7517],
          "text": "interface DataFetchingState<T = any> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n  fetchData: () => Promise<void>;\n}"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 238,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 238,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7410, 7413], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7410, 7413], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/**\n * React Performance Optimization Implementation\n * Demonstrates the consolidated performance monitoring system in action\n */\n\n// @ts-nocheck\n/* eslint-disable */\nimport React, { lazy, Suspense, memo, useCallback } from 'react';\n/* eslint-disable no-console */\nconst devConsole = {\n  log: import.meta.env?.DEV ? console.log.bind(console) : undefined,\n  warn: import.meta.env?.DEV ? console.warn.bind(console) : undefined,\n  error: console.error.bind(console)\n};\n/* eslint-enable no-console */\nimport { \n  usePerformance, \n  useOperationTracking,\n  usePagePerformance \n} from './hooks';\n\n// Mock components for demo purposes - these would be real components in your app\nconst HeavyChart = lazy(() => Promise.resolve({ \n  default: ({ data }: { data: any[] }) => (\n    <div>Heavy Chart Component ({data.length} items)</div>\n  )\n}));\nconst DataVisualization = lazy(() => Promise.resolve({ \n  default: ({ data }: { data: any[] }) => (\n    <div>Data Visualization Component ({data.length} data points)</div>\n  )\n}));\nconst ComplexCalculator = lazy(() => Promise.resolve({ \n  default: ({ data }: { data: any[] }) => (\n    <div>Complex Calculator Component (processing {data.length} items)</div>\n  )\n}));\n\n// Performance-tracked component example\nconst OptimizedComponent: React.FC<{ data: any[], onUpdate: (id: string) => void }> = memo(\n  ({ data, onUpdate }: { data: any[], onUpdate: (id: string) => void }) => {\n    const performance = usePerformance();\n    const [processedData, setProcessedData] = React.useState<any[]>([]);\n    \n    // Expensive computation with performance tracking\n    React.useEffect(() => {\n      const processData = async () => {\n        const { result } = await performance.measure('dataProcessing', () => {\n          return data.map(item => ({\n            ...item,\n            computed: item.value * Math.random() * 1000\n          }));\n        });\n        setProcessedData(result);\n      };\n      \n  void processData();\n    }, [data, performance]);\n\n    // Optimized event handler\n    const handleClick = useCallback((id: string) => {\n      void performance.measure('click', () => {\n        onUpdate(id);\n      });\n    }, [onUpdate, performance]);\n\n    return (\n      <div className=\"optimized-component\">\n        {processedData.map((item: any) => (\n          <div key={item.id} onClick={() => handleClick(item.id)} role=\"button\" tabIndex={0}>\n            {item.name}: {item.computed.toFixed(2)}\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\nOptimizedComponent.displayName = 'OptimizedComponent';\n\n// Page-level performance tracking\nconst PerformanceOptimizedPage: React.FC = () => {\n  const pagePerformance = usePagePerformance();\n  const performanceOps = useOperationTracking();\n  \n  const [data, setData] = React.useState<any[]>([]);\n  const [loading, setLoading] = React.useState(false);\n\n  // Tracked async operation\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    \n    try {\n      const { result } = await performanceOps.trackOperation('loadData', async () => {\n        // Simulate API call\n        const response = await fetch('/api/data');\n        return response.json();\n      });\n      \n      setData(result as any[]);\n    } catch (error) {\n      devConsole.error('Failed to load data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [performanceOps]);\n\n  const handleUpdate = useCallback(async (id: string) => {\n    await performanceOps.trackOperation('updateItem', async () => {\n      // Simulate update operation\n      await new Promise(resolve => setTimeout(resolve, 100));\n      setData(prev => prev.map(item => \n        item.id === id ? { ...item, updated: true } : item\n      ));\n    });\n  }, [performanceOps]);\n\n  return (\n    <div className=\"performance-optimized-page\">\n      <h1>Performance Optimized Page</h1>\n      \n      {/* Suspense boundaries for lazy-loaded components */}\n      <Suspense fallback={<div>Loading chart...</div>}>\n        <HeavyChart data={data} />\n      </Suspense>\n      \n      <Suspense fallback={<div>Loading visualization...</div>}>\n        <DataVisualization data={data} />\n      </Suspense>\n      \n      {/* Performance-tracked component */}\n      <OptimizedComponent data={data} onUpdate={handleUpdate} />\n      \n      {/* Conditionally loaded heavy component */}\n      {data.length > 100 && (\n        <Suspense fallback={<div>Loading calculator...</div>}>\n          <ComplexCalculator data={data} />\n        </Suspense>\n      )}\n      \n      <button onClick={loadData} disabled={loading}>\n        {loading ? 'Loading...' : 'Load Data'}\n      </button>\n    </div>\n  );\n};\n\nexport default PerformanceOptimizedPage;\n\n// Example of optimized hook patterns\nexport const useOptimizedDataFetching = (endpoint: string) => {\n  const performanceOps = useOperationTracking();\n  const [data, setData] = React.useState<any>(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string | null>(null);\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { result } = await performanceOps.trackOperation(`fetch_${endpoint}`, async () => {\n        const response = await fetch(endpoint);\n        if (!response.ok) throw new Error(`HTTP ${response.status}`);\n        return response.json();\n      });\n\n      setData(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }, [endpoint, performanceOps]);\n\n  return { data, loading, error, fetchData };\n};\n\n// Performance monitoring utilities\nexport const performanceUtils = {\n  // Measure component render performance\n  measureRender: <T extends Record<string, any>>(\n    Component: React.ComponentType<T>,\n    props: T\n  ) => {\n    const start = performance.now();\n    const element = React.createElement(Component, props);\n    const end = performance.now();\n    \n  devConsole.log?.(`Render time for ${Component.name}: ${end - start}ms`);\n    return element;\n  },\n\n  // Track heavy operations\n  trackHeavyOperation: async function<T>(\n    operation: () => Promise<T>,\n    operationName: string\n  ): Promise<T> {\n    const start = performance.now();\n    \n    try {\n      const result = await operation();\n      const end = performance.now();\n      \n  devConsole.log?.(`${operationName} completed in ${end - start}ms`);\n      return result;\n    } catch (error) {\n      const end = performance.now();\n  devConsole.error(`${operationName} failed after ${end - start}ms:`, error);\n      throw error;\n    }\n  },\n\n  // Bundle size analysis\n  analyzeBundleSize: () => {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      \n      return {\n        transferSize: navigation.transferSize || 0,\n        encodedBodySize: navigation.encodedBodySize || 0,\n        decodedBodySize: navigation.decodedBodySize || 0,\n        compressionRatio: navigation.encodedBodySize && navigation.decodedBodySize \n          ? (navigation.decodedBodySize - navigation.encodedBodySize) / navigation.decodedBodySize \n          : 0\n      };\n    }\n    \n    return null;\n  }\n};\n\n// Export types for TypeScript support\nexport type PerformanceOptimizedComponentProps<T = any> = {\n  data: T[];\n  onUpdate: (id: string) => void;\n};\n\nexport type DataFetchingState<T = any> = {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n  fetchData: () => Promise<void>;\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/componentTesting.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 300,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 300,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11336, 11339], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11336, 11339], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 338,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 338,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12619, 12622], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12619, 12622], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/designSystem.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/qualityAssurance.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/testEvents.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/testRunner.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/testTypes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/testing/testUtils.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/types/component-registry.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/types/lazy-loading-types.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ReactNode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'FC' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/consistent-type-definitions",
        "severity": 2,
        "message": "Use an `interface` instead of a `type`.",
        "line": 11,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "interfaceOverType",
        "endLine": 11,
        "endColumn": 25,
        "fix": {
          "range": [275, 365],
          "text": "interface ImportModule<T extends ComponentType<any>> {\n  default: T;\n  [key: string]: any;\n}"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [317, 320], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [317, 320], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [358, 361], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [358, 361], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [458, 461], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [458, 461], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1927, 1930], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1927, 1930], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'React' is not defined.",
        "line": 75,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 75,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2193, 2196], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2193, 2196], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'React' is not defined.",
        "line": 82,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 82,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 88,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 91,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2481, 2484], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2481, 2484], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2611, 2614], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2611, 2614], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2802, 2805], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2802, 2805], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 115,
        "column": 85,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 115,
        "endColumn": 88,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3125, 3128], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3125, 3128], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3245, 3248], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3245, 3248], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3479, 3482], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3479, 3482], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 137,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 137,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3675, 3678], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3675, 3678], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 145,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 145,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3871, 3874], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3871, 3874], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "/**\n * Type definitions for lazy-loading components and utilities\n * Provides strong TypeScript typing for dynamic imports and lazy loading\n */\n\nimport { ComponentType, ReactNode, FC, ComponentProps } from 'react';\n\n/**\n * Module import result with default export\n */\nexport type ImportModule<T extends ComponentType<any>> = {\n  default: T;\n  [key: string]: any;\n};\n\n/**\n * Dynamic import function type\n */\nexport type ImportFunction<T extends ComponentType<any>> = () => Promise<ImportModule<T>>;\n\n/**\n * Options for lazy component loading\n */\nexport interface LazyComponentOptions<E extends Error = Error> {\n  /** Component to show while loading */\n  loadingComponent?: ComponentType;\n  /** Error boundary component */\n  errorBoundary?: ComponentType<ErrorBoundaryProps<E>>;\n  /** Whether to preload the component */\n  preload?: boolean;\n  /** Timeout in milliseconds */\n  timeout?: number;\n}\n\n/**\n * Props for error boundary components\n */\nexport interface ErrorBoundaryProps<E extends Error = Error> {\n  /** The error that occurred */\n  error: E;\n  /** Function to reset the error state */\n  resetError: () => void;\n}\n\n/**\n * Progressive loading options for large datasets\n */\nexport interface ProgressiveLoadingOptions {\n  /** Number of items to load in each batch */\n  batchSize: number;\n  /** Delay between batches in milliseconds */\n  delay: number;\n  /** Component to show while loading */\n  loadingComponent?: ComponentType<{ progress: number }>;\n}\n\n/**\n * Result of progressive loading\n */\nexport interface ProgressiveLoadingResult<T> {\n  /** Items that have been loaded so far */\n  loadedItems: T[];\n  /** Whether loading is in progress */\n  isLoading: boolean;\n  /** Loading progress as a percentage */\n  progress: number;\n}\n\n/**\n * Smart preloading functions\n */\nexport interface SmartPreloadFunctions {\n  /** Preload a component when the user hovers over an element */\n  preloadOnHover: <T extends ComponentType<any>>(\n    elementRef: React.RefObject<HTMLElement>,\n    componentImport: ImportFunction<T>,\n    componentName: string\n  ) => (() => void) | undefined;\n  \n  /** Preload a component when an element becomes visible */\n  preloadOnIntersection: <T extends ComponentType<any>>(\n    elementRef: React.RefObject<HTMLElement>,\n    componentImport: ImportFunction<T>,\n    componentName: string\n  ) => (() => void) | undefined;\n}\n\n/**\n * Props for the LazyComponentWrapper\n */\nexport interface LazyComponentWrapperProps<K extends keyof T, T extends Record<string, any>> {\n  /** Key of the component in the registry */\n  componentKey: K;\n  /** Props to pass to the loaded component */\n  props?: any;\n  /** Component to show while loading */\n  fallback?: ComponentType;\n}\n\n/**\n * Result of the useDynamicComponent hook\n */\nexport interface DynamicComponentResult<T extends ComponentType<any>> {\n  /** The loaded component */\n  Component: T | null;\n  /** Whether loading is in progress */\n  loading: boolean;\n  /** Error that occurred during loading, if any */\n  error: Error | null;\n}\n\n/**\n * Type-safe component registry\n */\nexport type ComponentRegistry<T extends Record<string, ImportFunction<ComponentType<any>>>> = T;\n\n/**\n * Creates a type-safe lazy component\n */\nexport type LazyComponentCreator = <T extends ComponentType<any>>(\n  importFn: ImportFunction<T>,\n  componentName: string,\n  options?: LazyComponentOptions\n) => ComponentType<ComponentProps<T>>;\n\n/**\n * Creates a type-safe lazy route\n */\nexport type LazyRouteCreator = <T extends ComponentType<any>>(\n  importFn: ImportFunction<T>,\n  routeName: string\n) => ComponentType<ComponentProps<T>>;\n\n/**\n * Creates a type-safe lazy modal\n */\nexport type LazyModalCreator = <T extends ComponentType<any>>(\n  importFn: ImportFunction<T>,\n  modalName: string\n) => ComponentType<ComponentProps<T>>;\n\n/**\n * Creates a type-safe lazy chart\n */\nexport type LazyChartCreator = <T extends ComponentType<any>>(\n  importFn: ImportFunction<T>,\n  chartName: string\n) => ComponentType<ComponentProps<T>>;\n\n/**\n * Higher-order component for lazy loading\n */\nexport type WithLazyLoading = <P extends object>(\n  importFn: ImportFunction<ComponentType<P>>,\n  componentName: string,\n  options?: Pick<LazyComponentOptions, 'loadingComponent' | 'preload'>\n) => ComponentType<P>;\n\n/**\n * Hook for progressive loading\n */\nexport type UseProgressiveLoading = <T>(\n  items: T[],\n  options: ProgressiveLoadingOptions\n) => ProgressiveLoadingResult<T>;\n\n/**\n * Hook for managing lazy loading state\n */\nexport interface LazyLoadingState {\n  /** Set the loading state for a component */\n  setLoading: (componentName: string, isLoading: boolean) => void;\n  /** Check if a component is loading */\n  isLoading: (componentName: string) => boolean;\n  /** Current loading states for all components */\n  loadingStates: Record<string, boolean>;\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/config/src/utils/logger.ts",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 82,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [2988, 3026], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 85,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [3090, 3128], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "/* Lightweight structured logger for CosmicHub config/testing utilities */\n\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error';\n\ninterface LoggerOptions {\n  level?: LogLevel;\n  enabled?: boolean;\n  redactKeys?: string[];\n  baseFields?: Record<string, unknown>;\n  json?: boolean;\n}\n\nconst levelOrder: LogLevel[] = ['trace', 'debug', 'info', 'warn', 'error'];\n\nfunction shouldLog(current: LogLevel, target: LogLevel): boolean {\n  return levelOrder.indexOf(target) >= levelOrder.indexOf(current);\n}\n\nfunction redact(value: unknown, keys: string[]): unknown {\n  if (value === null) return value;\n  if (Array.isArray(value)) return value.map(v => redact(v, keys));\n  if (typeof value !== 'object') return value;\n  const out: Record<string, unknown> = {};\n  for (const [k, v] of Object.entries(value as Record<string, unknown>)) {\n    if (keys.includes(k)) {\n      out[k] = '[REDACTED]';\n      continue;\n    }\n    if (v !== null && typeof v === 'object') {\n      out[k] = redact(v, keys);\n    } else {\n      out[k] = v;\n    }\n  }\n  return out;\n}\n\nexport class Logger {\n  private level: LogLevel;\n  private enabled: boolean;\n  private redactKeys: string[];\n  private base: Record<string, unknown>;\n  private json: boolean;\n\n  constructor(opts: LoggerOptions = {}) {\n    // Obtain log level from environment safely (works in browser + node)\n    interface GlobalWithProcess { process?: { env?: { LOG_LEVEL?: unknown } } }\n    const globalObj: GlobalWithProcess = typeof globalThis !== 'undefined' ? (globalThis as GlobalWithProcess) : {};\n    let envLevel: LogLevel | undefined;\n    const rawLevel = typeof globalObj.process?.env?.LOG_LEVEL === 'string' ? globalObj.process?.env?.LOG_LEVEL : undefined;\n    if (rawLevel === 'trace' || rawLevel === 'debug' || rawLevel === 'info' || rawLevel === 'warn' || rawLevel === 'error') {\n      envLevel = rawLevel;\n    }\n    this.level = opts.level ?? envLevel ?? 'info';\n    this.enabled = opts.enabled ?? true;\n    this.redactKeys = opts.redactKeys ?? ['password', 'secret', 'token', 'apiKey'];\n    this.base = opts.baseFields ?? {};\n    this.json = opts.json ?? true;\n  }\n\n  child(extra: Record<string, unknown>): Logger {\n    return new Logger({\n      level: this.level,\n      enabled: this.enabled,\n      redactKeys: this.redactKeys,\n      baseFields: { ...this.base, ...extra },\n      json: this.json\n    });\n  }\n\n  setLevel(level: LogLevel): void { this.level = level; }\n\n  private emit(level: LogLevel, msg: string, data?: Record<string, unknown>): void {\n    if (!this.enabled || !shouldLog(this.level, level)) return;\n    const time = new Date().toISOString();\n    const redacted = data ? redact(data, this.redactKeys) : undefined;\n    const payload: Record<string, unknown> = { time, level, msg, ...this.base };\n    if (redacted !== undefined && redacted !== null && typeof redacted === 'object' && !Array.isArray(redacted)) {\n      Object.assign(payload, redacted as Record<string, unknown>);\n    }\n    if (this.json) {\n      // eslint-disable-next-line no-console\n      console.log(JSON.stringify(payload));\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(`[${String(payload.time)}] ${level.toUpperCase()} ${msg}`, redacted ?? '');\n    }\n  }\n\n  trace(msg: string, data?: Record<string, unknown>): void { this.emit('trace', msg, data); }\n  debug(msg: string, data?: Record<string, unknown>): void { this.emit('debug', msg, data); }\n  info(msg: string, data?: Record<string, unknown>): void { this.emit('info', msg, data); }\n  warn(msg: string, data?: Record<string, unknown>): void { this.emit('warn', msg, data); }\n  error(msg: string, data?: Record<string, unknown>): void { this.emit('error', msg, data); }\n}\n\nexport const logger = new Logger();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/frequency/src/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1848, 1851], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1848, 1851], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .webkitAudioContext on an `any` value.",
        "line": 59,
        "column": 72,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 59,
        "endColumn": 90
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'setVolume' has no 'await' expression.",
        "line": 202,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 202,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": {
              "range": [7241, 7287],
              "text": "setVolume(volume: number): void"
            },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 501,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 501,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17658, 17661], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17658, 17661], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .id on an `any` value.",
        "line": 501,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 501,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 502,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 502,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17704, 17707], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17704, 17707], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .name on an `any` value.",
        "line": 502,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 502,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 503,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 503,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17752, 17755], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17752, 17755], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .baseFrequency on an `any` value.",
        "line": 503,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 503,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 504,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 504,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17802, 17805], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17802, 17805], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .baseFrequency on an `any` value.",
        "line": 504,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 504,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 516,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 516,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18133, 18136], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18133, 18136], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .volume on an `any` value.",
        "line": 516,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 516,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 517,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 517,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18185, 18188], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18185, 18188], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .duration on an `any` value.",
        "line": 517,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 517,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 518,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 518,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18239, 18242], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18239, 18242], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .fadeIn on an `any` value.",
        "line": 518,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 518,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 519,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 519,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18291, 18294], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18291, 18294], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .fadeOut on an `any` value.",
        "line": 519,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 519,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @fileoverview Shared frequency generation and audio processing utilities\n * Used by both HealWave (standalone) and Astro (astrology-enhanced)\n * @version 1.0.0\n * @author CosmicHub Team\n */\n\nexport interface FrequencyPreset {\n  readonly id: string;\n  readonly name: string;\n  readonly category: 'solfeggio' | 'rife' | 'brainwave' | 'planetary' | 'chakra' | 'custom';\n  readonly baseFrequency: number;\n  readonly binauralBeat?: number;\n  readonly description?: string;\n  readonly benefits?: readonly string[];\n  readonly metadata?: Readonly<Record<string, unknown>>;\n}\n\nexport interface AudioSettings {\n  readonly volume: number;\n  readonly duration: number; // in minutes\n  readonly fadeIn: number;  // in seconds\n  readonly fadeOut: number; // in seconds\n}\n\nexport interface AudioEngineState {\n  readonly isPlaying: boolean;\n  readonly currentPreset: FrequencyPreset | null;\n  readonly currentSettings: AudioSettings | null;\n}\n\nexport class AudioEngineError extends Error {\n  public readonly code: string;\n  \n  constructor(message: string, code: string = 'AUDIO_ENGINE_ERROR') {\n    super(message);\n    this.name = 'AudioEngineError';\n    this.code = code;\n  }\n}\n\nexport class AudioEngine {\n  private audioContext: AudioContext | null = null;\n  private oscillatorLeft: OscillatorNode | null = null;\n  private oscillatorRight: OscillatorNode | null = null;\n  private gainNodeLeft: GainNode | null = null;\n  private gainNodeRight: GainNode | null = null;\n  private isPlaying: boolean = false;\n  private currentPreset: FrequencyPreset | null = null;\n  private currentSettings: AudioSettings | null = null;\n\n  constructor() {\n    this.initializeAudioContext();\n  }\n\n  private initializeAudioContext(): void {\n    try {\n      // Use modern AudioContext constructor with fallback\n      const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;\n      if (!AudioContextClass) {\n        throw new AudioEngineError('AudioContext not supported in this browser', 'UNSUPPORTED_BROWSER');\n      }\n      this.audioContext = new AudioContextClass();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      throw new AudioEngineError(`Failed to initialize audio context: ${message}`, 'INITIALIZATION_FAILED');\n    }\n  }\n\n  public async startFrequency(preset: FrequencyPreset, settings: AudioSettings): Promise<void> {\n    if (!this.audioContext) {\n      throw new AudioEngineError('Audio context not available', 'CONTEXT_UNAVAILABLE');\n    }\n\n    // Validate inputs with modern TypeScript assertion\n    this.validatePreset(preset);\n    this.validateSettings(settings);\n\n    if (this.audioContext.state === 'suspended') {\n      try {\n        await this.audioContext.resume();\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Unknown error';\n        throw new AudioEngineError(`Failed to resume audio context: ${message}`, 'RESUME_FAILED');\n      }\n    }\n\n    this.stopFrequency();\n\n    const { baseFrequency, binauralBeat = 0 } = preset;\n    const leftFreq = baseFrequency;\n    const rightFreq = baseFrequency + binauralBeat;\n\n    try {\n      // Create stereo setup with modern Web Audio API\n      this.oscillatorLeft = this.audioContext.createOscillator();\n      this.oscillatorRight = this.audioContext.createOscillator();\n      this.gainNodeLeft = this.audioContext.createGain();\n      this.gainNodeRight = this.audioContext.createGain();\n\n      // Create stereo panner for proper left/right separation\n      const pannerLeft = this.audioContext.createStereoPanner();\n      const pannerRight = this.audioContext.createStereoPanner();\n      pannerLeft.pan.setValueAtTime(-1, this.audioContext.currentTime); // Full left\n      pannerRight.pan.setValueAtTime(1, this.audioContext.currentTime); // Full right\n\n      // Set frequencies with exponential ramp for smooth transition\n      this.oscillatorLeft.frequency.setValueAtTime(leftFreq, this.audioContext.currentTime);\n      this.oscillatorRight.frequency.setValueAtTime(rightFreq, this.audioContext.currentTime);\n\n      // Use sine wave for pure tones (best for binaural beats)\n      this.oscillatorLeft.type = 'sine';\n      this.oscillatorRight.type = 'sine';\n\n      // Connect audio graph: Oscillator -> Gain -> Panner -> Destination\n      this.oscillatorLeft.connect(this.gainNodeLeft);\n      this.gainNodeLeft.connect(pannerLeft);\n      pannerLeft.connect(this.audioContext.destination);\n\n      this.oscillatorRight.connect(this.gainNodeRight);\n      this.gainNodeRight.connect(pannerRight);\n      pannerRight.connect(this.audioContext.destination);\n\n      // Apply smooth fade-in with exponential volume curve\n      const volume = Math.max(0, Math.min(settings.volume / 100, 1));\n      const currentTime = this.audioContext.currentTime;\n      \n      this.gainNodeLeft.gain.setValueAtTime(0.001, currentTime); // Start near zero to avoid clicks\n      this.gainNodeRight.gain.setValueAtTime(0.001, currentTime);\n      \n      this.gainNodeLeft.gain.exponentialRampToValueAtTime(volume, currentTime + settings.fadeIn);\n      this.gainNodeRight.gain.exponentialRampToValueAtTime(volume, currentTime + settings.fadeIn);\n\n      // Schedule stop with fade-out if duration is specified\n      if (settings.duration > 0) {\n        const stopTime = currentTime + (settings.duration * 60); // Convert minutes to seconds\n        const fadeOutStart = stopTime - settings.fadeOut;\n        \n        this.gainNodeLeft.gain.exponentialRampToValueAtTime(0.001, fadeOutStart + settings.fadeOut);\n        this.gainNodeRight.gain.exponentialRampToValueAtTime(0.001, fadeOutStart + settings.fadeOut);\n        \n        this.oscillatorLeft.stop(stopTime);\n        this.oscillatorRight.stop(stopTime);\n      }\n\n      // Start oscillators\n      this.oscillatorLeft.start();\n      this.oscillatorRight.start();\n\n      this.isPlaying = true;\n      this.currentPreset = preset;\n      this.currentSettings = settings;\n\n    } catch (error) {\n      this.cleanup();\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      throw new AudioEngineError(`Failed to start frequency: ${message}`, 'START_FAILED');\n    }\n  }\n\n  public stopFrequency(): void {\n    this.cleanup();\n    this.isPlaying = false;\n    this.currentPreset = null;\n    this.currentSettings = null;\n  }\n\n  private cleanup(): void {\n    try {\n      if (this.oscillatorLeft) {\n        this.oscillatorLeft.stop();\n        this.oscillatorLeft.disconnect();\n        this.oscillatorLeft = null;\n      }\n      if (this.oscillatorRight) {\n        this.oscillatorRight.stop();\n        this.oscillatorRight.disconnect();\n        this.oscillatorRight = null;\n      }\n      if (this.gainNodeLeft) {\n        this.gainNodeLeft.disconnect();\n        this.gainNodeLeft = null;\n      }\n      if (this.gainNodeRight) {\n        this.gainNodeRight.disconnect();\n        this.gainNodeRight = null;\n      }\n    } catch (error) {\n      // Ignore cleanup errors, but log them\n      console.warn('Error during audio cleanup:', error);\n    }\n  }\n\n  public getState(): AudioEngineState {\n    return {\n      isPlaying: this.isPlaying,\n      currentPreset: this.currentPreset,\n      currentSettings: this.currentSettings,\n    };\n  }\n\n  public async setVolume(volume: number): Promise<void> {\n    if (!this.gainNodeLeft || !this.gainNodeRight || !this.audioContext) {\n      throw new AudioEngineError('Audio nodes not initialized', 'NODES_NOT_INITIALIZED');\n    }\n    \n    try {\n      const normalizedVolume = Math.max(0.001, Math.min(volume / 100, 1)); // Avoid zero for exponential ramp\n      const currentTime = this.audioContext.currentTime;\n      \n      this.gainNodeLeft.gain.exponentialRampToValueAtTime(normalizedVolume, currentTime + 0.1);\n      this.gainNodeRight.gain.exponentialRampToValueAtTime(normalizedVolume, currentTime + 0.1);\n      \n      // Update current settings\n      if (this.currentSettings) {\n        this.currentSettings = { ...this.currentSettings, volume };\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      throw new AudioEngineError(`Volume adjustment failed: ${message}`, 'VOLUME_FAILED');\n    }\n  }\n\n  private validatePreset(preset: FrequencyPreset): asserts preset is FrequencyPreset {\n    if (!preset.id || typeof preset.id !== 'string') {\n      throw new AudioEngineError('Invalid preset: missing or invalid ID', 'INVALID_PRESET');\n    }\n    if (!preset.baseFrequency || preset.baseFrequency < 1 || preset.baseFrequency > 20000) {\n      throw new AudioEngineError('Invalid preset: frequency must be between 1-20000 Hz', 'INVALID_FREQUENCY');\n    }\n    if (preset.binauralBeat !== undefined && (preset.binauralBeat < 0 || preset.binauralBeat > 100)) {\n      throw new AudioEngineError('Invalid preset: binaural beat must be between 0-100 Hz', 'INVALID_BINAURAL');\n    }\n  }\n\n  private validateSettings(settings: AudioSettings): asserts settings is AudioSettings {\n    if (settings.volume < 0 || settings.volume > 100) {\n      throw new AudioEngineError('Invalid settings: volume must be between 0-100', 'INVALID_VOLUME');\n    }\n    if (settings.duration < 0 || settings.duration > 480) { // Max 8 hours\n      throw new AudioEngineError('Invalid settings: duration must be between 0-480 minutes', 'INVALID_DURATION');\n    }\n    if (settings.fadeIn < 0 || settings.fadeIn > 60) {\n      throw new AudioEngineError('Invalid settings: fade in must be between 0-60 seconds', 'INVALID_FADE_IN');\n    }\n    if (settings.fadeOut < 0 || settings.fadeOut > 60) {\n      throw new AudioEngineError('Invalid settings: fade out must be between 0-60 seconds', 'INVALID_FADE_OUT');\n    }\n  }\n\n  public destroy(): void {\n    this.stopFrequency();\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      void this.audioContext.close();\n    }\n    this.audioContext = null;\n  }\n}\n\n// Immutable preset collections with modern TypeScript patterns\nconst SOLFEGGIO_FREQUENCIES = [\n  {\n    id: 'ut-396',\n    name: 'Ut - 396 Hz',\n    category: 'solfeggio',\n    baseFrequency: 396,\n    description: 'Liberating guilt and fear',\n    benefits: ['Releases fear', 'Eliminates guilt', 'Grounds to root chakra'],\n    metadata: { chakra: 'root', intention: 'grounding' }\n  },\n  {\n    id: 're-417',\n    name: 'Re - 417 Hz',\n    category: 'solfeggio',\n    baseFrequency: 417,\n    description: 'Facilitating change',\n    benefits: ['Facilitates change', 'Clears negativity', 'Enhances creativity'],\n    metadata: { chakra: 'sacral', intention: 'transformation' }\n  },\n  {\n    id: 'mi-528',\n    name: 'Mi - 528 Hz',\n    category: 'solfeggio',\n    baseFrequency: 528,\n    description: 'Transformation and DNA repair',\n    benefits: ['DNA repair', 'Love frequency', 'Transformation'],\n    metadata: { chakra: 'heart', intention: 'healing' }\n  },\n  {\n    id: 'fa-639',\n    name: 'Fa - 639 Hz',\n    category: 'solfeggio',\n    baseFrequency: 639,\n    description: 'Connecting relationships',\n    benefits: ['Harmonious relationships', 'Communication', 'Understanding'],\n    metadata: { chakra: 'heart', intention: 'connection' }\n  },\n  {\n    id: 'sol-741',\n    name: 'Sol - 741 Hz',\n    category: 'solfeggio',\n    baseFrequency: 741,\n    description: 'Awakening intuition',\n    benefits: ['Intuition', 'Problem solving', 'Self-expression'],\n    metadata: { chakra: 'throat', intention: 'expression' }\n  },\n  {\n    id: 'la-852',\n    name: 'La - 852 Hz',\n    category: 'solfeggio',\n    baseFrequency: 852,\n    description: 'Returning to spiritual order',\n    benefits: ['Spiritual insight', 'Intuition', 'Inner strength'],\n    metadata: { chakra: 'third_eye', intention: 'intuition' }\n  }\n] as const satisfies readonly FrequencyPreset[];\n\nconst BRAINWAVE_FREQUENCIES = [\n  {\n    id: 'delta-sleep',\n    name: 'Delta Sleep',\n    category: 'brainwave',\n    baseFrequency: 40,\n    binauralBeat: 2,\n    description: 'Deep sleep and healing',\n    benefits: ['Deep sleep', 'Healing', 'Growth hormone release'],\n    metadata: { state: 'delta', frequency_range: '0.5-4Hz' }\n  },\n  {\n    id: 'theta-meditation',\n    name: 'Theta Meditation',\n    category: 'brainwave',\n    baseFrequency: 40,\n    binauralBeat: 6,\n    description: 'Deep meditation and intuition',\n    benefits: ['Deep meditation', 'Intuition', 'Creativity'],\n    metadata: { state: 'theta', frequency_range: '4-8Hz' }\n  },\n  {\n    id: 'alpha-relaxation',\n    name: 'Alpha Relaxation',\n    category: 'brainwave',\n    baseFrequency: 40,\n    binauralBeat: 10,\n    description: 'Relaxed awareness',\n    benefits: ['Relaxation', 'Learning', 'Stress reduction'],\n    metadata: { state: 'alpha', frequency_range: '8-14Hz' }\n  },\n  {\n    id: 'beta-focus',\n    name: 'Beta Focus',\n    category: 'brainwave',\n    baseFrequency: 40,\n    binauralBeat: 20,\n    description: 'Alert concentration',\n    benefits: ['Mental alertness', 'Concentration', 'Problem solving'],\n    metadata: { state: 'beta', frequency_range: '14-30Hz' }\n  },\n  {\n    id: 'gamma-awareness',\n    name: 'Gamma Awareness',\n    category: 'brainwave',\n    baseFrequency: 40,\n    binauralBeat: 40,\n    description: 'Heightened awareness',\n    benefits: ['Peak awareness', 'Cognitive enhancement', 'Binding consciousness'],\n    metadata: { state: 'gamma', frequency_range: '30-100Hz' }\n  }\n] as const satisfies readonly FrequencyPreset[];\n\nconst PLANETARY_FREQUENCIES = [\n  {\n    id: 'earth-frequency',\n    name: 'Earth - Schumann Resonance',\n    category: 'planetary',\n    baseFrequency: 7.83,\n    description: \"Earth's natural frequency\",\n    benefits: ['Grounding', 'Balance', 'Natural harmony'],\n    metadata: { planet: 'earth', resonance: 'schumann' }\n  },\n  {\n    id: 'venus-frequency',\n    name: 'Venus - Love Planet',\n    category: 'planetary',\n    baseFrequency: 221.23,\n    description: 'Venus orbital frequency',\n    benefits: ['Love', 'Beauty', 'Harmony'],\n    metadata: { planet: 'venus', orbital_period: '224.7_days' }\n  },\n  {\n    id: 'jupiter-frequency',\n    name: 'Jupiter - Growth and Expansion',\n    category: 'planetary',\n    baseFrequency: 183.58,\n    description: 'Jupiter orbital frequency',\n    benefits: ['Growth', 'Expansion', 'Wisdom'],\n    metadata: { planet: 'jupiter', orbital_period: '11.86_years' }\n  }\n] as const satisfies readonly FrequencyPreset[];\n\nconst CHAKRA_FREQUENCIES = [\n  {\n    id: 'root-chakra',\n    name: 'Root Chakra - Muladhara',\n    category: 'chakra',\n    baseFrequency: 194.18,\n    description: 'Grounding and survival',\n    benefits: ['Grounding', 'Stability', 'Security'],\n    metadata: { chakra: 'root', color: 'red', element: 'earth' }\n  },\n  {\n    id: 'sacral-chakra',\n    name: 'Sacral Chakra - Svadhisthana',\n    category: 'chakra',\n    baseFrequency: 210.42,\n    description: 'Creativity and sexuality',\n    benefits: ['Creativity', 'Passion', 'Emotional balance'],\n    metadata: { chakra: 'sacral', color: 'orange', element: 'water' }\n  },\n  {\n    id: 'solar-plexus-chakra',\n    name: 'Solar Plexus - Manipura',\n    category: 'chakra',\n    baseFrequency: 126.22,\n    description: 'Personal power and confidence',\n    benefits: ['Confidence', 'Personal power', 'Digestion'],\n    metadata: { chakra: 'solar_plexus', color: 'yellow', element: 'fire' }\n  },\n  {\n    id: 'heart-chakra',\n    name: 'Heart Chakra - Anahata',\n    category: 'chakra',\n    baseFrequency: 341.3,\n    description: 'Love and compassion',\n    benefits: ['Love', 'Compassion', 'Healing'],\n    metadata: { chakra: 'heart', color: 'green', element: 'air' }\n  },\n  {\n    id: 'throat-chakra',\n    name: 'Throat Chakra - Vishuddha',\n    category: 'chakra',\n    baseFrequency: 384,\n    description: 'Communication and truth',\n    benefits: ['Communication', 'Truth', 'Self-expression'],\n    metadata: { chakra: 'throat', color: 'blue', element: 'ether' }\n  },\n  {\n    id: 'third-eye-chakra',\n    name: 'Third Eye - Ajna',\n    category: 'chakra',\n    baseFrequency: 426.7,\n    description: 'Intuition and insight',\n    benefits: ['Intuition', 'Insight', 'Clarity'],\n    metadata: { chakra: 'third_eye', color: 'indigo', element: 'light' }\n  },\n  {\n    id: 'crown-chakra',\n    name: 'Crown Chakra - Sahasrara',\n    category: 'chakra',\n    baseFrequency: 963,\n    description: 'Spiritual connection',\n    benefits: ['Spiritual connection', 'Enlightenment', 'Divine consciousness'],\n    metadata: { chakra: 'crown', color: 'violet', element: 'thought' }\n  }\n] as const satisfies readonly FrequencyPreset[];\n\n// Export preset constants for direct access\nexport { SOLFEGGIO_FREQUENCIES, BRAINWAVE_FREQUENCIES, PLANETARY_FREQUENCIES, CHAKRA_FREQUENCIES };\n\n// Modern getter functions with type safety and memoization\nexport const getAllPresets = (): readonly FrequencyPreset[] => [\n  ...SOLFEGGIO_FREQUENCIES,\n  ...BRAINWAVE_FREQUENCIES,\n  ...PLANETARY_FREQUENCIES,\n  ...CHAKRA_FREQUENCIES\n];\n\nexport const getPresetsByCategory = (category: FrequencyPreset['category']): readonly FrequencyPreset[] => {\n  return getAllPresets().filter(preset => preset.category === category);\n};\n\nexport const getPresetById = (id: string): FrequencyPreset | undefined => {\n  return getAllPresets().find(preset => preset.id === id);\n};\n\nexport const getPresetsByBenefits = (benefit: string): readonly FrequencyPreset[] => {\n  return getAllPresets().filter(preset => \n    preset.benefits?.some(b => b.toLowerCase().includes(benefit.toLowerCase()))\n  );\n};\n\n// Type guards for runtime validation\nexport const isValidFrequencyPreset = (preset: unknown): preset is FrequencyPreset => {\n  return (\n    typeof preset === 'object' &&\n    preset !== null &&\n    'id' in preset &&\n    'name' in preset &&\n    'category' in preset &&\n    'baseFrequency' in preset &&\n    typeof (preset as any).id === 'string' &&\n    typeof (preset as any).name === 'string' &&\n    typeof (preset as any).baseFrequency === 'number' &&\n    (preset as any).baseFrequency > 0\n  );\n};\n\nexport const isValidAudioSettings = (settings: unknown): settings is AudioSettings => {\n  return (\n    typeof settings === 'object' &&\n    settings !== null &&\n    'volume' in settings &&\n    'duration' in settings &&\n    'fadeIn' in settings &&\n    'fadeOut' in settings &&\n    typeof (settings as any).volume === 'number' &&\n    typeof (settings as any).duration === 'number' &&\n    typeof (settings as any).fadeIn === 'number' &&\n    typeof (settings as any).fadeOut === 'number'\n  );\n};",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/api.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 27,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 27,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 30,
        "column": 32,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 30,
        "endColumn": 71
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .message on an `any` value.",
        "line": 30,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 30,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 33,
        "column": 29,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 33,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export const API_ENDPOINTS = {\n  astrology: '/api/astrology',\n  healwave: '/api/healwave',\n  numerology: '/api/numerology',\n  humanDesign: '/api/human-design',\n} as const;\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\nexport async function apiRequest<T>(\n  endpoint: string,\n  options?: RequestInit\n): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(endpoint, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options?.headers,\n      },\n      ...options,\n    });\n\n    const data = await response.json();\n    \n    if (!response.ok) {\n      return { success: false, error: data.message || 'Request failed' };\n    }\n\n    return { success: true, data };\n  } catch (error) {\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Unknown error' \n    };\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/cross-app-hooks.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/cross-app-store.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 8,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 8,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 10,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 10,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 17,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 17,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [628, 631], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [628, 631], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 24,
        "column": 44,
        "nodeType": "CallExpression",
        "messageId": "unsafeReturn",
        "endLine": 24,
        "endColumn": 58
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `Function` typed value.",
        "line": 24,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 24,
        "endColumn": 52
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [857, 860], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [857, 860], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [919, 922], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [919, 922], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1090, 1093], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1090, 1093], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2470, 2473], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2470, 2473], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 114,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 114,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2778, 2781], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2778, 2781], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 132,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "anyAssignment",
        "endLine": 132,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 144,
        "column": 19,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 144,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 145,
        "column": 13,
        "nodeType": "AssignmentExpression",
        "messageId": "anyAssignment",
        "endLine": 145,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 155,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 155,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3940, 3943], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3940, 3943], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 158,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 158,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Cross-app state management for CosmicHub monorepo\n * Enables seamless data sharing between astro and healwave apps\n */\n\n// Simple EventEmitter implementation for browser compatibility\nclass SimpleEventEmitter {\n  private events: { [key: string]: Function[] } = {};\n\n  on(event: string, callback: Function): void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  off(event: string, callback: Function): void {\n    if (!this.events[event]) return;\n    this.events[event] = this.events[event].filter(cb => cb !== callback);\n  }\n\n  emit(event: string, data?: any): void {\n    if (!this.events[event]) return;\n    this.events[event].forEach(callback => callback(data));\n  }\n}\n\nexport interface AppState {\n  user: {\n    id: string;\n    subscription: string;\n    preferences: Record<string, any>;\n  } | null;\n  currentChart: {\n    id: string;\n    data: any;\n    name: string;\n  } | null;\n  theme: 'light' | 'dark' | 'cosmic';\n  activeApp: 'astro' | 'healwave';\n}\n\nexport interface CrossAppEvent {\n  type: string;\n  payload: any;\n  source: string;\n  timestamp: number;\n}\n\nclass CrossAppStore extends SimpleEventEmitter {\n  private state: AppState = {\n    user: null,\n    currentChart: null,\n    theme: 'cosmic',\n    activeApp: 'astro'\n  };\n\n  private storageKey = 'cosmichub-cross-app-state';\n\n  constructor() {\n    super();\n    this.loadState();\n    this.setupStorageListener();\n  }\n\n  // Get current state\n  getState(): AppState {\n    return { ...this.state };\n  }\n\n  // Update user data\n  updateUser(user: AppState['user']): void {\n    this.state.user = user;\n    this.saveState();\n    this.emit('user:updated', user);\n    this.broadcastEvent('user:updated', user);\n  }\n\n  // Update current chart\n  updateChart(chart: AppState['currentChart']): void {\n    this.state.currentChart = chart;\n    this.saveState();\n    this.emit('chart:updated', chart);\n    this.broadcastEvent('chart:updated', chart);\n  }\n\n  // Update theme\n  updateTheme(theme: AppState['theme']): void {\n    this.state.theme = theme;\n    this.saveState();\n    this.emit('theme:updated', theme);\n    this.broadcastEvent('theme:updated', theme);\n  }\n\n  // Set active app\n  setActiveApp(app: AppState['activeApp']): void {\n    this.state.activeApp = app;\n    this.saveState();\n    this.emit('app:changed', app);\n    this.broadcastEvent('app:changed', app);\n  }\n\n  // Sync chart data from astro to healwave\n  syncChartToHealwave(chartData: any): void {\n    this.broadcastEvent('chart:sync', chartData);\n  }\n\n  // Sync frequency settings from healwave to astro\n  syncFrequenciesToAstro(frequencies: number[]): void {\n    this.broadcastEvent('frequencies:sync', frequencies);\n  }\n\n  // Subscribe to events\n  subscribe(event: string, callback: (data: any) => void): () => void {\n    this.on(event, callback);\n    return () => this.off(event, callback);\n  }\n\n  // Private methods\n  private saveState(): void {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.state));\n    } catch (error) {\n      console.warn('Failed to save cross-app state:', error);\n    }\n  }\n\n  private loadState(): void {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      if (saved) {\n        this.state = { ...this.state, ...JSON.parse(saved) };\n      }\n    } catch (error) {\n      console.warn('Failed to load cross-app state:', error);\n    }\n  }\n\n  private setupStorageListener(): void {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('storage', (event) => {\n        if (event.key === this.storageKey && event.newValue) {\n          try {\n            const newState = JSON.parse(event.newValue);\n            this.state = newState;\n            this.emit('state:synced', newState);\n          } catch (error) {\n            console.warn('Failed to sync cross-app state:', error);\n          }\n        }\n      });\n    }\n  }\n\n  private broadcastEvent(type: string, payload: any): void {\n    const event: CrossAppEvent = {\n      type,\n      payload,\n      source: this.state.activeApp,\n      timestamp: Date.now()\n    };\n\n    // Broadcast via localStorage for cross-tab communication\n    try {\n      const eventKey = `cosmichub-event-${Date.now()}`;\n      localStorage.setItem(eventKey, JSON.stringify(event));\n      \n      // Clean up old events\n      setTimeout(() => {\n        localStorage.removeItem(eventKey);\n      }, 5000);\n    } catch (error) {\n      console.warn('Failed to broadcast event:', error);\n    }\n  }\n\n  // Clear all state\n  clear(): void {\n    this.state = {\n      user: null,\n      currentChart: null,\n      theme: 'cosmic',\n      activeApp: 'astro'\n    };\n    this.saveState();\n    this.emit('state:cleared');\n  }\n}\n\n// Create singleton instance\nexport const crossAppStore = new CrossAppStore();\n\nexport default crossAppStore;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/enhanced-index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/ephemeris.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `Promise<any>`.",
        "line": 140,
        "column": 5,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 140,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Ephemeris types and client utilities for shared use across applications.\n * \n * This module provides TypeScript types and utility functions for interacting\n * with the ephemeris server, ensuring consistency across astro and healwave apps.\n */\n\nexport interface PlanetPosition {\n  /** Position in degrees (0-360) */\n  position: number;\n  /** Whether the planet is in retrograde motion */\n  retrograde: boolean;\n}\n\nexport interface CalculationRequest {\n  /** Julian Day Number for the calculation */\n  julian_day: number;\n  /** Planet name (e.g., 'sun', 'moon', 'mercury') */\n  planet: string;\n}\n\nexport interface CalculationResponse {\n  /** Planet name */\n  planet: string;\n  /** Julian Day Number */\n  julian_day: number;\n  /** Position data */\n  position: PlanetPosition;\n  /** UTC timestamp of calculation */\n  calculation_time: string;\n}\n\nexport interface BatchCalculationRequest {\n  /** Array of calculations to perform */\n  calculations: CalculationRequest[];\n}\n\nexport interface BatchCalculationResponse {\n  /** Array of calculation results */\n  results: CalculationResponse[];\n  /** UTC timestamp of batch calculation */\n  calculation_time: string;\n}\n\nexport interface EphemerisHealthResponse {\n  /** Service status */\n  status: 'healthy' | 'unhealthy';\n  /** Health check timestamp */\n  timestamp: string;\n  /** Whether ephemeris is properly initialized */\n  ephemeris_initialized: boolean;\n}\n\n/**\n * Supported planetary bodies in the ephemeris system.\n */\nexport const SUPPORTED_PLANETS = [\n  'sun',\n  'moon',\n  'mercury',\n  'venus',\n  'mars',\n  'jupiter',\n  'saturn',\n  'uranus',\n  'neptune',\n  'pluto',\n  'chiron',\n  'ceres',\n  'pallas',\n  'juno',\n  'vesta'\n] as const;\n\nexport type PlanetName = typeof SUPPORTED_PLANETS[number];\n\n/**\n * Configuration for ephemeris client.\n */\nexport interface EphemerisConfig {\n  /** Backend API base URL */\n  apiBaseUrl: string;\n  /** API key for authentication (if required) */\n  apiKey?: string;\n  /** Request timeout in milliseconds */\n  timeout?: number;\n}\n\n/**\n * Client for fetching ephemeris data from the backend API.\n * \n * This client abstracts the communication with the backend, which in turn\n * communicates with the dedicated ephemeris server.\n */\nexport class EphemerisClient {\n  private config: Required<EphemerisConfig>;\n\n  constructor(config: EphemerisConfig) {\n    this.config = {\n      timeout: 30000,\n      ...config,\n      apiKey: config.apiKey || ''\n    };\n  }\n\n  /**\n   * Create request headers with authentication if available.\n   */\n  private getHeaders(): HeadersInit {\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n    };\n\n    if (this.config.apiKey) {\n      headers['Authorization'] = `Bearer ${this.config.apiKey}`;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Make HTTP request with error handling.\n   */\n  private async makeRequest<T>(endpoint: string, options?: RequestInit): Promise<T> {\n    const url = `${this.config.apiBaseUrl}${endpoint}`;\n    \n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...this.getHeaders(),\n        ...options?.headers,\n      },\n      signal: AbortSignal.timeout(this.config.timeout),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Calculate planetary position for a specific date and planet.\n   */\n  async calculatePosition(julianDay: number, planet: PlanetName): Promise<CalculationResponse> {\n    const request: CalculationRequest = {\n      julian_day: julianDay,\n      planet,\n    };\n\n    return this.makeRequest<CalculationResponse>('/api/ephemeris/calculate', {\n      method: 'POST',\n      body: JSON.stringify(request),\n    });\n  }\n\n  /**\n   * Calculate multiple planetary positions in a single request.\n   */\n  async calculateBatchPositions(calculations: CalculationRequest[]): Promise<BatchCalculationResponse> {\n    const request: BatchCalculationRequest = {\n      calculations,\n    };\n\n    return this.makeRequest<BatchCalculationResponse>('/api/ephemeris/calculate/batch', {\n      method: 'POST',\n      body: JSON.stringify(request),\n    });\n  }\n\n  /**\n   * Get all planetary positions for a specific Julian Day.\n   */\n  async getAllPlanetaryPositions(julianDay: number): Promise<Record<PlanetName, PlanetPosition>> {\n    const calculations = SUPPORTED_PLANETS.map(planet => ({\n      julian_day: julianDay,\n      planet,\n    }));\n\n    const response = await this.calculateBatchPositions(calculations);\n    \n    const positions: Record<string, PlanetPosition> = {};\n    for (const result of response.results) {\n      positions[result.planet] = result.position;\n    }\n\n    return positions as Record<PlanetName, PlanetPosition>;\n  }\n\n  /**\n   * Check ephemeris service health.\n   */\n  async healthCheck(): Promise<EphemerisHealthResponse> {\n    return this.makeRequest<EphemerisHealthResponse>('/api/ephemeris/health');\n  }\n\n  /**\n   * Get list of supported planets.\n   */\n  async getSupportedPlanets(): Promise<PlanetName[]> {\n    return this.makeRequest<PlanetName[]>('/api/ephemeris/planets');\n  }\n}\n\n/**\n * Utility function to convert a Date to Julian Day Number.\n * \n * @param date - The date to convert\n * @returns Julian Day Number\n */\nexport function dateToJulianDay(date: Date): number {\n  const a = Math.floor((14 - date.getMonth() - 1) / 12);\n  const y = date.getFullYear() + 4800 - a;\n  const m = date.getMonth() + 1 + 12 * a - 3;\n  \n  const jdn = date.getDate() + Math.floor((153 * m + 2) / 5) + 365 * y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) - 32045;\n  \n  // Add fractional day\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  const milliseconds = date.getMilliseconds();\n  \n  const fractionalDay = (hours - 12) / 24 + minutes / 1440 + seconds / 86400 + milliseconds / 86400000;\n  \n  return jdn + fractionalDay;\n}\n\n/**\n * Utility function to convert Julian Day Number to Date.\n * \n * @param julianDay - Julian Day Number\n * @returns Date object\n */\nexport function julianDayToDate(julianDay: number): Date {\n  const jd = julianDay + 0.5;\n  const z = Math.floor(jd);\n  const f = jd - z;\n  \n  let a = z;\n  if (z >= 2299161) {\n    const alpha = Math.floor((z - 1867216.25) / 36524.25);\n    a = z + 1 + alpha - Math.floor(alpha / 4);\n  }\n  \n  const b = a + 1524;\n  const c = Math.floor((b - 122.1) / 365.25);\n  const d = Math.floor(365.25 * c);\n  const e = Math.floor((b - d) / 30.6001);\n  \n  const day = b - d - Math.floor(30.6001 * e);\n  const month = e < 14 ? e - 1 : e - 13;\n  const year = month > 2 ? c - 4716 : c - 4715;\n  \n  // Calculate time from fractional part\n  const totalSeconds = f * 86400;\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = Math.floor(totalSeconds % 60);\n  const milliseconds = Math.floor((totalSeconds % 1) * 1000);\n  \n  return new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);\n}\n\n/**\n * Utility function to format planet position for display.\n * \n * @param position - Planet position data\n * @param precision - Number of decimal places (default: 2)\n * @returns Formatted position string\n */\nexport function formatPlanetPosition(position: PlanetPosition, precision: number = 2): string {\n  const pos = position.position.toFixed(precision);\n  const retrograde = position.retrograde ? ' ℞' : '';\n  return `${pos}°${retrograde}`;\n}\n\n/**\n * Utility function to get astrological sign from degree position.\n * \n * @param degrees - Position in degrees (0-360)\n * @returns Astrological sign information\n */\nexport function getAstrologicalSign(degrees: number): {\n  sign: string;\n  signDegrees: number;\n  signMinutes: number;\n} {\n  const signs = [\n    'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n    'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'\n  ];\n  \n  const normalizedDegrees = degrees % 360;\n  const signIndex = Math.floor(normalizedDegrees / 30);\n  const signDegrees = normalizedDegrees % 30;\n  const signMinutes = (signDegrees % 1) * 60;\n  \n  return {\n    sign: signs[signIndex],\n    signDegrees: Math.floor(signDegrees),\n    signMinutes: Math.floor(signMinutes),\n  };\n}\n\n/**\n * Create a configured ephemeris client instance.\n * \n * @param config - Client configuration\n * @returns Configured ephemeris client\n */\nexport function createEphemerisClient(config: EphemerisConfig): EphemerisClient {\n  return new EphemerisClient(config);\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/healwave.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [222, 225], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [222, 225], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .webkitAudioContext on an `any` value.",
        "line": 6,
        "column": 71,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 6,
        "endColumn": 89
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'generateFrequencies' has no 'await' expression.",
        "line": 11,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 11,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": {
              "range": [293, 353],
              "text": "generateFrequencies(chartData: any): number[]"
            },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [330, 333], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [330, 333], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .sun on an `any` value.",
        "line": 16,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 16,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 19,
        "column": 33,
        "nodeType": "CallExpression",
        "messageId": "unsafeArgument",
        "endLine": 19,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 19,
        "column": 33,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 19,
        "endColumn": 63
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .sun on an `any` value.",
        "line": 19,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 19,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export class HealwaveIntegration {\n  private audioContext: AudioContext | null = null;\n\n  createAudioContext(): AudioContext {\n    if (!this.audioContext) {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    }\n    return this.audioContext;\n  }\n\n  async generateFrequencies(chartData: any): Promise<number[]> {\n    // Generate healing frequencies based on astrological chart data\n    const baseFrequencies = [528, 396, 417, 639, 741, 852, 963]; // Solfeggio frequencies\n    \n    // Customize based on chart data\n    if (chartData?.sun?.sign) {\n      const signIndex = ['aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo', \n                        'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces']\n                       .indexOf(chartData.sun.sign.toLowerCase());\n      if (signIndex >= 0) {\n        return baseFrequencies.map(freq => freq + (signIndex * 5));\n      }\n    }\n    \n    return baseFrequencies;\n  }\n\n  async playFrequency(frequency: number, duration: number = 1000): Promise<void> {\n    const context = this.createAudioContext();\n    const oscillator = context.createOscillator();\n    const gainNode = context.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(context.destination);\n\n    oscillator.frequency.setValueAtTime(frequency, context.currentTime);\n    oscillator.type = 'sine';\n\n    gainNode.gain.setValueAtTime(0.1, context.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + duration / 1000);\n\n    oscillator.start(context.currentTime);\n    oscillator.stop(context.currentTime + duration / 1000);\n\n    return new Promise(resolve => {\n      oscillator.onended = () => resolve();\n    });\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [474, 477], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [474, 477], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Subscription-related types\nexport interface UserSubscription {\n  tier: 'free' | 'premium' | 'elite';\n  status: 'active' | 'canceled' | 'past_due' | 'incomplete';\n  currentPeriodEnd: Date;\n  customerId?: string;\n  subscriptionId?: string;\n}\n\nexport interface SubscriptionPlan {\n  id: string;\n  name: string;\n  tier: 'free' | 'premium' | 'elite';\n  price: number;\n  features: string[];\n  limits: {\n    chartsPerMonth?: number;\n    chartStorage?: number;\n    [key: string]: any;\n  };\n}\n\nexport interface AstrologyChart {\n  id: string;\n  userId: string;\n  birthData: {\n    date: string; // ISO 8601 format\n    time: string; // HH:mm format\n    location: {\n      lat: number;\n      lng: number;\n      name: string;\n    };\n  };\n  planets: Planet[];\n  houses: House[];\n  aspects: Aspect[];\n}\n\nexport interface Planet {\n  name: string;\n  sign: string;\n  degree: number;\n  house: number;\n  retrograde: boolean;\n}\n\nexport interface House {\n  number: number;\n  sign: string;\n  degree: number;\n}\n\nexport interface Aspect {\n  planet1: string;\n  planet2: string;\n  aspect: string;\n  orb: number;\n  applying: boolean;\n}\n\nexport interface HealwaveSession {\n  id: string;\n  userId: string;\n  frequency: number;\n  duration: number; // in minutes\n  timestamp: string; // ISO 8601 format\n  personalizedFor?: AstrologyChart;\n}\n\nexport * from './api';\nexport * from './ephemeris';\nexport * from './stripe';\nexport * from './subscriptions';\nexport * from './xaiService';\nexport * from './types';\n\n// Export both cross-app store implementations with explicit naming\nexport { useCrossAppStore } from './cross-app-hooks';\nexport { useCrossAppStore as useCrossAppState } from './useCrossAppStore';\n\n// Re-export key Stripe functionality for convenience\nexport { \n  stripeService, \n  getStripeService, \n  createStripeService,\n  type StripeSession,\n  type StripeCheckoutParams,\n  type SubscriptionData,\n  type StripeConfig\n} from './stripe';",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/index.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages/integrations/src/index.tsx"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useCallback } from 'react';\n\nexport interface AstrologyChart {\n  id: string;\n  userId: string;\n  birthData: {\n    date: string; // ISO 8601 format\n    time: string; // HH:mm format\n    location: {\n      lat: number;\n      lng: number;\n      name: string;\n    };\n  };\n  planets: Planet[];\n  houses: House[];\n  aspects: Aspect[];\n}\n\nexport interface Planet {\n  name: string;\n  sign: string;\n  degree: number;\n  house: number;\n  retrograde: boolean;\n}\n\nexport interface House {\n  number: number;\n  sign: string;\n  degree: number;\n}\n\nexport interface Aspect {\n  planet1: string;\n  planet2: string;\n  aspect: string;\n  orb: number;\n  applying: boolean;\n}\n\nexport interface HealwaveSession {\n  id: string;\n  userId: string;\n  frequency: number;\n  duration: number; // in minutes\n  timestamp: string; // ISO 8601 format\n  personalizedFor?: AstrologyChart;\n}\n\nexport interface Notification {\n  id: string;\n  message: string;\n  type: 'info' | 'success' | 'error';\n  timestamp: number;\n}\n\nexport interface CrossAppStore {\n  addNotification: (notification: Notification) => void;\n  notifications: Notification[];\n  clearNotifications: () => void;\n}\n\nexport const useCrossAppStore = (): CrossAppStore => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  const addNotification = useCallback((notification: Notification): void => {\n    console.log('Cross-app notification:', notification);\n    setNotifications((prev) => [...prev, notification]);\n  }, []);\n\n  const clearNotifications = useCallback((): void => {\n    setNotifications([]);\n  }, []);\n\n  return { addNotification, notifications, clearNotifications };\n};\n\nexport * from './api';",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/stripe.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/subscriptions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 9,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 9,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 11,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 11,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 18,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 18,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [660, 663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [660, 663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 25,
        "column": 44,
        "nodeType": "CallExpression",
        "messageId": "unsafeReturn",
        "endLine": 25,
        "endColumn": 58
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `Function` typed value.",
        "line": 25,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 25,
        "endColumn": 52
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 242,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 242,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 264,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 264,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 342,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 342,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9155, 9158], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9155, 9158], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<UserSubscription | null>`.",
        "line": 389,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 389,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<UserSubscription | null>`.",
        "line": 394,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 394,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\n/**\n * Unified subscription management for CosmicHub monorepo\n * Handles Stripe integration and feature access across all apps\n */\n\n// Simple EventEmitter implementation for browser compatibility\nclass SimpleEventEmitter {\n  private events: { [key: string]: Function[] } = {};\n\n  on(event: string, callback: Function): void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  off(event: string, callback: Function): void {\n    if (!this.events[event]) return;\n    this.events[event] = this.events[event].filter(cb => cb !== callback);\n  }\n\n  emit(event: string, data?: any): void {\n    if (!this.events[event]) return;\n    this.events[event].forEach(callback => callback(data));\n  }\n}\n\nexport interface SubscriptionPlan {\n  id: string;\n  name: string;\n  price: number;\n  interval: 'month' | 'year';\n  features: string[];\n  stripePriceId: string;\n  apps: ('astro' | 'healwave')[];\n}\n\nexport interface UserSubscription {\n  id: string;\n  userId: string;\n  planId: string;\n  status: 'active' | 'inactive' | 'cancelled' | 'past_due';\n  currentPeriodStart: Date;\n  currentPeriodEnd: Date;\n  cancelAtPeriodEnd: boolean;\n  stripeSubscriptionId?: string;\n  apps: ('astro' | 'healwave')[];\n}\n\nexport interface FeatureAccess {\n  canAccess: boolean;\n  reason?: string;\n  upgradeRequired?: boolean;\n  requiredPlan?: string;\n}\n\n// Subscription plans configuration\nexport const SUBSCRIPTION_PLANS: SubscriptionPlan[] = [\n  {\n    id: 'free',\n    name: 'Cosmic Explorer',\n    price: 0,\n    interval: 'month',\n    features: [\n      'Basic birth chart',\n      '3 AI interpretations per month',\n      'Daily horoscope',\n      'Basic frequencies (healwave)'\n    ],\n    stripePriceId: '',\n    apps: ['astro', 'healwave']\n  },\n  {\n    id: 'astro-pro',\n    name: 'Astro Professional',\n    price: 19.99,\n    interval: 'month',\n    features: [\n      'Unlimited AI interpretations',\n      'Advanced chart aspects',\n      'Synastry compatibility',\n      'Transit predictions',\n      'Chart PDF export',\n      'Priority support'\n    ],\n    stripePriceId: 'price_astro_pro_monthly',\n    apps: ['astro']\n  },\n  {\n    id: 'healwave-pro',\n    name: 'HealWave Professional',\n    price: 14.99,\n    interval: 'month',\n    features: [\n      'Unlimited frequency sessions',\n      'Custom frequency creation',\n      'Astrological frequency mapping',\n      'Session recordings',\n      'Advanced binaural beats',\n      'Priority support'\n    ],\n    stripePriceId: 'price_healwave_pro_monthly',\n    apps: ['healwave']\n  },\n  {\n    id: 'cosmic-ultimate',\n    name: 'Cosmic Ultimate',\n    price: 29.99,\n    interval: 'month',\n    features: [\n      'All Astro Professional features',\n      'All HealWave Professional features',\n      'Cross-app integration',\n      'Exclusive cosmic insights',\n      'Early access to new features',\n      'VIP support'\n    ],\n    stripePriceId: 'price_cosmic_ultimate_monthly',\n    apps: ['astro', 'healwave']\n  }\n];\n\nclass SubscriptionManager extends SimpleEventEmitter {\n  private currentSubscription: UserSubscription | null = null;\n  private plans: SubscriptionPlan[] = SUBSCRIPTION_PLANS;\n\n  constructor() {\n    super();\n  }\n\n  // Initialize with user subscription data\n  initialize(subscription: UserSubscription | null): void {\n    this.currentSubscription = subscription;\n    this.emit('subscription:loaded', subscription);\n  }\n\n  // Get current subscription\n  getCurrentSubscription(): UserSubscription | null {\n    return this.currentSubscription;\n  }\n\n  // Get current plan details\n  getCurrentPlan(): SubscriptionPlan | null {\n    if (!this.currentSubscription) {\n      return this.plans.find(p => p.id === 'free') || null;\n    }\n    return this.plans.find(p => p.id === this.currentSubscription!.planId) || null;\n  }\n\n  // Check feature access\n  checkFeatureAccess(feature: string, app?: 'astro' | 'healwave'): FeatureAccess {\n    const plan = this.getCurrentPlan();\n    \n    if (!plan) {\n      return {\n        canAccess: false,\n        reason: 'No active plan found',\n        upgradeRequired: true,\n        requiredPlan: 'astro-pro'\n      };\n    }\n\n    // Check if subscription is active\n    if (this.currentSubscription && this.currentSubscription.status !== 'active') {\n      return {\n        canAccess: false,\n        reason: 'Subscription is not active',\n        upgradeRequired: true,\n        requiredPlan: plan.id\n      };\n    }\n\n    // Check if app is included in plan\n    if (app && !plan.apps.includes(app)) {\n      const requiredPlan = this.plans.find(p => \n        p.apps.includes(app) && p.features.includes(feature)\n      );\n      \n      return {\n        canAccess: false,\n        reason: `${app} not included in current plan`,\n        upgradeRequired: true,\n        requiredPlan: requiredPlan?.id || 'cosmic-ultimate'\n      };\n    }\n\n    // Check if feature is included\n    const hasFeature = plan.features.includes(feature);\n    \n    if (!hasFeature) {\n      const requiredPlan = this.plans.find(p => \n        p.features.includes(feature) && (!app || p.apps.includes(app))\n      );\n      \n      return {\n        canAccess: false,\n        reason: 'Feature not included in current plan',\n        upgradeRequired: true,\n        requiredPlan: requiredPlan?.id || 'cosmic-ultimate'\n      };\n    }\n\n    return { canAccess: true };\n  }\n\n  // Get available plans for upgrade\n  getAvailablePlans(currentApp?: 'astro' | 'healwave'): SubscriptionPlan[] {\n    if (!currentApp) {\n      return this.plans;\n    }\n    \n    return this.plans.filter(plan => plan.apps.includes(currentApp));\n  }\n\n  // Create Stripe checkout session\n  async createCheckoutSession(planId: string, successUrl: string, cancelUrl: string): Promise<{ url: string }> {\n    const plan = this.plans.find(p => p.id === planId);\n    \n    if (!plan || !plan.stripePriceId) {\n      throw new Error('Invalid plan or missing Stripe price ID');\n    }\n\n    try {\n      const response = await fetch('/api/stripe/create-checkout-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          priceId: plan.stripePriceId,\n          successUrl,\n          cancelUrl,\n          planId\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create checkout session');\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.emit('subscription:error', error);\n      throw error;\n    }\n  }\n\n  // Create customer portal session\n  async createPortalSession(returnUrl: string): Promise<{ url: string }> {\n    try {\n      const response = await fetch('/api/stripe/create-portal-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ returnUrl })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create portal session');\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.emit('subscription:error', error);\n      throw error;\n    }\n  }\n\n  // Cancel subscription\n  async cancelSubscription(): Promise<void> {\n    if (!this.currentSubscription?.stripeSubscriptionId) {\n      throw new Error('No active subscription to cancel');\n    }\n\n    try {\n      const response = await fetch('/api/stripe/cancel-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscriptionId: this.currentSubscription.stripeSubscriptionId\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to cancel subscription');\n      }\n\n      // Update local subscription\n      if (this.currentSubscription) {\n        this.currentSubscription.cancelAtPeriodEnd = true;\n        this.emit('subscription:cancelled', this.currentSubscription);\n      }\n    } catch (error) {\n      this.emit('subscription:error', error);\n      throw error;\n    }\n  }\n\n  // Reactivate subscription\n  async reactivateSubscription(): Promise<void> {\n    if (!this.currentSubscription?.stripeSubscriptionId) {\n      throw new Error('No subscription to reactivate');\n    }\n\n    try {\n      const response = await fetch('/api/stripe/reactivate-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscriptionId: this.currentSubscription.stripeSubscriptionId\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to reactivate subscription');\n      }\n\n      // Update local subscription\n      if (this.currentSubscription) {\n        this.currentSubscription.cancelAtPeriodEnd = false;\n        this.emit('subscription:reactivated', this.currentSubscription);\n      }\n    } catch (error) {\n      this.emit('subscription:error', error);\n      throw error;\n    }\n  }\n\n  // Update subscription from webhook\n  updateSubscription(subscription: UserSubscription): void {\n    this.currentSubscription = subscription;\n    this.emit('subscription:updated', subscription);\n  }\n\n  // Subscribe to events\n  subscribe(event: string, callback: (data: any) => void): () => void {\n    this.on(event, callback);\n    return () => this.off(event, callback);\n  }\n\n  // Get usage limits for current plan\n  getUsageLimits(): Record<string, number> {\n    const plan = this.getCurrentPlan();\n    \n    const limits: Record<string, number> = {\n      'ai-interpretations': plan?.id === 'free' ? 3 : -1, // -1 = unlimited\n      'chart-exports': plan?.id === 'free' ? 0 : -1,\n      'frequency-sessions': plan?.features.includes('Unlimited frequency sessions') ? -1 : 10,\n      'custom-frequencies': plan?.features.includes('Custom frequency creation') ? -1 : 0\n    };\n\n    return limits;\n  }\n\n  // Check if subscription expires soon\n  expiresWithin(days: number): boolean {\n    if (!this.currentSubscription || this.currentSubscription.status !== 'active') {\n      return false;\n    }\n\n    const daysUntilExpiry = Math.ceil(\n      (this.currentSubscription.currentPeriodEnd.getTime() - Date.now()) / (1000 * 60 * 60 * 24)\n    );\n\n    return daysUntilExpiry <= days;\n  }\n}\n\n// Create singleton instance\nexport const subscriptionManager = new SubscriptionManager();\n\n// React hook for subscription management\nexport const useSubscription = () => {\n  const [subscription, setSubscription] = React.useState<UserSubscription | null>(\n    subscriptionManager.getCurrentSubscription()\n  );\n  const [plan, setPlan] = React.useState<SubscriptionPlan | null>(\n    subscriptionManager.getCurrentPlan()\n  );\n\n  React.useEffect(() => {\n    const unsubscribeUpdated = subscriptionManager.subscribe('subscription:updated', (sub) => {\n      setSubscription(sub);\n      setPlan(subscriptionManager.getCurrentPlan());\n    });\n\n    const unsubscribeLoaded = subscriptionManager.subscribe('subscription:loaded', (sub) => {\n      setSubscription(sub);\n      setPlan(subscriptionManager.getCurrentPlan());\n    });\n\n    return () => {\n      unsubscribeUpdated();\n      unsubscribeLoaded();\n    };\n  }, []);\n\n  return {\n    subscription,\n    plan,\n    checkFeatureAccess: subscriptionManager.checkFeatureAccess.bind(subscriptionManager),\n    getAvailablePlans: subscriptionManager.getAvailablePlans.bind(subscriptionManager),\n    createCheckoutSession: subscriptionManager.createCheckoutSession.bind(subscriptionManager),\n    createPortalSession: subscriptionManager.createPortalSession.bind(subscriptionManager),\n    cancelSubscription: subscriptionManager.cancelSubscription.bind(subscriptionManager),\n    reactivateSubscription: subscriptionManager.reactivateSubscription.bind(subscriptionManager),\n    getUsageLimits: subscriptionManager.getUsageLimits.bind(subscriptionManager),\n    expiresWithin: subscriptionManager.expiresWithin.bind(subscriptionManager),\n    subscribe: subscriptionManager.subscribe.bind(subscriptionManager)\n  };\n};\n\nexport default subscriptionManager;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/useCrossAppStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/integrations/src/xaiService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'InterpretationResponse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AIServiceError' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 57,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 71
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'InterpretationResponseSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 35
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 22,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 22,
        "endColumn": 50
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 23,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 23,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 27,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 27,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [869, 872], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [869, 872], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .env on an `any` value.",
        "line": 27,
        "column": 68,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 27,
        "endColumn": 71
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 28,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 28,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [928, 931], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [928, 931], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .env on an `any` value.",
        "line": 28,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 28,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 72,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 72,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'errorData' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 76,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 76,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 79,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 79,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .choices on an `any` value.",
        "line": 79,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 79,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 84,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 84,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 14,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { z } from 'zod';\nimport { InterpretationRequest, InterpretationResponse, AIServiceError } from './types';\n\n// Schema for validating API response\nconst InterpretationResponseSchema = z.object({\n  interpretation: z.string(),\n});\n\n// Schema for validating request payload\nconst InterpretationRequestSchema = z.object({\n  birthDate: z.string(),\n  birthTime: z.string(),\n  birthLocation: z.string(),\n  interpretationType: z.enum(['general', 'personality', 'career', 'relationships']),\n});\n\nexport class XAIService {\n  private static baseUrl = 'https://api.x.ai/v1';\n  \n  private static getApiKey(): string {\n    // Try to get from environment variables\n    if (typeof process !== 'undefined' && process.env?.XAI_API_KEY) {\n      return process.env.XAI_API_KEY;\n    }\n    \n    // Try to get from Vite env\n    if (typeof import.meta !== 'undefined' && (import.meta as any).env?.VITE_XAI_API_KEY) {\n      return (import.meta as any).env.VITE_XAI_API_KEY;\n    }\n    \n    throw new Error('XAI_API_KEY environment variable is not set');\n  }\n\n  static async generateInterpretation(\n    request: InterpretationRequest\n  ): Promise<string> {\n    // Validate request\n    try {\n      InterpretationRequestSchema.parse(request);\n    } catch (error) {\n      throw new Error(`Invalid request data: ${error instanceof Error ? error.message : 'Unknown validation error'}`);\n    }\n\n    try {\n      const apiKey = this.getApiKey();\n      const prompt = this.buildPrompt(request);\n      \n      const response = await fetch(`${this.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'grok-beta',\n          messages: [\n            {\n              role: 'system',\n              content: 'You are an expert astrological interpreter with deep knowledge of cosmic influences, planetary alignments, and their impact on human personality and life path. Provide detailed, insightful, and personalized astrological interpretations based on birth data.'\n            },\n            {\n              role: 'user',\n              content: prompt\n            }\n          ],\n          max_tokens: 500,\n          temperature: 0.7,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`xAI API request failed: ${response.statusText} (${response.status})`);\n      }\n\n      const data = await response.json();\n      \n      // Extract the interpretation from the response\n      const interpretation = data.choices?.[0]?.message?.content;\n      if (!interpretation) {\n        throw new Error('No interpretation received from xAI API');\n      }\n\n      return interpretation;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`xAI API error: ${error.message}`);\n      }\n      throw new Error('Failed to fetch interpretation from xAI API');\n    }\n  }\n\n  private static buildPrompt(request: InterpretationRequest): string {\n    const { birthDate, birthTime, birthLocation, interpretationType } = request;\n    \n    const prompts = {\n      general: `Generate a comprehensive astrological interpretation for someone born on ${birthDate} at ${birthTime} in ${birthLocation}. \n\nFocus on:\n- Their cosmic blueprint and overall life theme\n- Key planetary influences and their meanings\n- Potential for growth and major life lessons\n- Unique gifts and talents indicated by their chart\n- General guidance for their life path\n\nProvide an insightful, personalized interpretation that feels authentic and meaningful.`,\n\n      personality: `Provide a detailed personality analysis based on the astrological chart for someone born on ${birthDate} at ${birthTime} in ${birthLocation}.\n\nFocus on:\n- Core personality traits and characteristics\n- Communication style and how they express themselves\n- Emotional nature and how they process feelings\n- Strengths and potential challenges\n- How they interact with others and form relationships\n\nCreate a personality profile that helps them understand their authentic self.`,\n\n      career: `Analyze the career potential and professional path based on the astrological chart for someone born on ${birthDate} at ${birthTime} in ${birthLocation}.\n\nFocus on:\n- Natural talents and abilities for the workplace\n- Suitable career paths and industries\n- Leadership style and work preferences\n- Professional strengths and areas for development\n- Timing for career moves and opportunities\n\nProvide practical career guidance based on their astrological indicators.`,\n\n      relationships: `Provide a comprehensive relationship analysis based on the astrological chart for someone born on ${birthDate} at ${birthTime} in ${birthLocation}.\n\nFocus on:\n- Romantic tendencies and love language\n- What they seek in partnerships\n- Compatibility factors and relationship patterns\n- Communication style in relationships\n- Areas for growth in love and partnership\n\nHelp them understand their relationship dynamics and attract healthy partnerships.`\n    };\n\n    return prompts[interpretationType] || prompts.general;\n  }\n\n  // Fallback to mock service for development/testing\n  static async generateMockInterpretation(request: InterpretationRequest): Promise<string> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    const interpretations = {\n      general: `Based on your birth details (${request.birthDate} at ${request.birthTime} in ${request.birthLocation}), your astrological chart reveals a unique cosmic blueprint. Your planetary positions suggest a dynamic personality with strong intuitive abilities and a natural inclination toward creativity and innovation. The alignment of your celestial bodies indicates significant potential for personal growth and spiritual development throughout your lifetime.`,\n      \n      personality: `Your personality profile shows a fascinating blend of traits influenced by your birth chart. Born on ${request.birthDate}, your cosmic signature reveals someone who is naturally empathetic, intellectually curious, and possesses a strong sense of justice. Your birth time of ${request.birthTime} places emphasis on communication and relationships, suggesting you have a gift for connecting with others on a deep level.`,\n      \n      career: `Career-wise, your astrological profile from ${request.birthLocation} indicates excellent potential in fields that involve creativity, communication, or helping others. Your planetary alignments suggest you would thrive in roles that allow for independence and innovation. Consider careers in technology, arts, counseling, or entrepreneurship where your natural abilities can shine.`,\n      \n      relationships: `In relationships, your birth chart reveals someone who values deep, meaningful connections. Born at ${request.birthTime} on ${request.birthDate}, your Venus and Mars placements suggest you are both passionate and nurturing in romantic partnerships. You seek partners who can match your intellectual depth and emotional authenticity.`\n    };\n\n    return interpretations[request.interpretationType] || interpretations.general;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/subscriptions/src/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/types/src/astrology.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/types/src/birth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/types/src/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/types/src/serialize.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 97,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 129,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 129,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .devConsole on an `any` value.",
        "line": 129,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 129,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4147, 4150], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4147, 4150], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Type-safe serialization utility for astrology data\nimport { z } from 'zod';\nimport type { AstrologyChart, UserProfile, NumerologyData } from './astrology.types.js';\nimport { \n  isAstrologyChart, \n  isUserProfile, \n  isNumerologyData,\n  getAstrologyDataType\n} from './type-guards.js';\n\n// Define Zod schemas for validation\nconst ChartSchema = z.object({\n  planets: z.array(z.object({\n    name: z.string(),\n    sign: z.string(),\n    degree: z.number(),\n    position: z.number(),\n    house: z.string(),\n    retrograde: z.boolean().optional(),\n    // Use structured aspect schema instead of z.any\n    aspects: z.array(z.object({\n      planet1: z.string(),\n      planet2: z.string(),\n      type: z.string(),\n      orb: z.number(),\n      applying: z.string()\n    })).optional()\n  })),\n  houses: z.array(z.object({\n    house: z.number(),\n    number: z.number(),\n    sign: z.string(),\n    degree: z.number(),\n    cusp: z.number(),\n    ruler: z.string()\n  })),\n  aspects: z.array(z.object({\n    planet1: z.string(),\n    planet2: z.string(),\n    type: z.string(),\n    orb: z.number(),\n    applying: z.string()\n  })),\n  asteroids: z.array(z.object({\n    name: z.string(),\n    sign: z.string(),\n    degree: z.number(),\n    house: z.string()\n  })),\n  angles: z.array(z.object({\n    name: z.string(),\n    sign: z.string(),\n    degree: z.number(),\n    position: z.number()\n  }))\n});\n\nconst ProfileSchema = z.object({\n  userId: z.string(),\n  birthData: z.object({ date: z.string(), time: z.string(), location: z.string() }),\n});\n\nconst NumerologySchema = z.object({\n  lifePath: z.number(),\n  destiny: z.number(),\n  personalYear: z.number(),\n});\n\n// Inferred schema types to keep validatedData strongly typed and avoid unsafe any\ntype ChartDataValidated = z.infer<typeof ChartSchema>;\ntype ProfileDataValidated = z.infer<typeof ProfileSchema>;\ntype NumerologyDataValidated = z.infer<typeof NumerologySchema>;\n\n// Safe replacer: ensure undefined removed, typed with unknown to avoid unsafe any returns\nconst removeUndefinedReplacer = (_key: string, value: unknown): unknown => (\n  value === undefined ? null : value\n);\n\n// Serialization function\nexport function serializeAstrologyData(data: AstrologyChart | UserProfile | NumerologyData): string {\n  try {\n    let validatedData: ChartDataValidated | ProfileDataValidated | NumerologyDataValidated;\n    \n    // Use type guards for more precise type narrowing\n    if (isAstrologyChart(data)) {\n      validatedData = ChartSchema.parse(data);\n    } else if (isUserProfile(data)) {\n      validatedData = ProfileSchema.parse(data);\n    } else if (isNumerologyData(data)) {\n      validatedData = NumerologySchema.parse(data);\n    } else {\n      throw new Error('Unknown data type for serialization');\n    }\n    \n    // Optimize JSON size by removing undefined fields\n    return JSON.stringify(validatedData, removeUndefinedReplacer);\n  } catch (error) {\n    // Swallow internal error details to avoid leaking structure; rethrow generic\n    throw new Error('Failed to serialize data');\n  }\n}\n\n// Deserialization function\nexport function deserializeAstrologyData<T extends AstrologyChart | UserProfile | NumerologyData>(json: string): T {\n  try {\n    const parsedUnknown: unknown = JSON.parse(json);\n    \n    // Use type guards for more precise type detection and validation\n    if (isAstrologyChart(parsedUnknown)) {\n      return ChartSchema.parse(parsedUnknown) as T;\n    } \n    \n    if (isUserProfile(parsedUnknown)) {\n      return ProfileSchema.parse(parsedUnknown) as T;\n    }\n    \n    if (isNumerologyData(parsedUnknown)) {\n      return NumerologySchema.parse(parsedUnknown) as T;\n    }\n    \n    // Use getAstrologyDataType for more detailed error message\n    const dataType = getAstrologyDataType(parsedUnknown);\n    throw new Error(`Unknown or invalid data type for deserialization: ${dataType}`);\n  } catch (error) {\n    if (error instanceof Error) {\n  // Preserve error context for debugging while keeping public message generic.\n  // Use global devConsole if present to avoid raw console.* usage (silences no-console warnings).\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (globalThis as any)?.devConsole?.error?.('Deserialization error:', error.message);\n    }\n    throw new Error('Failed to deserialize data');\n  }\n}",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/types/src/type-guards.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/types/src/utility.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 2,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 11,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noEmptyInterfaceWithSuper",
        "endLine": 11,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "replaceEmptyInterfaceWithSuper",
            "fix": {
              "range": [442, 489],
              "text": "type JSONArray = Array<JSONValue>"
            },
            "desc": "Replace empty interface with a type alias."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Shared foundational utility types for cross-package use.\n * Centralizing these avoids re-defining loose \"Record<string, any>\" patterns\n * and encourages explicit unknown usage + gradual refinement.\n */\n\n// JSON primitives and structured values\nexport type JSONPrimitive = string | number | boolean | null;\nexport type JSONValue = JSONPrimitive | JSONObject | JSONArray;\nexport interface JSONObject { [key: string]: JSONValue; }\nexport interface JSONArray extends Array<JSONValue> {}\n\n// Narrow record types\nexport type UnknownRecord = Record<string, unknown>;\nexport type StringMap<T = unknown> = Record<string, T>;\n\n// Deep partial helper\nexport type DeepPartial<T> = {\n  [K in keyof T]?: T[K] extends object ? DeepPartial<T[K]> : T[K];\n};\n\n// Brand utility (nominal typing)\nexport type Brand<T, B extends string> = T & { readonly __brand: B };\n\n// Result discriminated unions\nexport interface Ok<T> { ok: true; value: T }\nexport interface Err<E = Error> { ok: false; error: E }\nexport type Result<T, E = Error> = Ok<T> | Err<E>;\n\n// Function helpers\nexport type AsyncFn<TArgs extends unknown[] = unknown[], TReturn = unknown> = (...args: TArgs) => Promise<TReturn>;\n\n// Predicate type\nexport type Predicate<T> = (value: unknown) => value is T;\n\n// Exhaustive check helper\nexport function assertNever(x: never, message = 'Unexpected object'): never {\n  throw new Error(`${message}: ${String(x)}`);\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Accordion.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Alert.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Badge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Dropdown.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 137,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 149,
        "endColumn": 18
      },
      {
        "ruleId": "no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 168,
        "column": 23,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 168,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 168,
        "column": 23,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 168,
        "endColumn": 66
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useRef, useEffect, useId } from 'react';\n\nexport interface DropdownOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface DropdownProps {\n  options: DropdownOption[];\n  value?: string;\n  placeholder?: string;\n  label?: string; // Accessible label (falls back to placeholder)\n  onChange?: (value: string) => void;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n  options,\n  value,\n  placeholder = 'Select an option',\n  label,\n  onChange,\n  disabled = false,\n  className = ''\n}) => {\n  const reactId = useId();\n  const labelId = `${reactId}-label`;\n  const listboxId = `${reactId}-listbox`;\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(value || '');\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const selectedOption = options.find(option => option.value === selectedValue);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleSelect = (optionValue: string) => {\n    setSelectedValue(optionValue);\n    setIsOpen(false);\n    onChange?.(optionValue);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      setIsOpen(!isOpen);\n    } else if (event.key === 'Escape') {\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <div ref={dropdownRef} className={`relative inline-block w-full ${className}`}>\n      {/* Accessible label (visually hidden if not explicitly provided) */}\n      <span id={labelId} className=\"sr-only\">\n        {label || placeholder}\n      </span>\n      {isOpen ? (\n        <button\n          type=\"button\"\n          className={`\n            w-full px-4 py-2 text-left bg-white border border-gray-300 rounded-md shadow-sm\n            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\n            ${disabled ? 'bg-gray-100 cursor-not-allowed' : 'hover:border-gray-400 cursor-pointer'}\n            ring-2 ring-blue-500 border-blue-500\n          `}\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n          disabled={disabled}\n          aria-haspopup=\"listbox\"\n          aria-expanded=\"true\"\n          aria-labelledby={labelId}\n          aria-controls={listboxId}\n          {...(disabled ? { 'aria-disabled': 'true' } : {})}\n        >\n          <span className={selectedOption ? 'text-gray-900' : 'text-gray-500'}>\n            {selectedOption ? selectedOption.label : placeholder}\n          </span>\n          <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n            <svg className=\"w-5 h-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </span>\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className={`\n            w-full px-4 py-2 text-left bg-white border border-gray-300 rounded-md shadow-sm\n            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\n            ${disabled ? 'bg-gray-100 cursor-not-allowed' : 'hover:border-gray-400 cursor-pointer'}\n          `}\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n          disabled={disabled}\n          aria-haspopup=\"listbox\"\n          aria-expanded=\"false\"\n          aria-labelledby={labelId}\n          aria-controls={listboxId}\n          {...(disabled ? { 'aria-disabled': 'true' } : {})}\n        >\n          <span className={selectedOption ? 'text-gray-900' : 'text-gray-500'}>\n            {selectedOption ? selectedOption.label : placeholder}\n          </span>\n          <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n            <svg className=\"w-5 h-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </span>\n        </button>\n      )}\n\n      {isOpen && (\n        <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg\">\n          <ul\n            role=\"listbox\"\n            id={listboxId}\n            className=\"py-1 overflow-auto max-h-60\"\n            aria-labelledby={labelId}\n            aria-label=\"Dropdown options\"\n          >\n            {options.map((option) => {\n              const selected = selectedOption?.value === option.value;\n              const disabledOpt = option.disabled;\n              return selected ? (\n                <li\n                  key={option.value}\n                  id={`${listboxId}-opt-${option.value}`}\n                  role=\"option\"\n                  aria-selected=\"true\"\n                  {...(disabledOpt ? { 'aria-disabled': 'true' } : {})}\n                  className={`px-4 py-2 text-sm transition-colors ${\n                    disabledOpt\n                      ? 'text-gray-400 cursor-not-allowed'\n                      : 'cursor-pointer bg-blue-100 text-blue-900'\n                  }`}\n                  onClick={() => !disabledOpt && handleSelect(option.value)}\n                >\n                  {option.label}\n                </li>\n              ) : (\n                <li\n                  key={option.value}\n                  id={`${listboxId}-opt-${option.value}`}\n                  role=\"option\"\n                  aria-selected=\"false\"\n                  {...(disabledOpt ? { 'aria-disabled': 'true' } : {})}\n                  className={`px-4 py-2 text-sm transition-colors ${\n                    disabledOpt\n                      ? 'text-gray-400 cursor-not-allowed'\n                      : 'cursor-pointer text-gray-700 hover:bg-gray-100'\n                  }`}\n                  onClick={() => !disabledOpt && handleSelect(option.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault();\n                      !disabledOpt && handleSelect(option.value);\n                    }\n                  }}\n                >\n                  {option.label}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/EnhancedCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/ErrorBoundaries.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ErrorContext' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [332, 335], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [332, 335], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [847, 850], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [847, 850], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1375, 1378], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1375, 1378], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1452, 1455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1452, 1455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2105, 2108], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2105, 2108], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'loadingFallback' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3171, 3174], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3171, 3174], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 149,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 149,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3339, 3342], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3339, 3342], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 191,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 191,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4512, 4515], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4512, 4515], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4684, 4687], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4684, 4687], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 2,
        "message": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
        "line": 238,
        "column": 45,
        "nodeType": "TSTypeLiteral",
        "messageId": "noEmptyObject",
        "endLine": 238,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "replaceEmptyObjectType",
            "data": { "replacement": "object" },
            "fix": { "range": [5929, 5931], "text": "object" },
            "desc": "Replace `{}` with `object`."
          },
          {
            "messageId": "replaceEmptyObjectType",
            "data": { "replacement": "unknown" },
            "fix": { "range": [5929, 5931], "text": "unknown" },
            "desc": "Replace `{}` with `unknown`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 244,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 244,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6115, 6118], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6115, 6118], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'loadingFallback' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 277,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 277,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 279,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 279,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6936, 6939], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6936, 6939], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { ReactNode } from 'react';\nimport ErrorBoundary from './ErrorBoundary';\nimport { ErrorContext } from '../hooks/useErrorHandling';\n\n/**\n * Page-level error boundary for critical application errors\n */\ninterface PageErrorBoundaryProps {\n  children: ReactNode;\n  pageName?: string;\n  onError?: (error: Error, errorInfo: any) => void;\n}\n\nexport function PageErrorBoundary({ \n  children, \n  pageName,\n  onError \n}: PageErrorBoundaryProps) {\n  return (\n    <ErrorBoundary\n      level=\"page\"\n      name={pageName}\n      onError={onError}\n      resetOnPropsChange={true}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Section-level error boundary for isolated component groups\n */\ninterface SectionErrorBoundaryProps {\n  children: ReactNode;\n  sectionName?: string;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: any) => void;\n}\n\nexport function SectionErrorBoundary({ \n  children, \n  sectionName,\n  fallback,\n  onError \n}: SectionErrorBoundaryProps) {\n  return (\n    <ErrorBoundary\n      level=\"section\"\n      name={sectionName}\n      fallback={fallback}\n      onError={onError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Component-level error boundary for individual components\n */\ninterface ComponentErrorBoundaryProps {\n  children: ReactNode;\n  componentName?: string;\n  fallback?: ReactNode | ((error: Error, errorInfo: any, retry: () => void) => ReactNode);\n  onError?: (error: Error, errorInfo: any) => void;\n  resetKeys?: Array<string | number>;\n}\n\nexport function ComponentErrorBoundary({ \n  children, \n  componentName,\n  fallback,\n  onError,\n  resetKeys \n}: ComponentErrorBoundaryProps) {\n  return (\n    <ErrorBoundary\n      level=\"component\"\n      name={componentName}\n      fallback={fallback}\n      onError={onError}\n      resetKeys={resetKeys}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Async operation error boundary with loading states\n */\ninterface AsyncErrorBoundaryProps {\n  children: ReactNode;\n  operationName?: string;\n  loadingFallback?: ReactNode;\n  errorFallback?: ReactNode;\n  onError?: (error: Error, errorInfo: any) => void;\n}\n\nexport function AsyncErrorBoundary({\n  children,\n  operationName,\n  loadingFallback,\n  errorFallback,\n  onError\n}: AsyncErrorBoundaryProps) {\n  const asyncFallback = errorFallback || (\n    <div className=\"p-4 bg-cosmic-dark/50 rounded-lg border border-cosmic-silver/20 text-center\">\n      <div className=\"text-amber-400 mb-2\">⚠️</div>\n      <p className=\"text-cosmic-silver text-sm\">\n        Failed to load {operationName || 'content'}\n      </p>\n      <button \n        onClick={() => window.location.reload()}\n        className=\"mt-2 px-3 py-1 bg-cosmic-purple text-white text-sm rounded hover:bg-cosmic-purple/80\"\n      >\n        Retry\n      </button>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      level=\"component\"\n      name={`async-${operationName}`}\n      fallback={asyncFallback}\n      onError={onError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Form error boundary with validation error handling\n */\ninterface FormErrorBoundaryProps {\n  children: ReactNode;\n  formName?: string;\n  onError?: (error: Error, errorInfo: any) => void;\n}\n\nexport function FormErrorBoundary({ \n  children, \n  formName,\n  onError \n}: FormErrorBoundaryProps) {\n  const formFallback = (error: Error, errorInfo: any, retry: () => void) => (\n    <div className=\"p-4 bg-red-500/10 border border-red-500/20 rounded-lg\">\n      <div className=\"text-red-400 mb-2\">📝</div>\n      <h3 className=\"text-red-400 font-medium mb-1\">Form Error</h3>\n      <p className=\"text-cosmic-silver text-sm mb-3\">\n        There was an issue with the form. Your data has been preserved.\n      </p>\n      <div className=\"flex gap-2\">\n        <button \n          onClick={retry}\n          className=\"px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600\"\n        >\n          Retry\n        </button>\n        <button \n          onClick={() => window.location.reload()}\n          className=\"px-3 py-1 border border-red-500 text-red-400 text-sm rounded hover:bg-red-500/10\"\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      level=\"component\"\n      name={`form-${formName}`}\n      fallback={formFallback}\n      onError={onError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Chart/visualization error boundary\n */\ninterface ChartErrorBoundaryProps {\n  children: ReactNode;\n  chartType?: string;\n  onError?: (error: Error, errorInfo: any) => void;\n}\n\nexport function ChartErrorBoundary({ \n  children, \n  chartType,\n  onError \n}: ChartErrorBoundaryProps) {\n  const chartFallback = (error: Error, errorInfo: any, retry: () => void) => (\n    <div className=\"p-8 bg-cosmic-dark/50 rounded-lg border border-cosmic-silver/20 text-center\">\n      <div className=\"text-cosmic-purple text-4xl mb-4\">📊</div>\n      <h3 className=\"text-cosmic-gold font-medium mb-2\">Chart Error</h3>\n      <p className=\"text-cosmic-silver text-sm mb-4\">\n        Unable to render {chartType || 'chart'}. This might be due to invalid data or a rendering issue.\n      </p>\n      <div className=\"flex gap-2 justify-center\">\n        <button \n          onClick={retry}\n          className=\"px-4 py-2 bg-cosmic-purple text-white text-sm rounded hover:bg-cosmic-purple/80\"\n        >\n          Retry Chart\n        </button>\n        <button \n          onClick={() => window.history.back()}\n          className=\"px-4 py-2 border border-cosmic-silver/30 text-cosmic-silver text-sm rounded hover:bg-cosmic-silver/10\"\n        >\n          Go Back\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      level=\"component\"\n      name={`chart-${chartType}`}\n      fallback={chartFallback}\n      onError={onError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * HOC for wrapping components with error boundaries\n */\nexport function withErrorBoundary<T extends {}>(\n  Component: React.ComponentType<T>,\n  options: {\n    level?: 'page' | 'section' | 'component';\n    name?: string;\n    fallback?: ReactNode;\n    onError?: (error: Error, errorInfo: any) => void;\n  } = {}\n) {\n  const { level = 'component', name, fallback, onError } = options;\n  \n  const WrappedComponent = (props: T) => (\n    <ErrorBoundary\n      level={level}\n      name={name || Component.displayName || Component.name}\n      fallback={fallback}\n      onError={onError}\n    >\n      <Component {...props} />\n    </ErrorBoundary>\n  );\n\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n}\n\n/**\n * Error boundary for lazy-loaded components\n */\ninterface LazyErrorBoundaryProps {\n  children: ReactNode;\n  componentName?: string;\n  loadingFallback?: ReactNode;\n}\n\nexport function LazyErrorBoundary({ \n  children, \n  componentName,\n  loadingFallback \n}: LazyErrorBoundaryProps) {\n  const lazyFallback = (error: Error, errorInfo: any, retry: () => void) => {\n    // Check if this is a chunk loading error\n    const isChunkError = error.message.includes('Loading chunk') || \n                        error.message.includes('Loading CSS chunk');\n    \n    if (isChunkError) {\n      return (\n        <div className=\"p-6 bg-cosmic-dark/50 rounded-lg border border-cosmic-silver/20 text-center\">\n          <div className=\"text-cosmic-blue text-3xl mb-3\">⚡</div>\n          <h3 className=\"text-cosmic-gold font-medium mb-2\">Loading Error</h3>\n          <p className=\"text-cosmic-silver text-sm mb-4\">\n            Failed to load {componentName || 'component'}. This usually happens after an app update.\n          </p>\n          <button \n            onClick={() => window.location.reload()}\n            className=\"px-4 py-2 bg-cosmic-blue text-white text-sm rounded hover:bg-cosmic-blue/80\"\n          >\n            Reload App\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"p-6 bg-cosmic-dark/50 rounded-lg border border-cosmic-silver/20 text-center\">\n        <div className=\"text-red-400 text-3xl mb-3\">🔧</div>\n        <h3 className=\"text-cosmic-gold font-medium mb-2\">Component Error</h3>\n        <p className=\"text-cosmic-silver text-sm mb-4\">\n          {componentName || 'Component'} failed to load properly.\n        </p>\n        <div className=\"flex gap-2 justify-center\">\n          <button \n            onClick={retry}\n            className=\"px-4 py-2 bg-cosmic-purple text-white text-sm rounded hover:bg-cosmic-purple/80\"\n          >\n            Try Again\n          </button>\n          <button \n            onClick={() => window.location.reload()}\n            className=\"px-4 py-2 border border-cosmic-silver/30 text-cosmic-silver text-sm rounded hover:bg-cosmic-silver/10\"\n          >\n            Reload\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <ErrorBoundary\n      level=\"component\"\n      name={`lazy-${componentName}`}\n      fallback={lazyFallback}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/ErrorBoundary.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 172,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [5024, 5062], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 174,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [5150, 5188], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 176,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [5233, 5271], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 178,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [5345, 5383], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 180,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [5439, 5477], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 224,
        "column": 3,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [6577, 6615], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 233,
        "column": 3,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [6857, 6895], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 7,
    "source": "import React, { Component, ReactNode, ErrorInfo as ReactErrorInfo } from 'react';\nimport { Button } from './Button';\n\n// (Removed unused UnknownRecord import)\n\n// Local type aliases (were implicitly used below)\ntype BoundaryLevel = 'page' | 'section' | 'component';\ntype LogLevel = 'low' | 'medium' | 'high' | 'critical';\nconst ENV_MODE: string = (globalThis as unknown as { process?: { env?: { NODE_ENV?: string } } })\n  .process?.env?.NODE_ENV ?? 'development';\n\nexport interface ErrorMetrics {\n  errorId: string;\n  boundaryName?: string;\n  boundaryLevel: 'page' | 'section' | 'component';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  retryCount: number;\n}\n\nexport interface ErrorInfo extends ErrorMetrics {\n  message: string;\n  stack?: string;\n  componentStack: string;\n  timestamp: string;\n  userAgent: string;\n  url: string;\n  userId?: string;\n  sessionId?: string;\n}\n\nexport interface ErrorReportingService {\n  captureException(error: ErrorInfo): void;\n}\n\nexport interface AnalyticsService {\n  track(eventName: string, data: ErrorMetrics): void;\n}\n\ndeclare global {\n  interface Window {\n    errorReportingService?: ErrorReportingService;\n    analytics?: AnalyticsService;\n    __USER_ID__?: string;\n    __SESSION_ID__?: string;\n  }\n}\n\nexport interface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode | ((error: Error, errorInfo: ErrorInfo, retry: () => void) => ReactNode);\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  resetKeys?: Array<string | number>;\n  resetOnPropsChange?: boolean;\n  isolate?: boolean;\n  level?: 'page' | 'section' | 'component';\n  name?: string;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ReactErrorInfo | null;\n  errorId: string | null;\n  retryCount: number;\n}\n\n/**\n * Universal Error Boundary with comprehensive error handling\n * Supports different levels of error isolation and recovery strategies\n */\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, State> {\n  private retryTimeouts: number[] = [];\n  private maxRetries = 3;\n  private retryDelay = 1000;\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: null,\n      retryCount: 0,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return {\n      hasError: true,\n      error,\n      errorId: `error-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ReactErrorInfo): void {\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // Enhanced error logging with context\n    const enhancedErrorInfo = this.createErrorInfo(error, errorInfo);\n    this.logError(error, enhancedErrorInfo);\n\n    // Call custom error handler if provided\n    this.props.onError?.(error, enhancedErrorInfo);\n\n    // Auto-retry for certain error types\n    this.attemptAutoRecovery(error);\n  }\n\n  componentDidUpdate(prevProps: ErrorBoundaryProps): void {\n    const { resetKeys, resetOnPropsChange } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      if (resetKeys && prevProps.resetKeys) {\n        const hasResetKeyChanged = resetKeys.some((key, index) => prevProps.resetKeys?.[index] !== key);\n        if (hasResetKeyChanged) this.resetErrorBoundary();\n      }\n      if (resetOnPropsChange === true && prevProps !== this.props) {\n        this.resetErrorBoundary();\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    // Clean up retry timeouts\n    this.retryTimeouts.forEach(clearTimeout);\n  }\n\n  private createErrorInfo(error: Error, reactErrorInfo: ReactErrorInfo | null): ErrorInfo {\n    const { name, level = 'component' } = this.props;\n    const severity = this.getLogLevel(error, level);\n\n    const errorId = this.state.errorId ?? `error-${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\n    return {\n      message: error.message,\n      stack: error.stack,\n  componentStack: reactErrorInfo?.componentStack ?? '',\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      userId: window.__USER_ID__,\n      sessionId: window.__SESSION_ID__,\n      errorId,\n      boundaryName: name,\n      boundaryLevel: level as BoundaryLevel,\n      severity,\n      retryCount: this.state.retryCount\n    };\n  }\n\n  private logError(error: Error, errorInfo: ErrorInfo): void {\n    const { name, level = 'component' } = this.props;\n  const logLevel = this.getLogLevel(error, level);\n\n    // Structure error data\n    const errorData: ErrorInfo = {\n      ...errorInfo,\n      errorId: this.state.errorId ?? errorInfo.errorId,\n      boundaryName: name,\n      boundaryLevel: level,\n      retryCount: this.state.retryCount,\n      severity: logLevel,\n    };\n\n    // Console logging for development\n  // Resolve environment safely without assuming global process exists (e.g., some browsers)\n  if (ENV_MODE === 'development') {\n      const emoji = this.getErrorEmoji(logLevel);\n      // eslint-disable-next-line no-console\n      console.group(`${emoji} Error Boundary (${level}): ${name ?? 'Unknown'}`);\n      // eslint-disable-next-line no-console\n      console.error('Error:', error);\n      // eslint-disable-next-line no-console\n      console.error('Component Stack:', errorInfo.componentStack);\n      // eslint-disable-next-line no-console\n      console.error('Full Context:', errorData);\n      // eslint-disable-next-line no-console\n      console.groupEnd();\n    }\n\n    // Production error reporting\n  if (ENV_MODE === 'production') this.reportError(errorData);\n\n    // Analytics tracking\n    this.trackErrorMetrics(errorData);\n  }\n\n  private getLogLevel(error: Error, boundaryLevel: BoundaryLevel): LogLevel {\n    // Network errors are usually less critical\n    if (error.message.includes('fetch') || error.message.includes('network')) {\n      return 'medium';\n    }\n\n    // Page-level errors are critical\n    if (boundaryLevel === 'page') {\n      return 'critical';\n    }\n\n    // Component render errors\n  if (typeof error.stack === 'string' && error.stack.includes('render')) {\n      return 'high';\n    }\n\n    return 'medium';\n  }\n\n  private getErrorEmoji(level: string): string {\n    switch (level) {\n      case 'critical': return '🔥';\n      case 'high': return '🚨';\n      case 'medium': return '⚠️';\n      case 'low': return '⚡';\n      default: return '🐛';\n    }\n  }\n\n  private reportError(errorInfo: ErrorInfo): void {\n    try {\n  window.errorReportingService?.captureException(errorInfo);\n    } catch (reportingError) {\n  // eslint-disable-next-line no-console\n  console.error('Failed to report error:', reportingError);\n    }\n  }\n\n  private trackErrorMetrics(errorData: ErrorMetrics): void {\n    try {\n  window.analytics?.track('Error Boundary Triggered', errorData);\n    } catch (analyticsError) {\n  // eslint-disable-next-line no-console\n  console.error('Failed to track error metrics:', analyticsError);\n    }\n  }\n\n  private attemptAutoRecovery(error: Error): void {\n    // Auto-retry for certain recoverable errors\n    if (this.isRecoverableError(error) && this.state.retryCount < this.maxRetries) {\n      const delay = this.retryDelay * Math.pow(2, this.state.retryCount); // Exponential backoff\n      \n      const timeoutId = window.setTimeout(() => {\n        this.setState(prevState => ({\n          retryCount: prevState.retryCount + 1,\n        }));\n        this.resetErrorBoundary();\n      }, delay);\n\n      this.retryTimeouts.push(timeoutId);\n    }\n  }\n\n  private isRecoverableError(error: Error): boolean {\n    const recoverablePatterns = [\n      /network/i,\n      /fetch/i,\n      /timeout/i,\n      /loading chunk failed/i,\n    ];\n\n  const stack = error.stack ?? '';\n  return recoverablePatterns.some(pattern => pattern.test(error.message) || pattern.test(stack));\n  }\n\n  private resetErrorBoundary = (): void => {\n    // Clear retry timeouts\n    this.retryTimeouts.forEach(clearTimeout);\n    this.retryTimeouts = [];\n\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: null,\n    });\n  };\n\n  private handleRetry = (): void => {\n    this.setState(prevState => ({\n      retryCount: prevState.retryCount + 1,\n    }));\n    this.resetErrorBoundary();\n  };\n\n  private renderErrorUI(): ReactNode {\n    const { fallback, level = 'component' } = this.props;\n    const { error, retryCount } = this.state;\n\n    if (fallback !== undefined) {\n      if (typeof fallback === 'function') {\n        if (!error) return null;\n        const info = this.createErrorInfo(error, this.state.errorInfo);\n        return (fallback as (e: Error, info: ErrorInfo, retry: () => void) => ReactNode)(\n          error,\n          info,\n          this.handleRetry\n        );\n      }\n      return fallback as ReactNode;\n    }\n\n    return this.renderDefaultErrorUI(level, retryCount >= this.maxRetries);\n  }\n\n  private renderDefaultErrorUI(level: string, maxRetriesReached: boolean): ReactNode {\n    const { error } = this.state;\n    const isPageLevel = level === 'page';\n\n    const containerClass = isPageLevel \n      ? \"min-h-screen flex items-center justify-center bg-gradient-to-br from-cosmic-dark to-cosmic-purple/20\"\n      : \"p-6 bg-cosmic-dark/50 rounded-lg border border-cosmic-silver/20\";\n\n    const cardClass = isPageLevel\n      ? \"max-w-md w-full bg-cosmic-dark shadow-2xl rounded-lg p-8 border border-cosmic-silver/30\"\n      : \"w-full\";\n\n    return (\n      <div className={containerClass}>\n        <div className={cardClass}>\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-500/20 mb-4\">\n              <svg\n                className=\"h-6 w-6 text-red-400\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z\"\n                />\n              </svg>\n            </div>\n            \n            <h2 className=\"text-lg font-semibold text-cosmic-gold mb-2\">\n              {isPageLevel ? 'Page Error' : 'Component Error'}\n            </h2>\n            \n            <p className=\"text-sm text-cosmic-silver mb-6\">\n              {isPageLevel \n                ? 'Something went wrong while loading this page.' \n                : 'This component encountered an error.'\n              }\n              {maxRetriesReached && ' Auto-retry limit reached.'}\n            </p>\n            \n            {/* Development error details */}\n            {ENV_MODE === 'development' && !!error && (\n              <details className=\"mb-6 text-left\">\n                <summary className=\"cursor-pointer text-sm font-medium text-cosmic-silver/80 hover:text-cosmic-silver\">\n                  Technical Details\n                </summary>\n                <div className=\"mt-2 p-3 bg-cosmic-dark/80 rounded border border-cosmic-silver/20 text-xs font-mono text-red-400 overflow-auto max-h-40\">\n                  <div className=\"font-semibold text-red-300\">Error: {error.message}</div>\n                  {typeof error.stack === 'string' && (\n                    <pre className=\"mt-2 whitespace-pre-wrap text-red-400/80\">\n                      {error.stack}\n                    </pre>\n                  )}\n                  {this.state.errorInfo && (\n                    <pre className=\"mt-2 whitespace-pre-wrap text-blue-400/80\">\n                      {this.state.errorInfo.componentStack}\n                    </pre>\n                  )}\n                </div>\n              </details>\n            )}\n\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              {!maxRetriesReached && (\n                <Button\n                  onClick={this.handleRetry}\n                  variant=\"primary\"\n                  size=\"sm\"\n                >\n                  Try Again\n                </Button>\n              )}\n              \n              {isPageLevel && (\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"secondary\"\n                  size=\"sm\"\n                >\n                  Reload Page\n                </Button>\n              )}\n              \n              {!isPageLevel && (\n                <Button\n                  onClick={() => window.history.back()}\n                  variant=\"secondary\"\n                  size=\"sm\"\n                >\n                  Go Back\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      return this.renderErrorUI();\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Input.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Modal.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 14,
        "column": 5,
        "nodeType": "JSXOpeningElement",
        "endLine": 14,
        "endColumn": 54
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 15,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 15,
        "endColumn": 73
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\n\nexport interface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  title?: string;\n}\n\nexport const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children, title }) => {\n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        {title && <h2 className=\"modal-title\">{title}</h2>}\n        {children}\n        <button onClick={onClose} className=\"modal-close\">×</button>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/PerformanceDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 48,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 48,
        "endColumn": 63
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 48,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 48,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 50,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 50,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 50,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 50,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 51,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 51,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 51,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 51,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 53,
        "column": 78,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 53,
        "endColumn": 85
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 55,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 55,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 57,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 57,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 59,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 59,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 59,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 59,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 59,
        "column": 74,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 59,
        "endColumn": 81
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type error typed assigned to a parameter of type `number`.",
        "line": 72,
        "column": 27,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 72,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 79,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 79,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 80,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 80,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 80,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 80,
        "endColumn": 69
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .summary on an `error` typed value.",
        "line": 84,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 84,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .components on an `error` typed value.",
        "line": 265,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 265,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 269,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 269,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 269,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 269,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .components on an `error` typed value.",
        "line": 269,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 269,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .map on an `error` typed value.",
        "line": 269,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 269,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .operations on an `error` typed value.",
        "line": 285,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 285,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 289,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 289,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 289,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 289,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .operations on an `error` typed value.",
        "line": 289,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 289,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .map on an `error` typed value.",
        "line": 289,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 289,
        "endColumn": 50
      }
    ],
    "suppressedMessages": [],
    "errorCount": 27,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { \n  type PerformanceReport as CorePerformanceReport\n} from '@cosmichub/config/performance';\nimport { useRealTimePerformance } from '@cosmichub/config/hooks';\nimport { Card } from './Card';\nimport { Badge } from './Badge';\n\nexport interface PerformanceDashboardProps {\n  className?: string;\n  showDetailedMetrics?: boolean;\n}\n\ninterface MetricDisplay {\n  name: string;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  unit: string;\n  description: string;\n}\n\ninterface ComponentMetric {\n  componentName: string;\n  type: string;\n  duration: number;\n}\n\ninterface OperationMetric {\n  operationName: string;\n  duration: number;\n  success: boolean;\n  metadata?: {\n    label?: string;\n  };\n}\n\n// Use core PerformanceReport exported from config with full summary fields\ntype PerformanceReport = CorePerformanceReport;\n\n/**\n * Enhanced Performance Dashboard component for monitoring Core Web Vitals and app performance\n * Now with real-time updates and comprehensive metrics display\n */\nexport const PerformanceDashboard: React.FC<PerformanceDashboardProps> = ({ \n  className = '', \n  showDetailedMetrics = false \n}) => {\n  const report = useRealTimePerformance() as PerformanceReport;\n  const vitalsData = React.useMemo(() => {\n    const avg = report.summary.averageRenderTime;\n    const total = report.summary.totalMetrics;\n    // Reproduce performanceScore formula used in performance monitor to avoid unsafe direct call\n    const performanceScore = Math.round(Math.max(0, 100 - (avg / 2) - report.summary.errorRate));\n    return {\n      averageRenderTime: Number.isFinite(avg) ? avg : 0,\n      performanceScore: Number.isFinite(performanceScore) ? performanceScore : 0,\n      totalMetrics: Number.isFinite(total) ? total : 0\n    };\n  }, [report.summary.averageRenderTime, report.summary.errorRate, report.summary.totalMetrics]);\n\n  // Mock web vitals data based on performance metrics\n  const webVitals: MetricDisplay[] = React.useMemo(() => [\n    {\n      name: 'LCP',\n      value: Math.max(2000, vitalsData.averageRenderTime * 2),\n      rating: vitalsData.averageRenderTime < 8 ? 'good' : vitalsData.averageRenderTime < 16 ? 'needs-improvement' : 'poor',\n      unit: 'ms',\n      description: 'Largest Contentful Paint - Time to render the largest content element'\n    },\n    {\n      name: 'FID',\n      value: Math.max(50, vitalsData.averageRenderTime),\n      rating: vitalsData.averageRenderTime < 8 ? 'good' : vitalsData.averageRenderTime < 20 ? 'needs-improvement' : 'poor',\n      unit: 'ms',\n      description: 'First Input Delay - Time from first user interaction to browser response'\n    },\n    {\n      name: 'CLS',\n      value: report.summary.errorRate / 100,\n      rating: report.summary.errorRate < 1 ? 'good' : report.summary.errorRate < 5 ? 'needs-improvement' : 'poor',\n      unit: '',\n      description: 'Cumulative Layout Shift - Visual stability of the page'\n    }\n  ], [vitalsData, report.summary]);\n\n  // Performance budget checking based on available metrics\n  const budgetResults = React.useMemo(() => {\n    return {\n      LCP: webVitals.find(m => m.name === 'LCP')?.rating === 'good',\n      FID: webVitals.find(m => m.name === 'FID')?.rating === 'good',  \n      CLS: webVitals.find(m => m.name === 'CLS')?.rating === 'good',\n      FCP: true, // Default to passing\n      TTFB: true // Default to passing\n    };\n  }, [webVitals]);\n\n  const formatValue = (value: number, unit: string): string => {\n    if (unit === 'ms') {\n      return value < 1000 ? `${Math.round(value)}ms` : `${(value / 1000).toFixed(1)}s`;\n    }\n    if (unit === '') {\n      return value.toFixed(3);\n    }\n    return `${Math.round(value)}${unit}`;\n  };\n\n  const getRatingColor = (rating: 'good' | 'needs-improvement' | 'poor'): string => {\n    switch (rating) {\n      case 'good': return 'text-green-600 bg-green-100';\n      case 'needs-improvement': return 'text-yellow-600 bg-yellow-100';\n      case 'poor': return 'text-red-600 bg-red-100';\n    }\n  };\n\n  const getScoreColor = (score: number): string => {\n    if (score >= 90) return 'text-green-600';\n    if (score >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getScoreLabel = (score: number): string => {\n    if (score >= 90) return 'Excellent';\n    if (score >= 70) return 'Good';\n    if (score >= 50) return 'Needs Improvement';\n    return 'Poor';\n  };\n\n  const overallScore = React.useMemo(() => {\n    return Math.round(vitalsData.performanceScore);\n  }, [vitalsData.performanceScore]);\n\n  return (\n    <div className={`space-y-6 ${className}`} role=\"main\" aria-labelledby=\"performance-dashboard-title\">\n      {/* Overall Performance Score */}\n            {/* Overall Performance Score */}\n      <Card className=\"text-center p-6\">\n        <div role=\"region\" aria-labelledby=\"overall-score-title\">\n          <h2 id=\"overall-score-title\" className=\"text-2xl font-bold text-cosmic-dark mb-4\">Performance Score</h2>\n          <div className={`text-6xl font-bold ${getScoreColor(overallScore)} mb-2`}>\n            {overallScore}\n          </div>\n          <div className=\"text-lg text-gray-600 mb-4\">\n            {getScoreLabel(overallScore)}\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            Last updated: {new Date().toLocaleTimeString()} (Real-time)\n          </div>\n        </div>\n      </Card>\n\n      {/* Core Web Vitals */}\n      <div>\n        <h3 className=\"text-xl font-bold text-cosmic-dark mb-4\">Core Web Vitals</h3>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {webVitals.map((metric) => (\n            <Card key={metric.name} className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"font-semibold text-cosmic-dark\">{metric.name}</h4>\n                <Badge className={getRatingColor(metric.rating)}>\n                  {metric.rating.replace('-', ' ')}\n                </Badge>\n              </div>\n              \n              <div className=\"text-2xl font-bold text-cosmic-purple mb-2\">\n                {formatValue(metric.value, metric.unit)}\n              </div>\n              \n              <p className=\"text-sm text-gray-600\">\n                {metric.description}\n              </p>\n              \n              <div className=\"mt-3 text-xs text-gray-500 flex justify-between\">\n                <span>\n                  {metric.name === 'LCP' && 'Good: ≤2.5s, Poor: >4.0s'}\n                  {metric.name === 'FID' && 'Good: ≤100ms, Poor: >300ms'}\n                  {metric.name === 'CLS' && 'Good: ≤0.1, Poor: >0.25'}\n                  {metric.name === 'FCP' && 'Good: ≤1.8s, Poor: >3.0s'}\n                  {metric.name === 'TTFB' && 'Good: ≤800ms, Poor: >1.8s'}\n                </span>\n                <span className={budgetResults[metric.name as keyof typeof budgetResults] ? 'text-green-600' : 'text-red-600'}>\n                  {budgetResults[metric.name as keyof typeof budgetResults] ? '✓ Budget' : '⚠ Over Budget'}\n                </span>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Performance Tips */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-xl font-bold text-cosmic-dark mb-4\">Performance Optimization Tips</h3>\n        <div className=\"space-y-3\">\n          {overallScore < 90 && (\n            <>\n              {webVitals.some(m => m.name === 'LCP' && m.rating !== 'good') && (\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 rounded-full bg-yellow-500 mt-2 flex-shrink-0\" />\n                  <div>\n                    <strong>Improve LCP:</strong> Optimize images, use CDN, implement lazy loading\n                  </div>\n                </div>\n              )}\n              \n              {webVitals.some(m => m.name === 'FID' && m.rating !== 'good') && (\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 rounded-full bg-yellow-500 mt-2 flex-shrink-0\" />\n                  <div>\n                    <strong>Improve FID:</strong> Minimize JavaScript execution time, use code splitting\n                  </div>\n                </div>\n              )}\n              \n              {webVitals.some(m => m.name === 'CLS' && m.rating !== 'good') && (\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 rounded-full bg-yellow-500 mt-2 flex-shrink-0\" />\n                  <div>\n                    <strong>Improve CLS:</strong> Set image dimensions, avoid inserting content above existing content\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n          \n          {overallScore >= 90 && (\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-2 h-2 rounded-full bg-green-500 mt-2 flex-shrink-0\" />\n              <div>\n                <strong>Excellent performance!</strong> Your app is well-optimized for user experience.\n              </div>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      {/* Technical Details */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-xl font-bold text-cosmic-dark mb-4\">Technical Details</h3>\n        <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <strong>Build Optimizations:</strong>\n            <ul className=\"mt-2 space-y-1 text-gray-600\">\n              <li>• Turbo caching enabled</li>\n              <li>• Code splitting implemented</li>\n              <li>• Tree shaking active</li>\n              <li>• Lazy loading configured</li>\n            </ul>\n          </div>\n          \n          <div>\n            <strong>Runtime Optimizations:</strong>\n            <ul className=\"mt-2 space-y-1 text-gray-600\">\n              <li>• React.memo usage</li>\n              <li>• useCallback optimization</li>\n              <li>• useMemo for calculations</li>\n              <li>• Component performance tracking</li>\n            </ul>\n          </div>\n        </div>\n      </Card>\n\n      {/* Enhanced Metrics for Detailed View */}\n      {showDetailedMetrics && (\n        <>\n          {/* Component Performance */}\n          {report.components.length > 0 && (\n            <Card className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-cosmic-dark mb-4\">Component Performance</h3>\n              <div className=\"space-y-3\">\n                {report.components.slice(-10).map((metric: ComponentMetric, index: number) => (\n                  <div key={index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                    <div>\n                      <span className=\"font-medium\">{metric.componentName}</span>\n                      <span className=\"text-sm text-gray-500 ml-2\">({metric.type})</span>\n                    </div>\n                    <span className={`font-mono ${metric.duration < 16 ? 'text-green-600' : 'text-yellow-600'}`}>\n                      {metric.duration.toFixed(2)}ms\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          )}\n\n          {/* Operation Performance */}\n          {report.operations.length > 0 && (\n            <Card className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-cosmic-dark mb-4\">Operation Performance</h3>\n              <div className=\"space-y-3\">\n                {report.operations.slice(-10).map((metric: OperationMetric, index: number) => (\n                  <div key={index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                    <div>\n                      <span className=\"font-medium\">{metric.operationName}</span>\n                      {metric.metadata?.label && (\n                        <span className=\"text-sm text-gray-500 ml-2\">({metric.metadata.label})</span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className={`w-2 h-2 rounded-full ${metric.success ? 'bg-green-500' : 'bg-red-500'}`} />\n                      <span className=\"font-mono\">{metric.duration.toFixed(2)}ms</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default PerformanceDashboard;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Spinner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Table.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Tabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/Tooltip.tsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'NodeJS' is not defined.",
        "line": 48,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 48,
        "endColumn": 52
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useRef, createContext, useContext } from 'react';\n\n// Tooltip Provider Context\nexport interface TooltipProviderContextValue {\n  delayDuration?: number;\n  skipDelayDuration?: number;\n}\n\nconst TooltipProviderContext = createContext<TooltipProviderContextValue>({});\n\nexport interface TooltipProviderProps {\n  children: React.ReactNode;\n  delayDuration?: number;\n  skipDelayDuration?: number;\n}\n\nexport const TooltipProvider: React.FC<TooltipProviderProps> = ({\n  children,\n  delayDuration = 200,\n  skipDelayDuration = 100\n}) => {\n  return (\n    <TooltipProviderContext.Provider value={{ delayDuration, skipDelayDuration }}>\n      {children}\n    </TooltipProviderContext.Provider>\n  );\n};\n\nexport interface TooltipProps {\n  children: React.ReactNode;\n  content: string;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  delay?: number;\n  className?: string;\n}\n\nexport const Tooltip: React.FC<TooltipProps> = ({\n  children,\n  content,\n  position = 'top',\n  delay,\n  className = ''\n}) => {\n  const context = useContext(TooltipProviderContext);\n  const effectiveDelay = delay ?? context.delayDuration ?? 200;\n  \n  const [isVisible, setIsVisible] = useState(false);\n  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  const positionClasses = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2'\n  };\n\n  const arrowClasses = {\n    top: 'top-full left-1/2 transform -translate-x-1/2 border-t-cosmic-dark border-t-4 border-x-transparent border-x-4 border-b-0',\n    bottom: 'bottom-full left-1/2 transform -translate-x-1/2 border-b-cosmic-dark border-b-4 border-x-transparent border-x-4 border-t-0',\n    left: 'left-full top-1/2 transform -translate-y-1/2 border-l-cosmic-dark border-l-4 border-y-transparent border-y-4 border-r-0',\n    right: 'right-full top-1/2 transform -translate-y-1/2 border-r-cosmic-dark border-r-4 border-y-transparent border-y-4 border-l-0'\n  };\n\n  const handleMouseEnter = () => {\n    const id = setTimeout(() => setIsVisible(true), effectiveDelay);\n    setTimeoutId(id);\n  };\n\n  const handleMouseLeave = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      setTimeoutId(null);\n    }\n    setIsVisible(false);\n  };\n\n  return (\n    <div \n      className=\"relative inline-block\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleMouseEnter}\n      onBlur={handleMouseLeave}\n    >\n      {children}\n      {isVisible && (\n        <div\n          ref={tooltipRef}\n          className={`\n            absolute z-50 px-3 py-2 text-sm text-cosmic-gold bg-cosmic-dark/90 border border-cosmic-purple/30 rounded-lg shadow-lg shadow-cosmic-purple/20\n            whitespace-nowrap pointer-events-none backdrop-blur-sm\n            ${positionClasses[position]}\n            ${className}\n          `}\n          role=\"tooltip\"\n          aria-live=\"polite\"\n        >\n          {content}\n          <div className={`absolute ${arrowClasses[position]}`} />\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/UpgradeModal.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 87,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 90,
        "endColumn": 9
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { FaTimes, FaStar, FaCrown, FaRocket } from 'react-icons/fa';\nimport { Button } from './Button';\n\nexport interface UpgradeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  feature?: string;\n  currentTier: 'Free' | 'Basic' | 'Pro' | 'Enterprise';\n  onUpgrade: (tier: 'Basic' | 'Pro' | 'Enterprise') => void;\n}\n\nconst tierData = {\n  Basic: {\n    name: 'Basic',\n    price: '$9.99',\n    period: '/month',\n    icon: FaStar,\n    color: 'blue',\n    features: [\n      'Unlimited birth charts',\n      'Basic astrology reports',\n      'Numerology calculations',\n      'Basic frequency therapy',\n      'Email support'\n    ]\n  },\n  Pro: {\n    name: 'Pro',\n    price: '$19.99',\n    period: '/month',\n    icon: FaCrown,\n    color: 'purple',\n    popular: true,\n    features: [\n      'Everything in Basic',\n      'Advanced astrology reports',\n      'Gene Keys analysis',\n      'Advanced frequency therapy',\n      'Synastry compatibility',\n      'PDF export',\n      'Priority support'\n    ]\n  },\n  Enterprise: {\n    name: 'Enterprise',\n    price: '$49.99',\n    period: '/month',\n    icon: FaRocket,\n    color: 'gold',\n    features: [\n      'Everything in Pro',\n      'Custom branding',\n      'API access',\n      'Bulk chart processing',\n      'Advanced analytics',\n      'White-label solutions',\n      'Dedicated support'\n    ]\n  }\n};\n\nexport const UpgradeModal: React.FC<UpgradeModalProps> = ({\n  isOpen,\n  onClose,\n  feature,\n  currentTier,\n  onUpgrade\n}) => {\n  if (!isOpen) return null;\n\n  const getRecommendedTier = (): 'Basic' | 'Pro' | 'Enterprise' => {\n    if (feature?.includes('Gene Keys') || feature?.includes('Synastry') || feature?.includes('PDF')) {\n      return 'Pro';\n    }\n    if (feature?.includes('API') || feature?.includes('Enterprise')) {\n      return 'Enterprise';\n    }\n    return 'Basic';\n  };\n\n  const recommendedTier = getRecommendedTier();\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm\"\n        onClick={onClose}\n      />\n      \n      {/* Modal */}\n      <div className=\"relative bg-white rounded-2xl shadow-2xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"relative bg-gradient-to-r from-cosmic-purple to-cosmic-blue text-white p-6 rounded-t-2xl\">\n          <button\n            onClick={onClose}\n            className=\"absolute top-4 right-4 p-2 hover:bg-white hover:bg-opacity-20 rounded-full transition-colors\"\n            aria-label=\"Close modal\"\n          >\n            <FaTimes className=\"w-5 h-5\" />\n          </button>\n          \n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold mb-2\">Unlock Premium Features</h2>\n            {feature && (\n              <p className=\"text-cosmic-silver text-lg\">\n                Upgrade to access <span className=\"font-semibold\">{feature}</span>\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {Object.entries(tierData).map(([tierKey, tier]) => {\n              const TierIcon = tier.icon;\n              const isRecommended = tierKey === recommendedTier;\n              const isCurrentTier = tierKey === currentTier;\n              \n              return (\n                <div\n                  key={tierKey}\n                  className={`relative border-2 rounded-xl p-6 transition-all hover:shadow-lg ${\n                    isRecommended \n                      ? 'border-cosmic-purple bg-cosmic-purple bg-opacity-5 ring-2 ring-cosmic-purple ring-opacity-30' \n                      : 'border-gray-200 hover:border-cosmic-purple'\n                  } ${\n                    isCurrentTier ? 'opacity-50' : ''\n                  }`}\n                >\n                  {/* Recommended badge */}\n                  {isRecommended && (\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                      <span className=\"bg-cosmic-purple text-white px-3 py-1 rounded-full text-sm font-semibold\">\n                        Recommended\n                      </span>\n                    </div>\n                  )}\n\n                  {/* Popular badge */}\n                  {'popular' in tier && tier.popular && (\n                    <div className=\"absolute -top-3 right-4\">\n                      <span className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-3 py-1 rounded-full text-sm font-semibold\">\n                        Most Popular\n                      </span>\n                    </div>\n                  )}\n\n                  {/* Current tier badge */}\n                  {isCurrentTier && (\n                    <div className=\"absolute -top-3 left-4\">\n                      <span className=\"bg-gray-500 text-white px-3 py-1 rounded-full text-sm font-semibold\">\n                        Current Plan\n                      </span>\n                    </div>\n                  )}\n\n                  <div className=\"text-center mb-6\">\n                    <TierIcon className={`w-12 h-12 mx-auto mb-4 text-cosmic-${tier.color}`} />\n                    <h3 className=\"text-2xl font-bold text-cosmic-dark mb-2\">{tier.name}</h3>\n                    <div className=\"text-3xl font-bold text-cosmic-purple\">\n                      {tier.price}\n                      <span className=\"text-lg font-normal text-gray-600\">{tier.period}</span>\n                    </div>\n                  </div>\n\n                  <ul className=\"space-y-3 mb-6\">\n                    {tier.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-start gap-3\">\n                        <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                          <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                        </div>\n                        <span className=\"text-gray-700\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  <Button\n                    onClick={() => onUpgrade(tierKey as 'Basic' | 'Pro' | 'Enterprise')}\n                    disabled={isCurrentTier}\n                    className={`w-full ${\n                      isRecommended \n                        ? 'bg-cosmic-purple hover:bg-cosmic-purple-dark' \n                        : 'bg-cosmic-blue hover:bg-cosmic-blue-dark'\n                    } ${isCurrentTier ? 'opacity-50 cursor-not-allowed' : ''}`}\n                    variant=\"primary\"\n                  >\n                    {isCurrentTier ? 'Current Plan' : `Upgrade to ${tier.name}`}\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Benefits section */}\n          <div className=\"mt-8 bg-gray-50 rounded-xl p-6\">\n            <h3 className=\"text-xl font-bold text-cosmic-dark mb-4 text-center\">\n              Why Upgrade to CosmicHub Premium?\n            </h3>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 rounded-full bg-cosmic-purple bg-opacity-20 flex items-center justify-center flex-shrink-0\">\n                  <FaStar className=\"w-4 h-4 text-cosmic-purple\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-cosmic-dark mb-1\">Advanced Insights</h4>\n                  <p className=\"text-gray-600 text-sm\">\n                    Unlock deeper astrological analysis and personalized insights\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 rounded-full bg-cosmic-blue bg-opacity-20 flex items-center justify-center flex-shrink-0\">\n                  <FaCrown className=\"w-4 h-4 text-cosmic-blue\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-cosmic-dark mb-1\">Premium Tools</h4>\n                  <p className=\"text-gray-600 text-sm\">\n                    Access Gene Keys, frequency therapy, and compatibility analysis\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0\">\n                  <FaRocket className=\"w-4 h-4 text-green-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-cosmic-dark mb-1\">Export & Share</h4>\n                  <p className=\"text-gray-600 text-sm\">\n                    Generate beautiful PDF reports and share your insights\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 rounded-full bg-yellow-100 flex items-center justify-center flex-shrink-0\">\n                  <FaStar className=\"w-4 h-4 text-yellow-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-cosmic-dark mb-1\">Priority Support</h4>\n                  <p className=\"text-gray-600 text-sm\">\n                    Get faster responses and dedicated assistance\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Money-back guarantee */}\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-gray-600\">\n              <span className=\"font-semibold\">30-day money-back guarantee</span> • Cancel anytime • No hidden fees\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UpgradeModal;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/UpgradeModalAB.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'getButtonText' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'getPricingDisplay' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 122,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 26
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 195,
        "column": 58,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [7128, 7149],
              "text": "✨ What you&apos;ll unlock:"
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [7128, 7149],
              "text": "✨ What you&lsquo;ll unlock:"
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [7128, 7149],
              "text": "✨ What you&#39;ll unlock:"
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [7128, 7149],
              "text": "✨ What you&rsquo;ll unlock:"
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 237,
        "column": 23,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9438, 9509],
              "text": "\n                  That&apos;s like getting 2+ months free!\n                "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9438, 9509],
              "text": "\n                  That&lsquo;s like getting 2+ months free!\n                "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9438, 9509],
              "text": "\n                  That&#39;s like getting 2+ months free!\n                "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9438, 9509],
              "text": "\n                  That&rsquo;s like getting 2+ months free!\n                "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react'\nimport { UpgradeModal, UpgradeModalProps } from './UpgradeModal'\nimport useABTest from '../hooks/useABTest'\n\n/**\n * Enhanced UpgradeModal with A/B Testing\n * \n * This component wraps the standard UpgradeModal to test different\n * messaging strategies, pricing presentations, and call-to-action buttons.\n * \n * Current Tests:\n * - Headline messaging (urgency vs. benefit-focused)\n * - Button copy (\"Upgrade Now\" vs. \"Start Free Trial\")\n * - Pricing display (monthly vs. annual emphasis)\n * \n * Future Split.io Integration:\n * Replace useABTest with useTreatments from @splitsoftware/splitio-react\n * for advanced targeting and real-time configuration updates.\n */\n\nexport interface UpgradeModalABProps extends UpgradeModalProps {\n  /** Enable A/B testing (default: true) */\n  enableABTesting?: boolean\n}\n\nexport function UpgradeModalAB({ enableABTesting = true, ...props }: UpgradeModalABProps) {\n  // A/B Test: Headline messaging\n  const headlineTest = useABTest({\n    testName: 'upgrade_modal_headline',\n    variants: ['urgency', 'benefit'],\n    weights: [50, 50], // Equal split\n    enabled: enableABTesting\n  })\n\n  // A/B Test: Button copy\n  const buttonTest = useABTest({\n    testName: 'upgrade_modal_button',\n    variants: ['upgrade_now', 'start_trial'],\n    weights: [40, 60], // Favor trial messaging\n    enabled: enableABTesting\n  })\n\n  // A/B Test: Pricing emphasis\n  const pricingTest = useABTest({\n    testName: 'upgrade_modal_pricing',\n    variants: ['monthly', 'annual_discount'],\n    weights: [30, 70], // Favor annual pricing\n    enabled: enableABTesting\n  })\n\n  // Track modal open event\n  React.useEffect(() => {\n    if (props.isOpen) {\n      headlineTest.trackEvent('modal_opened', {\n        feature: props.feature,\n        currentTier: props.currentTier,\n        headline_variant: headlineTest.variant,\n        button_variant: buttonTest.variant,\n        pricing_variant: pricingTest.variant\n      })\n    }\n  }, [props.isOpen, props.feature, props.currentTier, headlineTest, buttonTest, pricingTest])\n\n  // Enhanced onUpgrade handler with A/B test tracking\n  const handleUpgrade = (tier: 'Basic' | 'Pro' | 'Enterprise') => {\n    // Track conversion with A/B test context\n    headlineTest.trackEvent('upgrade_clicked', {\n      selectedTier: tier,\n      feature: props.feature,\n      headline_variant: headlineTest.variant,\n      button_variant: buttonTest.variant,\n      pricing_variant: pricingTest.variant,\n      conversion: true\n    })\n\n    buttonTest.trackEvent('conversion', { selectedTier: tier })\n    pricingTest.trackEvent('conversion', { selectedTier: tier })\n\n    // Call original upgrade handler\n    props.onUpgrade(tier)\n  }\n\n  // Enhanced onClose handler with A/B test tracking\n  const handleClose = () => {\n    headlineTest.trackEvent('modal_closed', {\n      feature: props.feature,\n      headline_variant: headlineTest.variant,\n      button_variant: buttonTest.variant,\n      pricing_variant: pricingTest.variant,\n      conversion: false\n    })\n\n    props.onClose()\n  }\n\n  // Get variant-specific content\n  const getHeadlineContent = () => {\n    switch (headlineTest.variant) {\n      case 'urgency':\n        return {\n          title: 'Unlock Premium Features Now!',\n          subtitle: 'Limited time offer - don\\'t miss out on advanced insights'\n        }\n      case 'benefit':\n        return {\n          title: 'Discover Your Full Cosmic Potential',\n          subtitle: 'Get deeper insights with premium astrology and healing features'\n        }\n      default:\n        return {\n          title: 'Upgrade Your Experience',\n          subtitle: 'Unlock advanced features and insights'\n        }\n    }\n  }\n\n  const getButtonText = (tier: string) => {\n    const baseText = buttonTest.variant === 'start_trial' ? 'Start Free Trial' : 'Upgrade Now'\n    return `${baseText} - ${tier}`\n  }\n\n  const getPricingDisplay = (price: string, period: string) => {\n    if (pricingTest.variant === 'annual_discount') {\n      const monthlyPrice = parseFloat(price.replace('$', ''))\n      const annualPrice = (monthlyPrice * 12 * 0.8).toFixed(2) // 20% discount\n      const monthlySavings = (monthlyPrice * 0.2).toFixed(2)\n      return {\n        primary: `$${annualPrice}/year`,\n        secondary: `Save $${monthlySavings}/month with annual billing`,\n        badge: '20% OFF'\n      }\n    }\n    return {\n      primary: `${price}${period}`,\n      secondary: 'Cancel anytime',\n      badge: null\n    }\n  }\n\n  const headlineContent = getHeadlineContent()\n\n  // Pass enhanced props to the base UpgradeModal\n  const enhancedProps = {\n    ...props,\n    onUpgrade: handleUpgrade,\n    onClose: handleClose,\n    // Add A/B test variants as data attributes for styling\n    'data-headline-variant': headlineTest.variant,\n    'data-button-variant': buttonTest.variant,\n    'data-pricing-variant': pricingTest.variant\n  }\n\n  // For now, return the standard UpgradeModal\n  // In a real implementation, you'd create variants of the modal based on the test results\n  return (\n    <div className=\"ab-test-wrapper\" data-testid=\"upgrade-modal-ab\">\n      {/* Add custom headline based on A/B test */}\n      {props.isOpen && (\n        <div className=\"ab-test-context hidden\">\n          <span data-testid=\"headline-variant\">{headlineTest.variant}</span>\n          <span data-testid=\"button-variant\">{buttonTest.variant}</span>\n          <span data-testid=\"pricing-variant\">{pricingTest.variant}</span>\n        </div>\n      )}\n      \n      <UpgradeModal {...enhancedProps} />\n      \n      {/* Variant-specific modal content based on test results */}\n      {props.isOpen && (\n        <div \n          className=\"ab-test-enhancements absolute top-0 left-0 w-full h-full pointer-events-none z-50\"\n          data-testid=\"ab-test-enhancements\"\n        >\n          {/* Custom headline overlay based on A/B test */}\n          <div className=\"custom-headline-overlay pointer-events-auto\" data-testid=\"custom-headline\">\n            <div className=\"headline-content bg-gradient-to-r from-purple-600 to-pink-600 text-white px-4 py-2 rounded-b-lg text-center\">\n              <h2 className=\"text-lg font-bold\">{headlineContent.title}</h2>\n              <p className=\"text-sm opacity-90\">{headlineContent.subtitle}</p>\n            </div>\n          </div>\n\n          {/* Social proof for urgency variant */}\n          {headlineTest.variant === 'urgency' && (\n            <div className=\"social-proof-banner absolute top-16 left-4 right-4 pointer-events-auto\" data-testid=\"social-proof\">\n              <div className=\"bg-red-500 text-white px-3 py-2 rounded-lg text-center text-sm\">\n                🔥 <strong>500+ users upgraded this week!</strong> Limited time offer\n              </div>\n            </div>\n          )}\n          \n          {/* Extra benefits highlight for benefit variant */}\n          {headlineTest.variant === 'benefit' && (\n            <div className=\"benefit-highlights absolute bottom-20 left-4 right-4 pointer-events-auto\" data-testid=\"benefit-highlights\">\n              <div className=\"bg-gradient-to-r from-teal-500 to-blue-600 text-white p-4 rounded-lg\">\n                <h3 className=\"font-bold mb-2\">✨ What you'll unlock:</h3>\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div className=\"benefit-item\">📊 Advanced Charts</div>\n                  <div className=\"benefit-item\">🌙 Moon Phases</div>\n                  <div className=\"benefit-item\">🎵 Healing Audio</div>\n                  <div className=\"benefit-item\">� Transit Reports</div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {/* Trust badges for standard variant */}\n          {headlineTest.variant === 'standard' && (\n            <div className=\"trust-badges absolute bottom-4 left-4 right-4 pointer-events-none\" data-testid=\"trust-badges\">\n              <div className=\"flex justify-center space-x-4 text-xs text-gray-600\">\n                <span className=\"trust-badge\">🔒 Secure Checkout</span>\n                <span className=\"trust-badge\">💳 30-Day Refund</span>\n                <span className=\"trust-badge\">⭐ 4.9/5 Rating</span>\n              </div>\n            </div>\n          )}\n\n          {/* Trial countdown for start_trial button variant */}\n          {buttonTest.variant === 'start_trial' && (\n            <div className=\"trial-info absolute top-24 left-4 right-4 pointer-events-auto\" data-testid=\"trial-info\">\n              <div className=\"bg-green-100 border-l-4 border-green-500 p-3 rounded\">\n                <p className=\"trial-text text-green-800 text-sm\">\n                  🎁 Start your <strong>7-day free trial</strong> - no commitment required!\n                </p>\n                <p className=\"trial-subtext text-green-600 text-xs mt-1\">Cancel anytime during trial</p>\n              </div>\n            </div>\n          )}\n\n          {/* Annual savings highlight for annual_discount pricing variant */}\n          {pricingTest.variant === 'annual_discount' && (\n            <div className=\"savings-highlight absolute bottom-12 left-4 right-4 pointer-events-auto\" data-testid=\"savings-highlight\">\n              <div className=\"bg-yellow-100 border border-yellow-400 rounded-lg p-3\">\n                <div className=\"savings-badge text-yellow-800 font-bold text-center mb-1\">\n                  💰 Save over $50/year with annual billing\n                </div>\n                <p className=\"savings-detail text-yellow-700 text-xs text-center\">\n                  That's like getting 2+ months free!\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default UpgradeModalAB\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/analytics/AnalyticsPanel.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [73, 76], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [73, 76], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nexport interface AnalyticsPanelProps { data?: any; }\nexport const AnalyticsPanel: React.FC<AnalyticsPanelProps> = () => (\n  <div className=\"p-4\"><h3 className=\"text-lg font-semibold mb-4\">Analytics Panel</h3><div className=\"text-center py-8 text-gray-500\">Analytics panel placeholder</div></div>\n);\nexport default AnalyticsPanel;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/calculators/EphemerisCalculator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/calculators/FrequencyCalculator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/calculators/GeneKeysCalculator.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [82, 85], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [82, 85], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nexport interface GeneKeysCalculatorProps { birthData?: any; }\nexport const GeneKeysCalculator: React.FC<GeneKeysCalculatorProps> = () => (\n  <div className=\"p-4\"><h3 className=\"text-lg font-semibold mb-4\">Gene Keys Calculator</h3><div className=\"text-center py-8 text-gray-500\">Gene Keys calculator placeholder</div></div>\n);\nexport default GeneKeysCalculator;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/charts/AstrologyChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/charts/BiofeedbackChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/charts/FrequencyVisualizer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/charts/SynastryChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/charts/TransitChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/forms/AdvancedForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/forms/BirthDataForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [83, 86], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [83, 86], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nexport interface BirthDataFormProps { onSubmit?: (data: any) => void; }\nexport const BirthDataForm: React.FC<BirthDataFormProps> = () => (\n  <div className=\"p-4\"><h3 className=\"text-lg font-semibold mb-4\">Birth Data Form</h3><div className=\"text-center py-8 text-gray-500\">Birth data form placeholder</div></div>\n);\nexport default BirthDataForm;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/forms/FrequencyForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [83, 86], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [83, 86], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nexport interface FrequencyFormProps { onSubmit?: (data: any) => void; }\nexport const FrequencyForm: React.FC<FrequencyFormProps> = () => (\n  <div className=\"p-4\"><h3 className=\"text-lg font-semibold mb-4\">Frequency Form</h3><div className=\"text-center py-8 text-gray-500\">Frequency form placeholder</div></div>\n);\nexport default FrequencyForm;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/lazy-components.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/modals/ChartModal.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 27,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 27,
        "endColumn": 81
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Chart Modal Component\n * Modal for displaying detailed charts\n */\n\nimport React from 'react';\n\nexport interface ChartModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  chartType?: 'astrology' | 'frequency' | 'transit' | 'synastry';\n  title?: string;\n  children?: React.ReactNode;\n}\n\nexport const ChartModal: React.FC<ChartModalProps> = ({\n  isOpen,\n  onClose,\n  chartType = 'astrology',\n  title,\n  children\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"fixed inset-0 bg-black bg-opacity-50\" onClick={onClose} />\n      <div className=\"relative bg-white rounded-lg shadow-xl max-w-4xl max-h-[90vh] overflow-hidden\">\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <h2 className=\"text-xl font-semibold\">\n            {title || `${chartType.charAt(0).toUpperCase() + chartType.slice(1)} Chart`}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n            aria-label=\"Close modal\"\n            title=\"Close modal\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-5rem)]\">\n          {children || (\n            <div className=\"text-center py-8 text-gray-500\">\n              Chart content would appear here\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChartModal;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/modals/FrequencyPlayerModal.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 17,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 17,
        "endColumn": 81
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Frequency Player Modal Component\n */\n\nimport React from 'react';\n\nexport interface FrequencyPlayerModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const FrequencyPlayerModal: React.FC<FrequencyPlayerModalProps> = ({ isOpen, onClose }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"fixed inset-0 bg-black bg-opacity-50\" onClick={onClose} />\n      <div className=\"relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Frequency Player</h2>\n          <div className=\"text-center py-8 text-gray-500\">\n            Frequency player placeholder\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FrequencyPlayerModal;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/modals/ProfileModal.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 17,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 17,
        "endColumn": 81
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Profile Modal Component\n */\n\nimport React from 'react';\n\nexport interface ProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ProfileModal: React.FC<ProfileModalProps> = ({ isOpen, onClose }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"fixed inset-0 bg-black bg-opacity-50\" onClick={onClose} />\n      <div className=\"relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Profile</h2>\n          <div className=\"text-center py-8 text-gray-500\">\n            Profile content placeholder\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileModal;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/modals/SettingsModal.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 17,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 17,
        "endColumn": 81
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Settings Modal Component\n */\n\nimport React from 'react';\n\nexport interface SettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const SettingsModal: React.FC<SettingsModalProps> = ({ isOpen, onClose }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"fixed inset-0 bg-black bg-opacity-50\" onClick={onClose} />\n      <div className=\"relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Settings</h2>\n          <div className=\"text-center py-8 text-gray-500\">\n            Settings content placeholder\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsModal;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/modals/ShareModal.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 17,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 17,
        "endColumn": 81
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Share Modal Component\n */\n\nimport React from 'react';\n\nexport interface ShareModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ShareModal: React.FC<ShareModalProps> = ({ isOpen, onClose }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"fixed inset-0 bg-black bg-opacity-50\" onClick={onClose} />\n      <div className=\"relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Share</h2>\n          <div className=\"text-center py-8 text-gray-500\">\n            Share options placeholder\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShareModal;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/reports/ReportGenerator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/components/tools/ExportTools.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [70, 73], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [70, 73], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nexport interface ExportToolsProps { data?: any; }\nexport const ExportTools: React.FC<ExportToolsProps> = () => (\n  <div className=\"p-4\"><h3 className=\"text-lg font-semibold mb-4\">Export Tools</h3><div className=\"text-center py-8 text-gray-500\">Export tools placeholder</div></div>\n);\nexport default ExportTools;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/hooks/useABTest.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 107,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 107,
        "endColumn": 110
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3774, 3777], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3774, 3777], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .gtag on an `any` value.",
        "line": 120,
        "column": 60,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 120,
        "endColumn": 64
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 121,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 121,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 121,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 121,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3806, 3809], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3806, 3809], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .gtag on an `any` value.",
        "line": 121,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 121,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 130,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 130,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4076, 4079], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4076, 4079], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .mixpanel on an `any` value.",
        "line": 130,
        "column": 60,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 130,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 131,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 131,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4112, 4115], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4112, 4115], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .mixpanel on an `any` value.",
        "line": 131,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 131,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 139,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 139,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4318, 4321], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4318, 4321], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .posthog on an `any` value.",
        "line": 139,
        "column": 60,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 139,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 140,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 140,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 140,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 140,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4353, 4356], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4353, 4356], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .posthog on an `any` value.",
        "line": 140,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 140,
        "endColumn": 32
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 167,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [5257, 5295], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 174,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [5442, 5480], "text": " " }
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'JSX' is not defined.",
        "line": 196,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 196,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useMemo } from 'react'\n\n/**\n * Simple A/B Testing Hook\n * \n * This is a basic implementation for A/B testing. For production use,\n * consider integrating with Split.io (@splitsoftware/splitio-react) for\n * more advanced features like:\n * - Server-side feature flags\n * - Real-time configuration updates  \n * - Advanced targeting and segmentation\n * - Detailed analytics and reporting\n * \n * To upgrade to Split.io:\n * 1. npm install @splitsoftware/splitio-react\n * 2. Replace this hook with useSplitClient and useTreatments\n * 3. Configure Split.io dashboard for feature flags\n */\n\nexport interface ABTestConfig {\n  testName: string\n  variants: string[]\n  weights?: number[] // Optional weights for each variant (defaults to equal distribution)\n  enabled?: boolean // Feature flag to enable/disable test\n}\n\nexport interface ABTestEventProperties {\n  // Flexible but typed as unknown to encourage validation upstream\n  [key: string]: string | number | boolean | null | undefined;\n}\n\nexport interface ABTestResult {\n  variant: string;\n  isControl: boolean;\n  trackEvent: (eventName: string, properties?: ABTestEventProperties) => void;\n}\n\n/**\n * Hook for simple A/B testing with localStorage persistence\n */\nexport function useABTest(config: ABTestConfig): ABTestResult {\n  const { testName, variants, weights = [], enabled = true } = config\n\n  const result = useMemo(() => {\n    if (!enabled || variants.length === 0) {\n      return {\n        variant: variants[0] || 'control',\n        isControl: true,\n        trackEvent: () => {}\n      }\n    }\n\n    // Check if user already has a variant assigned\n    const storageKey = `ab_test_${testName}`\n    const existingVariant = localStorage.getItem(storageKey)\n    \n    if (existingVariant && variants.includes(existingVariant)) {\n      return {\n        variant: existingVariant,\n        isControl: existingVariant === variants[0],\n        trackEvent: createEventTracker(testName, existingVariant)\n      }\n    }\n\n    // Assign new variant based on weights or equal distribution\n    let selectedVariant: string\n    \n    if (weights.length === variants.length) {\n      // Use weighted distribution\n      const totalWeight = weights.reduce((sum, weight) => sum + weight, 0)\n      const random = Math.random() * totalWeight\n      let cumulativeWeight = 0\n      \n      selectedVariant = variants[0] // fallback\n      for (let i = 0; i < variants.length; i++) {\n        cumulativeWeight += weights[i]\n        if (random <= cumulativeWeight) {\n          selectedVariant = variants[i]\n          break\n        }\n      }\n    } else {\n      // Equal distribution\n      const randomIndex = Math.floor(Math.random() * variants.length)\n      selectedVariant = variants[randomIndex]\n    }\n\n    // Store the assignment\n    localStorage.setItem(storageKey, selectedVariant)\n    \n    return {\n      variant: selectedVariant,\n      isControl: selectedVariant === variants[0],\n      trackEvent: createEventTracker(testName, selectedVariant)\n    }\n  }, [testName, variants, weights, enabled])\n\n  return result\n}\n\n/**\n * Create an event tracker for A/B test analytics\n */\nfunction createEventTracker(testName: string, variant: string) {\n  return (eventName: string, properties: ABTestEventProperties = {}) => {\n    // Store event in local analytics\n    const events: Array<Record<string, unknown>> = JSON.parse(localStorage.getItem('ab_test_events') || '[]')\n    events.push({\n      testName,\n      variant,\n      event: eventName,\n      timestamp: new Date().toISOString(),\n      ...properties\n    })\n    localStorage.setItem('ab_test_events', JSON.stringify(events.slice(-100))) // Keep last 100 events\n\n    // Send to analytics services\n    try {\n      // Google Analytics (gtag)\n      if (typeof window !== 'undefined' && (window as any).gtag) {\n        (window as any).gtag('event', eventName, {\n          custom_parameter_ab_test: `${testName}_${variant}`,\n          test_name: testName,\n          variant: variant,\n          ...properties\n        });\n      }\n\n      // Mixpanel\n      if (typeof window !== 'undefined' && (window as any).mixpanel) {\n        (window as any).mixpanel.track(eventName, {\n          ab_test: testName,\n          variant: variant,\n          ...properties\n        });\n      }\n\n      // PostHog\n      if (typeof window !== 'undefined' && (window as any).posthog) {\n        (window as any).posthog.capture(eventName, {\n          $set: { ab_test_group: variant },\n          ab_test_name: testName,\n          ...properties\n        });\n      }\n\n      // Firebase Analytics (lazy loaded for production)\n      if (typeof window !== 'undefined' && import.meta.env.PROD) {\n        import('firebase/analytics').then(({ getAnalytics, logEvent }) => {\n          import('@cosmichub/config/firebase').then(({ app }) => {\n            const analytics = getAnalytics(app);\n            logEvent(analytics, eventName, {\n              ab_test_name: testName,\n              ab_test_variant: variant,\n              ...properties\n            });\n          }).catch(() => {\n            // Firebase not available, skip silently\n          });\n        }).catch(() => {\n          // Firebase Analytics not available, skip silently\n        });\n      }\n\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        // eslint-disable-next-line no-console\n        console.warn('Failed to send A/B test analytics:', error);\n      }\n    }\n\n    // Development logging\n    if (import.meta.env.DEV) {\n      // eslint-disable-next-line no-console\n      console.log('[A/B Test Event]', {\n        test: testName,\n        variant,\n        event: eventName,\n        timestamp: new Date().toISOString(),\n        ...properties\n      });\n    }\n  }\n}\n\n/**\n * React component wrapper for A/B testing\n */\nexport interface ABTestProps {\n  config: ABTestConfig\n  children: (result: ABTestResult) => React.ReactNode\n}\n\nexport function ABTest({ config, children }: ABTestProps) {\n  const result = useABTest(config)\n  return children(result) as JSX.Element\n}\n\nexport default useABTest\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/hooks/useErrorHandling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 175,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 175,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4201, 4204], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4201, 4204], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'context' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 295,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 295,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback, useRef, useState } from 'react';\n\nexport interface AsyncError {\n  error: Error;\n  retry: () => void;\n  reset: () => void;\n}\n\nexport interface UseAsyncErrorOptions {\n  onError?: (error: Error) => void;\n  maxRetries?: number;\n  retryDelay?: number;\n}\n\n/**\n * Hook for handling async errors with retry logic\n */\nexport function useAsyncError(options: UseAsyncErrorOptions = {}) {\n  const { onError, maxRetries = 3, retryDelay = 1000 } = options;\n  const [error, setError] = useState<Error | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const retryTimeoutRef = useRef<number>();\n\n  const handleError = useCallback((error: Error) => {\n    setError(error);\n    onError?.(error);\n  }, [onError]);\n\n  const retry = useCallback(() => {\n    if (retryCount < maxRetries) {\n      setRetryCount(prev => prev + 1);\n      setError(null);\n      \n      // Exponential backoff delay\n      const delay = retryDelay * Math.pow(2, retryCount);\n      \n      if (retryTimeoutRef.current) {\n        clearTimeout(retryTimeoutRef.current);\n      }\n      \n      retryTimeoutRef.current = window.setTimeout(() => {\n        // The actual retry logic would be implemented by the consumer\n      }, delay);\n    }\n  }, [retryCount, maxRetries, retryDelay]);\n\n  const reset = useCallback(() => {\n    setError(null);\n    setRetryCount(0);\n    if (retryTimeoutRef.current) {\n      clearTimeout(retryTimeoutRef.current);\n    }\n  }, []);\n\n  const canRetry = retryCount < maxRetries;\n\n  return {\n    error,\n    retry,\n    reset,\n    handleError,\n    canRetry,\n    retryCount,\n  };\n}\n\n/**\n * Hook for safe async operations with error handling\n */\nexport interface SafeAsyncState<T> {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n}\n\nexport interface UseSafeAsyncReturn<T> extends SafeAsyncState<T> {\n  execute: (asyncFunction: () => Promise<T>) => Promise<T>;\n  reset: () => void;\n}\n\n// Default generic is unknown to force consumers to specify or consciously narrow later\nexport function useSafeAsync<T = unknown>(): UseSafeAsyncReturn<T> {\n  const [state, setState] = useState<{\n    data: T | null;\n    loading: boolean;\n    error: Error | null;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n\n  const execute = useCallback(async (asyncFunction: () => Promise<T>) => {\n    setState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const data = await asyncFunction();\n      setState({ data, loading: false, error: null });\n      return data;\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      setState(prev => ({ ...prev, loading: false, error: err }));\n      throw err;\n    }\n  }, []);\n\n  const reset = useCallback(() => {\n    setState({ data: null, loading: false, error: null });\n  }, []);\n\n  return { ...state, execute, reset };\n}\n\n/**\n * Utility for handling form errors\n */\nexport interface FormError {\n  field?: string;\n  message: string;\n  code?: string;\n}\n\nexport function useFormErrors() {\n  const [errors, setErrors] = useState<FormError[]>([]);\n\n  const addError = useCallback((error: FormError) => {\n    setErrors(prev => [...prev, error]);\n  }, []);\n\n  const addErrors = useCallback((newErrors: FormError[]) => {\n    setErrors(prev => [...prev, ...newErrors]);\n  }, []);\n\n  const removeError = useCallback((field?: string) => {\n    if (field) {\n      setErrors(prev => prev.filter(err => err.field !== field));\n    } else {\n      setErrors([]);\n    }\n  }, []);\n\n  const clearErrors = useCallback(() => {\n    setErrors([]);\n  }, []);\n\n  const getFieldError = useCallback((field: string) => {\n    return errors.find(err => err.field === field);\n  }, [errors]);\n\n  const hasErrors = errors.length > 0;\n  const hasFieldError = useCallback((field: string) => {\n    return errors.some(err => err.field === field);\n  }, [errors]);\n\n  return {\n    errors,\n    addError,\n    addErrors,\n    removeError,\n    clearErrors,\n    getFieldError,\n    hasErrors,\n    hasFieldError,\n  };\n}\n\n/**\n * Enhanced error context for logging and reporting\n */\nexport interface ErrorContext {\n  userId?: string;\n  sessionId?: string;\n  feature?: string;\n  action?: string;\n  metadata?: Record<string, any>;\n}\n\nexport function createEnhancedError(\n  message: string,\n  context?: ErrorContext,\n  originalError?: Error\n): Error {\n  const error = new Error(message);\n  \n  // Add context to error object\n  if (context) {\n    Object.assign(error, { context });\n  }\n  \n  // Chain original error\n  if (originalError) {\n    Object.assign(error, { cause: originalError });\n  }\n  \n  // Add stack trace from original error if available\n  if (originalError && originalError.stack) {\n    error.stack = `${error.stack}\\nCaused by: ${originalError.stack}`;\n  }\n  \n  return error;\n}\n\n/**\n * Error classification utilities\n */\nexport enum ErrorType {\n  NETWORK = 'network',\n  VALIDATION = 'validation',\n  AUTHENTICATION = 'authentication',\n  AUTHORIZATION = 'authorization',\n  NOT_FOUND = 'not_found',\n  SERVER = 'server',\n  CLIENT = 'client',\n  UNKNOWN = 'unknown',\n}\n\nexport function classifyError(error: Error): ErrorType {\n  const message = error.message.toLowerCase();\n  const stack = error.stack?.toLowerCase() || '';\n\n  if (message.includes('network') || message.includes('fetch') || message.includes('timeout')) {\n    return ErrorType.NETWORK;\n  }\n  \n  if (message.includes('validation') || message.includes('invalid')) {\n    return ErrorType.VALIDATION;\n  }\n  \n  if (message.includes('unauthorized') || message.includes('authentication')) {\n    return ErrorType.AUTHENTICATION;\n  }\n  \n  if (message.includes('forbidden') || message.includes('permission')) {\n    return ErrorType.AUTHORIZATION;\n  }\n  \n  if (message.includes('not found') || message.includes('404')) {\n    return ErrorType.NOT_FOUND;\n  }\n  \n  if (message.includes('server') || message.includes('500') || message.includes('503')) {\n    return ErrorType.SERVER;\n  }\n  \n  if (stack.includes('render') || stack.includes('component')) {\n    return ErrorType.CLIENT;\n  }\n  \n  return ErrorType.UNKNOWN;\n}\n\n/**\n * Error retry strategies\n */\nexport interface RetryConfig {\n  maxAttempts: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffFactor: number;\n  retryableErrors: ErrorType[];\n}\n\nexport const defaultRetryConfig: RetryConfig = {\n  maxAttempts: 3,\n  baseDelay: 1000,\n  maxDelay: 10000,\n  backoffFactor: 2,\n  retryableErrors: [ErrorType.NETWORK, ErrorType.SERVER],\n};\n\nexport function shouldRetry(error: Error, config: RetryConfig = defaultRetryConfig): boolean {\n  const errorType = classifyError(error);\n  return config.retryableErrors.includes(errorType);\n}\n\nexport function calculateDelay(\n  attempt: number,\n  config: RetryConfig = defaultRetryConfig\n): number {\n  const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1);\n  return Math.min(delay, config.maxDelay);\n}\n\n/**\n * Error recovery strategies\n */\nexport interface RecoveryAction {\n  label: string;\n  action: () => void;\n  primary?: boolean;\n}\n\nexport function getRecoveryActions(\n  error: Error,\n  context: ErrorContext = {}\n): RecoveryAction[] {\n  const errorType = classifyError(error);\n  const actions: RecoveryAction[] = [];\n\n  switch (errorType) {\n    case ErrorType.NETWORK:\n      actions.push({\n        label: 'Try Again',\n        action: () => window.location.reload(),\n        primary: true,\n      });\n      actions.push({\n        label: 'Check Connection',\n        action: () => {\n          // Open network diagnostics or show connection status\n        },\n      });\n      break;\n\n    case ErrorType.AUTHENTICATION:\n      actions.push({\n        label: 'Sign In',\n        action: () => window.location.href = '/login',\n        primary: true,\n      });\n      break;\n\n    case ErrorType.AUTHORIZATION:\n      actions.push({\n        label: 'Go Back',\n        action: () => window.history.back(),\n        primary: true,\n      });\n      break;\n\n    case ErrorType.NOT_FOUND:\n      actions.push({\n        label: 'Go Home',\n        action: () => window.location.href = '/',\n        primary: true,\n      });\n      break;\n\n    default:\n      actions.push({\n        label: 'Try Again',\n        action: () => window.location.reload(),\n        primary: true,\n      });\n      actions.push({\n        label: 'Go Back',\n        action: () => window.history.back(),\n      });\n  }\n\n  return actions;\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/Chris/Projects/CosmicHub/packages/ui/src/minimal-exports.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "no-new-symbol",
        "replacedBy": ["no-new-native-nonconstructor"],
        "info": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        }
      }
    ]
  }
]
