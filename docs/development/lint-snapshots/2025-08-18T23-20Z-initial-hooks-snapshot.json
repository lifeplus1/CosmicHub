[{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartPreferences.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user?.uid'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [user?.uid, toast]","fix":{"range":[3569,3584],"text":"[user?.uid, toast]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'user?.uid'. Either include it or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [userId, loadUserPreferences, user?.uid]","fix":{"range":[4467,4496],"text":"[userId, loadUserPreferences, user?.uid]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user?.uid'. Either include it or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [user?.uid, onSaved, toast, preferences]","fix":{"range":[6521,6558],"text":"[user?.uid, onSaved, toast, preferences]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useToast } from './ToastProvider';\nimport { useAuth } from '@cosmichub/auth';\nimport { db } from '@cosmichub/config/firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { componentLogger } from '../utils/componentLogger';\n\nimport { \n  type ChartStyle,\n  type HouseSystem,\n  type ThemeOption,\n  type ChartPreferencesData,\n  isChartPreferencesData,\n  DEFAULT_PREFERENCES\n} from '../types/preferences';\n\n// Stable user id validator extracted outside component so it isn't recreated each render\nconst isValidUserId = (userId: unknown): userId is string => typeof userId === 'string' && userId.length > 0;\n\nexport interface ChartPreferencesProps {\n  /** Optional override to preload preferences (primarily for Storybook / tests) */\n  initialPreferences?: ChartPreferencesData;\n  /** Called after successful save (for external analytics) */\n  onSaved?: (prefs: ChartPreferencesData) => void;\n}\n\nconst ChartPreferences: React.FC<ChartPreferencesProps> = function ChartPreferences({ initialPreferences, onSaved }) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [preferences, setPreferences] = useState<ChartPreferencesData>(initialPreferences ?? DEFAULT_PREFERENCES);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingPreferences, setIsLoadingPreferences] = useState(true);\n\n  // Derived stable user id & flags\n  const userId = user?.uid;\n  const hasValidUserId = userId !== undefined && userId !== null && typeof userId === 'string' && userId.length > 0;\n  const saveAriaLabel = isLoading === true\n    ? 'Saving preferences'\n    : hasValidUserId === true\n      ? 'Save preferences'\n      : 'Sign in to save preferences';\n  const saveButtonDisabled = hasValidUserId === false || isLoading === true;\n\n  const loadUserPreferences = useCallback(async (): Promise<void> => {\n    const currentUid = user?.uid;\n    if (!isValidUserId(currentUid)) {\n      return;\n    }\n\n    try {\n      setIsLoadingPreferences(true);\n      if (currentUid === undefined || currentUid === null) {\n        return;\n      }\n      const userDocRef = doc(db, 'users', currentUid);\n      const userDoc = await getDoc(userDocRef);\n\n      const isValidUserData = (data: unknown): data is { chartPreferences: ChartPreferencesData } => {\n        if (data === null || data === undefined || typeof data !== 'object') return false;\n        const obj = data as { chartPreferences?: unknown };\n        return 'chartPreferences' in obj && \n               obj.chartPreferences !== null && \n               obj.chartPreferences !== undefined && \n               isChartPreferencesData(obj.chartPreferences);\n      };\n\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        if (isValidUserData(userData)) {\n          setPreferences(userData.chartPreferences);\n        } else {\n          componentLogger.warn('ChartPreferences', 'Invalid preferences data in Firestore', userData?.chartPreferences);\n          setPreferences(DEFAULT_PREFERENCES);\n        }\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error \n        ? error.message \n        : 'Failed to load user preferences';\n      \n      componentLogger.error('ChartPreferences', errorMessage, error);\n      toast({\n        description: errorMessage,\n        status: 'error'\n      });\n    } finally {\n      setIsLoadingPreferences(false);\n    }\n  // deps: user?.uid (determines Firestore path), toast (stable from provider)\n  }, [userId, toast]);\n\n  // Load user preferences on mount\n  useEffect(() => {\n    const userId = user?.uid;\n    // Explicit check for userId existence and validity\n    if (userId === null || userId === undefined || typeof userId !== 'string' || userId.length === 0) {\n      setIsLoadingPreferences(false);\n      return;\n    }\n    \n    // Create an abort controller to handle cleanup\n    const abortController = new AbortController();\n    \n    // Wrap async operation\n    const loadPrefs = async () => {\n      try {\n        await loadUserPreferences();\n      } catch (error) {\n        // Only handle error if not aborted\n        if (!abortController.signal.aborted) {\n          componentLogger.error('ChartPreferences', 'Failed to load preferences on mount', error);\n        }\n      }\n    };\n\n    void loadPrefs();\n\n    // Cleanup function\n    return () => {\n      abortController.abort();\n    };\n  }, [userId, loadUserPreferences]);\n\n  const handlePreferenceChange = useCallback(<K extends keyof ChartPreferencesData>(\n    key: K,\n    value: ChartPreferencesData[K]\n  ): void => {\n    setPreferences(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  }, []);\n\n  const handleSavePreferences = useCallback(async (): Promise<void> => {\n    const userId = user?.uid;\n    // Explicit validation of userId with type guard\n    if (userId === null || userId === undefined || typeof userId !== 'string' || userId.length === 0) {\n      toast({\n        description: 'You must be logged in to save preferences',\n        status: 'error'\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Save preferences to Firestore\n      const userDocRef = doc(db, 'users', userId);\n      await setDoc(userDocRef, {\n        chartPreferences: preferences,\n        updatedAt: new Date()\n      }, { merge: true });\n\n      toast({\n        description: 'Preferences saved successfully',\n        status: 'success'\n      });\n    } catch (error) {\n      // Default error message\n      let errorMessage = 'Failed to save preferences. Please try again.';\n      \n      // Error instance with message\n      if (error instanceof Error && error.message !== undefined && error.message !== null && error.message.length > 0) {\n        errorMessage = error.message;\n      } \n      // String error\n      else if (typeof error === 'string' && error.length > 0) {\n        errorMessage = error;\n      }\n      // Unknown error type - use default message but log full error\n      else if (error !== null && error !== undefined) {\n        componentLogger.warn('ChartPreferences', 'Received non-standard error type', { error });\n      }\n      \n      componentLogger.error('ChartPreferences', 'Failed to save preferences', { error, preferences });\n      toast({\n        description: errorMessage,\n        status: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n    if (onSaved !== undefined && onSaved !== null) {\n      onSaved(preferences);\n    }\n  }, [preferences, userId, toast, onSaved]);\n\n  return (\n    <div className=\"space-y-6\" aria-live=\"polite\" role=\"form\" aria-labelledby=\"chart-prefs-heading\">\n      <h2 id=\"chart-prefs-heading\" className=\"sr-only\">Chart Preferences</h2>\n      {isLoadingPreferences ? (\n  <Card title=\"Chart Preferences\" aria-busy=\"true\">\n          <div className=\"flex items-center justify-center py-8\" role=\"status\" aria-label=\"Loading user chart preferences\">\n            <div className=\"text-cosmic-silver\">Loading preferencesâ€¦</div>\n          </div>\n        </Card>\n      ) : (\n  <Card title=\"Chart Preferences\">\n          <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"chartStyle\" className=\"block text-cosmic-silver mb-2\">\n              Chart Style\n            </label>\n            <select\n              id=\"chartStyle\"\n              value={preferences.chartStyle}\n              onChange={(e) => handlePreferenceChange('chartStyle', e.target.value as ChartStyle)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select chart style\"\n            >\n              <option value=\"western\">Western Tropical</option>\n              <option value=\"vedic\">Vedic Sidereal</option>\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"houseSystem\" className=\"block text-cosmic-silver mb-2\">\n              House System\n            </label>\n            <select\n              id=\"houseSystem\"\n              value={preferences.houseSystem}\n              onChange={(e) => handlePreferenceChange('houseSystem', e.target.value as HouseSystem)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select house system\"\n            >\n              <option value=\"placidus\">Placidus</option>\n              <option value=\"whole-sign\">Whole Sign</option>\n              <option value=\"equal-house\">Equal House</option>\n            </select>\n          </div>\n\n                    <div>\n            <label htmlFor=\"theme\" className=\"block text-cosmic-silver mb-2\">\n              Theme\n            </label>\n            <select\n              id=\"theme\"\n              value={preferences.theme}\n              onChange={(e) => handlePreferenceChange('theme', e.target.value as ThemeOption)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select theme\"\n            >\n              <option value=\"dark\">Dark</option>\n              <option value=\"light\">Light</option>\n              <option value=\"auto\">Auto</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"notifications\"\n              checked={preferences.notifications}\n              onChange={(e) => handlePreferenceChange('notifications', e.target.checked)}\n              className=\"rounded\"\n              aria-describedby=\"notifications-hint\"\n            />\n            <label htmlFor=\"notifications\" className=\"text-cosmic-silver\">\n              Email notifications\n            </label>\n            <span id=\"notifications-hint\" className=\"sr-only\">Enable or disable email notification features</span>\n          </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"text-center\">\n        <Button \n          onClick={() => { void handleSavePreferences(); }} \n          variant=\"primary\"\n          disabled={saveButtonDisabled}\n          aria-disabled={saveButtonDisabled}\n          aria-busy={isLoading}\n          aria-label={saveAriaLabel}\n        >\n          {isLoading ? 'Saving...' : 'Save Preferences'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChartPreferences;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]}]
