import { describe, it, expect } from 'vitest';
import * as exported from '..';

describe('config package export surface snapshot', () => {
  it('matches the approved key list', () => {
    const keys = Object.keys(exported).sort();
    expect(keys).toMatchInlineSnapshot(`
      [
        "ALL_FEATURE_KEYS",
        "AdvancedBackgroundSync",
        "AstrologyNotificationScheduler",
        "AstrologyNotifications",
        "BundleSplitter",
        "CosmicHubSyncHelpers",
        "DefaultLoadingSpinner",
        "DefaultNotificationPreferences",
        "ErrorCode",
        "FEATURE_KEYS",
        "FEATURE_LABELS",
        "FEATURE_REQUIRED_TIERS",
        "HealWaveNotifications",
        "LazyLoadErrorBoundary",
        "PageLoadingSpinner",
        "PushNotificationManager",
        "SmartPreloader",
        "buildFailure",
        "buildSuccess",
        "config",
        "createLazyComponent",
        "createPushNotificationManager",
        "createRouteBundle",
        "defaultConfig",
        "env",
        "fail",
        "failureFromStatus",
        "getAllPlans",
        "getAppConfig",
        "getBackgroundSyncManager",
        "getConfig",
        "getCurrentEnvironment",
        "getEnvConfig",
        "getEnvVar",
        "getFeatureFlags",
        "getSubscriptionPlan",
        "initializeEnv",
        "isAuthFailure",
        "isDevelopment",
        "isFailure",
        "isFeatureEnabled",
        "isFeatureKey",
        "isNotFoundFailure",
        "isProduction",
        "isStaging",
        "isStandardFailure",
        "isSuccess",
        "isValidationFailure",
        "lazyLoadChart",
        "lazyLoadModal",
        "lazyLoadRoute",
        "logger",
        "mapFailure",
        "mapResult",
        "mapSuccess",
        "mockAuthFailure",
        "mockHttpError",
        "mockNotFoundFailure",
        "mockValidationFailure",
        "ok",
        "parseErrorLike",
        "rawFailure",
        "silenceLogsForTests",
        "toFailure",
        "unwrap",
        "unwrapOr",
        "useLazyLoading",
        "useMemoryMonitoring",
        "useOperationTracking",
        "usePagePerformance",
        "usePerformance",
        "useProgressiveLoading",
        "useRealTimePerformance",
        "validateConfig",
        "validateEnv",
        "withLazyLoading",
      ]
    `);
  });
});
