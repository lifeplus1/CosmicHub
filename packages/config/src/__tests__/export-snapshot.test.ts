import { describe, it, expect } from 'vitest';
import * as exported from '..';

describe('config package export surface snapshot', () => {
  it('matches the approved key list', () => {
    const keys = Object.keys(exported).sort();
    const expected = [
      'ALL_FEATURE_KEYS',
      'AdvancedBackgroundSync',
      'AstrologyNotificationScheduler',
      'AstrologyNotifications',
      'BundleSplitter',
      'ComponentPerformanceAnalyzer',
      'ComponentProvider',
      'CosmicHubSyncHelpers',
      'DefaultLoadingSpinner',
      'DefaultNotificationPreferences',
      'ErrorCode',
      'FEATURE_KEYS',
      'FEATURE_LABELS',
      'FEATURE_REQUIRED_TIERS',
      'HealWaveNotifications',
      'LazyLoadErrorBoundary',
      'PageLoadingSpinner',
      'PushNotificationManager',
      'SmartPreloader',
      'app',
      'auth',
      'buildFailure',
      'buildSuccess',
      'composeComponents',
      'config',
      'createComponentFactory',
      'createCompoundComponent',
      'createLazyComponent',
      'createPolymorphicComponent',
      'createPushNotificationManager',
      'createRouteBundle',
      'db',
      'defaultConfig',
      'disableFirestoreNetwork',
      'enableFirestoreNetwork',
      'env',
      'fail',
      'failureFromStatus',
      'getAllPlans',
      'getAppConfig',
      'getBackgroundSyncManager',
      'getConfig',
      'getCurrentEnvironment',
      'getDisplayName',
      'getEnvConfig',
      'getEnvVar',
      'getFeatureFlags',
      'getFirebasePerformanceInfo',
      'getSubscriptionPlan',
      'hasAuthAvailable',
      'initServiceWorkerPerformanceCache',
      'initializeEnv',
      'isAuthFailure',
      'isDevelopment',
      'isEmulator',
      'isFailure',
      'isFeatureEnabled',
      'isFeatureKey',
      'isNotFoundFailure',
      'isProduction',
      'isStaging',
      'isStandardFailure',
      'isSuccess',
      'isValidElement',
      'isValidationFailure',
      'lazyLoadChart',
      'lazyLoadModal',
      'lazyLoadRoute',
      'logger',
      'mapFailure',
      'mapResult',
      'mapSuccess',
      'mockAuthFailure',
      'mockHttpError',
      'mockNotFoundFailure',
      'mockValidationFailure',
      'ok',
      'parseErrorLike',
      'performanceMonitor',
      'projectId',
      'rawFailure',
      'reportPerformance',
      'silenceLogsForTests',
      'toFailure',
      'unwrap',
      'unwrapOr',
      'useAnalytics',
      'useComponentAnalysis',
      'useComponentContext',
      'useLazyLoading',
      'useMemoryMonitoring',
      'useOperationTracking',
      'usePagePerformance',
      'usePerformance',
      'useProgressiveLoading',
      'useRealTimePerformance',
      'validateConfig',
      'validateEnv',
      'withLazyLoading',
      'withMemoization',
      'withPerformanceTracking',
    ].sort();
    expect(keys).toEqual(expected);
  });
});
