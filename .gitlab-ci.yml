# .gitlab-ci.yml for CosmicHub monorepo
# This config runs tests for backend (Python) and both frontends (Vite/React), then deploys if on main branch

stages:
  - validate
  - test
  - build
  - deploy

variables:
  # Node.js and Python versions
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.13"
  # Deployment tokens (set in GitLab CI/CD settings)
  VERCEL_TOKEN: "$VERCEL_TOKEN"
  VERCEL_ORG_ID: "$VERCEL_ORG_ID"
  VERCEL_PROJECT_ID: "$VERCEL_PROJECT_ID"
  RENDER_SERVICE_ID: "$RENDER_SERVICE_ID"
  RENDER_API_KEY: "$RENDER_API_KEY"
  # Firebase/Backend env vars
  FIREBASE_PROJECT_ID: "$FIREBASE_PROJECT_ID"
  FIREBASE_PRIVATE_KEY_ID: "$FIREBASE_PRIVATE_KEY_ID"
  FIREBASE_PRIVATE_KEY: "$FIREBASE_PRIVATE_KEY"
  FIREBASE_CLIENT_EMAIL: "$FIREBASE_CLIENT_EMAIL"
  FIREBASE_CLIENT_ID: "$FIREBASE_CLIENT_ID"
  FIREBASE_AUTH_URI: "$FIREBASE_AUTH_URI"
  FIREBASE_TOKEN_URI: "$FIREBASE_TOKEN_URI"
  FIREBASE_AUTH_PROVIDER_X509_CERT_URL: "$FIREBASE_AUTH_PROVIDER_X509_CERT_URL"
  FIREBASE_CLIENT_X509_CERT_URL: "$FIREBASE_CLIENT_X509_CERT_URL"
  FIREBASE_UNIVERSE_DOMAIN: "$FIREBASE_UNIVERSE_DOMAIN"
  FIREBASE_CREDENTIALS: "$FIREBASE_CREDENTIALS"
  VITE_FIREBASE_API_KEY: "$VITE_FIREBASE_API_KEY"
  VITE_FIREBASE_AUTH_DOMAIN: "$VITE_FIREBASE_AUTH_DOMAIN"
  VITE_FIREBASE_PROJECT_ID: "$VITE_FIREBASE_PROJECT_ID"
  VITE_FIREBASE_STORAGE_BUCKET: "$VITE_FIREBASE_STORAGE_BUCKET"
  VITE_FIREBASE_MESSAGING_SENDER_ID: "$VITE_FIREBASE_MESSAGING_SENDER_ID"
  VITE_FIREBASE_APP_ID: "$VITE_FIREBASE_APP_ID"
  VITE_BACKEND_URL: "https://astrology-app-0emh.onrender.com"
  API_KEY: "$API_KEY"
  LOG_FILE: "logs/app.log"
  PORT: "8000"
  EPHE_PATH: "/app/ephe"

cache:
  paths:
    - backend/.venv/
    - apps/astro/node_modules/
    - apps/healwave/node_modules/
    - .npm/

# Validation Stage
validate-structure:
  image: node:${NODE_VERSION}
  stage: validate
  script:
    - echo "üîç Validating project structure..."
    - test -d apps/astro/src || { echo "‚ùå Astro frontend src missing"; exit 1; }
    - test -d apps/healwave/src || { echo "‚ùå Healwave frontend src missing"; exit 1; }
    - test -d backend/api || { echo "‚ùå Backend API directory missing"; exit 1; }
    - test -f .eslintrc.json || { echo "‚ùå ESLint config missing"; exit 1; }
    - test -f .prettierrc || { echo "‚ùå Prettier config missing"; exit 1; }
    - test -f docker-compose.yml || { echo "‚ùå Docker compose config missing"; exit 1; }
    - echo "‚úÖ Project structure validated"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Lint Stage
lint-frontend:
  image: node:${NODE_VERSION}
  stage: validate
  script:
    - echo "üîç Linting frontend code..."
    - npm ci --cache .npm --prefer-offline
    - cd apps/astro && npm ci --cache ../../.npm --prefer-offline
    - cd apps/healwave && npm ci --cache ../../.npm --prefer-offline
    - npx eslint apps/astro/src apps/healwave/src --ext .ts,.tsx --format stylish
    - echo "‚úÖ Frontend linting passed"
  artifacts:
    reports:
      junit: lint-results.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

lint-backend:
  image: python:${PYTHON_VERSION}
  stage: validate
  script:
    - echo "üîç Linting backend code..."
    - cd backend
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install flake8 black isort
    - pip install -r requirements.txt
    - python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - python3 -m black --check .
    - python3 -m isort --check-only .
    - echo "‚úÖ Backend linting passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Type Checking
type-check:
  image: node:${NODE_VERSION}
  stage: validate
  script:
    - echo "üîç Running TypeScript type checks..."
    - npm ci --cache .npm --prefer-offline
    - cd apps/astro && npm ci --cache ../../.npm --prefer-offline && npm run type-check
    - cd ../healwave && npm ci --cache ../../.npm --prefer-offline && npm run type-check
    - echo "‚úÖ All type checks passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Backend tests
backend-test:
  image: python:${PYTHON_VERSION}
  stage: test
  services:
    - name: python:${PYTHON_VERSION}
  script:
    - echo "üß™ Running backend tests..."
    - cd backend
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python3 -m pytest tests/ --cov=astro --cov-report=xml --cov-report=html --junitxml=junit.xml -v
    - python3 -m pytest tests/ -m "slow" || true
    - echo "‚úÖ Backend tests completed"
  artifacts:
    paths:
      - backend/htmlcov/
      - backend/coverage.xml
    reports:
      junit: backend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
    expire_in: 1 week
  dependencies:
    - lint-backend
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Astro Frontend tests
frontend-astro-test:
  image: node:${NODE_VERSION}
  stage: test
  script:
    - echo "üß™ Running Astro frontend tests..."
    - cd apps/astro
    - npm ci --cache ../../.npm --prefer-offline
    - npm run test -- --coverage --watchAll=false --passWithNoTests
    - echo "‚úÖ Astro frontend tests completed"
  artifacts:
    paths:
      - apps/astro/coverage/
    reports:
      junit: apps/astro/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: apps/astro/coverage/cobertura-coverage.xml
    expire_in: 1 week
  dependencies:
    - lint-frontend
    - type-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# HealWave Frontend tests
frontend-healwave-test:
  image: node:${NODE_VERSION}
  stage: test
  script:
    - echo "üß™ Running HealWave frontend tests..."
    - cd apps/healwave
    - npm ci --cache ../../.npm --prefer-offline
    - npm run test -- --watchAll=false --passWithNoTests
    - echo "‚úÖ HealWave frontend tests completed"
  artifacts:
    paths:
      - apps/healwave/coverage/
    reports:
      junit: apps/healwave/junit.xml
    expire_in: 1 week
  dependencies:
    - lint-frontend
    - type-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Build Stage
build-astro:
  image: node:${NODE_VERSION}
  stage: build
  script:
    - echo "üèóÔ∏è Building Astro frontend..."
    - cd apps/astro
    - npm ci --cache ../../.npm --prefer-offline
    - npm run build
    - echo "‚úÖ Astro build completed"
  artifacts:
    paths:
      - apps/astro/dist/
    expire_in: 1 week
  dependencies:
    - frontend-astro-test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build-healwave:
  image: node:${NODE_VERSION}
  stage: build
  script:
    - echo "üèóÔ∏è Building HealWave frontend..."
    - cd apps/healwave
    - npm ci --cache ../../.npm --prefer-offline
    - npm run build
    - echo "‚úÖ HealWave build completed"
  artifacts:
    paths:
      - apps/healwave/dist/
    expire_in: 1 week
  dependencies:
    - frontend-healwave-test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Deploy Astro Frontend to Vercel
frontend-astro-deploy:
  image: node:${NODE_VERSION}
  stage: deploy
  script:
    - echo "üöÄ Deploying Astro frontend to Vercel..."
    - npm install -g vercel@latest
    - cd apps/astro
    - vercel deploy --prod --token=$VERCEL_TOKEN --yes --scope $VERCEL_ORG_ID
    - echo "‚úÖ Astro frontend deployed successfully"
  environment:
    name: production
    url: https://cosmichub-astro.vercel.app
  dependencies:
    - build-astro
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when:
      - runner_system_failure
      - api_failure

# Deploy Backend to Render
backend-deploy:
  image: python:${PYTHON_VERSION}
  stage: deploy
  script:
    - echo "üöÄ Deploying backend to Render..."
    - pip install requests
    - python3 -m pip install --upgrade pip
    - python3 -m pip install -r backend/requirements.txt
    - |
      curl -X POST "https://api.render.com/deploy/srv-$RENDER_SERVICE_ID" \
        -H "Authorization: Bearer $RENDER_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{}' || { echo "‚ùå Backend deployment failed"; exit 1; }
    - echo "‚úÖ Backend deployed successfully"
  environment:
    name: production
    url: https://astrology-app-0emh.onrender.com
  dependencies:
    - backend-test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when:
      - runner_system_failure
      - api_failure

# Deploy HealWave Frontend (Future deployment)
frontend-healwave-deploy:
  image: node:${NODE_VERSION}
  stage: deploy
  script:
    - echo "üöÄ HealWave deployment placeholder"
    - echo "Add deployment steps for HealWave frontend here"
    - echo "‚úÖ HealWave deployment configured"
  environment:
    name: production-healwave
  dependencies:
    - build-healwave
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
