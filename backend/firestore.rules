// Enhanced Firestore Security Rules with Rate Limiting and Data Validation
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User authentication check
    function isSignedIn() {
      return request.auth != null;
    }
    
    // User ownership check
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Admin access check
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Enhanced rate limiting with per-minute limits
    function isWithinRateLimit() {
      let requests = exists(/databases/$(database)/documents/users/$(request.auth.uid)/rate_limits/requests) ?
                     get(/databases/$(database)/documents/users/$(request.auth.uid)/rate_limits/requests).data.requests : [];
      let now = request.time;
      let cutoff = now - duration.value(60, 's');
      return requests.size() < 60; // Simplified for valid syntax
    }
    
    // Data validation helpers
    function isValidChartData() {
      return request.resource.data.keys().hasAll(['id', 'chart_type', 'birth_data', 'created_at']) &&
             request.resource.data.birth_data is map &&
             request.resource.data.chart_type is string &&
             request.resource.data.created_at is timestamp;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email']) &&
             request.resource.data.email is string;
    }
    
    function isValidInterpretationData() {
      return request.resource.data.keys().hasAll(['chartId', 'userId', 'type', 'title', 'content', 'createdAt']) &&
             request.resource.data.chartId is string &&
             request.resource.data.userId is string &&
             request.resource.data.type is string &&
             request.resource.data.title is string &&
             request.resource.data.content is string;
    }
    
    function isValidPresetData() {
      return request.resource.data.keys().hasAll(['name', 'userId', 'category', 'baseFrequency']) &&
             request.resource.data.name is string &&
             request.resource.data.userId is string &&
             request.resource.data.category is string &&
             request.resource.data.baseFrequency is number &&
             request.resource.data.baseFrequency >= 20 &&
             request.resource.data.baseFrequency <= 1000;
    }
    
    // Users collection - user can only access their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId) && isValidUserData();
      
      // User charts subcollection
      match /charts/{chartId} {
        allow read, write: if isOwner(userId) && 
                             isValidChartData() &&
                             isWithinRateLimit();
      }
      
      // User presets subcollection for Healwave
      match /presets/{presetId} {
        allow read, write: if isOwner(userId) && 
                             isValidPresetData() &&
                             isWithinRateLimit();
      }
      
      // Rate limiting tracking
      match /rate_limits/requests {
        allow write: if isOwner(userId);
        allow read: if isOwner(userId);
      }
      
      // User sessions for premium features
      match /sessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
      
      // User settings
      match /settings/{settingId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Global presets collection for Healwave (read-only for users)
    match /presets/{presetId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || (isSignedIn() && 
                      request.resource.data.userId == request.auth.uid &&
                      isValidPresetData() &&
                      isWithinRateLimit());
    }
    
    // AI Interpretations collection
    match /interpretations/{interpretationId} {
      allow read, write: if isSignedIn() && 
                           resource.data.userId == request.auth.uid &&
                           isValidInterpretationData() &&
                           isWithinRateLimit();
      allow create: if isSignedIn() && 
                      request.resource.data.userId == request.auth.uid &&
                      isValidInterpretationData() &&
                      isWithinRateLimit();
    }
    
    // Subscription data (read-only for users)
    match /subscriptions/{subscriptionId} {
      allow read: if isSignedIn() && 
                    resource.data.user_id == request.auth.uid;
      allow write: if isAdmin(); // Only admin can write subscription data
    }
    
    // Premium content access control with existence check
    match /premium_content/{contentId} {
      allow read: if isSignedIn() && 
                    exists(/databases/$(database)/documents/subscriptions/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/subscriptions/$(request.auth.uid)).data.status == 'active';
    }
    
    // Public astrology data (read-only, admin write)
    match /astrology_data/{dataId} {
      allow read: if true; // Public access for basic astrology data
      allow write: if isAdmin(); // Only admins can modify
    }
    
    // Analytics and logs (write-only for users, read for admins)
    match /analytics/{analyticsId} {
      allow create: if isSignedIn() && 
                      request.resource.data.user_id == request.auth.uid;
      allow read: if isAdmin();
      allow update, delete: if false;
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}