[{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/App.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/App.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// /Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/App.test.tsx\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { describe, test, expect, vi } from 'vitest';\nimport '@testing-library/jest-dom';\nimport { AuthProvider } from '@cosmichub/auth';\nimport App from '../App';\n\n// Mock the config module\nvi.mock('@cosmichub/config', () => ({\n  getAppConfig: vi.fn(() => ({\n    app: {\n      name: 'astro',\n      environment: 'test',\n      version: '1.0.0'\n    }\n  })),\n  isFeatureEnabled: vi.fn(() => false)\n}));\n\n// Mock the integrations module\nvi.mock('@cosmichub/integrations', () => ({\n  useCrossAppStore: vi.fn(() => ({\n    addNotification: vi.fn()\n  }))\n}));\n\n// Mock React Router\nvi.mock('react-router-dom', () => ({\n  BrowserRouter: ({ children }: { children: React.ReactNode }): JSX.Element => <div data-testid=\"router\">{children}</div>,\n  Routes: ({ children }: { children: React.ReactNode }): JSX.Element => <div data-testid=\"routes\">{children}</div>,\n  Route: ({ element }: { element: React.ReactElement }): React.ReactElement => element,\n  useNavigate: vi.fn(() => vi.fn()),\n  useLocation: vi.fn(() => ({ pathname: '/' })),\n  Link: ({ children, to, ...props }: { children: React.ReactNode; to: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>): JSX.Element => <a href={to} {...props}>{children}</a>\n}));\n\n// Mock lazy components\nvi.mock('../pages/Dashboard', () => ({\n  default: () => <div data-testid=\"dashboard\">Dashboard</div>\n}));\n\nvi.mock('../components/Navbar', () => ({\n  default: () => <nav data-testid=\"navbar\" role=\"navigation\" aria-label=\"Main navigation\">Navbar</nav>\n}));\n\nvi.mock('../components/Footer', () => ({\n  default: () => <footer data-testid=\"footer\">Footer</footer>\n}));\n\ndescribe('App Component', (): void => {\n  test('renders with auth provider and main structure', (): void => {\n    render(\n      <AuthProvider appName=\"astro\">\n        <App />\n      </AuthProvider>\n    );\n\n    // Check for main navigation\n    expect(screen.getByRole('navigation', { name: /main navigation/i })).toBeInTheDocument();\n    \n    // Check for router structure\n    expect(screen.getByTestId('router')).toBeInTheDocument();\n    \n    // Check for main components\n    expect(screen.getByTestId('navbar')).toBeInTheDocument();\n    expect(screen.getByTestId('footer')).toBeInTheDocument();\n  });\n\n  test('applies correct accessibility attributes', (): void => {\n    render(\n      <AuthProvider appName=\"astro\">\n        <App />\n      </AuthProvider>\n    );\n\n    const navs = screen.getAllByRole('navigation');\n    expect(navs[0]).toHaveAttribute('aria-label', 'Main navigation');\n  });\n\n  test('handles authentication context properly', (): void => {\n    const { container } = render(\n      <AuthProvider appName=\"astro\">\n        <App />\n      </AuthProvider>\n    );\n\n    // Should render without errors when wrapped in AuthProvider\n    expect(container.firstChild).toBeInTheDocument();\n  });\n\n  test('renders cosmic loading component for lazy routes', async (): Promise<void> => {\n    render(\n      <AuthProvider appName=\"astro\">\n        <App />\n      </AuthProvider>\n    );\n\n    // The Suspense fallback should be present during initial render\n    // Note: In real tests, you might need to use act() and async utilities\n    // to properly test Suspense boundaries\n    const routers = screen.getAllByTestId('router');\n    expect(routers[0]).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/HumanDesignChart.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/HumanDesignChart.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, cleanup } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { MemoryRouter } from 'react-router-dom';\nimport HumanDesignChart from '../components/HumanDesignChart/HumanDesignChart';\nimport * as api from '../services/api';\n\n// Mock the API\nvi.mock('../services/api', () => ({\n  calculateHumanDesign: vi.fn()\n}));\n\n// Mock the auth hook\nvi.mock('@cosmichub/auth', () => ({\n  useAuth: vi.fn(() => ({\n    user: { uid: 'test-user' },\n    loading: false\n  })),\n  AuthProvider: ({ children }: { children: React.ReactNode }) => children,\n}));\n\n// Mock the ToastProvider\nvi.mock('../components/ToastProvider', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn()\n  }))\n}));\n\nconst mockCalculateHumanDesign = vi.mocked(api.calculateHumanDesign);\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <MemoryRouter>\n    {children}\n  </MemoryRouter>\n);\n\nconst mockBirthData = {\n  year: 1990,\n  month: 5,\n  day: 15,\n  hour: 14,\n  minute: 30,\n  city: 'New York'\n};\n\nconst mockHumanDesignData = {\n  human_design: {\n    type: 'Generator',\n    strategy: 'To Respond',\n    authority: 'Sacral',\n    profile: {\n      line1: 4,\n      line2: 6,\n      description: '4/6 Profile - Opportunist/Role Model'\n    },\n    signature: 'Satisfaction',\n    not_self_theme: 'Frustration',\n    defined_centers: ['Sacral', 'Solar Plexus'],\n    undefined_centers: ['Head', 'Ajna', 'Throat', 'Identity', 'Will', 'Spleen', 'Root'],\n    channels: [\n      {\n        gate1: 51,\n        gate2: 25,\n        name: 'Channel of Initiation',\n        description: 'The Channel of Initiation (51-25)'\n      }\n    ],\n    gates: [\n      {\n        number: 51,\n        name: 'Gate of Shock',\n        center: 'Heart',\n        type: 'personality' as const\n      },\n      {\n        number: 25,\n        name: 'Gate of Innocence',\n        center: 'Identity',\n        type: 'design' as const\n      }\n    ],\n    incarnation_cross: {\n      name: 'Right Angle Cross of the Four Ways',\n      description: 'A cross focused on bringing new directions and possibilities',\n      gates: {\n        personality_sun: 51,\n        personality_earth: 25,\n        design_sun: 42,\n        design_earth: 3\n      }\n    },\n    variables: {\n      description: 'Left Angle Variable',\n      digestion: 'Hot',\n      environment: 'Markets',\n      awareness: 'Taste',\n      perspective: 'Power'\n    }\n  }\n};\n\ndescribe('HumanDesignChart Component', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    mockCalculateHumanDesign.mockResolvedValue(mockHumanDesignData);\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  it('renders basic human design chart interface', () => {\n    render(\n      <TestWrapper>\n        <HumanDesignChart />\n      </TestWrapper>\n    );\n\n  expect(screen.getByText(/enter your birth information/i)).toBeInTheDocument();\n  });\n\n  it('renders with birth data props', () => {\n    render(\n      <TestWrapper>\n        <HumanDesignChart birthData={mockBirthData} />\n      </TestWrapper>\n    );\n\n    // When birth data is provided, component automatically starts calculating\n    expect(screen.getByText(/calculating your human design chart/i)).toBeInTheDocument();\n  });\n\n  it('renders calculate button when onCalculate prop is provided', () => {\n    const mockOnCalculate = vi.fn();\n    \n    render(\n      <TestWrapper>\n        <HumanDesignChart onCalculate={mockOnCalculate} />\n      </TestWrapper>\n    );\n\n  expect(screen.getByRole('button', { name: /calculate human design/i })).toBeInTheDocument();\n  });\n\n  it('calls onCalculate when button is clicked', () => {\n    const mockOnCalculate = vi.fn();\n    \n    const { container } = render(\n      <TestWrapper>\n        <HumanDesignChart onCalculate={mockOnCalculate} />\n      </TestWrapper>\n    );\n\n    // Find the button within this specific component instance\n    const calculateButton = container.querySelector('button');\n    expect(calculateButton).toBeTruthy();\n    \n    fireEvent.click(calculateButton!);\n\n    expect(mockOnCalculate).toHaveBeenCalled();\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/MultiSystemChart.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/MultiSystemChart.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { MemoryRouter } from 'react-router-dom';\nimport { ToastProvider } from '../components/ToastProvider';\nimport { AuthProvider, SubscriptionProvider } from '@cosmichub/auth';\nimport MultiSystemChartDisplay from '../components/MultiSystemChart';\nimport type { ChartBirthData } from '../services/api';\n\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ToastProvider>\n    <MemoryRouter>\n      <AuthProvider>\n        <SubscriptionProvider appType=\"astro\">{children}</SubscriptionProvider>\n      </AuthProvider>\n    </MemoryRouter>\n  </ToastProvider>\n);\n\ndescribe('MultiSystemChart Component', () => {\n  const mockBirthData: ChartBirthData = {\n    year: 1990,\n    month: 1,\n    day: 1,\n    hour: 12,\n    minute: 0,\n    city: 'New York',\n    lat: 40.7128,\n    lon: -74.0060,\n    timezone: 'America/New_York'\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('renders multi-system chart interface with birth data', () => {\n    render(\n      <TestWrapper>\n        <MultiSystemChartDisplay birthData={mockBirthData} />\n      </TestWrapper>\n    );\n\n    // Check for tab buttons specifically\n    expect(screen.getByRole('tab', { name: /Western Tropical/i })).toBeInTheDocument();\n    expect(screen.getByRole('tab', { name: /Vedic Sidereal/i })).toBeInTheDocument();\n    expect(screen.getByRole('tab', { name: /Chinese/i })).toBeInTheDocument();\n    expect(screen.getByRole('tab', { name: /Mayan/i })).toBeInTheDocument();\n    expect(screen.getByRole('tab', { name: /Uranian/i })).toBeInTheDocument();\n    expect(screen.getByRole('tab', { name: /Synthesis/i })).toBeInTheDocument();\n    expect(screen.getByText(/Multi-System Astrological Analysis/i)).toBeInTheDocument();\n  });\n\n  it('displays birth information when provided', () => {\n    render(\n      <TestWrapper>\n        <MultiSystemChartDisplay birthData={mockBirthData} />\n      </TestWrapper>\n    );\n\n    // Check for birth information display by using more specific queries\n    expect(screen.getAllByText(/Date:/)[0]).toBeInTheDocument();\n    expect(screen.getAllByText(/Time:/)[0]).toBeInTheDocument();\n    expect(screen.getAllByText(/Coordinates:/)[0]).toBeInTheDocument();\n    expect(screen.getAllByText(/Timezone:/)[0]).toBeInTheDocument();\n  });\n\n  it('shows loading state when isLoading is true', () => {\n    render(\n      <TestWrapper>\n        <MultiSystemChartDisplay birthData={mockBirthData} isLoading={true} />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText(/Calculating multi-system chart.../i)).toBeInTheDocument();\n  });\n\n  it('shows error state when no data is provided', () => {\n    render(\n      <TestWrapper>\n        <MultiSystemChartDisplay />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText(/No Chart Data/i)).toBeInTheDocument();\n    expect(screen.getByText(/Please calculate a chart to see the multi-system analysis/i)).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/Profile.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/Profile.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @vitest-environment jsdom\n */\n\nimport React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport Profile from '../pages/Profile';\n\n// Mock auth hook\nvi.mock('@cosmichub/auth', () => ({\n  useAuth: () => ({\n    user: {\n      email: 'test@example.com',\n      uid: 'test-uid-123',\n      emailVerified: true,\n      metadata: {\n        creationTime: '2024-01-01T00:00:00Z'\n      }\n    },\n    signOut: vi.fn(),\n  }),\n}));\n\n// Mock UI components\nvi.mock('@cosmichub/ui', () => ({\n  Card: ({ children, title }: { children: React.ReactNode; title?: string }) => (\n    <div data-testid=\"card\">\n      {title && <h3>{title}</h3>}\n      {children}\n    </div>\n  ),\n  Button: ({ children, onClick }: { children: React.ReactNode; onClick?: () => void }) => (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  ),\n}));\n\n// Mock router\nvi.mock('react-router-dom', () => ({\n  useNavigate: () => vi.fn(),\n}));\n\n// Mock toast\nvi.mock('../components/ToastProvider', () => ({\n  useToast: () => ({\n    toast: vi.fn(),\n  }),\n}));\n\n// Mock progress bar\nvi.mock('../components/ProgressBar', () => ({\n  __esModule: true,\n  default: () => <div>Progress Bar</div>,\n}));\n\n// Mock lazy component\nvi.mock('../components/ChartPreferences', () => ({\n  __esModule: true,\n  default: () => <div>Chart Preferences</div>,\n}));\n\n// Mock subscription types (now import from package)\nvi.mock('@cosmichub/subscriptions', () => ({\n  COSMICHUB_TIERS: {\n    free: { name: 'Free Explorer' }\n  }\n}));\n\n// Mock Radix UI Tabs\nvi.mock('@radix-ui/react-tabs', () => ({\n  Root: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  List: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  Trigger: ({ children }: { children: React.ReactNode }) => <button>{children}</button>,\n  Content: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n}));\n\n// Mock React Icons\nvi.mock('react-icons/fa', () => ({\n  FaUser: () => <span>User</span>,\n  FaCog: () => <span>Settings</span>,\n  FaChartLine: () => <span>Chart</span>,\n  FaSave: () => <span>Save</span>,\n  FaCreditCard: () => <span>Card</span>,\n  FaArrowUp: () => <span>Up</span>,\n  FaHistory: () => <span>History</span>,\n  FaCalendarAlt: () => <span>Calendar</span>,\n}));\n\ndescribe('Profile Component', (): void => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('renders without crashing', (): void => {\n    const { container } = render(<Profile />);\n    expect(container).toBeTruthy();\n  });\n\n  it('displays user email', (): void => {\n    render(<Profile />);\n    expect(screen.getAllByText('test@example.com').length).toBeGreaterThanOrEqual(1);\n  });\n\n  it('shows account overview', (): void => {\n    render(<Profile />);\n    expect(screen.getAllByText('Account Overview').length).toBeGreaterThanOrEqual(1);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/SynastryAnalysis.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/SynastryAnalysis.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { MemoryRouter } from 'react-router-dom';\nimport { SynastryAnalysis } from '../components/SynastryAnalysis/SynastryAnalysis';\nimport { AuthProvider, SubscriptionProvider } from '@cosmichub/auth';\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <MemoryRouter>\n    <AuthProvider>\n      <SubscriptionProvider appType=\"astro\">\n        {children}\n      </SubscriptionProvider>\n    </AuthProvider>\n  </MemoryRouter>\n);\n\ndescribe('SynastryAnalysis Component', () => {\n  const mockPerson1 = {\n    date: '1990-01-01',\n    time: '12:00',\n    city: 'New York',\n    country: 'USA',\n    latitude: 40.7128,\n    longitude: -74.0060,\n    timezone: 'America/New_York',\n    datetime: '1990-01-01T12:00:00-05:00'\n  };\n\n  const mockPerson2 = {\n    date: '1992-05-15',\n    time: '14:30',\n    city: 'Los Angeles',\n    country: 'USA',\n    latitude: 34.0522,\n    longitude: -118.2437,\n    timezone: 'America/Los_Angeles',\n    datetime: '1992-05-15T14:30:00-08:00'\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('renders synastry analysis interface', () => {\n    render(\n      <TestWrapper>\n        <SynastryAnalysis person1={mockPerson1} person2={mockPerson2} />\n      </TestWrapper>\n    );\n\n    // Basic test that component renders without crashing\n    expect(document.body).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/TestWrapper.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/TestWrapper.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { type ReactNode, type JSX } from 'react';\nimport { MemoryRouter } from 'react-router-dom';\nimport { AuthProvider, SubscriptionProvider } from '@cosmichub/auth';\n\nexport const TestWrapper = ({ children }: { children: ReactNode }): JSX.Element => (\n  <MemoryRouter>\n    <AuthProvider>\n      <SubscriptionProvider appType=\"cosmichub\">\n        {children}\n      </SubscriptionProvider>\n    </AuthProvider>\n  </MemoryRouter>\n);\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/auth.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/auth.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { MemoryRouter } from 'react-router-dom';\nimport { AuthProvider } from '@cosmichub/auth';\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <MemoryRouter>\n    <AuthProvider>\n      {children}\n    </AuthProvider>\n  </MemoryRouter>\n);\n\ndescribe('Auth functionality', () => {\n  it('provides auth context to children', () => {\n    const TestComponent = () => <div>Test Component</div>;\n    \n    render(\n      <TestWrapper>\n        <TestComponent />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText('Test Component')).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/birthDataUtils.edge.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/birthDataUtils.edge.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { parseTextBirthData, toUnifiedBirthData, type TextBirthData } from '@cosmichub/types';\n\n// Edge & validation focused tests\n\ndescribe('Birth Data Converters - Edge Cases', () => {\n  it('trims whitespace in date/time and city/timezone', () => {\n    const text: TextBirthData = {\n      birth_date: ' 2024-02-29 ',\n      birth_time: ' 09:05 ',\n      city: '  Paris ',\n      timezone: ' Europe/Paris ',\n    } as any; // latitude/longitude optional\n    const parsed = parseTextBirthData(text);\n    expect(parsed).toMatchObject({\n      year: 2024,\n      month: 2,\n      day: 29,\n      hour: 9,\n      minute: 5,\n      city: 'Paris',\n      timezone: 'Europe/Paris'\n    });\n  });\n\n  it('rejects invalid calendar date (Feb 30)', () => {\n    const text: TextBirthData = { birth_date: '2023-02-30', birth_time: '12:00' };\n    expect(() => parseTextBirthData(text)).toThrow(/Invalid calendar date/);\n  });\n\n  it('rejects invalid hour (24)', () => {\n    const text: TextBirthData = { birth_date: '2023-03-10', birth_time: '24:00' };\n    expect(() => parseTextBirthData(text)).toThrow(/Invalid hour/);\n  });\n\n  it('rejects invalid minute (60)', () => {\n    const text: TextBirthData = { birth_date: '2023-03-10', birth_time: '23:60' };\n    expect(() => parseTextBirthData(text)).toThrow(/Invalid minute/);\n  });\n\n  it('rejects malformed date format', () => {\n    const text: TextBirthData = { birth_date: '03/10/2023', birth_time: '12:00' } as any;\n    expect(() => parseTextBirthData(text)).toThrow(/Invalid birth_date format/);\n  });\n\n  it('rejects malformed time format', () => {\n    const text: TextBirthData = { birth_date: '2023-03-10', birth_time: '7:5' } as any;\n    expect(() => parseTextBirthData(text)).toThrow(/Invalid birth_time format/);\n  });\n\n  it('still converts through dispatcher for valid leap day', () => {\n    const text: TextBirthData = { birth_date: '2024-02-29', birth_time: '00:00' };\n    const unified = toUnifiedBirthData(text);\n    expect(unified).toMatchObject({ year: 2024, month: 2, day: 29, hour: 0, minute: 0 });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/birthDataUtils.safeParse.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/birthDataUtils.safeParse.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { safeParseTextBirthData, type TextBirthData } from '@cosmichub/types';\n\ndescribe('safeParseTextBirthData', () => {\n  it('returns success for valid input', () => {\n    const text: TextBirthData = { birth_date: '2024-02-29', birth_time: '07:15' } as any;\n    const result = safeParseTextBirthData(text);\n    expect(result.success).toBe(true);\n    if (result.success) {\n      expect(result.data).toMatchObject({ year: 2024, month: 2, day: 29, hour: 7, minute: 15 });\n    }\n  });\n\n  it('returns failure for invalid input instead of throwing', () => {\n    const text: TextBirthData = { birth_date: '2023-02-30', birth_time: '12:00' } as any; // invalid date\n    const result = safeParseTextBirthData(text);\n    expect(result.success).toBe(false);\n    if (!result.success) {\n      expect(result.error).toBeInstanceOf(Error);\n      expect(result.error.message).toMatch(/Invalid calendar date/);\n    }\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/birthDataUtils.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/birthDataUtils.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { toUnifiedBirthData, parseTextBirthData, type UnifiedBirthData, type TextBirthData } from '@cosmichub/types';\n\ndescribe('Birth Data Converters', () => {\n  it('converts UnifiedBirthData through toUnifiedBirthData unchanged', () => {\n    const unified: UnifiedBirthData = {\n      year: 1984,\n      month: 10,\n      day: 12,\n      hour: 8,\n      minute: 45,\n      city: 'London',\n      lat: 51.5074,\n      lon: -0.1278,\n      timezone: 'Europe/London'\n    };\n    expect(toUnifiedBirthData(unified)).toEqual(unified);\n  });\n\n  it('parses TextBirthData correctly', () => {\n    const text: TextBirthData = {\n      birth_date: '1990-06-21',\n      birth_time: '14:30:00',\n      latitude: 40.7128,\n      longitude: -74.0060,\n      timezone: 'America/New_York',\n      city: 'New York'\n    };\n    const parsed = parseTextBirthData(text);\n    expect(parsed).toMatchObject({\n      year: 1990,\n      month: 6,\n      day: 21,\n      hour: 14,\n      minute: 30,\n      city: 'New York',\n      lat: 40.7128,\n      lon: -74.006,\n      timezone: 'America/New_York'\n    });\n  });\n\n  it('toUnifiedBirthData dispatches TextBirthData path', () => {\n    const text: TextBirthData = {\n      birth_date: '2000-01-01',\n      birth_time: '00:00:00',\n      city: 'Testville'\n    };\n    const unified = toUnifiedBirthData(text);\n    expect(unified).toMatchObject({ year: 2000, month: 1, day: 1, hour: 0, minute: 0, city: 'Testville' });\n  });\n\n  it('throws on unsupported shape', () => {\n    // @ts-expect-error intentional bad shape\n    expect(() => toUnifiedBirthData({ foo: 'bar' })).toThrow();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/serialize.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/__tests__/serialize.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach } from 'vitest';\nimport { serializeAstrologyData, deserializeAstrologyData } from '@cosmichub/types';\nimport type { AstrologyChart, UserProfile, NumerologyData } from '@cosmichub/types';\n\ndescribe('Serialization and Deserialization', () => {\n  let mockChart: AstrologyChart;\n  let mockUserProfile: UserProfile;\n  let mockNumerology: NumerologyData;\n\n  beforeEach(() => {\n    mockChart = {\n      planets: [\n        {\n          name: 'Sun',\n          sign: 'Leo',\n          degree: 23.5,\n          position: 233.5,\n          house: 'House 5',\n          retrograde: false\n        },\n        {\n          name: 'Moon',\n          sign: 'Cancer',\n          degree: 12.3,\n          position: 102.3,\n          house: 'House 4',\n          retrograde: false\n        }\n      ],\n      houses: [\n        {\n          house: 1,\n          number: 1,\n          sign: 'Aries',\n          degree: 0,\n          cusp: 0,\n          ruler: 'Mars'\n        },\n        {\n          house: 2,\n          number: 2,\n          sign: 'Taurus',\n          degree: 30,\n          cusp: 30,\n          ruler: 'Venus'\n        }\n      ],\n      aspects: [\n        {\n          planet1: 'Sun',\n          planet2: 'Moon',\n          type: 'Trine',\n          orb: 2.1,\n          applying: 'separating'\n        }\n      ],\n      asteroids: [\n        {\n          name: 'Ceres',\n          sign: 'Virgo',\n          degree: 15.7,\n          house: 'House 6'\n        }\n      ],\n      angles: [\n        {\n          name: 'Ascendant',\n          sign: 'Aries',\n          degree: 0,\n          position: 0\n        }\n      ]\n    };\n\n    mockUserProfile = {\n      userId: 'test-user-123',\n      birthData: {\n        date: '1990-05-15',\n        time: '14:30:00',\n        location: 'New York, NY, USA'\n      }\n    };\n\n    mockNumerology = {\n      lifePath: 7,\n      destiny: 3,\n      personalYear: 9\n    };\n  });\n\n  describe('AstrologyChart Serialization', () => {\n    it('should correctly serialize and deserialize a complete astrology chart', () => {\n      const serialized = serializeAstrologyData(mockChart);\n      expect(typeof serialized).toBe('string');\n      expect(serialized.length).toBeGreaterThan(0);\n\n      const deserialized = deserializeAstrologyData<AstrologyChart>(serialized);\n      expect(deserialized).toEqual(mockChart);\n    });\n\n    it('should handle charts with empty arrays', () => {\n      const emptyChart: AstrologyChart = {\n        planets: [],\n        houses: [],\n        aspects: [],\n        asteroids: [],\n        angles: []\n      };\n\n      const serialized = serializeAstrologyData(emptyChart);\n      const deserialized = deserializeAstrologyData<AstrologyChart>(serialized);\n      expect(deserialized).toEqual(emptyChart);\n    });\n\n    it('should preserve optional fields in planets', () => {\n      const chartWithOptionals: AstrologyChart = {\n        ...mockChart,\n        planets: [\n          {\n            name: 'Mercury',\n            sign: 'Gemini',\n            degree: 8.2,\n            position: 68.2,\n            house: 'House 3',\n            retrograde: true,\n            aspects: [{ planet1: 'Mercury', planet2: 'Venus', type: 'Conjunction', orb: 1.5, applying: 'applying' }]\n          }\n        ]\n      };\n\n      const serialized = serializeAstrologyData(chartWithOptionals);\n      const deserialized = deserializeAstrologyData<AstrologyChart>(serialized);\n      expect(deserialized.planets[0].retrograde).toBe(true);\n      expect(deserialized.planets[0].aspects).toHaveLength(1);\n    });\n  });\n\n  describe('UserProfile Serialization', () => {\n    it('should correctly serialize and deserialize user profiles', () => {\n      const serialized = serializeAstrologyData(mockUserProfile);\n      expect(typeof serialized).toBe('string');\n\n      const deserialized = deserializeAstrologyData<UserProfile>(serialized);\n      expect(deserialized).toEqual(mockUserProfile);\n      expect(deserialized.userId).toBe('test-user-123');\n      expect(deserialized.birthData.date).toBe('1990-05-15');\n    });\n\n    it('should handle different date and time formats', () => {\n      const profileWithDifferentFormat: UserProfile = {\n        userId: 'user-456',\n        birthData: {\n          date: '1985-12-25',\n          time: '23:45:00',\n          location: 'London, UK'\n        }\n      };\n\n      const serialized = serializeAstrologyData(profileWithDifferentFormat);\n      const deserialized = deserializeAstrologyData<UserProfile>(serialized);\n      expect(deserialized).toEqual(profileWithDifferentFormat);\n    });\n  });\n\n  describe('NumerologyData Serialization', () => {\n    it('should correctly serialize and deserialize numerology data', () => {\n      const serialized = serializeAstrologyData(mockNumerology);\n      expect(typeof serialized).toBe('string');\n\n      const deserialized = deserializeAstrologyData<NumerologyData>(serialized);\n      expect(deserialized).toEqual(mockNumerology);\n      expect(deserialized.lifePath).toBe(7);\n      expect(deserialized.destiny).toBe(3);\n      expect(deserialized.personalYear).toBe(9);\n    });\n\n    it('should handle edge case numerology numbers', () => {\n      const edgeCaseNumerology: NumerologyData = {\n        lifePath: 11, // Master number\n        destiny: 22, // Master number\n        personalYear: 1\n      };\n\n      const serialized = serializeAstrologyData(edgeCaseNumerology);\n      const deserialized = deserializeAstrologyData<NumerologyData>(serialized);\n      expect(deserialized).toEqual(edgeCaseNumerology);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should throw an error for invalid JSON', () => {\n      expect(() => {\n        deserializeAstrologyData('invalid json');\n      }).toThrow();\n    });\n\n    it('should throw an error for unknown data types', () => {\n      const unknownData = { unknown: 'field', random: 123 };\n      expect(() => {\n        serializeAstrologyData(unknownData as any);\n      }).toThrow('Failed to serialize data');\n    });\n\n    it('should handle malformed chart data gracefully', () => {\n      const malformedChart = {\n        planets: [{ name: 'Sun' }], // Missing required fields\n        houses: [],\n        aspects: [],\n        asteroids: [],\n        angles: []\n      };\n\n      expect(() => {\n        serializeAstrologyData(malformedChart as any);\n      }).toThrow();\n    });\n  });\n\n  describe('JSON Size Optimization', () => {\n    it('should remove undefined values during serialization', () => {\n      const chartWithUndefined: any = {\n        planets: [{\n          name: 'Sun',\n          sign: 'Leo',\n          degree: 23.5,\n          position: 233.5,\n          house: 'House 5',\n          retrograde: undefined,\n          aspects: undefined\n        }],\n        houses: [],\n        aspects: [],\n        asteroids: [],\n        angles: []\n      };\n\n      const serialized = serializeAstrologyData(chartWithUndefined);\n      expect(serialized).not.toContain('undefined');\n      \n      // The serialized string should contain null instead of undefined\n      const parsed = JSON.parse(serialized);\n      expect(parsed.planets[0].retrograde).toBe(null);\n    });\n\n    it('should produce compact JSON without unnecessary whitespace', () => {\n      const serialized = serializeAstrologyData(mockChart);\n      expect(serialized).not.toContain('  '); // No double spaces\n      expect(serialized).not.toContain('\\n'); // No newlines\n    });\n  });\n\n  describe('Integration with Chart Components', () => {\n    it('should serialize chart data in a format compatible with ChartDisplay', () => {\n      const serialized = serializeAstrologyData(mockChart);\n      const deserialized = deserializeAstrologyData<AstrologyChart>(serialized);\n      \n      // Verify that all essential chart display fields are present\n      expect(deserialized.planets).toBeDefined();\n      expect(deserialized.houses).toBeDefined();\n      expect(deserialized.aspects).toBeDefined();\n      \n      // Verify planet data is complete for rendering\n      expect(deserialized.planets[0].name).toBeDefined();\n      expect(deserialized.planets[0].sign).toBeDefined();\n      expect(deserialized.planets[0].degree).toBeDefined();\n    });\n\n    it('should maintain precision for degree calculations', () => {\n      const preciseChart: AstrologyChart = {\n        ...mockChart,\n        planets: [{\n          name: 'Sun',\n          sign: 'Leo',\n          degree: 23.456789123,\n          position: 233.456789123,\n          house: 'House 5'\n        }]\n      };\n\n      const serialized = serializeAstrologyData(preciseChart);\n      const deserialized = deserializeAstrologyData<AstrologyChart>(serialized);\n      \n      expect(deserialized.planets[0].degree).toBeCloseTo(23.456789123, 6);\n      expect(deserialized.planets[0].position).toBeCloseTo(233.456789123, 6);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIChat.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":55,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":55,"endColumn":65,"suggestions":[{"fix":{"range":[1453,1507],"text":"res?.data === null"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useAuth } from \"@cosmichub/auth\";\nimport { getAuthToken } from \"../services/api\";\nimport { useToast } from \"./ToastProvider\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\ninterface ErrorResponseData {\n  detail: string;\n}\n\ninterface ErrorResponseWrapper {\n  data: ErrorResponseData;\n}\n\ninterface ErrorResponse {\n  response: ErrorResponseWrapper;\n}\n\nexport default function AIChat(): React.ReactElement {\n  const { user, loading } = useAuth();\n  const [message, setMessage] = useState(\"\");\n  const [response, setResponse] = useState<ChatResponse | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handleSubmit = async (): Promise<void> => {\n    setError(null);\n    \n    if (message === null || message === undefined || typeof message !== 'string' || message.trim().length === 0) {\n      return;\n    }\n\n    try {\n      const token = await getAuthToken();\n      \n      if (token === null || token === undefined || token.length === 0) {\n        throw new Error('Authentication token is missing');\n      }\n\n      const res = await axios.post(\n        `${import.meta.env.VITE_BACKEND_URL}/chat`,\n        { text: message },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (res === null || res === undefined || res.data === null || res.data === undefined || typeof res.data !== 'object') {\n        throw new Error('No response data received');\n      }\n\n      const chatResponse = res.data as ChatResponse;\n      \n      if (chatResponse === null || chatResponse === undefined || \n          !Array.isArray(chatResponse.choices) || \n          chatResponse.choices.length === 0 ||\n          chatResponse.choices[0] === null || \n          chatResponse.choices[0] === undefined ||\n          typeof chatResponse.choices[0].message?.content !== 'string' ||\n          chatResponse.choices[0].message.content.length === 0) {\n        throw new Error('Invalid response format');\n      }\n\n      setResponse(chatResponse);\n      toast({\n        title: \"Response Received\",\n        description: \"Your AI response has been generated successfully\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      const err = error as Partial<ErrorResponse>;\n      const errorMessage = err.response?.data?.detail ?? \"Failed to get response\";\n      setError(errorMessage);\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  if (loading === true) {\n    return <div className=\"text-white\" role=\"status\" aria-label=\"Loading authentication\">Loading...</div>;\n  }\n  \n  if (user === undefined || user === null || typeof user !== 'object') {\n    return <Navigate to=\"/login\" replace aria-label=\"Redirecting to login\" />;\n  }\n\n  return (\n    <div \n      role=\"main\"\n      aria-label=\"AI Astrology Chat Interface\"\n      className=\"max-w-2xl p-6 mx-auto text-white border shadow-2xl bg-cosmic-dark/80 backdrop-blur-xl border-cosmic-gold/20 rounded-xl\"\n    >\n      <h1 className=\"mb-6 text-2xl font-bold text-center text-cosmic-gold\">\n        AI Astrology Chat\n      </h1>\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"ai-message-input\" className=\"block mb-2 text-cosmic-gold\">Your Message</label>\n          <textarea \n            id=\"ai-message-input\"\n            value={message} \n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>): void => setMessage(e.target.value)} \n            placeholder=\"Ask about your chart...\" \n            className=\"w-full p-3 text-white border rounded-lg resize-none bg-cosmic-dark border-cosmic-gold/30 placeholder-cosmic-silver focus:border-cosmic-gold focus:outline-none\"\n            rows={4}\n            aria-describedby=\"ai-message-help\"\n          />\n          <div id=\"ai-message-help\" className=\"mt-1 text-sm text-cosmic-silver/70\">\n            Ask questions about your astrological chart or request interpretations\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          className=\"w-full py-3 font-semibold transition-colors rounded-lg bg-cosmic-gold text-cosmic-dark hover:bg-cosmic-gold/90 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={(): void => {\n            void handleSubmit();\n          }}\n          disabled={message === null || message === undefined || typeof message !== 'string' || message.trim().length === 0}\n          aria-label=\"Send message to AI chat\"\n        >\n          Send\n        </button>\n  {error !== null && error !== undefined && typeof error === 'string' && error.length > 0 && (\n    <div className=\"p-3 text-red-400 border rounded-lg bg-red-900/20 border-red-500/30\" role=\"alert\">\n      {error}\n    </div>\n  )}\n  {response !== null && response !== undefined && \n   typeof response === 'object' &&\n   Array.isArray(response.choices) && \n   response.choices.length > 0 && \n   response.choices[0] !== null && \n   response.choices[0] !== undefined &&\n   typeof response.choices[0].message?.content === 'string' &&\n   response.choices[0].message.content.length > 0 && (\n    <div className=\"p-4 mt-4 border rounded-lg bg-cosmic-purple/20 border-cosmic-purple/30\">\n      <div className=\"text-cosmic-silver\">{response.choices[0].message.content}</div>\n    </div>\n  )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/AIInterpretation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/__tests__/AIChat.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/AIInterpretation/__tests__/AIChat.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport AIChat from '../../AIChat';\nimport * as apiModule from '../../../services/api';\nimport axios, { AxiosResponse } from 'axios';\n\n// Define types for mocks\ninterface AuthUser {\n  uid: string;\n}\n\ninterface AuthContext {\n  user: AuthUser | null;\n  loading: boolean;\n}\n\n// Create a mock function that we can control in tests\nconst mockUseAuth = vi.hoisted(() => vi.fn());\n\n// Mock the api module (correct relative path to services/api)\nvi.mock('../../../services/api', () => ({\n  getAuthToken: vi.fn(),\n}));\n\n// Mock the auth package with our controllable mock\nvi.mock('@cosmichub/auth', () => ({\n  useAuth: mockUseAuth,\n}));\n\n// Mock the ToastProvider\nvi.mock('../components/ToastProvider', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n}));\n\n// Mock axios for API calls\nvi.mock('axios');\n\n// Mock react-router-dom\nvi.mock('react-router-dom', async () => {\n  const actual = await vi.importActual('react-router-dom');\n  return {\n    ...actual,\n    useNavigate: vi.fn(),\n    Navigate: ({ to }: { to: string }) => <div data-testid=\"navigate-to\">{to}</div>,\n  };\n});\n\n// Helper component to wrap components with providers\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <BrowserRouter>{children}</BrowserRouter>\n);\n\ndescribe('AIChat Component', () => {\n  const mockGetAuthToken = vi.mocked(apiModule.getAuthToken as any);\n  const mockAxios = vi.mocked(axios);\n  const mockAxiosPost = vi.fn();\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    mockGetAuthToken.mockReset();\n    mockAxiosPost.mockReset();\n    mockAxios.post = mockAxiosPost;\n    mockUseAuth.mockReset();\n  });\n\n  it('renders loading state when auth is loading', () => {\n    mockUseAuth.mockReturnValue({\n      user: null,\n      loading: true,\n    } as AuthContext);\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n  });\n\n  it('redirects to login when user is not authenticated', () => {\n    mockUseAuth.mockReturnValue({\n      user: null,\n      loading: false,\n    } as AuthContext);\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    expect(screen.getByTestId('navigate-to')).toHaveTextContent('/login');\n  });\n\n  it('renders chat interface when user is authenticated', () => {\n    mockUseAuth.mockReturnValue({\n      user: { uid: 'test-user' },\n      loading: false,\n    } as AuthContext);\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText('AI Astrology Chat')).toBeInTheDocument();\n    expect(screen.getByRole('textbox')).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /send/i })).toBeInTheDocument();\n  });\n\n  it('handles message input correctly', () => {\n    mockUseAuth.mockReturnValue({\n      user: { uid: 'test-user' },\n      loading: false,\n    } as AuthContext);\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    const textarea = screen.getByRole('textbox') as HTMLTextAreaElement;\n    fireEvent.change(textarea, { target: { value: 'Test message' } });\n\n    expect(textarea).toHaveValue('Test message');\n  });\n\n  it('submits message and displays response', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { uid: 'test-user' },\n      loading: false,\n    } as AuthContext);\n\n    mockGetAuthToken.mockResolvedValue('mock-token');\n    mockAxiosPost.mockResolvedValue({\n      data: {\n        choices: [{ message: { content: 'Test interpretation' } }],\n      },\n    } as AxiosResponse);\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    const textarea = screen.getByRole('textbox') as HTMLTextAreaElement;\n    const submitButton = screen.getByRole('button', { name: /send/i });\n\n    fireEvent.change(textarea, { target: { value: 'Test question' } });\n    fireEvent.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockAxiosPost).toHaveBeenCalledWith(\n        expect.stringContaining('/chat'),\n        { text: 'Test question' },\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            Authorization: 'Bearer mock-token',\n          }),\n        })\n      );\n    });\n  });\n\n  it('handles API error gracefully', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { uid: 'test-user' },\n      loading: false,\n    } as AuthContext);\n\n    mockGetAuthToken.mockResolvedValue('mock-token');\n    mockAxiosPost.mockRejectedValue(new Error('API Error'));\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    const textarea = screen.getByRole('textbox') as HTMLTextAreaElement;\n    const submitButton = screen.getByRole('button', { name: /send/i });\n\n    fireEvent.change(textarea, { target: { value: 'Test question' } });\n    fireEvent.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockAxiosPost).toHaveBeenCalled();\n    });\n  });\n\n  it('disables submit button when message is empty', () => {\n    mockUseAuth.mockReturnValue({\n      user: { uid: 'test-user' },\n      loading: false,\n    } as AuthContext);\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    const submitButton = screen.getByRole('button', { name: /send/i });\n    expect(submitButton).toBeDisabled();\n  });\n\n  it('enables submit button when message has content', () => {\n    mockUseAuth.mockReturnValue({\n      user: { uid: 'test-user' },\n      loading: false,\n    } as AuthContext);\n\n    render(\n      <TestWrapper>\n        <AIChat />\n      </TestWrapper>\n    );\n\n    const textarea = screen.getByRole('textbox') as HTMLTextAreaElement;\n    const submitButton = screen.getByRole('button', { name: /send/i });\n\n    fireEvent.change(textarea, { target: { value: 'Test message' } });\n\n    expect(submitButton).not.toBeDisabled();\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/useAIInterpretation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AnalyzePersonality.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/AspectsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/AstrologyGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/FundamentalsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/HousesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/HowToUseTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/PlanetsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/SignsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/useAstrologyGuide.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\nexport const useAstrologyGuide = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Removed unused tabIndex parameter (was causing no-unused-vars)\n  const openGuide = useCallback(() => {\n    setIsOpen(true);\n  }, []);\n\n  const onClose = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  return { isOpen, onClose, openGuide };\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/ChartDisplay.stories.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":37,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":32},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'play' has no 'await' expression.","line":62,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":62,"endColumn":15,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1723,1763],"text":"({ canvasElement }): void"},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport type { ComponentType } from 'react';\nimport type { ChartLike } from './normalizeChart';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport ChartDisplay from '.';\nimport { sampleChartData } from './sampleData';\nimport './ChartDisplay.stories.css';\n\ntype ChartType = 'natal' | 'synastry' | 'composite' | 'transit';\ntype Story = StoryObj<typeof ChartDisplay>;\n\nconst queryClient: QueryClient = new QueryClient();\n\n// Meta with explicit tags enables autodocs + interactions panel; a11y config scoped to region wrapper.\nconst meta: Meta<typeof ChartDisplay> = {\n  title: 'Astrology/ChartDisplay',\n  component: ChartDisplay,\n  tags: ['autodocs', 'aria', 'accessibility'],\n  parameters: {\n    a11y: {\n      element: '#root',\n      config: {\n        rules: [\n          {\n            id: 'region',\n            enabled: true\n          },\n          {\n            id: 'aria-roles',\n            enabled: true\n          }\n        ]\n      }\n    }\n  },\n  decorators: [\n    (Story: ComponentType): JSX.Element => (\n      <QueryClientProvider client={queryClient}>\n        <div \n          className=\"storybook-wrapper\" \n          role=\"region\" \n          aria-label=\"Chart display story\"\n        >\n          <Story />\n        </div>\n      </QueryClientProvider>\n    )\n  ]\n};\nexport default meta;\n\n/**\n * Sample story showcasing a complete natal chart with ARIA support.\n * The component provides proper region labeling and keyboard navigation.\n */\nexport const Sample: Readonly<Story> = {\n  args: {\n    chart: sampleChartData,\n    chartType: 'natal' satisfies ChartType\n  },\n  // Type safety provided by StoryBook - no runtime check needed\n  play: async ({ canvasElement }): Promise<void> => {\n    // Ensures the chart is accessible via keyboard navigation\n    const element = canvasElement.querySelector('[role=\"region\"]');\n    if (element) {\n      element.setAttribute('tabindex', '0');\n    }\n  }\n};\n\n/**\n * Empty state story demonstrating how the component handles null chart data.\n * Includes appropriate ARIA attributes for screen readers.\n */\nexport const Empty: Readonly<Story> = {\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            id: 'region',\n            enabled: true\n          }\n        ]\n      }\n    }\n  },\n  args: {\n    chart: null,\n    chartType: 'natal' satisfies ChartType\n  }\n};\n\nconst customChartData: Readonly<ChartLike> = {\n  planets: [\n    { \n      name: 'Sun', \n      sign: 'Leo', \n      degree: 3, \n      position: 123, \n      house: 10\n    },\n    { \n      name: 'Moon', \n      sign: 'Taurus', \n      degree: 15, \n      position: 45, \n      house: 7\n    }\n  ],\n  houses: [\n    { \n      number: 1, \n      sign: 'Aries', \n      cusp: 0, \n      house: 1\n    },\n    { \n      number: 2, \n      sign: 'Taurus', \n      cusp: 30, \n      house: 2\n    }\n  ],\n  aspects: [\n    { \n      planet1: 'Sun',\n      planet2: 'Moon',\n      type: 'Conjunction',\n      orb: 2,\n      applying: 'Applying'\n    }\n  ],\n  angles: [\n    {\n      name: 'Ascendant',\n      sign: 'Aries',\n      degree: 0,\n      position: 0\n    }\n  ]\n};\n\n/**\n * Story with custom chart data demonstrating rich astrological information display.\n * Features comprehensive accessibility support with proper ARIA landmarks and roles.\n */\nexport const CustomData: Readonly<Story> = {\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            id: 'region',\n            enabled: true\n          }\n        ]\n      }\n    }\n  },\n  args: {\n    chart: customChartData,\n    chartType: 'natal' satisfies ChartType\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/ChartDisplay.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Planet[]`.","line":582,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":582,"endColumn":97,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `House[]`.","line":584,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":584,"endColumn":94,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Aspect[]`.","line":586,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":586,"endColumn":97,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Asteroid[]`.","line":588,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":588,"endColumn":103,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Angle[]`.","line":590,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":590,"endColumn":94,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/ChartHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/__tests__/ChartDisplay.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/ChartDisplay/__tests__/ChartDisplay.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport ChartDisplay from '../ChartDisplay';\n\n// Mock the astrologyService module\nvi.mock('@/services/astrologyService', () => ({\n  fetchChartData: vi.fn(),\n}));\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n    },\n  },\n});\n\ndescribe('ChartDisplay', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('renders chart component without errors', () => {\n    const mockChart: any = {\n      planets: { sun: { name: 'Sun', sign: 'Leo' } },\n      houses: [],\n      aspects: [],\n      asteroids: [],\n      angles: { ascendant: 0 }\n    };\n\n    render(\n      <QueryClientProvider client={queryClient}>\n        <ChartDisplay chart={mockChart} />\n      </QueryClientProvider>\n    );\n\n    expect(screen.getByText(/Chart Analysis/)).toBeDefined();\n  });\n\n  it('displays content when no chart is provided', () => {\n    render(\n      <QueryClientProvider client={queryClient}>\n        <ChartDisplay chart={null} />\n      </QueryClientProvider>\n    );\n\n  // Component shows sample data, ensure at least one chart analysis header rendered\n  expect(screen.getAllByText(/Chart Analysis/).length).toBeGreaterThanOrEqual(1);\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/__tests__/normalizeChart.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/ChartDisplay/__tests__/normalizeChart.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { normalizeChart, isChartLike, hasChartContent, getSignFromDegree, getRulerFromSign, getAspectOrb, type ChartLike } from '../normalizeChart';\n\n// Helper to deeply clone via JSON for immutability checks\nconst clone = <T>(obj: T): T => JSON.parse(JSON.stringify(obj));\n\ndescribe('normalizeChart utilities', () => {\n  it('identifies a loose chart-like object', () => {\n    const raw: ChartLike = { planets: { sun: { position: 123 } } };\n    expect(isChartLike(raw)).toBe(true);\n    expect(hasChartContent(raw)).toBe(true);\n  });\n\n  it('returns empty arrays for missing sections', () => {\n    const result = normalizeChart({ planets: {} });\n    expect(result.planets).toHaveLength(0); // empty object becomes []\n    expect(result.houses).toHaveLength(0);\n    expect(result.aspects).toHaveLength(0);\n    expect(result.asteroids).toHaveLength(0);\n    expect(result.angles).toHaveLength(0);\n  });\n\n  it('normalizes record-shaped planets into array form with derived sign + degree', () => {\n    const raw: ChartLike = { planets: { sun: { position: 150.5 }, moon: { degree: 33.2, sign: 'Taurus' } } };\n    const { planets } = normalizeChart(raw);\n    const sun = planets.find(p => p.name === 'Sun');\n    const moon = planets.find(p => p.name === 'Moon');\n    expect(sun).toBeDefined();\n    expect(sun?.sign).toBe(getSignFromDegree(150.5));\n    expect(sun?.degree).toBeCloseTo(150.5 % 30, 5);\n    expect(moon?.sign).toBe('Taurus'); // preserves explicit sign\n    expect(moon?.degree).toBeCloseTo(33.2 % 30, 5);\n  });\n\n  it('derives rulers and degrees for houses', () => {\n    const raw: ChartLike = { houses: [ { number: 1, cusp: 12 }, { number: 2, cusp: 47 } ] };\n    const { houses } = normalizeChart(raw);\n    expect(houses[0].degree).toBe(12 % 30);\n    expect(houses[0].ruler).toBe(getRulerFromSign(houses[0].sign));\n    expect(houses[1].degree).toBe(47 % 30);\n  });\n\n  it('parses aspect orb intelligently and applies default when missing', () => {\n    const raw: ChartLike = { aspects: [ { planet1: 'Sun', planet2: 'Moon', type: 'Conjunction', orb: '5.2' }, { planet1: 'Venus', planet2: 'Mars', type: 'Square' } ] };\n    const { aspects } = normalizeChart(raw);\n    const conj = aspects.find(a => a.type === 'Conjunction');\n    const square = aspects.find(a => a.type === 'Square');\n    expect(conj?.orb).toBeCloseTo(5.2, 5);\n    // Default for square should use getAspectOrb logic (8 for non conj/opp when not provided)\n    expect(square?.orb).toBe(getAspectOrb('Square'));\n  });\n\n  it('handles angles provided as mixed record', () => {\n    const raw: ChartLike = { angles: { ascendant: 0, mc: 182.4 } };\n    const { angles } = normalizeChart(raw);\n    const asc = angles.find(a => a.name === 'Ascendant');\n    const mc = angles.find(a => a.name?.toLowerCase() === 'mc');\n    expect(asc?.degree).toBeCloseTo(0, 5);\n    expect(mc?.degree).toBeCloseTo(182.4 % 30, 5);\n  });\n\n  it('is pure and does not mutate input object', () => {\n    const raw: ChartLike = { planets: { sun: { position: 10 } } };\n    const snapshot = clone(raw);\n    normalizeChart(raw);\n    expect(raw).toEqual(snapshot);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/__tests__/validateChart.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/ChartDisplay/__tests__/validateChart.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { validateChart } from '../validateChart';\n\ndescribe('validateChart', () => {\n  it('accepts object with at least one section', () => {\n    const result = validateChart({ planets: {} });\n    expect(result).not.toBeNull();\n  });\n\n  it('rejects object with no sections', () => {\n    const result = validateChart({});\n    expect(result).toBeNull();\n  });\n\n  it('rejects non-object input', () => {\n    const result = validateChart(null);\n    expect(result).toBeNull();\n  });\n\n  it('accepts minimal valid planets object with position', () => {\n    const result = validateChart({ planets: { Sun: { position: 123.45 } } });\n    expect(result).not.toBeNull();\n  });\n\n  it('rejects houses array longer than 12', () => {\n    const houses = Array.from({ length: 13 }, (_, i) => ({ number: i + 1, cusp: i * 10, sign: 'Aries' }));\n    const result = validateChart({ houses });\n    expect(result).toBeNull();\n  });\n\n  it('rejects house with invalid cusp > 360', () => {\n    const houses = [{ number: 1, cusp: 400, sign: 'Aries' }];\n    const result = validateChart({ houses });\n    expect(result).toBeNull();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/normalizeChart.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/sampleData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/AngleTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/AspectTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/HouseTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/PlanetTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/AngleTable.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/ChartDisplay/tables/__tests__/AngleTable.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen, within } from '@testing-library/react';\nimport { AngleTable } from '../';\n\nconst sample = [\n  { name: 'Ascendant', sign: 'Leo', degree: '15.00' },\n  { name: 'Midheaven', sign: 'Taurus', degree: '02.50' }\n];\n\nconst fallbackSample = [\n  { name: 'UnknownAngle', sign: 'UnknownSign', degree: '10.00' }\n];\n\ndescribe('AngleTable', () => {\n  it('renders angle rows with symbols', () => {\n    const { container } = render(<AngleTable data={sample} />);\n    const table = container.querySelector('table');\n    expect(table).not.toBeNull();\n    const utils = within(table as HTMLElement);\n    expect(utils.getAllByText('Ascendant').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('Midheaven').length).toBeGreaterThan(0);\n  });\n\n  it('renders fallback symbols for unknown angle/sign', () => {\n    const { container } = render(<AngleTable data={fallbackSample} />);\n    const table = container.querySelector('table');\n    expect(table).not.toBeNull();\n    const utils = within(table as HTMLElement);\n    expect(utils.getAllByText('●').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('○').length).toBeGreaterThan(0);\n  });\n\n  it('renders nothing for empty data', () => {\n    const { container } = render(<AngleTable data={[]} />);\n    expect(container.firstChild).toBeNull();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/AspectTable.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/ChartDisplay/tables/__tests__/AspectTable.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen, within } from '@testing-library/react';\nimport { AspectTable } from '../';\n\nconst sample = [\n  { planet1: 'Sun', planet2: 'Moon', type: 'Conjunction', orb: '1.2', applying: 'Applying' },\n  { planet1: 'Mars', planet2: 'Venus', type: 'Trine', orb: '0.05', applying: 'Separating' },\n  { planet1: 'Jupiter', planet2: 'Saturn', type: 'Square', orb: '0.0', applying: 'Exact' }\n];\n\nconst fallbackSample = [\n  { planet1: 'Foo', planet2: 'Bar', type: 'WeirdAspect', orb: '2.0', applying: 'Separating' }\n];\n\ndescribe('AspectTable', () => {\n  it('renders aspects with symbols and statuses', () => {\n    const { container } = render(<AspectTable data={sample} />);\n    const table = container.querySelector('table');\n    expect(table).not.toBeNull();\n    const utils = within(table as HTMLElement);\n    expect(utils.getAllByText('Conjunction').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('Trine').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('Square').length).toBeGreaterThan(0);\n    const applyingEl = utils.getAllByText('Applying')[0];\n    const separatingEl = utils.getAllByText('Separating')[0];\n    const exactEl = utils.getAllByText('Exact')[0];\n    expect(applyingEl.className).toMatch(/text-green-400/);\n    expect(separatingEl.className).toMatch(/text-cosmic-silver/);\n    expect(exactEl.className).toMatch(/text-cosmic-gold/);\n    expect((table as HTMLElement).textContent).toContain('☌');\n    expect((table as HTMLElement).textContent).toContain('△');\n    expect((table as HTMLElement).textContent).toContain('□');\n  });\n\n  it('falls back to generic aspect symbol for unknown type', () => {\n    const { container } = render(<AspectTable data={fallbackSample} />);\n    const table = container.querySelector('table');\n    expect(table).not.toBeNull();\n    expect((table as HTMLElement).textContent).toContain('◇');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/HouseTable.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/ChartDisplay/tables/__tests__/HouseTable.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen, within } from '@testing-library/react';\nimport { HouseTable } from '../';\n\nconst sample = [\n  { number: 1, sign: 'Aries', cuspDegree: '0.00', planetsInHouse: '' },\n  { number: 2, sign: 'Taurus', cuspDegree: '29.59', planetsInHouse: 'Venus' }\n];\n\ndescribe('HouseTable', () => {\n  it('renders houses with signs and degrees', () => {\n    const { container } = render(<HouseTable data={sample} />);\n    const table = container.querySelector('table');\n    expect(table).not.toBeNull();\n    const utils = within(table as HTMLElement);\n    expect(utils.getAllByText('1').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('Aries').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('Taurus').length).toBeGreaterThan(0);\n  });\n\n  it('returns null (renders nothing) for empty data', () => {\n    const { container } = render(<HouseTable data={[]} />);\n    expect(container.firstChild).toBeNull();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/PlanetTable.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/ChartDisplay/tables/__tests__/PlanetTable.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen, within } from '@testing-library/react';\nimport { PlanetTable } from '../';\n\nconst sample = [\n  { name: 'Sun', sign: 'Aries', degree: '10.25', house: 1, retrograde: false },\n  { name: 'Moon', sign: 'Taurus', degree: '23.50', house: 2, retrograde: false }\n];\n\nconst fallbackSample = [\n  { name: 'FooPlanet', sign: 'UnknownSign', degree: '12.00', house: 3 }\n];\n\ndescribe('PlanetTable', () => {\n  it('renders planet rows with symbols and formatted degrees', () => {\n    const { container } = render(<PlanetTable data={sample} />);\n    const table = container.querySelector('table');\n    expect(table).not.toBeNull();\n    const utils = within(table as HTMLElement);\n    expect(utils.getAllByText('Sun').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('Moon').length).toBeGreaterThan(0);\n    expect(utils.getAllByText(/°/).length).toBeGreaterThan(0);\n    expect(utils.getAllByText('☉').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('☽').length).toBeGreaterThan(0);\n  });\n\n  it('falls back to generic symbols for unknown planet/sign', () => {\n    const { container } = render(<PlanetTable data={fallbackSample} />);\n    const table = container.querySelector('table');\n    expect(table).not.toBeNull();\n    const utils = within(table as HTMLElement);\n    expect(utils.getAllByText('FooPlanet').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('●').length).toBeGreaterThan(0);\n    expect(utils.getAllByText('○').length).toBeGreaterThan(0);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/tableUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":53,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":53,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Centralized symbol maps (superset merged from ChartDisplay + previous placeholder)\nexport const PLANET_SYMBOLS: Record<string, string> = {\n\tSun: '☉', Moon: '☽', Mercury: '☿', Venus: '♀', Mars: '♂', Jupiter: '♃', Saturn: '♄',\n\tUranus: '♅', Neptune: '♆', Pluto: '♇', 'North Node': '☊', 'South Node': '☋',\n\tAscendant: 'AC', Descendant: 'DC', Midheaven: 'MC', IC: 'IC', MC: 'MC',\n\t'Imum Coeli': 'IC', 'Vertex': 'Vx', 'Antivertex': 'AVx'\n};\n\nexport const SIGN_SYMBOLS: Record<string, string> = {\n\tAries: '♈', Taurus: '♉', Gemini: '♊', Cancer: '♋', Leo: '♌', Virgo: '♍', Libra: '♎',\n\tScorpio: '♏', Sagittarius: '♐', Capricorn: '♑', Aquarius: '♒', Pisces: '♓'\n};\n\nexport const ASTEROID_SYMBOLS: Record<string, string> = {\n\tCeres: '⚳', Pallas: '⚴', Juno: '⚵', Vesta: '⚶', Chiron: '⚷', Lilith: '⚸',\n\t'Lilith (Mean)': '⚸', 'Lilith (True)': '⚸', Eros: '♡', Psyche: '🦋', Fortuna: '⊗',\n\tSedna: '♅₂', Eris: '⚸₂', default: '⁂'\n};\n\nexport const ASPECT_SYMBOLS: Record<string, string> = {\n\tConjunction: '☌', Opposition: '☍', Trine: '△', Square: '□', Sextile: '⚹', Quincunx: '⚻',\n\tSemisextile: '⚺', Semisquare: '∠', Sesquiquadrate: '⚼', Quintile: 'Q', Biquintile: 'bQ'\n};\n\nexport type PlanetInterpretationFn = (planet: string, sign: string) => string;\n\nexport const getPlanetSymbol = (name: string): string => {\n\tif (typeof name !== 'string' || name.length === 0) return '●';\n\treturn (PLANET_SYMBOLS[name] !== undefined && PLANET_SYMBOLS[name].length > 0)\n\t\t? PLANET_SYMBOLS[name]\n\t\t: (ASTEROID_SYMBOLS[name] !== undefined && ASTEROID_SYMBOLS[name].length > 0)\n\t\t\t? ASTEROID_SYMBOLS[name]\n\t\t\t: '●';\n};\nexport const getSignSymbol = (sign: string): string => {\n\tif (typeof sign !== 'string' || sign.length === 0) return '○';\n\treturn (SIGN_SYMBOLS[sign] !== undefined && SIGN_SYMBOLS[sign].length > 0) ? SIGN_SYMBOLS[sign] : '○';\n};\nexport const getAspectSymbol = (aspect: string): string => {\n\tif (typeof aspect !== 'string' || aspect.length === 0) return '◇';\n\tif (ASPECT_SYMBOLS[aspect] !== undefined && ASPECT_SYMBOLS[aspect].length > 0) return ASPECT_SYMBOLS[aspect];\n\tconst cap = capitalize(aspect);\n\tif (ASPECT_SYMBOLS[cap] !== undefined && ASPECT_SYMBOLS[cap].length > 0) return ASPECT_SYMBOLS[cap];\n\treturn '◇';\n};\nexport const getAsteroidSymbol = (name: string): string => {\n\tif (typeof name !== 'string' || name.length === 0) return ASTEROID_SYMBOLS.default;\n\treturn (ASTEROID_SYMBOLS[name] !== undefined && ASTEROID_SYMBOLS[name].length > 0)\n\t\t? ASTEROID_SYMBOLS[name]\n\t\t: ASTEROID_SYMBOLS.default;\n};\n\nfunction capitalize(s: string){ return (typeof s === 'string' && s.length > 0) ? s[0].toUpperCase()+s.slice(1).toLowerCase() : s; }\n\n// Lightweight interpretation subset (avoid pulling heavy logic)\nconst INTERPRETATIONS: Record<string, Record<string, string>> = {\n\tSun: {\n\t\tAries: 'Bold leadership drive', Taurus: 'Grounded creative force', Gemini: 'Curious communicator',\n\t\tCancer: 'Protective and nurturing', Leo: 'Radiant self-expression', Virgo: 'Analytical purpose',\n\t\tLibra: 'Seeks relational harmony', Scorpio: 'Intense transformative will', Sagittarius: 'Adventurous seeker',\n\t\tCapricorn: 'Ambitious achiever', Aquarius: 'Innovative visionary', Pisces: 'Compassionate dreamer'\n\t},\n\tMoon: {\n\t\tAries: 'Fast, reactive emotions', Taurus: 'Comfort in stability', Gemini: 'Changeable mental moods',\n\t\tCancer: 'Deep emotional attunement', Leo: 'Expressive heart-centered feelings', Virgo: 'Practical emotional processing',\n\t\tLibra: 'Needs balance & partnership', Scorpio: 'Intense emotional depth', Sagittarius: 'Restless emotional freedom',\n\t\tCapricorn: 'Reserved emotional control', Aquarius: 'Detached intuitive insight', Pisces: 'Fluid empathic sensitivity'\n\t}\n};\n\nexport const getPlanetInterpretation: PlanetInterpretationFn = (planet, sign) => {\n\tconst interpPlanet = typeof planet === 'string' ? planet : 'Unknown';\n\tconst interpSign = typeof sign === 'string' ? sign : 'Unknown';\n\tconst planetMap = INTERPRETATIONS[interpPlanet];\n\t\tif (planetMap?.[interpSign] !== undefined && planetMap[interpSign].length > 0) {\n\t\treturn planetMap[interpSign];\n\t}\n\treturn `${interpPlanet} in ${interpSign}`;\n};\n\n// Degree formatting helper used across tables\nexport const formatDegree = (raw: string | number): string => {\n\tif (typeof raw === 'number') return raw.toFixed(2);\n\tif (/^\\d+\\.\\d+°?$/.test(raw)) return raw.replace(/°$/, '');\n\treturn raw;\n};\n\n// Aspect status color helper (UI class only)\nexport const aspectStatusClass = (status: string): string => {\n\tif (typeof status === 'string' && status === 'Exact') return 'text-cosmic-gold';\n\tif (typeof status === 'string' && status === 'Applying') return 'text-green-400';\n\treturn 'text-cosmic-silver';\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/validateChart.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartPreferences.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":109,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":109,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":123,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":123,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useToast } from './ToastProvider';\nimport { useAuth } from '@cosmichub/auth';\nimport { db } from '@cosmichub/config/firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { componentLogger } from '../utils/componentLogger';\n\nimport { \n  type ChartStyle,\n  type HouseSystem,\n  type ThemeOption,\n  type ChartPreferencesData,\n  isChartPreferencesData,\n  DEFAULT_PREFERENCES\n} from '../types/preferences';\n\n// Stable user id validator extracted outside component so it isn't recreated each render\nconst isValidUserId = (userId: unknown): userId is string => typeof userId === 'string' && userId.length > 0;\n\nexport interface ChartPreferencesProps {\n  /** Optional override to preload preferences (primarily for Storybook / tests) */\n  initialPreferences?: ChartPreferencesData;\n  /** Called after successful save (for external analytics) */\n  onSaved?: (prefs: ChartPreferencesData) => void;\n}\n\nconst ChartPreferences: React.FC<ChartPreferencesProps> = function ChartPreferences({ initialPreferences, onSaved }) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [preferences, setPreferences] = useState<ChartPreferencesData>(initialPreferences ?? DEFAULT_PREFERENCES);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingPreferences, setIsLoadingPreferences] = useState(true);\n\n  // Derived stable user id & flags\n  const userId = user?.uid;\n  const hasValidUserId = userId !== undefined && userId !== null && typeof userId === 'string' && userId.length > 0;\n  const saveAriaLabel = isLoading === true\n    ? 'Saving preferences'\n    : hasValidUserId === true\n      ? 'Save preferences'\n      : 'Sign in to save preferences';\n  const saveButtonDisabled = hasValidUserId === false || isLoading === true;\n\n  const loadUserPreferences = useCallback(async (): Promise<void> => {\n    const currentUid = user?.uid;\n    if (!isValidUserId(currentUid)) {\n      return;\n    }\n\n    try {\n      setIsLoadingPreferences(true);\n      if (currentUid === undefined || currentUid === null) {\n        return;\n      }\n      const userDocRef = doc(db, 'users', currentUid);\n      const userDoc = await getDoc(userDocRef);\n\n      const isValidUserData = (data: unknown): data is { chartPreferences: ChartPreferencesData } => {\n        if (data === null || data === undefined || typeof data !== 'object') return false;\n        const obj = data as { chartPreferences?: unknown };\n        return 'chartPreferences' in obj && \n               obj.chartPreferences !== null && \n               obj.chartPreferences !== undefined && \n               isChartPreferencesData(obj.chartPreferences);\n      };\n\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        if (isValidUserData(userData)) {\n          setPreferences(userData.chartPreferences);\n        } else {\n          componentLogger.warn('ChartPreferences', 'Invalid preferences data in Firestore', userData?.chartPreferences);\n          setPreferences(DEFAULT_PREFERENCES);\n        }\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error \n        ? error.message \n        : 'Failed to load user preferences';\n      \n      componentLogger.error('ChartPreferences', errorMessage, error);\n      toast({\n        description: errorMessage,\n        status: 'error'\n      });\n    } finally {\n      setIsLoadingPreferences(false);\n    }\n    // NOTE: deps explanation:\n    // userId: drives Firestore path & validity checks (derived above for stability)\n    // toast: stable from provider; included for clarity (fires notifications on errors)\n    // db/doc/getDoc imported functions are stable and excluded.\n  }, [toast, user?.uid]);\n\n  // Load user preferences on mount\n  useEffect(() => {\n    const userId = user?.uid;\n    // Explicit check for userId existence and validity\n    if (userId === null || userId === undefined || typeof userId !== 'string' || userId.length === 0) {\n      setIsLoadingPreferences(false);\n      return;\n    }\n    \n    // Create an abort controller to handle cleanup\n    const abortController = new AbortController();\n    \n    // Wrap async operation\n    const loadPrefs = async () => {\n      try {\n        await loadUserPreferences();\n      } catch (error) {\n        // Only handle error if not aborted\n        if (!abortController.signal.aborted) {\n          componentLogger.error('ChartPreferences', 'Failed to load preferences on mount', error);\n        }\n      }\n    };\n\n    void loadPrefs();\n\n    // Cleanup function\n    return () => {\n      abortController.abort();\n    };\n    // deps: userId (drives whether to attempt load) + loadUserPreferences (async loader)\n  }, [loadUserPreferences, user?.uid]);\n\n  const handlePreferenceChange = useCallback(<K extends keyof ChartPreferencesData>(\n    key: K,\n    value: ChartPreferencesData[K]\n  ): void => {\n    setPreferences(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    // deps: none (pure state updater using functional set)\n  }, []);\n\n  const handleSavePreferences = useCallback(async (): Promise<void> => {\n    const userId = user?.uid;\n    // Explicit validation of userId with type guard\n    if (userId === null || userId === undefined || typeof userId !== 'string' || userId.length === 0) {\n      toast({\n        description: 'You must be logged in to save preferences',\n        status: 'error'\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Save preferences to Firestore\n      const userDocRef = doc(db, 'users', userId);\n      await setDoc(userDocRef, {\n        chartPreferences: preferences,\n        updatedAt: new Date()\n      }, { merge: true });\n\n      toast({\n        description: 'Preferences saved successfully',\n        status: 'success'\n      });\n    } catch (error) {\n      // Default error message\n      let errorMessage = 'Failed to save preferences. Please try again.';\n      \n      // Error instance with message\n      if (error instanceof Error && error.message !== undefined && error.message !== null && error.message.length > 0) {\n        errorMessage = error.message;\n      } \n      // String error\n      else if (typeof error === 'string' && error.length > 0) {\n        errorMessage = error;\n      }\n      // Unknown error type - use default message but log full error\n      else if (error !== null && error !== undefined) {\n        componentLogger.warn('ChartPreferences', 'Received non-standard error type', { error });\n      }\n      \n      componentLogger.error('ChartPreferences', 'Failed to save preferences', { error, preferences });\n      toast({\n        description: errorMessage,\n        status: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n    if (onSaved !== undefined && onSaved !== null) {\n      onSaved(preferences);\n    }\n    // deps: preferences (data saved), userId (path), toast (notifications), onSaved (callback)\n  }, [preferences, toast, onSaved, user?.uid]);\n\n  return (\n    <div className=\"space-y-6\" aria-live=\"polite\" role=\"form\" aria-labelledby=\"chart-prefs-heading\">\n      <h2 id=\"chart-prefs-heading\" className=\"sr-only\">Chart Preferences</h2>\n      {isLoadingPreferences ? (\n  <Card title=\"Chart Preferences\" aria-busy=\"true\">\n          <div className=\"flex items-center justify-center py-8\" role=\"status\" aria-label=\"Loading user chart preferences\">\n            <div className=\"text-cosmic-silver\">Loading preferences…</div>\n          </div>\n        </Card>\n      ) : (\n  <Card title=\"Chart Preferences\">\n          <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"chartStyle\" className=\"block text-cosmic-silver mb-2\">\n              Chart Style\n            </label>\n            <select\n              id=\"chartStyle\"\n              value={preferences.chartStyle}\n              onChange={(e) => handlePreferenceChange('chartStyle', e.target.value as ChartStyle)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select chart style\"\n            >\n              <option value=\"western\">Western Tropical</option>\n              <option value=\"vedic\">Vedic Sidereal</option>\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"houseSystem\" className=\"block text-cosmic-silver mb-2\">\n              House System\n            </label>\n            <select\n              id=\"houseSystem\"\n              value={preferences.houseSystem}\n              onChange={(e) => handlePreferenceChange('houseSystem', e.target.value as HouseSystem)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select house system\"\n            >\n              <option value=\"placidus\">Placidus</option>\n              <option value=\"whole-sign\">Whole Sign</option>\n              <option value=\"equal-house\">Equal House</option>\n            </select>\n          </div>\n\n                    <div>\n            <label htmlFor=\"theme\" className=\"block text-cosmic-silver mb-2\">\n              Theme\n            </label>\n            <select\n              id=\"theme\"\n              value={preferences.theme}\n              onChange={(e) => handlePreferenceChange('theme', e.target.value as ThemeOption)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select theme\"\n            >\n              <option value=\"dark\">Dark</option>\n              <option value=\"light\">Light</option>\n              <option value=\"auto\">Auto</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"notifications\"\n              checked={preferences.notifications}\n              onChange={(e) => handlePreferenceChange('notifications', e.target.checked)}\n              className=\"rounded\"\n              aria-describedby=\"notifications-hint\"\n            />\n            <label htmlFor=\"notifications\" className=\"text-cosmic-silver\">\n              Email notifications\n            </label>\n            <span id=\"notifications-hint\" className=\"sr-only\">Enable or disable email notification features</span>\n          </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"text-center\">\n        <Button \n          onClick={() => { void handleSavePreferences(); }} \n          variant=\"primary\"\n          disabled={saveButtonDisabled}\n          aria-disabled={saveButtonDisabled}\n          aria-busy={isLoading}\n          aria-label={saveAriaLabel}\n        >\n          {isLoading ? 'Saving...' : 'Save Preferences'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChartPreferences;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Contact.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport default function Contact() {\n  return (\n    <div className=\"max-w-2xl mx-auto mt-16 p-8 rounded-2xl bg-purple-900/90 text-yellow-100 shadow-xl\">\n      <h1 className=\"text-yellow-300 mb-4 font-serif text-2xl font-bold\">Contact Us</h1>\n      <p className=\"text-base mb-2\">\n        Have questions or feedback? Reach out to us at <a className=\"text-yellow-300 hover:underline\" href=\"mailto:support@cosmichub.com\">support@cosmichub.com</a>.\n      </p>\n      <p className=\"text-sm text-yellow-300\">We usually respond within 1-2 business days.</p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/CosmicLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EducationalContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EducationalTooltip.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport { FaQuestionCircle, FaInfoCircle } from 'react-icons/fa';\n\ninterface EducationalTooltipProps {\n  title: string;\n  description: string;\n  examples?: string[];\n  tier?: 'free' | 'premium' | 'elite';\n  children?: React.ReactNode;\n  placement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport const EducationalTooltip = React.memo(React.forwardRef<HTMLDivElement, EducationalTooltipProps>(({ \n  title,\n  description,\n  examples = [],\n  tier,\n  children,\n  placement = 'top'\n}) => {\n  const getTierColor = (tier?: 'free' | 'premium' | 'elite') => {\n    switch (tier) {\n      case 'elite': return 'gold-500';\n      case 'premium': return 'purple-500';\n      case 'free': return 'gray-500';\n      default: return 'gray-500';\n    }\n  };\n\n  const tooltipContent = (\n    <div className=\"flex flex-col space-y-2 max-w-[300px] p-2\">\n      <div className=\"flex justify-between w-full\">\n        <p className=\"text-sm font-bold text-cosmic-silver\">{title}</p>\n  {(tier !== null && tier !== undefined) && (\n          <span className={`bg-${getTierColor(tier)}/20 text-${getTierColor(tier)} px-2 py-1 rounded text-xs`}>\n            {tier === 'elite' ? '👑' : tier === 'premium' ? '🌟' : '📖'} {tier}\n          </span>\n        )}\n      </div>\n      <p className=\"text-xs text-cosmic-silver/80\">{description}</p>\n  {(Array.isArray(examples) && examples.length > 0) && (\n        <div className=\"flex flex-col space-y-1\">\n          <p className=\"text-xs font-bold\">Examples:</p>\n          {examples.map((example, index) => (\n            <p key={index} className=\"text-xs text-cosmic-silver/60\">• {example}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <Tooltip.Root>\n      <Tooltip.Trigger asChild={children !== null && children !== undefined}>\n  {(children ?? (\n          <button \n            className=\"inline-block cursor-help border-none bg-transparent p-0\" \n            aria-label={`Learn more about ${title}`}\n            type=\"button\"\n          >\n            <FaQuestionCircle className=\"text-sm text-gray-400\" />\n          </button>\n  ))}\n      </Tooltip.Trigger>\n      <Tooltip.Portal>\n        <Tooltip.Content\n          side={placement}\n          className=\"p-2 border rounded-md shadow-lg bg-cosmic-blue/80 backdrop-blur-md border-cosmic-silver/20 text-cosmic-silver\"\n        >\n          {tooltipContent}\n          <Tooltip.Arrow className=\"fill-cosmic-blue/80\" />\n        </Tooltip.Content>\n      </Tooltip.Portal>\n    </Tooltip.Root>\n  );\n}));\n\nEducationalTooltip.displayName = 'EducationalTooltip';\n\nexport const InfoIcon: React.FC<{ tooltip: string }> = React.memo(({ tooltip }) => (\n  <Tooltip.Root>\n    <Tooltip.Trigger asChild>\n      <button \n        className=\"inline-block ml-1 cursor-help border-none bg-transparent p-0\"\n        aria-label=\"More information\"\n        type=\"button\"\n      >\n        <FaInfoCircle className=\"text-sm text-blue-400\" />\n      </button>\n    </Tooltip.Trigger>\n    <Tooltip.Portal>\n      <Tooltip.Content\n        side=\"top\"\n        className=\"bg-cosmic-blue/80 backdrop-blur-md border border-cosmic-silver/20 rounded-md shadow-lg p-2 text-cosmic-silver max-w-[300px]\"\n      >\n        <p className=\"text-sm\">{tooltip}</p>\n        <Tooltip.Arrow className=\"fill-cosmic-blue/80\" />\n      </Tooltip.Content>\n    </Tooltip.Portal>\n  </Tooltip.Root>\n));\n\nInfoIcon.displayName = 'InfoIcon';","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EnvironmentStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EphemerisPerformanceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":17,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance dashboard component for ephemeris operations.\n * \n * Provides real-time monitoring of cache hit rates, latency,\n * and other performance metrics for the ephemeris service.\n */\n\nimport React from 'react';\nimport { useEphemerisPerformanceMetrics } from '../services/ephemeris-performance';\n\n/**\n * Performance dashboard component for development/debugging.\n */\nexport const EphemerisPerformanceDashboard: React.FC = () => {\n  const { metrics, refreshMetrics, logSummary } = useEphemerisPerformanceMetrics();\n\n  const getCacheHitRateColor = (rate: number) => {\n    if (rate >= 80) return 'text-green-600';\n    if (rate >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getLatencyColor = (latency: number) => {\n    if (latency <= 100) return 'text-green-600';\n    if (latency <= 500) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-medium\">Ephemeris Performance</h3>\n        <div className=\"space-x-2\">\n          <button\n            onClick={refreshMetrics}\n            className=\"px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n            aria-label=\"Refresh performance metrics\"\n          >\n            Refresh\n          </button>\n          <button\n            onClick={logSummary}\n            className=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200\"\n            aria-label=\"Log performance summary to console\"\n          >\n            Log Summary\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div>\n          <div className=\"text-sm text-gray-500\">Requests</div>\n          <div className=\"text-xl font-semibold\" aria-label={`Total requests: ${metrics.totalRequests}`}>\n            {metrics.totalRequests}\n          </div>\n        </div>\n\n        <div>\n          <div className=\"text-sm text-gray-500\">Cache Hit Rate</div>\n          <div \n            className={`text-xl font-semibold ${getCacheHitRateColor(metrics.cacheHitRate)}`}\n            aria-label={`Cache hit rate: ${metrics.cacheHitRate.toFixed(1)} percent`}\n          >\n            {metrics.cacheHitRate.toFixed(1)}%\n          </div>\n        </div>\n\n        <div>\n          <div className=\"text-sm text-gray-500\">Avg Latency</div>\n          <div \n            className={`text-xl font-semibold ${getLatencyColor(metrics.averageLatency)}`}\n            aria-label={`Average latency: ${metrics.averageLatency.toFixed(0)} milliseconds`}\n          >\n            {metrics.averageLatency.toFixed(0)}ms\n          </div>\n        </div>\n\n        <div>\n          <div className=\"text-sm text-gray-500\">Errors</div>\n          <div \n            className={`text-xl font-semibold ${metrics.errors > 0 ? 'text-red-600' : 'text-green-600'}`}\n            aria-label={`Error count: ${metrics.errors}`}\n          >\n            {metrics.errors}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 text-xs text-gray-500\">\n        Last updated: {metrics.lastUpdated.toLocaleTimeString()}\n      </div>\n\n      {/* Performance indicators */}\n      <div className=\"mt-4 space-y-2\">\n        {metrics.cacheHitRate < 80 && (\n          <div className=\"text-sm text-yellow-600 bg-yellow-50 p-2 rounded\">\n            ⚠️ Cache hit rate is below target (80%). Consider increasing cache TTL or warming cache.\n          </div>\n        )}\n        \n        {metrics.averageLatency > 100 && (\n          <div className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n            🚨 Average latency exceeds target (100ms). Check ephemeris server performance.\n          </div>\n        )}\n\n        {metrics.errors > 0 && (\n          <div className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n            ❌ {metrics.errors} error(s) detected. Check console logs for details.\n          </div>\n        )}\n\n        {metrics.cacheHitRate >= 80 && metrics.averageLatency <= 100 && metrics.errors === 0 && (\n          <div className=\"text-sm text-green-600 bg-green-50 p-2 rounded\">\n            ✅ All performance targets met!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EphemerisPerformanceDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorBoundary.stories.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":17,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport ErrorBoundary from './ErrorBoundary';\nimport './ErrorBoundary.stories.css';\n\nconst meta: Meta<typeof ErrorBoundary> = {\n  title: 'Feedback/ErrorBoundary (Astro)'.replace(/\\s+/g,' '),\n  component: ErrorBoundary,\n  args: {\n    name: 'DemoBoundary'\n  }\n};\nexport default meta;\n\ntype Story = StoryObj<typeof ErrorBoundary>;\n\nconst Boom: React.FC<{ mode?: 'render' | 'effect' }>= ({ mode='render' }) => {\n  const [count,setCount] = useState(0);\n  if (mode==='render' && count>1) {\n    throw new Error('Render explosion after 2 clicks');\n  }\n  return (\n  <div className=\"error-boundary-demo\">\n      <p>Click the button to increment. After 2 clicks it will throw.</p>\n      <button onClick={()=>setCount(c=>c+1)}>Clicks: {count}</button>\n    </div>\n  );\n};\n\nexport const Basic: Story = {\n  render: (args)=> (\n    <ErrorBoundary {...args}>\n      <Boom />\n    </ErrorBoundary>\n  )\n};\n\nexport const WithFallback: Story = {\n  render: (args)=> (\n    <ErrorBoundary {...args} fallback={<div className=\"error-boundary-fallback\">Custom fallback UI</div>}>\n      <Boom />\n    </ErrorBoundary>\n  )\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":48,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":48,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":52,"endColumn":9},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":54,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":54,"endColumn":30},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":66,"column":32,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":66,"endColumn":34,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[2229,2231],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":69,"column":59,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":69,"endColumn":61,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[2391,2393],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":78,"column":43,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":78,"endColumn":45,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[2966,2968],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { isDevelopment, devConsole } from '../config/environment';\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  name?: string;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\n/**\n * Enhanced Error Boundary for Astro app with cosmic theming\n * This will be migrated to use @cosmichub/ui ErrorBoundary\n */\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): { hasError: boolean; error: Error } {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    devConsole.error?.('Error:', error);\n    devConsole.error?.('Error Info:', errorInfo);\n    \n    // Check if this is a serialization error and log additional context\n    const message = error.message;\n    if (typeof message === 'string' && (message.includes('serialization') || message.includes('deserialize'))) {\n      devConsole.warn?.('⚠️ Serialization Error Detected', {\n        errorType: 'SERIALIZATION_ERROR',\n        component: this.props.name ?? 'unknown',\n        message: error.message,\n        stack: error.stack?.slice(0, 500) // Truncate for logging\n      });\n    }\n    \n    this.props.onError?.(error, errorInfo);\n  }\n\n  private handleRetry = () => {\n    this.setState({ hasError: false, error: null });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-[200px] flex items-center justify-center p-8\">\n          <div className=\"max-w-md w-full bg-cosmic-dark/80 backdrop-blur-sm rounded-lg border border-cosmic-silver/20 p-6 text-center\">\n            <div className=\"text-4xl mb-4\">⭐</div>\n            <h2 className=\"text-xl font-bold text-cosmic-gold mb-2\">\n              Something went wrong\n            </h2>\n            <p className=\"text-cosmic-silver text-sm mb-6\">\n              {this.props.name != null ? `Error in ${this.props.name}` : 'An unexpected error occurred'}\n            </p>\n            \n            {isDevelopment() === true && this.state.error != null && (\n              <details className=\"mb-6 text-left\">\n                <summary className=\"cursor-pointer text-sm font-medium text-cosmic-silver/80 hover:text-cosmic-silver\">\n                  Technical Details\n                </summary>\n                <div className=\"mt-2 p-3 bg-cosmic-dark rounded border border-cosmic-silver/10 text-xs font-mono text-red-400 overflow-auto max-h-32\">\n                  <div className=\"font-semibold text-red-300\">\n                    {this.state.error.message}\n                  </div>\n                  {this.state.error.stack != null && (\n                    <pre className=\"mt-2 whitespace-pre-wrap text-red-400/80\">\n                      {this.state.error.stack}\n                    </pre>\n                  )}\n                </div>\n              </details>\n            )}\n\n            <div className=\"flex gap-3 justify-center\">\n              <button\n                onClick={this.handleRetry}\n                className=\"px-4 py-2 bg-cosmic-purple hover:bg-cosmic-purple/80 text-white text-sm rounded transition-colors\"\n              >\n                Try Again\n              </button>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"px-4 py-2 border border-cosmic-silver/30 hover:bg-cosmic-silver/10 text-cosmic-silver text-sm rounded transition-colors\"\n              >\n                Reload Page\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorTestComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/FeatureGuard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":56,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":56,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":59,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":59,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":67,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport * as Dialog from '@radix-ui/react-dialog';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth, useSubscription } from '@cosmichub/auth';\n\n// Temporary inline constants to avoid import issues\nconst FEATURE_KEYS = {\n  SYNSTRY_ANALYSIS: 'synastry_analysis',\n  AI_INTERPRETATION: 'ai_interpretation',\n  TRANSIT_ANALYSIS: 'transit_analysis',\n  MULTI_SYSTEM_ANALYSIS: 'multi_system_analysis'\n} as const;\n\ntype FeatureKey = typeof FEATURE_KEYS[keyof typeof FEATURE_KEYS];\n\nconst isFeatureKey = (value: string): value is FeatureKey =>\n  Object.values(FEATURE_KEYS).includes(value as FeatureKey);\n\ninterface FeatureGuardProps {\n  children: React.ReactNode;\n  requiredTier: 'premium' | 'elite';\n  feature: string;\n  upgradeMessage?: string;\n  showPreview?: boolean;\n}\n\nexport const FeatureGuard: React.FC<FeatureGuardProps> = ({ children, requiredTier, feature, upgradeMessage, showPreview = true }) => {\n  const { user } = useAuth();\n  const { userTier, hasFeature } = useSubscription();\n  const navigate = useNavigate();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Derive safe user tier string to satisfy strict boolean checks when calling string methods\n  const safeUserTier: string = (typeof userTier === 'string' && userTier.length > 0) ? userTier : 'free';\n\n  if (typeof hasFeature === 'function' && hasFeature(feature) === true) {\n    return <>{children}</>;\n  }\n\n  const featureMap: Record<string, { icon: string; title: string; description: string; benefits: string[]; examples: string[]; }> = {\n    [FEATURE_KEYS.SYNSTRY_ANALYSIS]: { icon: '👫', title: 'Synastry Compatibility Analysis', description: 'Compare two birth charts to understand relationship dynamics and compatibility patterns.', benefits: ['Romantic compatibility insights','Friendship and family dynamics','Communication style analysis','Emotional compatibility patterns','Challenge and growth areas'], examples: ['Compare Venus-Mars connections for romance','Analyze Moon aspects for emotional harmony','Check Mercury contacts for communication','Examine house overlays for life area focus'] },\n    [FEATURE_KEYS.AI_INTERPRETATION]: { icon: '🧠', title: 'AI-Powered Chart Interpretation', description: 'Advanced artificial intelligence analyzes your chart patterns to provide personalized insights.', benefits: ['Deep personality analysis','Life purpose guidance','Career path recommendations','Relationship pattern insights','Custom question answering'], examples: ['Ask specific questions about your chart','Get detailed personality breakdowns','Understand complex aspect patterns','Receive personalized guidance'] },\n    [FEATURE_KEYS.TRANSIT_ANALYSIS]: { icon: '📈', title: 'Transit Analysis & Timing', description: 'Track current planetary movements and their effects on your natal chart for predictive insights.', benefits: ['Current life phase understanding','Opportunity timing windows','Challenge period awareness','Growth cycle tracking','Decision-making guidance'], examples: ['Saturn return timing and effects','Jupiter opportunities periods','Eclipse activation points','Mercury retrograde impacts'] },\n    [FEATURE_KEYS.MULTI_SYSTEM_ANALYSIS]: { icon: '🔮', title: 'Multi-System Analysis', description: 'Compare insights from Western, Vedic, Chinese, Mayan, and Uranian astrological systems.', benefits: ['Western tropical personality insights','Vedic karmic patterns and life purpose','Chinese Four Pillars life cycles','Mayan galactic signature','Comprehensive spiritual perspective'], examples: ['Western Sun vs Vedic Sun differences','Chinese animal year influences','Mayan day sign spiritual meaning','Integrated life path analysis'] }\n  };\n\n  const featureDetails = (isFeatureKey(feature) ? featureMap[feature] : undefined) ?? {\n    icon: '🔒',\n    title: `${requiredTier.charAt(0).toUpperCase() + requiredTier.slice(1)} Feature`,\n  description: (upgradeMessage !== undefined && upgradeMessage !== null && upgradeMessage.length > 0) ? upgradeMessage : `This feature requires a ${requiredTier} subscription.`,\n    benefits: ['Enhanced astrological insights','Professional-grade tools','Advanced analysis'],\n    examples: ['Detailed chart analysis','Professional interpretations']\n  };\n\n  const getTierIcon = (tier: string): string => tier === 'premium' ? '⭐' : tier === 'elite' ? '👑' : '🔒';\n  const getTierColorClasses = (tier: string) => tier === 'premium' ? { border: 'border-purple-400', bg: 'bg-purple-100', text: 'text-purple-600', button: 'bg-purple-600 hover:bg-purple-700', badge: 'bg-purple-500' } : tier === 'elite' ? { border: 'border-yellow-400', bg: 'bg-yellow-100', text: 'text-yellow-600', button: 'bg-yellow-600 hover:bg-yellow-700', badge: 'bg-yellow-500' } : { border: 'border-gray-400', bg: 'bg-gray-100', text: 'text-gray-600', button: 'bg-gray-600 hover:bg-gray-700', badge: 'bg-gray-500' };\n  const colors = getTierColorClasses(requiredTier);\n\n  const handleUpgrade = () => {\n  if (user === null || user === undefined) {\n      navigate('/login');\n      return;\n    }\n    navigate('/upgrade-demo');\n  };\n\n  const UpgradeCard = () => (\n    <div className={`cosmic-card ${colors.border} border-2 rounded-2xl relative overflow-hidden`}>\n      {/* Premium Badge */}\n      <div className={`absolute top-4 right-4 ${colors.badge} text-white px-3 py-1 rounded-full text-sm font-bold flex items-center space-x-1`}>\n        <span>{getTierIcon(requiredTier)}</span>\n        <span>{requiredTier.toUpperCase()}</span>\n      </div>\n\n      <div className=\"p-6 pt-8\">\n        <div className=\"flex flex-col items-center mb-6 space-y-4\">\n          <div className={`${colors.bg} p-4 rounded-full`}>\n            <span className=\"text-4xl\">{featureDetails.icon}</span>\n          </div>\n          \n          <div className=\"space-y-2 text-center\">\n            <h3 className={`text-xl font-bold ${colors.text}`}>\n              {featureDetails.title}\n            </h3>\n            <p className=\"text-base text-cosmic-silver\">\n              {featureDetails.description}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Benefits List */}\n          <div>\n            <p className=\"mb-3 font-bold text-white\">\n              What you&apos;ll unlock:\n            </p>\n            <ul className=\"space-y-2\">\n              {(Array.isArray(featureDetails.benefits) ? featureDetails.benefits : []).map((benefit: string, index: number) => (\n                <li key={index} className=\"flex items-start space-x-2 text-sm\">\n                  <span className=\"mt-1 text-green-500\">✓</span>\n                  <span className=\"text-cosmic-silver\">{benefit}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Current Tier Info */}\n          {(user !== null && user !== undefined) && (\n            <div className=\"flex p-3 space-x-3 border border-blue-500 rounded-md bg-blue-900/50\">\n              <span className=\"text-xl text-blue-500\">ℹ️</span>\n              <div className=\"flex flex-col space-y-0\">\n                <p className=\"text-sm font-bold text-white\">\n                  Current plan: {safeUserTier.charAt(0).toUpperCase() + safeUserTier.slice(1)}\n                </p>\n                <p className=\"text-xs text-white/80\">\n                  Upgrade to {requiredTier} to access this feature\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <button\n              className={`${colors.button} text-white font-semibold py-3 px-6 rounded-lg w-full flex items-center justify-center space-x-2 transition-colors`}\n              onClick={handleUpgrade}\n            >\n              <span>⬆️</span>\n              <span>{(user !== null && user !== undefined) ? `Upgrade to ${requiredTier.charAt(0).toUpperCase() + requiredTier.slice(1)}` : 'Sign In to Upgrade'}</span>\n            </button>\n            \n            <button\n              className={`border-2 ${colors.border} ${colors.text} bg-transparent hover:${colors.bg} font-medium py-2 px-4 rounded-lg w-full flex items-center justify-center space-x-2 transition-colors`}\n              onClick={() => setIsModalOpen(true)}\n            >\n              <span>❓</span>\n              <span>Learn More</span>\n            </button>\n          </div>\n\n          {/* Pricing Info */}\n          <div className=\"p-4 text-center rounded-md bg-white/10\">\n            <p className=\"mb-2 text-sm text-cosmic-silver\">\n              {requiredTier === 'premium' ? 'Starting at $14.99/month' : 'Starting at $29.99/month'}\n            </p>\n            <p className=\"text-xs text-cosmic-silver/60\">\n              Cancel anytime • 30-day money-back guarantee\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n  {(showPreview === true) ? (\n        <div className=\"relative\">\n          {/* Blurred Preview */}\n          <div className=\"relative pointer-events-none blur-lg opacity-30\">\n            {children}\n          </div>\n          \n          {/* Overlay */}\n          <div className=\"absolute z-10 w-11/12 max-w-md transform -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2\">\n            <UpgradeCard />\n          </div>\n        </div>\n      ) : (\n        <UpgradeCard />\n      )}\n\n      {/* Feature Details Modal */}\n      <Dialog.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <Dialog.Portal>\n          <Dialog.Overlay className=\"fixed inset-0 z-50 bg-black/50\" />\n          <Dialog.Content className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-cosmic-dark border border-cosmic-gold/30 rounded-xl p-6 w-11/12 max-w-2xl max-h-[90vh] overflow-y-auto z-50\">\n            <Dialog.Title className=\"flex items-center mb-4 space-x-3\">\n              <span className=\"text-2xl\">{featureDetails.icon}</span>\n              <h2 className=\"text-xl font-bold text-white\">{featureDetails.title}</h2>\n            </Dialog.Title>\n            \n            <div className=\"space-y-6\">\n              <p className=\"text-cosmic-silver\">\n                {featureDetails.description}\n              </p>\n\n              <div>\n                <h3 className=\"mb-3 font-bold text-white\">\n                  Key Benefits:\n                </h3>\n                <ul className=\"space-y-2\">\n                  {Array.isArray(featureDetails.benefits) ? featureDetails.benefits.map((benefit: string, index: number) => (\n                    <li key={index} className=\"flex items-start space-x-2 text-sm\">\n                      <span className=\"mt-1 text-green-500\">✓</span>\n                      <span className=\"text-cosmic-silver\">{benefit}</span>\n                    </li>\n                  )) : null}\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"mb-3 font-bold text-white\">\n                  Examples:\n                </h3>\n                <ul className=\"space-y-2\">\n                  {Array.isArray(featureDetails.examples) ? featureDetails.examples.map((example: string, index: number) => (\n                    <li key={index} className=\"flex items-start space-x-2 text-sm\">\n                      <span className={colors.text}>⭐</span>\n                      <span className=\"text-cosmic-silver\">{example}</span>\n                    </li>\n                  )) : null}\n                </ul>\n              </div>\n\n              <div className=\"flex p-4 space-x-3 border border-blue-500 rounded-md bg-blue-900/50\">\n                <span className=\"text-xl text-blue-500\">ℹ️</span>\n                <div>\n                  <h4 className=\"text-sm font-bold text-white\">\n                    Requires {requiredTier.charAt(0).toUpperCase() + requiredTier.slice(1)} Plan\n                  </h4>\n                  <p className=\"text-xs text-white/80\">\n                    Upgrade your subscription to access this feature and unlock the full potential of astrological analysis.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-6 space-y-3\">\n              <button\n                className={`${colors.button} text-white font-semibold py-3 px-6 rounded-lg w-full flex items-center justify-center space-x-2 transition-colors`}\n                onClick={() => {\n                  setIsModalOpen(false);\n                  handleUpgrade();\n                }}\n              >\n                <span>⬆️</span>\n                <span>Upgrade Now</span>\n              </button>\n              <button \n                className=\"w-full py-2 transition-colors text-cosmic-silver hover:text-white\"\n                onClick={() => setIsModalOpen(false)}\n              >\n                Maybe Later\n              </button>\n            </div>\n\n            <Dialog.Close className=\"absolute transition-colors top-4 right-4 text-cosmic-silver hover:text-white\">\n              ✕\n            </Dialog.Close>\n          </Dialog.Content>\n        </Dialog.Portal>\n      </Dialog.Root>\n    </>\n  );\n};\n\nexport default FeatureGuard;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Footer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport default function Footer() {\n  return (\n    <footer\n      className=\"py-6 mt-16 text-center border-t-2 border-cosmic-gold/60\"\n      style={{\n        backdropFilter: 'blur(8px)',\n        background: 'linear-gradient(90deg, rgba(36,0,70,0.95) 60%, rgba(244,180,0,0.12) 100%)',\n        position: 'relative',\n      }}\n    >\n      <div className=\"flex flex-col items-center justify-center gap-2\">\n        <div className=\"flex items-center justify-center gap-2 mb-1\">\n          <svg\n            viewBox=\"0 0 32 32\"\n            className=\"w-6 h-6 text-cosmic-gold\"\n            fill=\"currentColor\"\n          >\n            <circle cx=\"16\" cy=\"16\" r=\"12\" fill=\"#f8d477\" opacity=\"0.25\" />\n            <circle cx=\"16\" cy=\"16\" r=\"7\" fill=\"#f4b400\" />\n            <path \n              d=\"M16 6v-2M16 28v-2M6 16H4M28 16h-2M23.07 23.07l1.41 1.41M7.52 7.52l1.41 1.41M23.07 8.93l1.41-1.41M7.52 24.48l1.41-1.41\" \n              stroke=\"#db9e00\" \n              strokeWidth=\"1.5\" \n              strokeLinecap=\"round\" \n            />\n          </svg>\n          <p className=\"tracking-wider text-cosmic-gold font-cinzel\">\n            © 2024 Cosmic Hub. All rights reserved.\n          </p>\n        </div>\n        <div className=\"flex justify-center gap-4 mt-1\">\n          <a \n            href=\"/privacy\" \n            className=\"text-yellow-200 transition-colors hover:text-cosmic-gold hover:underline\"\n          >\n            Privacy Policy\n          </a>\n          <a \n            href=\"/terms\" \n            className=\"text-yellow-200 transition-colors hover:text-cosmic-gold hover:underline\"\n          >\n            Terms of Service\n          </a>\n          <a \n            href=\"/contact\" \n            className=\"text-yellow-200 transition-colors hover:text-cosmic-gold hover:underline\"\n          >\n            Contact Us\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/ActivationSequenceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/CoreQuartetTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeyDetails.tsx","messages":[{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":10,"column":19,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":10,"endColumn":21,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[273,275],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":21,"column":18,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":21,"endColumn":20,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[638,640],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { GeneKey } from './types';\n\ninterface GeneKeyDetailsProps {\n  selectedKey: GeneKey | null;\n  onClose?: () => void;\n}\n\nconst GeneKeyDetails: React.FC<GeneKeyDetailsProps> = React.memo(({ selectedKey, onClose }) => {\n  if (selectedKey == null) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-cosmic-silver/60\">Select a Gene Key to view details</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border cosmic-card bg-gradient-to-br from-purple-900/30 to-pink-900/30 border-cosmic-gold/30\">\n      <div className=\"p-6\">\n        {onClose != null && (\n          <div className=\"flex justify-end mb-4\">\n            <button\n              onClick={onClose}\n              className=\"transition-colors text-cosmic-silver/60 hover:text-cosmic-silver\"\n              aria-label=\"Close details\"\n            >\n              ✕\n            </button>\n          </div>\n        )}\n        \n        <div className=\"mb-6 text-center\">\n          <h3 className=\"mb-2 text-2xl font-bold text-cosmic-gold\">\n            Gene Key {selectedKey.number}\n          </h3>\n          <h4 className=\"mb-4 text-xl font-semibold text-cosmic-silver\">\n            {selectedKey.name}\n          </h4>\n          <p className=\"leading-relaxed text-cosmic-silver/80\">\n            {selectedKey.description}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n          {/* Shadow */}\n          <div className=\"p-4 border rounded-lg bg-red-900/30 border-red-500/30\">\n            <div className=\"flex items-center mb-3\">\n              <span className=\"mr-2 text-2xl\">🌑</span>\n              <h5 className=\"text-lg font-bold text-red-400\">Shadow</h5>\n            </div>\n            <p className=\"text-sm leading-relaxed text-cosmic-silver/90\">\n              {selectedKey.shadow}\n            </p>\n          </div>\n\n          {/* Gift */}\n          <div className=\"p-4 border rounded-lg bg-green-900/30 border-green-500/30\">\n            <div className=\"flex items-center mb-3\">\n              <span className=\"mr-2 text-2xl\">🎁</span>\n              <h5 className=\"text-lg font-bold text-green-400\">Gift</h5>\n            </div>\n            <p className=\"text-sm leading-relaxed text-cosmic-silver/90\">\n              {selectedKey.gift}\n            </p>\n          </div>\n\n          {/* Siddhi */}\n          <div className=\"p-4 border rounded-lg bg-golden-900/30 border-yellow-500/30\">\n            <div className=\"flex items-center mb-3\">\n              <span className=\"mr-2 text-2xl\">✨</span>\n              <h5 className=\"text-lg font-bold text-yellow-400\">Siddhi</h5>\n            </div>\n            <p className=\"text-sm leading-relaxed text-cosmic-silver/90\">\n              {selectedKey.siddhi}\n            </p>\n          </div>\n        </div>\n\n        {/* Codon Information */}\n        <div className=\"pt-6 mt-6 border-t border-cosmic-silver/20\">\n          <div className=\"text-center\">\n            <h5 className=\"mb-2 text-lg font-bold text-cosmic-silver\">Genetic Codon</h5>\n            <p className=\"font-mono text-xl tracking-wider text-cosmic-gold\">\n              {selectedKey.codon}\n            </p>\n            <p className=\"mt-2 text-sm text-cosmic-silver/60\">\n              I Ching Hexagram {selectedKey.number}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nGeneKeyDetails.displayName = 'GeneKeyDetails';\n\nexport default GeneKeyDetails;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysChart.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/GeneKeysChart/GeneKeysChart.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport GeneKeysChart from './GeneKeysChart';\nimport type { BirthData } from './types';\n\n// Mock the API service\nvi.mock('../../services/api', () => ({\n  calculateGeneKeys: vi.fn(),\n}));\n\n// Mock the ToastProvider\nvi.mock('../ToastProvider', () => ({\n  useToast: () => ({\n    toast: vi.fn(),\n  }),\n}));\n\ndescribe('GeneKeysChart', () => {\n  const mockBirthData: BirthData = {\n    year: 1990,\n    month: 1,\n    day: 1,\n    hour: 12,\n    minute: 0,\n    city: 'New York',\n    timezone: 'America/New_York',\n    lat: 40.7128,\n    lon: -74.0060,\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('renders GeneKeysChart with data', () => {\n    render(<GeneKeysChart birthData={mockBirthData} />);\n\n    // The component shows loading message during calculation\n    expect(screen.getByText(/Calculating your Gene Keys profile/i)).toBeInTheDocument();\n  });\n\n  it('displays loading state', () => {\n    render(<GeneKeysChart birthData={mockBirthData} />);\n\n    // During calculation, it shows loading message with spinner\n    expect(screen.getByText(/Calculating your Gene Keys profile/i)).toBeInTheDocument();\n    // Check for the loading spinner container\n    const loadingContainer = screen.getByText(/Calculating your Gene Keys profile/i).closest('div');\n    expect(loadingContainer).toBeInTheDocument();\n  });\n\n  it('displays empty state when no birth data provided', () => {\n    render(<GeneKeysChart />);\n\n    // When no birth data, shows instruction message\n  const messages = screen.getAllByText(/Enter your birth information to calculate your Gene Keys profile/i);\n  expect(messages.length).toBeGreaterThan(0);\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysChart.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleCalculate'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [birthData, handleCalculate]","fix":{"range":[2666,2677],"text":"[birthData, handleCalculate]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/HologenicProfileTab.tsx","messages":[{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":12,"column":40,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":12,"endColumn":42,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[342,344],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":82,"column":40,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":82,"endColumn":42,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[3229,3231],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { GeneKeysData } from './types';\n\ninterface HologenicProfileTabProps {\n  geneKeysData: GeneKeysData;\n}\n\nconst HologenicProfileTab: React.FC<HologenicProfileTabProps> = React.memo(({ \n  geneKeysData \n}) => {\n  // Strict null/undefined check for hologenetic_profile\n  if (geneKeysData.hologenetic_profile == null || typeof geneKeysData.hologenetic_profile !== 'object') {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-cosmic-silver/60\">No Hologenetic Profile data available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"border cosmic-card bg-gradient-to-br from-violet-900/30 to-indigo-900/30 border-violet-500/30\">\n        <div className=\"p-6 text-center\">\n          <h3 className=\"flex items-center justify-center mb-2 text-3xl font-bold text-violet-400\">\n            <span className=\"mr-3 text-4xl\">🌌</span>\n            Hologenetic Profile\n          </h3>\n          <p className=\"leading-relaxed text-cosmic-silver/80\">\n            Your unique pattern of consciousness evolution and integration path through the Gene Keys system\n          </p>\n        </div>\n      </div>\n\n      {/* Profile Description */}\n      <div className=\"border cosmic-card bg-gradient-to-br from-indigo-900/20 to-purple-900/20 border-indigo-500/30\">\n        <div className=\"p-6\">\n          <h4 className=\"flex items-center mb-4 text-2xl font-bold text-indigo-400\">\n            <span className=\"mr-2 text-2xl\">🧬</span>\n            Your Consciousness Blueprint\n          </h4>\n          \n          <div className=\"prose prose-invert max-w-none\">\n            <p className=\"text-lg leading-relaxed text-cosmic-silver/90\">\n              {geneKeysData.hologenetic_profile.description}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Integration Path */}\n      <div className=\"border cosmic-card bg-gradient-to-br from-purple-900/20 to-pink-900/20 border-purple-500/30\">\n        <div className=\"p-6\">\n          <h4 className=\"flex items-center mb-6 text-2xl font-bold text-purple-400\">\n            <span className=\"mr-2 text-2xl\">🛤️</span>\n            Integration Path\n          </h4>\n          \n          <div className=\"space-y-4\">\n            {geneKeysData.hologenetic_profile.integration_path.map((step, index) => (\n              <div\n                key={index}\n                className=\"flex items-start p-4 space-x-4 border rounded-lg bg-purple-900/20 border-purple-500/20\"\n              >\n                <div className=\"flex-shrink-0\">\n                  <div className=\"flex items-center justify-center w-8 h-8 border rounded-full bg-purple-500/30 border-purple-400/50\">\n                    <span className=\"text-sm font-bold text-purple-400\">{index + 1}</span>\n                  </div>\n                </div>\n                <div className=\"flex-grow\">\n                  <p className=\"leading-relaxed text-cosmic-silver/90\">\n                    {step}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Contemplation Sequence */}\n  {geneKeysData.contemplation_sequence != null && Array.isArray(geneKeysData.contemplation_sequence) && geneKeysData.contemplation_sequence.length > 0 && (\n        <div className=\"border cosmic-card bg-gradient-to-br from-amber-900/20 to-orange-900/20 border-amber-500/30\">\n          <div className=\"p-6\">\n            <h4 className=\"flex items-center mb-6 text-2xl font-bold text-amber-400\">\n              <span className=\"mr-2 text-2xl\">🧘‍♀️</span>\n              Contemplation Sequence\n            </h4>\n            \n            <p className=\"mb-6 text-cosmic-silver/80\">\n              A personalized sequence of Gene Keys for deep contemplation practice, designed to \n              support your unique path of consciousness evolution.\n            </p>\n            \n            <div className=\"grid grid-cols-4 gap-3 md:grid-cols-8 lg:grid-cols-12\">\n              {geneKeysData.contemplation_sequence.map((keyNumber, index) => (\n                <div\n                  key={`contemplation-${keyNumber}-${index}`}\n                  className=\"p-3 text-center transition-colors border rounded-lg cursor-pointer bg-amber-900/30 border-amber-500/30 hover:bg-amber-800/40\"\n                  title={`Gene Key ${keyNumber} - Position ${index + 1} in contemplation sequence`}\n                >\n                  <div className=\"text-lg font-bold text-amber-400\">\n                    {keyNumber}\n                  </div>\n                  <div className=\"mt-1 text-xs text-cosmic-silver/60\">\n                    #{index + 1}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"p-4 mt-6 border rounded-lg bg-amber-900/20 border-amber-500/20\">\n              <h5 className=\"mb-2 font-bold text-amber-400\">Contemplation Practice:</h5>\n              <ul className=\"space-y-2 text-sm text-cosmic-silver/90\">\n                <li className=\"flex items-start\">\n                  <span className=\"mr-2 text-amber-400\">•</span>\n                  <span>Work with one Gene Key per week or month, depending on your pace</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"mr-2 text-amber-400\">•</span>\n                  <span>Follow the sequence order for optimal integration</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"mr-2 text-amber-400\">•</span>\n                  <span>Journal insights and observe how patterns shift in your life</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"mr-2 text-amber-400\">•</span>\n                  <span>Return to the beginning when you complete the full sequence</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Integration Wisdom */}\n      <div className=\"border cosmic-card bg-gradient-to-br from-emerald-900/20 to-teal-900/20 border-emerald-500/30\">\n        <div className=\"p-6\">\n          <h4 className=\"flex items-center mb-4 text-2xl font-bold text-emerald-400\">\n            <span className=\"mr-2 text-2xl\">💎</span>\n            Living Your Hologenetic Profile\n          </h4>\n          \n          <div className=\"space-y-4 text-cosmic-silver/90\">\n            <p>\n              Your Hologenetic Profile represents the unique way consciousness expresses itself \n              through you. It&apos;s not a fixed destiny, but a living, evolving pattern that unfolds \n              through your conscious participation.\n            </p>\n            \n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n              <div className=\"p-4 border rounded-lg bg-emerald-900/30 border-emerald-500/20\">\n                <h5 className=\"mb-2 font-bold text-emerald-400\">Key Principles:</h5>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start\">\n                    <span className=\"mr-2 text-emerald-400\">•</span>\n                    <span>Trust your unique timing and rhythm</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"mr-2 text-emerald-400\">•</span>\n                    <span>Embrace both shadow and light aspects</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"mr-2 text-emerald-400\">•</span>\n                    <span>Allow natural transformation without force</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"p-4 border rounded-lg bg-teal-900/30 border-teal-500/20\">\n                <h5 className=\"mb-2 font-bold text-teal-400\">Daily Practice:</h5>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start\">\n                    <span className=\"mr-2 text-teal-400\">•</span>\n                    <span>Observe patterns without judgment</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"mr-2 text-teal-400\">•</span>\n                    <span>Cultivate patience with your process</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"mr-2 text-teal-400\">•</span>\n                    <span>Trust your inner wisdom and intuition</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nHologenicProfileTab.displayName = 'HologenicProfileTab';\n\nexport default HologenicProfileTab;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/PearlSequenceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/VenusSequenceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/CentersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/GatesChannelsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4533,4536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4533,4536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":62,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":62,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":63,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":75,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":64,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":64,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":64,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":64,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet on an `any` value.","line":64,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":65,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet on an `any` value.","line":65,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":67,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":67,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":68,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":68,"endColumn":52},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":81,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":81,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[5164,5166],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":86,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":86,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[5328,5330],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5474,5477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5474,5477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":91,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":91,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":94,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":94,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":94,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":95,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":95,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":95,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":96,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":96,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .center on an `any` value.","line":97,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":98,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":98,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet on an `any` value.","line":98,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet_symbol on an `any` value.","line":99,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":100,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":100,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":101,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .position on an `any` value.","line":101,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":107,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":107,"endColumn":50},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":109,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":109,"endColumn":23,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[5949,5951],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":123,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":123,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":140,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":140,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":140,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":90},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":143,"column":17,"nodeType":"JSXOpeningElement","endLine":146,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet_symbol on an `any` value.","line":147,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":149,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":149,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .center on an `any` value.","line":151,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":174,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":174,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":174,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":90},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":177,"column":17,"nodeType":"JSXOpeningElement","endLine":180,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet_symbol on an `any` value.","line":181,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":183,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":183,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .center on an `any` value.","line":185,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":72},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":213,"column":34,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":213,"endColumn":36,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[10076,10078],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":220,"column":34,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":220,"endColumn":36,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[10456,10458],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":232,"column":58,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":232,"endColumn":60,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[10990,10992],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":242,"column":21,"nodeType":"JSXOpeningElement","endLine":245,"endColumn":22},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":249,"column":43,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":249,"endColumn":45,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[11772,11774],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":51,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport type { TabProps } from './types';\nimport InlineTooltip from './InlineTooltip';\nimport HumanDesignModal, { type GateModalData, type ChannelModalData } from './HumanDesignModal';\n\n// Channel data for tooltips and modals\nconst CHANNELS: Record<string, { name: string; circuit: string; theme: string; }> = {\n  \"1-8\": { name: \"The Channel of Inspiration\", circuit: \"Individual\", theme: \"Creative Role Model\" },\n  \"2-14\": { name: \"The Channel of the Beat\", circuit: \"Individual\", theme: \"Keeper of the Keys\" },\n  \"3-60\": { name: \"The Channel of Mutation\", circuit: \"Individual\", theme: \"Energy for Change\" },\n  \"4-63\": { name: \"The Channel of Logic\", circuit: \"Collective\", theme: \"Mental Ease\" },\n  \"5-15\": { name: \"The Channel of Rhythm\", circuit: \"Collective\", theme: \"Being in the Flow\" },\n  \"6-59\": { name: \"The Channel of Mating\", circuit: \"Tribal\", theme: \"Focused on Reproduction\" },\n  \"7-31\": { name: \"The Channel of the Alpha\", circuit: \"Collective\", theme: \"Leadership for the Future\" },\n  \"9-52\": { name: \"The Channel of Concentration\", circuit: \"Collective\", theme: \"Focused Determination\" },\n  \"10-20\": { name: \"The Channel of Awakening\", circuit: \"Individual\", theme: \"Commitment to Higher Principles\" },\n  \"10-34\": { name: \"The Channel of Exploration\", circuit: \"Individual\", theme: \"Following One's Convictions\" },\n  \"10-57\": { name: \"The Channel of Perfected Form\", circuit: \"Individual\", theme: \"Survival\" },\n  \"11-56\": { name: \"The Channel of Curiosity\", circuit: \"Collective\", theme: \"The Seeker\" },\n  \"12-22\": { name: \"The Channel of Openness\", circuit: \"Individual\", theme: \"A Social Being\" },\n  \"13-33\": { name: \"The Channel of the Prodigal\", circuit: \"Collective\", theme: \"A Witness\" },\n  \"16-48\": { name: \"The Channel of the Wavelength\", circuit: \"Collective\", theme: \"Talent\" },\n  \"17-62\": { name: \"The Channel of Acceptance\", circuit: \"Collective\", theme: \"An Organized Being\" },\n  \"18-58\": { name: \"The Channel of Judgment\", circuit: \"Collective\", theme: \"Insatiable Critic\" },\n  \"19-49\": { name: \"The Channel of Synthesis\", circuit: \"Tribal\", theme: \"Sensitivity\" },\n  \"20-57\": { name: \"The Channel of the Brainwave\", circuit: \"Individual\", theme: \"Penetrating Awareness\" },\n  \"21-45\": { name: \"The Channel of Money\", circuit: \"Tribal\", theme: \"A Material Way of Life\" },\n  \"23-43\": { name: \"The Channel of Structuring\", circuit: \"Individual\", theme: \"Genius to Freak\" },\n  \"24-61\": { name: \"The Channel of Awareness\", circuit: \"Individual\", theme: \"Thinker\" },\n  \"25-51\": { name: \"The Channel of Initiation\", circuit: \"Individual\", theme: \"Needing to be First\" },\n  \"26-44\": { name: \"The Channel of Surrender\", circuit: \"Tribal\", theme: \"A Transmitter\" },\n  \"27-50\": { name: \"The Channel of Preservation\", circuit: \"Tribal\", theme: \"Custodianship\" },\n  \"28-38\": { name: \"The Channel of Struggle\", circuit: \"Individual\", theme: \"Stubbornness\" },\n  \"29-46\": { name: \"The Channel of Discovery\", circuit: \"Collective\", theme: \"Succeeding Where Others Fail\" },\n  \"30-41\": { name: \"The Channel of Recognition\", circuit: \"Individual\", theme: \"A Focused Way of Life\" },\n  \"32-54\": { name: \"The Channel of Transformation\", circuit: \"Tribal\", theme: \"Being Driven\" },\n  \"34-57\": { name: \"The Channel of Power\", circuit: \"Individual\", theme: \"An Archetype\" },\n  \"35-36\": { name: \"The Channel of Transitoriness\", circuit: \"Collective\", theme: \"A Being of Experience\" },\n  \"37-40\": { name: \"The Channel of Community\", circuit: \"Tribal\", theme: \"A Part Seeking Wholeness\" },\n  \"39-55\": { name: \"The Channel of Emoting\", circuit: \"Individual\", theme: \"Moodiness\" },\n  \"42-53\": { name: \"The Channel of Maturation\", circuit: \"Collective\", theme: \"Balanced Development\" },\n  \"47-64\": { name: \"The Channel of Abstraction\", circuit: \"Collective\", theme: \"Mental Activity & Clarity\" }\n};\n\nconst GatesChannelsTab: React.FC<TabProps> = ({ humanDesignData }) => {\n  // Safe data extraction with fallbacks\n  const gates = humanDesignData?.gates ?? [];\n  const channels = humanDesignData?.channels ?? [];\n  \n  // Modal state\n  const [modalData, setModalData] = useState<GateModalData | ChannelModalData | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // Define planetary order for sorting\n  const planetaryOrder = [\n    'sun', 'earth', 'moon', 'north_node', 'south_node',\n    'mercury', 'venus', 'mars', 'jupiter', 'saturn',\n    'uranus', 'neptune', 'pluto'\n  ];\n  \n  // Function to sort gates by planetary order\n  const sortGatesByPlanetaryOrder = (gates: any[]) => {\n    return gates.sort((a, b) => {\n      const planetA = a?.planet?.toLowerCase() ?? '';\n      const planetB = b?.planet?.toLowerCase() ?? '';\n      \n      const indexA = planetaryOrder.indexOf(planetA);\n      const indexB = planetaryOrder.indexOf(planetB);\n      \n      // If planet not found in order, put it at the end\n      const orderA = indexA >= 0 ? indexA : 999;\n      const orderB = indexB >= 0 ? indexB : 999;\n      \n      return orderA - orderB;\n    });\n  };\n  \n  // Separate gates by type with proper data validation\n  const personalityGates = sortGatesByPlanetaryOrder(\n    gates.filter(gate => \n      gate != null && typeof gate === 'object' && gate.type === 'personality'\n    )\n  );\n  const designGates = sortGatesByPlanetaryOrder(\n    gates.filter(gate => \n      gate != null && typeof gate === 'object' && gate.type === 'design'\n    )\n  );\n\n  // Click handlers for opening modals\n  const handleGateClick = (gate: any) => {\n    const gateData: GateModalData = {\n      type: 'gate',\n      number: gate.number,\n      line: gate.line,\n      name: gate.name,\n      center: gate.center,\n      planet: gate.planet,\n      planet_symbol: gate.planet_symbol,\n      gateType: gate.type,\n      position: gate.position\n    };\n    setModalData(gateData);\n    setIsModalOpen(true);\n  };\n\n  const handleChannelClick = (channel: string) => {\n    const channelInfo = CHANNELS[channel];\n    if (channelInfo != null) {\n      const channelData: ChannelModalData = {\n        type: 'channel',\n        id: channel,\n        name: channelInfo.name,\n        circuit: channelInfo.circuit,\n        theme: channelInfo.theme,\n        gates: channel.split('-').map(g => parseInt(g))\n      };\n      setModalData(channelData);\n      setIsModalOpen(true);\n    }\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalData(null);\n  };\n\n  return (\n    <div className=\"grid grid-cols-3 gap-4 max-w-6xl mx-auto\">\n        {/* Personality Column */}\n        <div className=\"cosmic-card\">\n          <div className=\"p-3\">\n            <h4 className=\"text-sm font-medium text-yellow-400 mb-2 text-center\">\n              Personality ({personalityGates.length})\n            </h4>\n          <div className=\"space-y-1\">\n            {personalityGates.map((gate, index) => (\n              <InlineTooltip \n                key={`personality-${index}`} \n                content={`Gate ${gate?.number ?? '?'}.${gate?.line ?? '?'} • ${gate?.name ?? 'Unknown Gate'}`}\n                position=\"right\"\n              >\n                <div \n                  className=\"px-2 py-1 rounded border-l-4 border-yellow-500 bg-yellow-50/10 flex items-center space-x-2 cursor-pointer hover:bg-yellow-50/20 transition-colors\"\n                  onClick={() => handleGateClick(gate)}\n                >\n                  <span className=\"text-xl\">{gate?.planet_symbol ?? '○'}</span>\n                  <span className=\"font-bold text-sm\">\n                    {gate?.number ?? '?'}.{gate?.line ?? '?'}\n                  </span>\n                  <span className=\"text-sm text-yellow-300\">{gate?.center ?? 'Unknown'}</span>\n                </div>\n              </InlineTooltip>\n            ))}\n            {personalityGates.length === 0 && (\n              <div className=\"text-center text-cosmic-silver py-2\">\n                <p className=\"text-sm\">No personality gates</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Design Column */}\n      <div className=\"cosmic-card\">\n        <div className=\"p-3\">\n          <h4 className=\"text-sm font-medium text-blue-400 mb-2 text-center\">\n            Design ({designGates.length})\n          </h4>\n          <div className=\"space-y-1\">\n            {designGates.map((gate, index) => (\n              <InlineTooltip \n                key={`design-${index}`} \n                content={`Gate ${gate?.number ?? '?'}.${gate?.line ?? '?'} • ${gate?.name ?? 'Unknown Gate'}`}\n                position=\"left\"\n              >\n                <div \n                  className=\"px-2 py-1 rounded border-l-4 border-blue-500 bg-blue-50/10 flex items-center space-x-2 cursor-pointer hover:bg-blue-50/20 transition-colors\"\n                  onClick={() => handleGateClick(gate)}\n                >\n                  <span className=\"text-xl\">{gate?.planet_symbol ?? '○'}</span>\n                  <span className=\"font-bold text-sm\">\n                    {gate?.number ?? '?'}.{gate?.line ?? '?'}\n                  </span>\n                  <span className=\"text-sm text-blue-300\">{gate?.center ?? 'Unknown'}</span>\n                </div>\n              </InlineTooltip>\n            ))}\n            {designGates.length === 0 && (\n              <div className=\"text-center text-cosmic-silver py-2\">\n                <p className=\"text-sm\">No design gates</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Channels Column */}\n      <div className=\"cosmic-card\">\n        <div className=\"p-3\">\n          <h4 className=\"text-sm font-medium text-purple-400 mb-2 text-center\">\n            Channels ({channels.length})\n          </h4>\n          <div className=\"space-y-1\">\n            {channels.length > 0 ? (\n              channels.map((channel, index) => {\n                let channelId: string;\n                // If it's a string, use it directly\n                if (typeof channel === 'string') {\n                  channelId = channel;\n                }\n                // If it's an object with valid gate numbers, format them\n                else if (channel != null && \n                         typeof channel === 'object' &&\n                         typeof channel.gate1 === 'number' && \n                         typeof channel.gate2 === 'number') {\n                  channelId = `${channel.gate1}-${channel.gate2}`;\n                }\n                // If it's an object with a valid name, use the name\n                else if (channel != null && \n                         typeof channel === 'object' && \n                         typeof channel.name === 'string' && \n                         channel.name.length > 0) {\n                  channelId = channel.name;\n                }\n                // Fallback to stringifying the whole channel\n                else {\n                  channelId = JSON.stringify(channel);\n                }\n                \n                const channelInfo = CHANNELS[channelId];\n                const tooltipContent = channelInfo?.name != null\n                  ? `${channelId} • ${channelInfo.name}`\n                  : `Channel ${channelId}`;\n                \n                return (\n                  <InlineTooltip \n                    key={`channel-${index}`}\n                    content={tooltipContent}\n                    position=\"left\"\n                  >\n                    <div \n                      className=\"px-2 py-1 rounded bg-purple-50/10 border border-purple-500/20 cursor-pointer hover:bg-purple-50/20 transition-colors\"\n                      onClick={() => handleChannelClick(channelId)}\n                    >\n                      <span className=\"font-bold text-sm text-cosmic-gold\">\n                        {channelId}\n                      </span>\n                      {channelInfo?.theme != null && (\n                        <p className=\"text-xs text-purple-300 mt-1\">\n                          {channelInfo.theme}\n                        </p>\n                      )}\n                    </div>\n                  </InlineTooltip>\n                );\n              })\n            ) : (\n              <div className=\"text-center text-cosmic-silver py-2\">\n                <p className=\"text-sm\">No channels formed</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Modal for detailed information */}\n      <HumanDesignModal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        data={modalData}\n      />\n    </div>\n  );\n};\n\nexport default GatesChannelsTab;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/HumanDesignChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":1,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'memo' is defined but never used.","line":1,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'axios' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaExpand' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCompress' is defined but never used.","line":6,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChartData' is defined but never used.","line":7,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":32,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":38},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":72,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":72,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2635,2635],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2635,2635],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleCalculate'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [birthData, handleCalculate]","fix":{"range":[2665,2676],"text":"[birthData, handleCalculate]"}}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":87,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":87,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3032,3037],"text":"error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3032,3037],"text":"error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3032,3037],"text":"Boolean(error)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo, memo, Suspense } from 'react';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport { useToast } from '../ToastProvider';\nimport axios from 'axios';\nimport { FaExpand, FaCompress } from 'react-icons/fa';\nimport type { ChartData } from '../../types';\nimport { useAuth } from '@cosmichub/auth';\nimport { calculateHumanDesign } from '../../services/api';\nimport type { HumanDesignData, HumanDesignChartProps } from './types';\nimport type { ChartBirthData } from '@cosmichub/types';\nimport { getTypeColor, getTypeDescription } from './utils';\n\n// Lazy load tab components for better performance\nconst CentersTab = React.lazy(() => import('./CentersTab'));\nconst ProfileTab = React.lazy(() => import('./ProfileTab'));\nconst IncarnationCrossTab = React.lazy(() => import('./IncarnationCrossTab'));\nconst GatesChannelsTab = React.lazy(() => import('./GatesChannelsTab'));\nconst VariablesTab = React.lazy(() => import('./VariablesTab'));\n\n// Loading fallback component\nconst TabLoadingFallback: React.FC = () => (\n  <div className=\"flex items-center justify-center p-8\">\n    <div className=\"text-2xl text-purple-500 animate-spin\">⭐</div>\n  </div>\n);\n\nconst HumanDesignChart: React.FC<HumanDesignChartProps> = ({ birthData, onCalculate, onHumanDesignCalculated }) => {\n  const [humanDesignData, setHumanDesignData] = useState<HumanDesignData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handleCalculate = async () => {\n    if (!birthData) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await calculateHumanDesign(birthData);\n      setHumanDesignData(response.human_design);\n      \n      // Pass the Human Design data back to the parent component\n      if (onHumanDesignCalculated) {\n        onHumanDesignCalculated(response.human_design);\n      }\n      \n      toast({\n        title: \"Human Design Calculated\",\n        description: \"Your Human Design chart has been generated successfully!\",\n        status: \"success\",\n        duration: 3000,\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to calculate Human Design';\n      setError(errorMessage);\n      toast({\n        title: \"Calculation Error\",\n        description: errorMessage,\n        status: \"error\",\n        duration: 5000,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (birthData) {\n      handleCalculate();\n    }\n  }, [birthData]);\n\n  if (loading) {\n    return (\n      <div className=\"p-8 cosmic-card\">\n        <div className=\"space-y-4 text-center\">\n          <div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>\n          <p className=\"text-lg font-medium text-cosmic-silver\">Calculating your Human Design chart...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6 cosmic-card\">\n        <div className=\"flex p-4 space-x-4 border border-red-500 rounded-md bg-red-900/50\">\n          <span className=\"text-xl text-red-500\">⚠️</span>\n          <div>\n            <h3 className=\"font-bold text-white\">Calculation Error</h3>\n            <p className=\"text-white/80\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!humanDesignData) {\n    return (\n      <div className=\"p-8 cosmic-card\">\n        <div className=\"space-y-4 text-center\">\n          <div className=\"mb-4 text-4xl\">🔮</div>\n          <h3 className=\"text-xl font-bold text-cosmic-gold\">Human Design Chart</h3>\n          <p className=\"text-cosmic-silver\">\n            Enter your birth information to calculate your Human Design chart\n          </p>\n          {onCalculate && (\n            <button \n              className=\"mt-4 cosmic-button\" \n              onClick={() => onCalculate({\n                year: 2000,\n                month: 1,\n                day: 1,\n                hour: 0,\n                minute: 0\n              } as ChartBirthData)}\n            >\n              🧬 Calculate Human Design\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Header with Type and Strategy */}\n      <div className=\"cosmic-card\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex flex-col space-y-3\">\n              <h2 className=\"text-2xl font-bold text-cosmic-gold\">🧬 Your Human Design</h2>\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <span \n                      className={`${getTypeColor(humanDesignData.type)} text-white font-bold text-lg px-4 py-2 rounded-full cursor-help inline-block`}\n                    >\n                      {humanDesignData.type}\n                    </span>\n                  </Tooltip.Trigger>\n                  <Tooltip.Portal>\n                    <Tooltip.Content\n                      className=\"z-50 max-w-xs p-3 text-sm border rounded-lg shadow-lg cosmic-card text-cosmic-silver border-cosmic-gold/30\"\n                      sideOffset={5}\n                    >\n                      <div className=\"space-y-2\">\n                        <div className=\"font-bold text-cosmic-gold\">{humanDesignData.type}</div>\n                        <div>{getTypeDescription(humanDesignData.type)}</div>\n                      </div>\n                      <Tooltip.Arrow className=\"fill-cosmic-dark\" />\n                    </Tooltip.Content>\n                  </Tooltip.Portal>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            </div>\n            <div className=\"flex flex-col items-end space-y-2\">\n              <p className=\"text-sm text-cosmic-silver\">Strategy</p>\n              <p className=\"text-lg font-bold text-cosmic-gold\">{humanDesignData.strategy}</p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n            <div className=\"text-center md:text-left\">\n              <p className=\"mb-1 text-cosmic-silver\">Authority</p>\n              <p className=\"text-lg font-bold text-cosmic-silver\">{humanDesignData.authority}</p>\n            </div>\n            <div className=\"text-center md:text-left\">\n              <p className=\"mb-1 text-cosmic-silver\">Signature</p>\n              <p className=\"text-lg font-bold text-green-400\">{humanDesignData.signature}</p>\n            </div>\n            <div className=\"text-center md:text-left\">\n              <p className=\"mb-1 text-cosmic-silver\">Not-Self Theme</p>\n              <p className=\"text-lg font-bold text-red-400\">{humanDesignData.not_self_theme}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabbed Content */}\n      <Tabs.Root className=\"border rounded-md border-cosmic-silver/30\" defaultValue=\"centers\">\n        <Tabs.List className=\"flex border-b border-cosmic-silver/30\">\n          <Tabs.Trigger value=\"centers\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Centers\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"profile\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Profile\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"cross\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Incarnation Cross\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"gates\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Gates & Channels\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"variables\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Variables\n          </Tabs.Trigger>\n        </Tabs.List>\n\n        <Tabs.Content value=\"centers\" className=\"p-6\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <CentersTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"profile\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <ProfileTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"cross\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <IncarnationCrossTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"gates\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <GatesChannelsTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"variables\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <VariablesTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n      </Tabs.Root>\n    </div>\n  );\n};\n\nexport default HumanDesignChart;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/HumanDesignModal.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":34,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":70},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":40,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":40,"endColumn":57},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":83,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&apos;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&lsquo;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&#39;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&rsquo;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":98,"column":64,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":66},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":149,"column":5,"nodeType":"JSXOpeningElement","endLine":152,"endColumn":6}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { getGateLineKeynote, getChannelKeynote } from './gateKeynotes';\n\nexport interface GateModalData {\n  type: 'gate';\n  number: number;\n  line: number;\n  name: string;\n  center: string;\n  planet: string;\n  planet_symbol: string;\n  gateType: 'personality' | 'design';\n  position: number;\n}\n\nexport interface ChannelModalData {\n  type: 'channel';\n  id: string;\n  name: string;\n  circuit: string;\n  theme: string;\n  gates: number[];\n}\n\ninterface HumanDesignModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  data: GateModalData | ChannelModalData | null;\n}\n\nconst HumanDesignModal: React.FC<HumanDesignModalProps> = ({ isOpen, onClose, data }) => {\n  if (!isOpen || !data) return null;\n\n  const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const renderGateContent = (gateData: GateModalData) => (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-2xl font-bold text-cosmic-gold\">\n          Gate {gateData.number}.{gateData.line}\n        </h2>\n        <button\n          onClick={onClose}\n          className=\"text-cosmic-gold hover:text-cosmic-purple transition-colors text-2xl leading-none\"\n        >\n          ×\n        </button>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"text-xl font-semibold text-cosmic-gold mb-2\">{gateData.name}</h3>\n          <p className=\"text-cosmic-text\">I Ching Hexagram {gateData.number}</p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Center</h4>\n            <p className=\"text-cosmic-text\">{gateData.center}</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Activation</h4>\n            <p className=\"text-cosmic-text\">\n              {gateData.planet_symbol} {gateData.planet} ({gateData.gateType})\n            </p>\n          </div>\n        </div>\n        \n        <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Line {gateData.line} Keynote</h4>\n            <p className=\"text-cosmic-text italic\">\n              {getGateLineKeynote(gateData.number, gateData.line)}\n            </p>\n        </div>\n        \n        <div className=\"mt-2\">\n          <h4 className=\"font-semibold text-cosmic-gold\">Line Mechanics</h4>\n          <p className=\"text-cosmic-text text-sm\">\n            This line filters the gate's archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          </p>\n        </div>\n        \n        <div className=\"mt-6 p-4 bg-cosmic-purple/10 border border-cosmic-purple/30 rounded-lg\">\n          <h4 className=\"font-semibold text-cosmic-gold mb-2\">Energy Theme</h4>\n          <p className=\"text-cosmic-text text-sm\">\n            This gate carries the archetypal energy of {gateData.name.toLowerCase()}, \n            activated through your {gateData.planet} in {gateData.gateType === 'personality' ? 'conscious' : 'unconscious'} expression.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderChannelContent = (channelData: ChannelModalData) => (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-2xl font-bold text-cosmic-gold\">\n          Channel {channelData.id}\n        </h2>\n        <button\n          onClick={onClose}\n          className=\"text-cosmic-gold hover:text-cosmic-purple transition-colors text-2xl leading-none\"\n        >\n          ×\n        </button>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"text-xl font-semibold text-cosmic-gold mb-2\">{channelData.name}</h3>\n          <p className=\"text-cosmic-text font-medium\">{channelData.theme}</p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Circuit</h4>\n            <p className=\"text-cosmic-text\">{channelData.circuit}</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Gates</h4>\n            <p className=\"text-cosmic-text\">Gates {channelData.gates.join(' - ')}</p>\n          </div>\n        </div>\n        \n        <div>\n          <h4 className=\"font-semibold text-cosmic-gold\">Channel Keynote</h4>\n          <p className=\"text-cosmic-text italic\">\n            {getChannelKeynote(channelData.id)}\n          </p>\n        </div>\n        \n        <div className=\"mt-6 p-4 bg-cosmic-purple/10 border border-cosmic-purple/30 rounded-lg\">\n          <h4 className=\"font-semibold text-cosmic-gold mb-2\">Defined Connection</h4>\n          <p className=\"text-cosmic-text text-sm\">\n            This channel creates a defined connection between centers, establishing consistent life force energy \n            and reliable patterns in your Human Design. The {channelData.circuit.toLowerCase()} circuit carries \n            the theme of {channelData.theme.toLowerCase()}.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n      onClick={handleOverlayClick}\n    >\n      <div className=\"bg-cosmic-dark border border-cosmic-purple/30 rounded-lg shadow-2xl shadow-cosmic-purple/20 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {data.type === 'gate' ? renderGateContent(data) : renderChannelContent(data)}\n      </div>\n    </div>\n  );\n};\n\nexport default HumanDesignModal;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/IncarnationCrossTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/InlineTooltip.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":19,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":36,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":41,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\n\ninterface InlineTooltipProps {\n  children: React.ReactNode;\n  content: string;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  delay?: number;\n  className?: string;\n}\n\nconst InlineTooltip: React.FC<InlineTooltipProps> = ({\n  children,\n  content,\n  position = 'top',\n  delay = 300,\n  className = ''\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  const positionClasses = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2'\n  };\n\n  const arrowClasses = {\n    top: 'top-full left-1/2 transform -translate-x-1/2 border-t-cosmic-dark border-t-4 border-x-transparent border-x-4 border-b-0',\n    bottom: 'bottom-full left-1/2 transform -translate-x-1/2 border-b-cosmic-dark border-b-4 border-x-transparent border-x-4 border-t-0',\n    left: 'left-full top-1/2 transform -translate-y-1/2 border-l-cosmic-dark border-l-4 border-y-transparent border-y-4 border-r-0',\n    right: 'right-full top-1/2 transform -translate-y-1/2 border-r-cosmic-dark border-r-4 border-y-transparent border-y-4 border-l-0'\n  };\n\n  const handleMouseEnter = () => {\n    const id = setTimeout(() => setIsVisible(true), delay);\n    setTimeoutId(id);\n  };\n\n  const handleMouseLeave = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      setTimeoutId(null);\n    }\n    setIsVisible(false);\n  };\n\n  return (\n    <div \n      className=\"relative\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleMouseEnter}\n      onBlur={handleMouseLeave}\n    >\n      {children}\n      {isVisible && (\n        <div\n          ref={tooltipRef}\n          className={`\n            absolute z-50 px-3 py-2 text-sm text-cosmic-gold bg-cosmic-dark/90 border border-cosmic-purple/30 rounded-lg shadow-lg shadow-cosmic-purple/20\n            whitespace-nowrap pointer-events-none backdrop-blur-sm\n            ${positionClasses[position]}\n            ${className}\n          `}\n          role=\"tooltip\"\n          aria-live=\"polite\"\n        >\n          {content}\n          <div className={`absolute ${arrowClasses[position]}`} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InlineTooltip;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/ProfileTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/VariablesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/gateKeynotes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignGeneKeys.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":48,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":48,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from './ToastProvider';\nimport { logIn } from '@cosmichub/auth';\n\nconst Login: React.FC = React.memo(() => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      await logIn(email, password);\n      toast({\n        title: 'Logged In',\n        description: 'Successfully logged into your account',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      navigate('/chart');\n    } catch (error) {\n      toast({\n        title: 'Login Failed',\n        description: error instanceof Error ? error.message : 'An unknown error occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [email, password, navigate, toast]);\n\n  return (\n    <div className=\"min-h-screen px-4 py-8 bg-gray-50\">\n      <div className=\"max-w-lg p-8 mx-auto border shadow-2xl bg-cosmic-dark/80 backdrop-blur-xl border-cosmic-silver/20 rounded-3xl\">\n        <div className=\"flex flex-col space-y-6\">\n          <div className=\"space-y-4 text-center\">\n            <h2 className=\"text-3xl font-bold text-cosmic-gold font-cinzel\">Sign In</h2>\n            <p className=\"text-lg text-cosmic-silver\">Log in to access your personalized astrology insights.</p>\n          </div>\n\n          <form onSubmit={handleSubmit} aria-label=\"Login Form\">\n            <div className=\"flex flex-col space-y-6\">\n              <div>\n                <label htmlFor=\"email\" className=\"block mb-2 text-cosmic-gold\">Email <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"your@email.com\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"password\" className=\"block mb-2 text-cosmic-gold\">Password <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"••••••••\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"w-full cosmic-button\"\n                disabled={isLoading}\n              >\n                Sign In\n              </button>\n            </div>\n          </form>\n\n          <hr className=\"my-8 border-cosmic-silver/30\" />\n\n          <div className=\"flex flex-col space-y-4 text-center\">\n            <p className=\"text-sm text-cosmic-silver\">🧪 For Testing & Development</p>\n            <button\n              className=\"w-full mx-auto cosmic-button sm:w-auto\"\n              onClick={() => navigate('/mock-login')}\n              aria-label=\"Quick Mock Login\"\n            >\n              Quick Mock Login Panel\n            </button>\n            <p className=\"max-w-sm mx-auto text-xs text-cosmic-silver/60\">\n              Access demo accounts for Free, Premium, and Elite tiers\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nLogin.displayName = 'Login';\n\nexport default Login;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MockLoginPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaUser' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaStar' is defined but never used.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCrown' is defined but never used.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2185,2188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2185,2188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `any` value.","line":79,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createError' is defined but never used.","line":90,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":111,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":111,"endColumn":51},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":143,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":143,"endColumn":64}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from './ToastProvider';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '@cosmichub/config/firebase';\nimport { FaUser, FaStar, FaCrown, FaSignInAlt } from 'react-icons/fa';\n\ninterface MockUser {\n  email: string;\n  password: string;\n  tier: 'free' | 'premium' | 'elite';\n  displayName: string;\n  description: string;\n  features: string[];\n}\n\nconst mockUsers: MockUser[] = [\n  {\n    email: 'free@cosmichub.test',\n    password: 'demo123',\n    tier: 'free',\n    displayName: 'Free User',\n    description: 'Basic astrology features',\n    features: [\n      'Basic birth chart calculation',\n      'Western tropical astrology',\n      'Limited saved charts (3)',\n      'Basic interpretations'\n    ]\n  },\n  {\n    email: 'premium@cosmichub.test', \n    password: 'demo123',\n    tier: 'premium',\n    displayName: 'Premium User',\n    description: 'Enhanced astrology experience',\n    features: [\n      'Multi-system analysis',\n      'Synastry compatibility',\n      'PDF chart exports',\n      'Unlimited saved charts',\n      'Advanced interpretations'\n    ]\n  },\n  {\n    email: 'elite@cosmichub.test',\n    password: 'demo123', \n    tier: 'elite',\n    displayName: 'Elite User',\n    description: 'Complete cosmic toolkit',\n    features: [\n      'All Premium features',\n      'AI interpretations',\n      'Transit analysis & predictions',\n      'Priority support',\n      'Early access to new features'\n    ]\n  }\n];\n\nconst MockLoginPanel: React.FC = React.memo(() => {\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const handleMockLogin = useCallback(async (mockUser: MockUser) => {\n    try {\n      await signInWithEmailAndPassword(auth, mockUser.email, mockUser.password);\n      \n      toast({\n        title: `Logged in as ${mockUser.displayName}`,\n        description: `You now have ${mockUser.tier} tier access`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      \n      navigate('/chart');\n    } catch (error) {\n      if (error instanceof Error && (error as any).code === 'auth/user-not-found') {\n        try {\n          await createUserWithEmailAndPassword(auth, mockUser.email, mockUser.password);\n          toast({\n            title: 'Mock Account Created',\n            description: `Created and logged in as ${mockUser.displayName}`,\n            status: 'success',\n            duration: 3000,\n            isClosable: true,\n          });\n          navigate('/chart');\n        } catch (createError) {\n          toast({\n            title: 'Error',\n            description: 'Failed to create mock account',\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          });\n        }\n      } else {\n        toast({\n          title: 'Error',\n          description: 'Failed to log in with mock account',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        });\n      }\n    }\n  }, [navigate, toast]);\n\n  const getTierColor = (tier: MockUser['tier']) => {\n    switch (tier) {\n      case 'free': return 'gray-500';\n      case 'premium': return 'purple-500';\n      case 'elite': return 'orange-500';\n      default: return 'gray-500';\n    }\n  };\n\n  return (\n    <div className=\"max-w-3xl p-6 mx-auto\">\n      <div className=\"flex flex-col space-y-6\">\n        <div className=\"space-y-2 text-center\">\n          <h2 className=\"text-2xl font-bold text-cosmic-gold\">Mock Login Panel</h2>\n          <p className=\"text-cosmic-silver\">Use demo accounts for testing different tiers</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n          {mockUsers.map((mockUser) => (\n            <div key={mockUser.email} className=\"cosmic-card\">\n              <div className=\"p-4\">\n                <div className=\"flex items-start justify-between space-x-4\">\n                  <div className=\"flex flex-col flex-1 space-y-2\">\n                    <h3 className=\"font-bold text-md text-cosmic-gold\">{mockUser.displayName}</h3>\n                    <p className=\"text-sm text-cosmic-silver\">{mockUser.description}</p>\n                  </div>\n                  <div className=\"flex flex-col items-end space-y-2\">\n                    <span className={`bg-${getTierColor(mockUser.tier)}/20 text-${getTierColor(mockUser.tier)} px-2 py-1 rounded text-xs`}>\n                      {mockUser.tier}\n                    </span>\n                    <button\n                      className=\"cosmic-button\"\n                      onClick={() => handleMockLogin(mockUser)}\n                      aria-label={`Login as ${mockUser.displayName}`}\n                    >\n                      <FaSignInAlt className=\"mr-2\" />\n                      Login\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"mt-4\">\n                  <p className=\"mb-2 text-sm font-bold text-cosmic-silver\">Available Features:</p>\n                  <div className=\"flex flex-col space-y-1\">\n                    {mockUser.features.map((feature, index) => (\n                      <p key={index} className=\"text-xs text-cosmic-silver/80\">• {feature}</p>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"p-3 mt-4 rounded-md bg-gray-50/30\">\n                  <p className=\"text-xs text-cosmic-silver/60\">\n                    <strong>Email:</strong> {mockUser.email} <br />\n                    <strong>Password:</strong> {mockUser.password}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <hr className=\"my-6 border-cosmic-silver/30\" />\n\n        <p className=\"text-sm text-center text-cosmic-silver/60\">\n          These are mock accounts for testing purposes only. \n          In production, subscription tiers would be managed through Stripe integration.\n        </p>\n      </div>\n    </div>\n  );\n});\n\nMockLoginPanel.displayName = 'MockLoginPanel';\n\nexport default MockLoginPanel;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/ChineseChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":9,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":9,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ChineseChartData } from './types';\n\ninterface Props {\n  data: ChineseChartData;\n}\n\nconst ChineseChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Chinese astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-red-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-red-700 text-md\">Chinese Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div>\n              <p className=\"mb-2 font-bold\">Four Pillars</p>\n              <p className=\"mb-2 text-sm\"><strong>Year:</strong> {data.year?.element} {data.year?.animal}</p>\n              <p className=\"mb-2 text-sm\"><strong>Month:</strong> {data.month?.animal}</p>\n              <p className=\"mb-2 text-sm\"><strong>Day:</strong> {data.day?.animal}</p>\n              <p className=\"mb-2 text-sm\"><strong>Hour:</strong> {data.hour?.animal}</p>\n            </div>\n            <div>\n              <p className=\"mb-2 font-bold\">Bazi Chart</p>\n              <p className=\"mb-2 font-mono text-sm\">{data.four_pillars}</p>\n              <p className=\"mb-2 font-bold\">Elemental Balance</p>\n              <p className=\"text-sm\">{data.elements_analysis?.analysis}</p>\n            </div>\n          </div>\n\n          <p className=\"mb-2 font-bold\">Personality Traits</p>\n          <p className=\"mb-4 text-sm\">{data.year?.traits}</p>\n\n          <p className=\"mb-2 font-bold\">Overall Summary</p>\n          <p className=\"text-sm\">{data.personality_summary}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChineseChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/MayanChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":9,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":9,"endColumn":12},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":22,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[728,746],"text":"Tzolk&apos;in Signature"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[728,746],"text":"Tzolk&lsquo;in Signature"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[728,746],"text":"Tzolk&#39;in Signature"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[728,746],"text":"Tzolk&rsquo;in Signature"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { MayanChartData } from './types';\n\ninterface Props {\n  data: MayanChartData;\n}\n\nconst MayanChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Mayan astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-green-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-green-700 text-md\">Mayan Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div>\n              <p className=\"mb-2 font-bold\">Tzolk'in Signature</p>\n              <p className=\"mb-2 text-2xl\">{data.sacred_number?.number} {data.day_sign?.name}</p>\n              <p className=\"mb-2 text-sm\"><strong>Symbol:</strong> {data.day_sign?.symbol}</p>\n              <p className=\"mb-2 text-sm\"><strong>Color:</strong> {data.day_sign?.color}</p>\n              <p className=\"mb-2 text-sm\"><strong>Meaning:</strong> {data.day_sign?.meaning}</p>\n            </div>\n            <div>\n              <p className=\"mb-2 font-bold\">Wavespell</p>\n              <p className=\"mb-2 text-sm\"><strong>Tone:</strong> {data.wavespell?.tone?.name} ({data.wavespell?.position})</p>\n              <p className=\"mb-4 text-sm\">{data.wavespell?.description}</p>\n              <p className=\"mb-2 font-bold\">Long Count</p>\n              <p className=\"font-mono text-sm\">{data.long_count?.date}</p>\n            </div>\n          </div>\n\n          <p className=\"mb-2 font-bold\">Galactic Signature</p>\n          <p className=\"mb-4 text-sm\">{data.galactic_signature}</p>\n\n          <p className=\"mb-2 font-bold\">Life Purpose</p>\n          <p className=\"mb-4 text-sm\">{data.life_purpose}</p>\n\n          <p className=\"mb-2 font-bold\">Spiritual Guidance</p>\n          <p className=\"text-sm\">{data.spiritual_guidance}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MayanChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/MultiSystemChartDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showComparison' is assigned a value but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1516,1518],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { MultiSystemChartData } from './types';\nimport type { ChartBirthData } from '@cosmichub/types';\nimport WesternChart from './WesternChart';\nimport VedicChart from './VedicChart';\nimport ChineseChart from './ChineseChart';\nimport MayanChart from './MayanChart';\nimport UranianChart from './UranianChart';\nimport SynthesisChart from './SynthesisChart';\n\ninterface MultiSystemChartProps {\n  chartData?: MultiSystemChartData;\n  birthData?: ChartBirthData;\n  showComparison?: boolean;\n  isLoading?: boolean;\n}\n\nexport const MultiSystemChartDisplay: React.FC<MultiSystemChartProps> = ({ \n  chartData, \n  birthData, \n  showComparison = false,\n  isLoading = false \n}) => {\n  const bgColor = \"purple-50\";\n  const cardBg = \"white\";\n\n  if (isLoading) {\n    return (\n      <div className={`p-4 bg-${bgColor} rounded-lg`}>\n        <p className=\"text-center text-cosmic-silver\">Calculating multi-system chart...</p>\n      </div>\n    );\n  }\n\n  if (!chartData && !birthData) {\n    return (\n      <div className=\"p-4 border border-yellow-500 rounded-md bg-yellow-900/50\">\n                  <div className=\"text-center\">\n            <h3 className=\"font-bold text-cosmic-silver\">No Chart Data</h3>\n            <p className=\"text-cosmic-silver/70\">Please calculate a chart to see the multi-system analysis.</p>\n          </div>\n      </div>\n    );\n  }\n\n  // If we have birthData but no chartData, show a placeholder message\n  const displayData = chartData || {\n    birth_info: birthData ? {\n      date: `${birthData.year}-${String(birthData.month).padStart(2, '0')}-${String(birthData.day).padStart(2, '0')}`,\n      time: `${String(birthData.hour).padStart(2, '0')}:${String(birthData.minute).padStart(2, '0')}`,\n      location: {\n        latitude: birthData.lat,\n        longitude: birthData.lon,\n        timezone: birthData.timezone\n      }\n    } : undefined\n  };\n\n  return (\n    <div className={`bg-${bgColor} rounded-lg p-4`}>\n      <div className=\"flex flex-col space-y-6\">\n        {/* Birth Information Header */}\n        <div className={`cosmic-card bg-${cardBg}`}>\n          <div className=\"p-4\">\n            <h2 className=\"mb-4 text-lg font-bold text-center text-cosmic-gold\">\n              Multi-System Astrological Analysis\n            </h2>\n            {displayData.birth_info && (\n              <div className=\"flex flex-wrap justify-center gap-4\">\n                <p className=\"text-cosmic-silver\"><strong>Date:</strong> {displayData.birth_info.date}</p>\n                <p className=\"text-cosmic-silver\"><strong>Time:</strong> {displayData.birth_info.time}</p>\n                <p className=\"text-cosmic-silver\"><strong>Coordinates:</strong> {displayData.birth_info.location?.latitude?.toFixed(2)}°, {displayData.birth_info.location?.longitude?.toFixed(2)}°</p>\n                <p className=\"text-cosmic-silver\"><strong>Timezone:</strong> {displayData.birth_info.location?.timezone}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Multi-System Tabs */}\n        <Tabs.Root>\n          <Tabs.List className=\"flex flex-wrap\">\n            <Tabs.Trigger value=\"western\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Western Tropical</Tabs.Trigger>\n            <Tabs.Trigger value=\"vedic\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Vedic Sidereal</Tabs.Trigger>\n            <Tabs.Trigger value=\"chinese\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Chinese</Tabs.Trigger>\n            <Tabs.Trigger value=\"mayan\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Mayan</Tabs.Trigger>\n            <Tabs.Trigger value=\"uranian\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Uranian</Tabs.Trigger>\n            <Tabs.Trigger value=\"synthesis\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Synthesis</Tabs.Trigger>\n          </Tabs.List>\n\n          <Tabs.Content value=\"western\" className=\"pt-4\"><WesternChart data={displayData.western_tropical} /></Tabs.Content>\n          <Tabs.Content value=\"vedic\" className=\"pt-4\"><VedicChart data={displayData.vedic_sidereal ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"chinese\" className=\"pt-4\"><ChineseChart data={displayData.chinese ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"mayan\" className=\"pt-4\"><MayanChart data={displayData.mayan ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"uranian\" className=\"pt-4\"><UranianChart data={displayData.uranian ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"synthesis\" className=\"pt-4\"><SynthesisChart data={displayData.synthesis ?? {}} /></Tabs.Content>\n        </Tabs.Root>\n\n        {/* Footer with methodology */}\n        <div className={`cosmic-card bg-${cardBg} border border-cosmic-silver/30`}>\n          <div className=\"p-4\">\n            <p className=\"text-sm text-center text-cosmic-silver\">\n              This analysis combines Western tropical astrology, Vedic sidereal calculations, Chinese Four Pillars, \n              Mayan sacred calendar, and Uranian midpoint techniques to provide a comprehensive astrological perspective.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiSystemChartDisplay;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/SynthesisChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1252,1254],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1958,1960],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":63,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":63,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2843,2845],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":69,"column":27,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":69,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":88,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":88,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3952,3954],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { SynthesisChartData } from './types';\n\ninterface Props {\n  data: SynthesisChartData;\n}\n\nconst SynthesisChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No synthesis data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-gradient-to-br from-white/95 to-cyan-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-teal-700 text-md\">Integrated Analysis</h3>\n          <p className=\"mb-4 text-sm text-cosmic-silver/70\">\n            Synthesis of insights from all astrological traditions\n          </p>\n\n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"themes\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Primary Themes</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"flex flex-col space-y-2\">\n                  {(data.primary_themes || []).map((theme, idx) => (\n                    <span key={idx} className=\"p-2 border rounded-md border-cosmic-silver/30\">\n                      {theme}\n                    </span>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"purpose\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Life Purpose Integration</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"flex flex-col space-y-3\">\n                  {(data.life_purpose || []).map((purpose, idx) => (\n                    <div key={idx} className=\"flex p-4 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n                      <span className=\"text-xl text-blue-500\">ℹ️</span>\n                      <p className=\"text-cosmic-silver/70\">{purpose}</p>\n                    </div>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"personality\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Personality Integration</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                  {Object.entries(data.personality_integration || {}).map(([aspect, traits]: [string, string[]]) => (\n                    <div key={aspect}>\n                      <p className=\"mb-2 font-bold capitalize\">\n                        {aspect.replace('_', ' ')}:\n                      </p>\n                      <div className=\"flex flex-col space-y-1\">\n                        {(traits || []).map((trait, idx) => (\n                          <p key={idx} className=\"text-sm text-cosmic-silver/70\">\n                            {trait}\n                          </p>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"path\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Spiritual Path</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"flex flex-col space-y-3\">\n                  {(data.spiritual_path || []).map((guidance, idx) => (\n                    <div key={idx} className=\"flex p-4 space-x-4 border border-green-500 rounded-md bg-green-900/50\">\n                      <span className=\"text-xl text-green-500\">✅</span>\n                      <p className=\"text-cosmic-silver/70\">{guidance}</p>\n                    </div>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SynthesisChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/UranianChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":38,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":38,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1543,1545],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":71,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":71,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3143,3145],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { UranianChartData } from './types';\n\ninterface Props {\n  data: UranianChartData;\n}\n\nconst UranianChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Uranian astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-indigo-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-indigo-700 text-md\">Uranian Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n\n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"0\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Transneptunian Points</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <table className=\"w-full text-sm table-auto\">\n                  <thead>\n                    <tr>\n                      <th className=\"py-2 text-left\">Planet</th>\n                      <th className=\"py-2 text-left\">Position</th>\n                      <th className=\"py-2 text-left\">Meaning</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.entries(data.uranian_planets || {}).map(([planet, info]: [string, { symbol?: string; position?: number; meaning?: string }]) => (\n                      <tr key={planet}>\n                        <td className=\"py-2\">\n                          <div className=\"flex\">\n                            <span>{info.symbol}</span>\n                            <span className=\"ml-2 font-medium\">{planet.charAt(0).toUpperCase() + planet.slice(1)}</span>\n                          </div>\n                        </td>\n                        <td className=\"py-2 font-mono\">{info.position?.toFixed(2)}°</td>\n                        <td className=\"py-2 text-xs\">{info.meaning}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"1\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">90° Dial Aspects</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <table className=\"w-full text-sm table-auto\">\n                  <thead>\n                    <tr>\n                      <th className=\"py-2 text-left\">Bodies</th>\n                      <th className=\"py-2 text-left\">Aspect</th>\n                      <th className=\"py-2 text-left\">Orb</th>\n                      <th className=\"py-2 text-left\">Meaning</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {(data.dial_aspects || []).slice(0, 8).map((aspect, idx) => (\n                      <tr key={idx}>\n                        <td className=\"py-2 text-sm\">{aspect.body1} - {aspect.body2}</td>\n                        <td className=\"py-2\">{aspect.angle}°</td>\n                        <td className=\"py-2\">{aspect.orb?.toFixed(2)}°</td>\n                        <td className=\"py-2 text-xs\">{aspect.meaning}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UranianChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/VedicChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":52,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":52,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2209,2211],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { VedicChartData } from './types';\n\ninterface Props {\n  data: VedicChartData;\n}\n\nconst VedicChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Vedic astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-orange-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-orange-700 text-md\">Vedic Sidereal Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n          <p className=\"mb-4 text-sm text-gray-700\">\n            <strong>Ayanamsa:</strong> {data.ayanamsa?.toFixed(4)}°\n          </p>\n\n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"0\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Lunar Analysis</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <p className=\"mb-2 text-sm font-medium\">Moon Sign (Rashi): {data.analysis?.moon_sign}</p>\n                <p className=\"text-sm\">{data.analysis?.analysis}</p>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"1\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Planets & Nakshatras</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <table className=\"w-full text-sm table-auto\">\n                  <thead>\n                    <tr>\n                      <th className=\"py-2 text-left\">Planet</th>\n                      <th className=\"py-2 text-left\">Sign</th>\n                      <th className=\"py-2 text-left\">Nakshatra</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.entries(data.planets || {}).map(([planet, info]: [string, { vedic_sign?: string; nakshatra?: { name?: string; pada?: string } }]) => (\n                      <tr key={planet}>\n                        <td className=\"py-2 font-medium capitalize\">{planet}</td>\n                        <td className=\"py-2\">{info.vedic_sign}</td>\n                        <td className=\"py-2\">{info.nakshatra?.name} (Pada {info.nakshatra?.pada})</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VedicChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/WesternChart.tsx","messages":[{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":12,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":12,"endColumn":23,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[378,380],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":55,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":55,"endColumn":45,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3023,3038],"text":"(info.retrograde ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3023,3038],"text":"(info.retrograde === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":73,"column":116,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":73,"endColumn":118,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4028,4030],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":88,"column":25,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":88,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4730,4770],"text":"data.aspects ?? []"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":88,"column":38,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":88,"endColumn":40,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4743,4745],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { WesternChartData } from './types';\nimport { planetSymbols, aspectSymbols, getZodiacSign } from './utils';\n\ninterface Props {\n  data?: WesternChartData;\n}\n\nconst WesternChart: React.FC<Props> = ({ data }) => {\n  if (data?.planets == null) return <p className=\"text-cosmic-silver\">No Western chart data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-6\">\n      <div className=\"cosmic-card\">\n        <div className=\"p-6\">\n          <h3 className=\"mb-4 font-bold text-purple-300 text-md\">\n            Western Tropical Chart\n          </h3>\n          <p className=\"mb-6 text-sm text-cosmic-silver/90\">\n            Based on tropical zodiac, solar-focused approach emphasizing personality and life expression\n          </p>\n          \n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"planets\" className=\"rounded-lg cosmic-card border-purple-300/30\">\n              <Accordion.Trigger className=\"flex justify-between w-full p-4 transition-colors duration-300 bg-purple-500/20 hover:bg-purple-500/30 lg:p-6\">\n                <div className=\"flex space-x-2\">\n                  <span className=\"mb-0 font-bold\">Planets & Positions</span>\n                  <span className=\"px-2 py-1 text-sm text-cosmic-silver rounded bg-cosmic-purple\">{Object.keys(data.planets).length}</span>\n                </div>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead>\n                      <tr>\n                        <th className=\"px-4 py-2 text-left min-w-32\">Planet</th>\n                        <th className=\"px-4 py-2 text-left min-w-48\">Position</th>\n                        <th className=\"px-4 py-2 text-left min-w-24\">Retrograde</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {Object.entries(data.planets).map(([planet, info]: [string, { position: number; retrograde?: boolean }]) => (\n                        <tr key={planet}>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <div className=\"flex space-x-2\">\n                              <span className=\"text-lg\">{planetSymbols[planet as keyof typeof planetSymbols] || '●'}</span>\n                              <span className=\"font-semibold text-cosmic-silver capitalize\">{planet.replace('_', ' ')}</span>\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-2 font-mono border-b border-cosmic-gold/20 text-cosmic-silver\">{getZodiacSign(info.position)}</td>\n                          <td className=\"px-4 py-2 text-center border-b border-cosmic-gold/20\">\n                            {info.retrograde ? (\n                              <span className=\"px-2 py-1 text-sm text-yellow-500 rounded bg-yellow-500/20\">℞</span>\n                            ) : (\n                              <span className=\"text-cosmic-silver/60\">—</span>\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"aspects\" className=\"mt-4 rounded-lg cosmic-card border-purple-300/30\">\n              <Accordion.Trigger className=\"flex justify-between w-full p-4 transition-colors duration-300 bg-purple-500/20 hover:bg-purple-500/30 lg:p-6\">\n                <div className=\"flex space-x-2\">\n                  <span className=\"mb-0 font-bold\">Aspects</span>\n                  <span className=\"px-2 py-1 text-sm rounded bg-cosmic-purple/20 text-cosmic-purple\">{data.aspects != null ? data.aspects.length : 0}</span>\n                </div>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead>\n                      <tr>\n                        <th className=\"px-4 py-2 text-left min-w-32\">Aspect Type</th>\n                        <th className=\"px-4 py-2 text-left min-w-40\">Planets</th>\n                        <th className=\"px-4 py-2 text-left min-w-24\">Orb</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {(data.aspects != null ? data.aspects : []).map((aspect, idx) => (\n                        <tr key={idx}>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <div className=\"flex space-x-2\">\n                              <span className=\"text-lg\">{aspectSymbols[aspect.aspect as keyof typeof aspectSymbols] || '—'}</span>\n                              <span className=\"font-semibold text-cosmic-silver\">{aspect.aspect}</span>\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <span className=\"text-cosmic-silver\">{aspect.point1} - {aspect.point2}</span>\n                            <p className=\"text-sm text-cosmic-silver/70\">\n                              {aspect.point1_sign} (H{aspect.point1_house}) - {aspect.point2_sign} (H{aspect.point2_house})\n                            </p>\n                          </td>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <span className={`${aspect.exact ? 'bg-green-500 text-cosmic-dark' : 'bg-cosmic-purple/20 text-cosmic-purple'} px-2 py-1 rounded text-sm`}>\n                              {aspect.orb.toFixed(2)}°\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WesternChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Navbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaHeart' is defined but never used.","line":4,"column":145,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":152},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCog' is defined but never used.","line":4,"column":163,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":168},{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/auth' import is duplicated.","line":7,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":7,"endColumn":51},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":33,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":33,"endColumn":23,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1096,1137],"text":"type NavLinkProps = NavItem"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":35,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":35,"endColumn":27,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1139,1192],"text":"type DropdownNavProps = DropdownNavItem"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":210,"column":14,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":210,"endColumn":16,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[7710,7712],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":241,"column":43,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":241,"endColumn":45,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[8770,8772],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":270,"column":14,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":270,"endColumn":16,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[9635,9637],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":311,"column":28,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":311,"endColumn":30,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[11448,11450],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":312,"column":90,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":312,"endColumn":105},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":357,"column":17,"nodeType":"JSXOpeningElement","endLine":357,"endColumn":79},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":368,"column":19,"nodeType":"JSXOpeningElement","endLine":368,"endColumn":81},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":380,"column":19,"nodeType":"JSXOpeningElement","endLine":380,"endColumn":81},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":387,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":387,"endColumn":23,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[14922,14924],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":394,"column":21,"nodeType":"JSXOpeningElement","endLine":394,"endColumn":83},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":403,"column":30,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":403,"endColumn":32,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[15707,15709],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":405,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":405,"endColumn":44},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":414,"column":21,"nodeType":"JSXOpeningElement","endLine":414,"endColumn":69}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport { devConsole } from '../config/environment';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { FaHome, FaCalculator, FaUsers, FaStar, FaCrown, FaUser, FaChartLine, FaBook, FaBrain, FaSignOutAlt, FaGlobe, FaCompass, FaChevronDown, FaHeart, FaTools, FaCog, FaKey } from 'react-icons/fa';\nimport { Link as RouterLink, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '@cosmichub/auth';\nimport { useSubscription } from '@cosmichub/auth';\nimport { EducationalTooltip } from './EducationalTooltip';\n\n// Lazy load components for performance\nconst UserMenu = lazy(() => import('./UserMenu'));\n\n// Type definitions for navigation items\ninterface NavItem {\n  to: string;\n  icon: React.ElementType;\n  label: string;\n  tooltip: {\n    title: string;\n    description: string;\n    examples?: string[];\n    tier?: 'free' | 'premium' | 'elite';\n  };\n  tier?: 'free' | 'premium' | 'elite';\n}\n\ninterface DropdownNavItem {\n  label: string;\n  icon: React.ElementType;\n  items: NavItem[];\n}\n\ninterface NavLinkProps extends NavItem {}\n\ninterface DropdownNavProps extends DropdownNavItem {}\n\nconst NavLink: React.FC<NavLinkProps> = React.memo(({ to, icon: Icon, label, tooltip, tier }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const isActive = location.pathname === to;\n\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault();\n      try {\n        navigate(to);\n      } catch (error) {\n  devConsole.error('Navigation error:', error);\n        window.location.href = to;\n      }\n    },\n    [navigate, to]\n  );\n\n  return (\n    <EducationalTooltip {...tooltip}>\n      <button\n        type=\"button\"\n        onClick={handleClick}\n        className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors duration-200 min-h-[44px] ${\n          isActive\n            ? 'bg-gradient-to-r from-cosmic-purple/30 to-cosmic-blue/30 text-cosmic-gold border-cosmic-purple/50 shadow-md'\n            : 'text-cosmic-silver hover:bg-cosmic-purple/10 hover:text-cosmic-gold'\n        }`}\n        aria-label={`Navigate to ${label}`}\n        aria-current={isActive ? 'page' : undefined}\n      >\n        <Icon className=\"w-5 h-5\" />\n        <span>{label}</span>\n        {tier && tier !== 'free' && (\n          <span className={`ml-2 px-2 py-1 rounded-full text-xs font-semibold ${\n            tier === 'elite' ? 'bg-gold-500/20 text-gold-500 border-gold-500/30' : 'bg-purple-500/20 text-purple-500 border-purple-500/30'\n          }`}>\n            {tier === 'elite' ? '👑' : '🌟'}\n          </span>\n        )}\n      </button>\n    </EducationalTooltip>\n  );\n});\n\nNavLink.displayName = 'NavLink';\n\n// Dropdown Navigation Component\nconst DropdownNav: React.FC<DropdownNavProps> = React.memo(({ label, icon: Icon, items }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  // Check if any dropdown item is active\n  const isDropdownActive = items.some(item => location.pathname === item.to);\n\n  const handleItemClick = useCallback((to: string) => {\n    try {\n      navigate(to);\n    } catch (error) {\n  devConsole.error('Navigation error:', error);\n      window.location.href = to;\n    }\n  }, [navigate]);\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <button\n          className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 min-h-[44px] group ${\n            isDropdownActive\n              ? 'bg-gradient-to-r from-cosmic-purple/30 to-cosmic-blue/30 text-cosmic-gold border-cosmic-purple/50 shadow-md'\n              : 'text-cosmic-silver hover:bg-cosmic-purple/10 hover:text-cosmic-gold'\n          }`}\n          aria-label={`${label} menu`}\n        >\n          <Icon className=\"w-5 h-5\" />\n          <span className=\"hidden sm:inline\">{label}</span>\n          <FaChevronDown className=\"w-3 h-3 transition-transform duration-200 group-data-[state=open]:rotate-180\" />\n        </button>\n      </DropdownMenu.Trigger>\n      \n      <DropdownMenu.Portal>\n        <DropdownMenu.Content\n          className=\"z-50 min-w-[220px] bg-cosmic-dark/95 backdrop-blur-lg border border-cosmic-silver/20 rounded-lg shadow-xl p-2 mt-2\"\n          sideOffset={5}\n          align=\"start\"\n        >\n          {items.map((item) => (\n            <DropdownMenu.Item key={item.to} asChild>\n              <EducationalTooltip {...item.tooltip}>\n                <button\n                  onClick={() => handleItemClick(item.to)}\n                  className={`w-full flex items-center gap-3 px-3 py-2 rounded-md font-medium transition-colors duration-200 text-left ${\n                    location.pathname === item.to\n                      ? 'bg-cosmic-purple/30 text-cosmic-gold'\n                      : 'text-cosmic-silver hover:bg-cosmic-purple/20 hover:text-cosmic-gold'\n                  }`}\n                  aria-label={`Navigate to ${item.label}`}\n                >\n                  <item.icon className=\"w-4 h-4 flex-shrink-0\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <span className=\"block truncate\">{item.label}</span>\n                    {item.tier && item.tier !== 'free' && (\n                      <span className={`inline-block mt-1 px-2 py-0.5 rounded-full text-xs font-semibold ${\n                        item.tier === 'elite' \n                          ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' \n                          : 'bg-purple-500/20 text-purple-400 border border-purple-500/30'\n                      }`}>\n                        {item.tier === 'elite' ? '👑 Elite' : '🌟 Premium'}\n                      </span>\n                    )}\n                  </div>\n                </button>\n              </EducationalTooltip>\n            </DropdownMenu.Item>\n          ))}\n        </DropdownMenu.Content>\n      </DropdownMenu.Portal>\n    </DropdownMenu.Root>\n  );\n});\n\nDropdownNav.displayName = 'DropdownNav';\n\nconst Navbar: React.FC = React.memo(() => {\n  const { user, signOut } = useAuth();\n  const { tier: userTier } = useSubscription();\n  const navigate = useNavigate();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleSignOut = useCallback(async () => {\n    try {\n      await signOut();\n      navigate('/');\n    } catch (error) {\n      devConsole.error('Sign out error:', error);\n    }\n  }, [signOut, navigate]);\n\n  const toggleMobileMenu = useCallback(() => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  }, [isMobileMenuOpen]);\n\n  // Consolidated navigation items - now organized into dropdowns\n  const coreNavItems: NavItem[] = [\n    { \n      to: '/', \n      icon: FaHome, \n      label: 'Home',\n      tooltip: { title: 'Home', description: 'Your personal cosmic dashboard with personalized insights.' }\n    },\n    { \n      to: '/chart', \n      icon: FaCompass, \n      label: 'Interactive Chart',\n      tooltip: { title: 'Interactive Chart', description: 'Explore your birth chart with beautiful D3.js visualizations and interactive elements.' }\n    }\n  ];\n\n  // Grouped navigation for dropdowns\n  const chartingTools: NavItem[] = [\n    { \n      to: '/calculator', \n      icon: FaCalculator, \n      label: 'Chart Calculator',\n      tooltip: { title: 'Chart Calculator', description: 'Calculate natal charts, transits, and progressions with precise astronomical data.' }\n    },\n    { \n      to: '/multi-system', \n      icon: FaGlobe, \n      label: 'Multi-System Analysis',\n      tooltip: { title: 'Multi-System Charts', description: 'Compare Western, Vedic, Chinese, and other astrological systems side by side.' }\n    },\n    ...(user != null ? [\n      { \n        to: '/saved-charts', \n        icon: FaChartLine, \n        label: 'Saved Charts',\n        tooltip: { title: 'Saved Charts', description: 'Access and manage your collection of saved astrological charts.' }\n      }\n    ] : [])\n  ];\n\n  const personalInsights: NavItem[] = [\n    { \n      to: '/numerology', \n      icon: FaChartLine, \n      label: 'Numerology',\n      tooltip: { title: 'Numerology Calculator', description: 'Discover your life path number, destiny number, and numerological patterns.' }\n    },\n    { \n      to: '/human-design', \n      icon: FaBook, \n      label: 'Human Design',\n      tooltip: { title: 'Human Design System', description: 'Explore your Human Design chart and discover your type, strategy, and authority.' }\n    },\n    { \n      to: '/gene-keys', \n      icon: FaKey, \n      label: 'Gene Keys',\n      tooltip: { title: 'Gene Keys Profile', description: 'Journey through the contemplative path of consciousness evolution with your genetic blueprint.' }\n    }\n  ];\n\n  const premiumFeatures: NavItem[] = user != null ? [\n    { \n      to: '/synastry', \n      icon: FaUsers, \n      label: 'Synastry Analysis',\n      tier: 'premium' as const,\n      tooltip: { title: 'Synastry & Compatibility', description: 'Analyze relationship compatibility through comprehensive chart comparison.', tier: 'premium' as const }\n    },\n    { \n      to: '/ai-interpretation', \n      icon: FaBrain, \n      label: 'AI Insights',\n      tier: 'elite' as const,\n      tooltip: { title: 'AI-Powered Analysis', description: 'Get personalized interpretations powered by advanced AI technology.', tier: 'elite' as const }\n    }\n  ] : [];\n\n  // Dropdown menu configuration\n  const dropdownMenus: DropdownNavItem[] = [\n    {\n      label: 'Charts',\n      icon: FaTools,\n      items: chartingTools\n    },\n    {\n      label: 'Insights',\n      icon: FaBrain,\n      items: personalInsights\n    },\n    ...(user != null && premiumFeatures.length > 0 ? [{\n      label: 'Premium',\n      icon: FaCrown,\n      items: premiumFeatures\n    }] : [])\n  ];\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-cosmic-dark/95 backdrop-blur-lg border-b border-cosmic-silver/10 shadow-lg\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <RouterLink \n            to=\"/\" \n            className=\"flex items-center gap-3 text-2xl font-bold text-cosmic-gold font-cinzel hover:scale-105 transition-all duration-300 group\"\n          >\n            <div className=\"relative\">\n              <FaStar className=\"text-cosmic-gold group-hover:rotate-12 transition-transform duration-300\" />\n              <div className=\"absolute inset-0 bg-cosmic-gold/20 rounded-full blur-lg scale-150 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n            </div>\n            <span className=\"bg-gradient-to-r from-cosmic-gold to-cosmic-purple bg-clip-text text-transparent\">\n              Cosmic Hub\n            </span>\n          </RouterLink>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden lg:flex items-center gap-1\">\n            {/* Core navigation items */}\n            {coreNavItems.map((item) => (\n              <NavLink key={item.to} {...item} />\n            ))}\n            \n            {/* Dropdown menus */}\n            {dropdownMenus.map((dropdown) => (\n              <DropdownNav key={dropdown.label} {...dropdown} />\n            ))}\n          </div>\n\n          {/* User Menu / Auth */}\n          <div className=\"hidden md:flex items-center gap-4\">\n            <Suspense fallback={<div className=\"w-24 h-10 bg-cosmic-purple/20 rounded-lg animate-pulse\" />}>\n              {user?.email != null ? (\n                <UserMenu user={{ email: user.email }} userTier={userTier} handleSignOut={handleSignOut} />\n              ) : (\n                <div className=\"flex items-center gap-3\">\n                  <NavLink \n                    to=\"/login\"\n                    icon={FaUser}\n                    label=\"Sign In\"\n                    tooltip={{ title: 'Sign In', description: 'Access your account and unlock premium astrological features.' }}\n                  />\n                  <button\n                    onClick={() => navigate('/signup')}\n                    className=\"px-6 py-2 bg-gradient-to-r from-cosmic-gold to-cosmic-purple text-cosmic-dark rounded-lg font-semibold hover:scale-105 hover:shadow-lg transition-all duration-300 border border-cosmic-gold/20\"\n                    aria-label=\"Sign Up for Cosmic Hub\"\n                  >\n                    Get Started\n                  </button>\n                </div>\n              )}\n            </Suspense>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            onClick={toggleMobileMenu}\n            className=\"lg:hidden p-2 rounded-lg text-cosmic-silver hover:bg-cosmic-purple/20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-cosmic-purple/50\"\n            aria-label={isMobileMenuOpen ? 'Close Menu' : 'Open Menu'}\n            {...(isMobileMenuOpen ? { 'aria-expanded': 'true' } : { 'aria-expanded': 'false' })}\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth=\"2\" \n                d={isMobileMenuOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16m-7 6h7'} \n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden py-4 px-2 bg-cosmic-dark/98 backdrop-blur-lg border-t border-cosmic-silver/10 rounded-b-lg shadow-xl\">\n            <div className=\"space-y-2\">\n              {/* Core items in mobile */}\n              {coreNavItems.map((item) => (\n                <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                  <NavLink {...item} />\n                </div>\n              ))}\n              \n              {/* Chart tools section */}\n              <div className=\"pt-2 border-t border-cosmic-silver/10\">\n                <h3 className=\"px-4 py-2 text-sm font-semibold text-cosmic-gold uppercase tracking-wider\">\n                  Chart Tools\n                </h3>\n                {chartingTools.map((item) => (\n                  <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                    <NavLink {...item} />\n                  </div>\n                ))}\n              </div>\n              \n              {/* Personal Insights section */}\n              <div className=\"pt-2 border-t border-cosmic-silver/10\">\n                <h3 className=\"px-4 py-2 text-sm font-semibold text-cosmic-gold uppercase tracking-wider\">\n                  Personal Insights\n                </h3>\n                {personalInsights.map((item) => (\n                  <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                    <NavLink {...item} />\n                  </div>\n                ))}\n              </div>\n              \n              {/* Premium features section */}\n              {user != null && premiumFeatures.length > 0 && (\n                <div className=\"pt-2 border-t border-cosmic-silver/10\">\n                  <h3 className=\"px-4 py-2 text-sm font-semibold text-cosmic-gold uppercase tracking-wider flex items-center gap-2\">\n                    <FaCrown className=\"text-yellow-400\" />\n                    Premium Features\n                  </h3>\n                  {premiumFeatures.map((item) => (\n                    <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                      <NavLink {...item} />\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              {/* Auth section */}\n              <div className=\"pt-4 border-t border-cosmic-silver/10\">\n                {user?.email != null ? (\n                  <button\n                    onClick={handleSignOut}\n                    className=\"w-full flex items-center gap-3 px-4 py-3 text-red-400 rounded-lg hover:bg-red-900/10 transition-colors duration-200 font-medium\"\n                    aria-label=\"Sign Out\"\n                  >\n                    <FaSignOutAlt />\n                    Sign Out\n                  </button>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <div onClick={() => setIsMobileMenuOpen(false)}>\n                      <NavLink \n                        to=\"/login\"\n                        icon={FaUser}\n                        label=\"Sign In\"\n                        tooltip={{ title: 'Sign In', description: 'Access your account and premium features.' }}\n                      />\n                    </div>\n                    <button\n                      onClick={() => {\n                        navigate('/signup');\n                        setIsMobileMenuOpen(false);\n                      }}\n                      className=\"w-full px-4 py-3 bg-gradient-to-r from-cosmic-gold to-cosmic-purple text-cosmic-dark rounded-lg font-semibold transition-all duration-300\"\n                      aria-label=\"Sign Up\"\n                    >\n                      Get Started\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n});\n\nNavbar.displayName = 'Navbar';\n\nexport default Navbar;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NotificationSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/ChallengeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersTab.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/NumerologyCalculator/CoreNumbersTab.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport CoreNumbersTab from './CoreNumbersTab';\nimport type { CoreNumbers } from './types';\n\ndescribe('CoreNumbersTab', () => {\n  const mockCoreNumbers: CoreNumbers = {\n    life_path: {\n      number: 7,\n      meaning: 'You are a spiritual seeker with deep analytical abilities.',\n      components: { month: 1, day: 15, year: 1990 }\n    },\n    destiny: {\n      number: 5,\n      meaning: 'You are destined for freedom and adventure.',\n    },\n    soul_urge: {\n      number: 3,\n      meaning: 'Your soul yearns for creative expression.',\n    },\n    personality: {\n      number: 2,\n      meaning: 'You appear cooperative and diplomatic.',\n    },\n    birth_day: {\n      number: 15,\n      meaning: 'You are naturally nurturing and family-oriented.',\n    },\n    attitude: {\n      number: 6,\n      meaning: 'You approach life with responsibility and care.',\n    },\n    power_name: {\n      number: 8,\n      meaning: 'Your name carries material success energy.',\n    },\n  };\n\n  it('renders CoreNumbersTab with data', () => {\n    render(<CoreNumbersTab coreNumbers={mockCoreNumbers} />);\n\n    // Check for the titles and numbers (handle multiple instances for error boundary compatibility)\n    expect(screen.getAllByText('Life Path').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('7').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Destiny').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('5').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Soul Urge').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('3').length).toBeGreaterThanOrEqual(1);\n  });\n\n  it('displays all core numbers', () => {\n    render(<CoreNumbersTab coreNumbers={mockCoreNumbers} />);\n\n    // Check that all core number types are displayed (use getAllByText for error boundary compatibility)\n    expect(screen.getAllByText('Life Path').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Destiny').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Soul Urge').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Personality').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Birth Day').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Attitude').length).toBeGreaterThanOrEqual(1);\n    expect(screen.getAllByText('Power Name').length).toBeGreaterThanOrEqual(1);\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CyclesChallenges.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CyclesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/Interpretation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/InterpretationTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicNumbers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyCalculator.enhanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyCalculator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaStar' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaInfoCircle' is defined but never used.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FeatureGuard' is defined but never used.","line":7,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":119,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":119,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":152,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":152,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<NumerologyResult | null>`.","line":153,"column":17,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":153,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numerology on an `any` value.","line":153,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":175,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":175,"endColumn":67},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":180,"column":136,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":180,"endColumn":138},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":197,"column":82,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":197,"endColumn":84},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":251,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":251,"endColumn":36},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":254,"column":13,"nodeType":"JSXOpeningElement","endLine":254,"endColumn":60},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":265,"column":15,"nodeType":"JSXOpeningElement","endLine":265,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":276,"column":15,"nodeType":"JSXOpeningElement","endLine":276,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":289,"column":15,"nodeType":"JSXOpeningElement","endLine":289,"endColumn":62}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React, { useState } from 'react';\nimport { useToast } from '../ToastProvider';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { FaStar, FaInfoCircle } from 'react-icons/fa';\nimport FeatureGuard from '../FeatureGuard';\n\ninterface NumerologyData {\n  name: string;\n  year: number;\n  month: number;\n  day: number;\n}\n\ninterface CoreNumbers {\n  life_path: {\n    number: number;\n    meaning: string;\n    components?: { month: number; day: number; year: number };\n  };\n  destiny: {\n    number: number;\n    meaning: string;\n  };\n  soul_urge: {\n    number: number;\n    meaning: string;\n  };\n  personality: {\n    number: number;\n    meaning: string;\n  };\n  birth_day: {\n    number: number;\n    meaning: string;\n  };\n  attitude: {\n    number: number;\n    meaning: string;\n  };\n  power_name: {\n    number: number;\n    meaning: string;\n  };\n}\n\ninterface NumerologyResult {\n  core_numbers: CoreNumbers;\n  karmic_numbers: {\n    karmic_debts: number[];\n    karmic_lessons: number[];\n    debt_meanings: string[];\n    lesson_meanings: string[];\n  };\n  personal_year: {\n    number: number;\n    year: number;\n    meaning: string;\n  };\n  challenge_numbers: {\n    first_challenge: { number: number; period: string };\n    second_challenge: { number: number; period: string };\n    third_challenge: { number: number; period: string };\n    fourth_challenge: { number: number; period: string };\n    meanings: {\n      first: string;\n      second: string;\n      third: string;\n      fourth: string;\n    };\n  };\n  pinnacle_numbers: {\n    first_pinnacle: { number: number; period: string };\n    second_pinnacle: { number: number; period: string };\n    third_pinnacle: { number: number; period: string };\n    fourth_pinnacle: { number: number; period: string };\n    meanings: {\n      first: string;\n      second: string;\n      third: string;\n      fourth: string;\n    };\n  };\n  systems: {\n    pythagorean: {\n      system: string;\n      letter_values: Record<string, string[]>;\n      total_value: number;\n      characteristics: string[];\n    };\n    chaldean: {\n      system: string;\n      letter_values: Record<string, string[]>;\n      total_value: number;\n      chaldean_number: number;\n      meaning: string;\n    };\n  };\n  interpretation: {\n    life_purpose: string;\n    personality_overview: string;\n    current_focus: string;\n    spiritual_path: string;\n  };\n}\n\nconst NumerologyCalculator: React.FC = () => {\n  const [formData, setFormData] = useState<NumerologyData>({\n    name: '',\n    year: new Date().getFullYear() - 30,\n    month: 1,\n    day: 1\n  });\n  const [result, setResult] = useState<NumerologyResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter your full name',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const birthDate = `${formData.year}-${String(formData.month).padStart(2, '0')}-${String(formData.day).padStart(2, '0')}`;\n      \n      const response = await fetch(`${import.meta.env.VITE_BACKEND_URL}/calculate-numerology`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          birth_date: birthDate\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to calculate numerology');\n      }\n\n      const data = await response.json();\n      setResult(data.numerology);\n\n      toast({\n        title: 'Numerology Calculated',\n        description: 'Your numerology chart is ready!',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (err) {\n      toast({\n        title: 'Calculation Failed',\n        description: err instanceof Error ? err.message : 'Unknown error',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: name === 'name' ? value : parseInt(value) }));\n  };\n\n  const renderCoreNumber = (title: string, number: number, meaning: string, components?: { month: number; day: number; year: number }) => (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"font-bold text-md\">{title}</h3>\n          <span className=\"px-3 py-1 text-lg text-white rounded-full bg-cosmic-purple\">{number}</span>\n        </div>\n        <p className=\"text-cosmic-silver\">{meaning}</p>\n        {components && (\n          <p className=\"mt-2 text-sm text-cosmic-silver/80\">\n            Calculation: {components.month} + {components.day} + {components.year} = {number}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n\n  const SystemsDisplay = ({ systems }: { systems: NumerologyResult['systems'] }) => (\n    <div className=\"flex flex-col space-y-6\">\n      <div className=\"cosmic-card\">\n        <div className=\"p-4\">\n          <h3 className=\"mb-4 text-lg font-bold\">Pythagorean System</h3>\n          <p className=\"mb-4 text-cosmic-silver\">{systems.pythagorean.system}</p>\n          <div className=\"grid grid-cols-3 gap-2 mb-4\">\n            {Object.entries(systems.pythagorean.letter_values).map(([letter, values]) => (\n              <div key={letter} className=\"p-2 text-center rounded-md bg-gray-50\">\n                <p className=\"font-bold\">{letter}</p>\n                <p className=\"text-sm\">{values.join(', ')}</p>\n              </div>\n            ))}\n          </div>\n          <p className=\"mb-2 text-cosmic-silver\">Total Value: {systems.pythagorean.total_value}</p>\n          <div className=\"flex flex-col space-y-2\">\n            {systems.pythagorean.characteristics.map((char, index) => (\n              <p key={index} className=\"text-cosmic-silver\">{char}</p>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"cosmic-card\">\n        <div className=\"p-4\">\n          <h3 className=\"mb-4 text-lg font-bold\">Chaldean System</h3>\n          <p className=\"mb-4 text-cosmic-silver\">{systems.chaldean.system}</p>\n          <div className=\"grid grid-cols-3 gap-2 mb-4\">\n            {Object.entries(systems.chaldean.letter_values).map(([letter, values]) => (\n              <div key={letter} className=\"p-2 text-center rounded-md bg-gray-50\">\n                <p className=\"font-bold\">{letter}</p>\n                <p className=\"text-sm\">{values.join(', ')}</p>\n              </div>\n            ))}\n          </div>\n          <p className=\"mb-2 text-cosmic-silver\">Total Value: {systems.chaldean.total_value}</p>\n          <p className=\"mb-2 text-cosmic-silver\">Chaldean Number: {systems.chaldean.chaldean_number}</p>\n          <p className=\"text-cosmic-silver\">{systems.chaldean.meaning}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"py-10 text-center\">\n        <div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>\n        <p className=\"mt-4 text-cosmic-silver\">Calculating your numerology chart...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col space-y-6\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"flex flex-col space-y-4\">\n          <div>\n            <label className=\"block mb-2 text-cosmic-gold\">Full Name</label>\n            <input\n              className=\"cosmic-input\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              placeholder=\"Enter your full name\"\n            />\n          </div>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block mb-2 text-cosmic-gold\">Year</label>\n              <input\n                className=\"cosmic-input\"\n                name=\"year\"\n                type=\"number\"\n                value={formData.year}\n                onChange={handleChange}\n                placeholder=\"Year\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2 text-cosmic-gold\">Month</label>\n              <input\n                className=\"cosmic-input\"\n                name=\"month\"\n                type=\"number\"\n                min=\"1\"\n                max=\"12\"\n                value={formData.month}\n                onChange={handleChange}\n                placeholder=\"Month\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2 text-cosmic-gold\">Day</label>\n              <input\n                className=\"cosmic-input\"\n                name=\"day\"\n                type=\"number\"\n                min=\"1\"\n                max=\"31\"\n                value={formData.day}\n                onChange={handleChange}\n                placeholder=\"Day\"\n              />\n            </div>\n          </div>\n          <button className=\"cosmic-button\" type=\"submit\">\n            Calculate Numerology\n          </button>\n        </div>\n      </form>\n\n      {result && (\n        <Tabs.Root>\n          <Tabs.List className=\"flex border-b border-cosmic-silver/30\">\n            <Tabs.Trigger value=\"core\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Core Numbers</Tabs.Trigger>\n            <Tabs.Trigger value=\"cycles\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Cycles & Challenges</Tabs.Trigger>\n            <Tabs.Trigger value=\"karmic\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Karmic Numbers</Tabs.Trigger>\n            <Tabs.Trigger value=\"systems\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Systems Comparison</Tabs.Trigger>\n            <Tabs.Trigger value=\"interpretation\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Interpretation</Tabs.Trigger>\n          </Tabs.List>\n\n          <Tabs.Content value=\"core\" className=\"p-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              {renderCoreNumber(\"Life Path\", result.core_numbers.life_path.number, result.core_numbers.life_path.meaning, result.core_numbers.life_path.components)}\n              {renderCoreNumber(\"Destiny\", result.core_numbers.destiny.number, result.core_numbers.destiny.meaning)}\n              {renderCoreNumber(\"Soul Urge\", result.core_numbers.soul_urge.number, result.core_numbers.soul_urge.meaning)}\n              {renderCoreNumber(\"Personality\", result.core_numbers.personality.number, result.core_numbers.personality.meaning)}\n              {renderCoreNumber(\"Birth Day\", result.core_numbers.birth_day.number, result.core_numbers.birth_day.meaning)}\n              {renderCoreNumber(\"Attitude\", result.core_numbers.attitude.number, result.core_numbers.attitude.meaning)}\n              {renderCoreNumber(\"Power Name\", result.core_numbers.power_name.number, result.core_numbers.power_name.meaning)}\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"cycles\" className=\"p-4\">\n            <div className=\"flex flex-col space-y-6\">\n              <Accordion.Root type=\"single\" collapsible>\n                <Accordion.Item value=\"challenges\">\n                  <Accordion.Trigger className=\"flex justify-between w-full\">\n                    <span className=\"font-bold\">Challenge Numbers</span>\n                    <ChevronDownIcon />\n                  </Accordion.Trigger>\n                  <Accordion.Content className=\"pb-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">First Challenge ({result.challenge_numbers.first_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.first_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.first}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Second Challenge ({result.challenge_numbers.second_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.second_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.second}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Third Challenge ({result.challenge_numbers.third_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.third_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.third}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Fourth Challenge ({result.challenge_numbers.fourth_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.fourth_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.fourth}</p>\n                      </div>\n                    </div>\n                  </Accordion.Content>\n                </Accordion.Item>\n\n                <Accordion.Item value=\"pinnacles\">\n                  <Accordion.Trigger className=\"flex justify-between w-full\">\n                    <span className=\"font-bold\">Pinnacle Numbers</span>\n                    <ChevronDownIcon />\n                  </Accordion.Trigger>\n                  <Accordion.Content className=\"pb-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">First Pinnacle ({result.pinnacle_numbers.first_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.first_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.first}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Second Pinnacle ({result.pinnacle_numbers.second_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.second_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.second}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Third Pinnacle ({result.pinnacle_numbers.third_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.third_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.third}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Fourth Pinnacle ({result.pinnacle_numbers.fourth_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.fourth_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.fourth}</p>\n                      </div>\n                    </div>\n                  </Accordion.Content>\n                </Accordion.Item>\n              </Accordion.Root>\n\n              <div className=\"cosmic-card\">\n                <div className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-bold text-md\">Personal Year {result.personal_year.year}</h3>\n                    <span className=\"px-4 py-2 text-xl text-white bg-orange-500 rounded-full\">{result.personal_year.number}</span>\n                  </div>\n                  <p className=\"mt-4 text-cosmic-silver\">{result.personal_year.meaning}</p>\n                </div>\n              </div>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"karmic\" className=\"p-4\">\n            <div className=\"flex flex-col space-y-6\">\n              {result.karmic_numbers.karmic_debts.length > 0 && (\n                <div className=\"p-4 border border-yellow-500 rounded-md bg-yellow-900/50\">\n                  <div className=\"flex mb-2 space-x-4\">\n                    <span className=\"text-xl text-yellow-500\">⚠️</span>\n                    <div>\n                      <h4 className=\"font-bold text-white\">Karmic Debts</h4>\n                      <p className=\"text-white/80\">Numbers: {result.karmic_numbers.karmic_debts.join(', ')}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col space-y-1\">\n                    {result.karmic_numbers.debt_meanings.map((meaning, index) => (\n                      <p key={index} className=\"text-sm text-white/80\">• {meaning}</p>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {result.karmic_numbers.karmic_lessons.length > 0 && (\n                <div className=\"p-4 border border-blue-500 rounded-md bg-blue-900/50\">\n                  <div className=\"flex mb-2 space-x-4\">\n                    <span className=\"text-xl text-blue-500\">ℹ️</span>\n                    <div>\n                      <h4 className=\"font-bold text-white\">Karmic Lessons</h4>\n                      <p className=\"text-white/80\">Missing Numbers: {result.karmic_numbers.karmic_lessons.join(', ')}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col space-y-1\">\n                    {result.karmic_numbers.lesson_meanings.map((meaning, index) => (\n                      <p key={index} className=\"text-sm text-white/80\">• {meaning}</p>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {result.karmic_numbers.karmic_debts.length === 0 && result.karmic_numbers.karmic_lessons.length === 0 && (\n                <div className=\"p-4 border border-green-500 rounded-md bg-green-900/50\">\n                  <div className=\"flex space-x-4\">\n                    <span className=\"text-xl text-green-500\">✅</span>\n                    <div>\n                      <h4 className=\"font-bold text-white\">Clear Karmic Path</h4>\n                      <p className=\"text-white/80\">You have no significant karmic debts or lessons indicated in your numerology chart.</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"systems\" className=\"p-4\">\n            <SystemsDisplay systems={result.systems} />\n          </Tabs.Content>\n\n          <Tabs.Content value=\"interpretation\" className=\"p-4\">\n            <div className=\"flex flex-col space-y-6\">\n              {Object.entries(result.interpretation).map(([key, value]) => (\n                <div key={key} className=\"border-l-4 border-purple-500 cosmic-card\">\n                  <div className=\"p-4\">\n                    <div className=\"flex flex-col space-y-2\">\n                      <h3 className=\"font-bold text-purple-600 capitalize text-md\">{key.replace('_', ' ')}</h3>\n                      <p className=\"text-cosmic-silver\">{value}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Tabs.Content>\n        </Tabs.Root>\n      )}\n    </div>\n  );\n};\n\nexport default NumerologyCalculator;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyForm.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { NumerologyData } from './types';\n\ninterface NumerologyFormProps {\n  formData: NumerologyData;\n  setFormData: React.Dispatch<React.SetStateAction<NumerologyData>>;\n  onSubmit: (e: React.FormEvent) => void;\n}\n\nconst NumerologyForm: React.FC<NumerologyFormProps> = ({ formData, setFormData, onSubmit }) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: name === 'name' ? value : parseInt(value) }));\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"flex flex-col space-y-4\" aria-label=\"Numerology Input Form\">\n      <div>\n        <label htmlFor=\"name\" className=\"block mb-2 text-cosmic-gold\">Full Name</label>\n        <input\n          id=\"name\"\n          className=\"cosmic-input\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n          placeholder=\"Enter your full name\"\n          required\n          aria-required=\"true\"\n        />\n      </div>\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div>\n          <label htmlFor=\"year\" className=\"block mb-2 text-cosmic-gold\">Year</label>\n          <input\n            id=\"year\"\n            className=\"cosmic-input\"\n            name=\"year\"\n            type=\"number\"\n            value={formData.year}\n            onChange={handleChange}\n            placeholder=\"Year\"\n            required\n            aria-required=\"true\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"month\" className=\"block mb-2 text-cosmic-gold\">Month</label>\n          <input\n            id=\"month\"\n            className=\"cosmic-input\"\n            name=\"month\"\n            type=\"number\"\n            min=\"1\"\n            max=\"12\"\n            value={formData.month}\n            onChange={handleChange}\n            placeholder=\"Month\"\n            required\n            aria-required=\"true\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"day\" className=\"block mb-2 text-cosmic-gold\">Day</label>\n          <input\n            id=\"day\"\n            className=\"cosmic-input\"\n            name=\"day\"\n            type=\"number\"\n            min=\"1\"\n            max=\"31\"\n            value={formData.day}\n            onChange={handleChange}\n            placeholder=\"Day\"\n            required\n            aria-required=\"true\"\n          />\n        </div>\n      </div>\n      <button className=\"cosmic-button\" type=\"submit\" aria-label=\"Calculate Numerology\">\n        Calculate Numerology\n      </button>\n    </form>\n  );\n};\n\nexport default NumerologyForm;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PersonalYearCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PersonalYearTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PinnacleCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsComparison.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/useNumerology.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":16,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":16,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":16,"endColumn":53},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":36,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":33,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1066,1095],"text":"(localStorage.getItem('token') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1066,1095],"text":"(localStorage.getItem('token') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1066,1095],"text":"(Boolean(localStorage.getItem('token')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1096,1098],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":45,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<NumerologyResult | null>`.","line":46,"column":17,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":46,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numerology on an `any` value.","line":46,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":32}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useToast } from '../ToastProvider';\nimport type { NumerologyData, NumerologyResult } from './types';\n\nexport const useNumerology = () => {\n  const [formData, setFormData] = useState<NumerologyData>({\n    name: '',\n    year: new Date().getFullYear() - 30,\n    month: 1,\n    day: 1,\n  });\n  const [result, setResult] = useState<NumerologyResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name.trim()) {\n      toast({\n        description: 'Please enter your full name',\n        status: 'error'\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const birthDate = `${formData.year}-${String(formData.month).padStart(2, '0')}-${String(formData.day).padStart(2, '0')}`;\n      const response = await fetch('/api/calculate-numerology', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token') || ''}`,\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          birth_date: birthDate,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to calculate numerology');\n      }\n\n      const data = await response.json();\n      setResult(data.numerology);\n      toast({\n        description: 'Numerology Calculated',\n        status: 'success'\n      });\n    } catch (err) {\n      toast({\n        description: err instanceof Error ? err.message : 'Unknown error',\n        status: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { formData, setFormData, result, loading, handleSubmit };\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PdfExport.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AstrologyChart' is defined but never used.","line":7,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1558,1561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1558,1561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":56,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":56,"endColumn":80,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1680,2134],"text":"{ if (!chartData) {\n            throw new Error('Chart data is required for standard PDF export');\n          }\n          // Use serialization utility to ensure consistent data format\n          const serializedChartData = serializeAstrologyData(chartData as any);\n          exportData = {\n            chart_data: { chart: JSON.parse(serializedChartData) },\n            birth_info: birthInfo,\n            report_type: 'standard'\n          };\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `AstrologyChart | UserProfile | NumerologyData`.","line":56,"column":62,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":56,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1935,1938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1935,1938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":58,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":58,"endColumn":65},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":16,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":65,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2176,2188],"text":"(Boolean(synastryData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":29,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":73},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":86,"column":16,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":86,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3004,3019],"text":"(Boolean(multiSystemData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":227,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8777,8793],"text":"What&apos;s Included:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8777,8793],"text":"What&lsquo;s Included:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8777,8793],"text":"What&#39;s Included:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8777,8793],"text":"What&rsquo;s Included:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":267,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":267,"endColumn":38}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useToast } from './ToastProvider';\nimport * as Dialog from '@radix-ui/react-dialog';\nimport { FaDownload } from 'react-icons/fa';\nimport FeatureGuard from './FeatureGuard';\nimport type { ChartData, BirthData } from '../types';\nimport { serializeAstrologyData, type AstrologyChart } from '@cosmichub/types';\nimport { devConsole } from '../config/environment';\n\ninterface PdfExportProps {\n  chartData?: ChartData;\n  birthInfo?: BirthData;\n  synastryData?: unknown;\n  multiSystemData?: unknown;\n}\n\ninterface ExportOptions {\n  reportType: 'standard' | 'synastry' | 'multi_system';\n  includeInterpretation: boolean;\n  includeAspects: boolean;\n  includeTransits: boolean;\n}\n\nconst PdfExport: React.FC<PdfExportProps> = React.memo(({ chartData, birthInfo, synastryData, multiSystemData }) => {\n  const [loading, setLoading] = useState(false);\n  const [options, setOptions] = useState<ExportOptions>({\n    reportType: 'standard',\n    includeInterpretation: true,\n    includeAspects: true,\n    includeTransits: false\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const handleOptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    setOptions((prev) => ({\n      ...prev,\n      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value,\n    }));\n  }, []);\n\n  const exportToPdf = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      let exportData: any = {};\n      let endpoint = '/api/export-pdf';\n\n      switch (options.reportType) {\n        case 'standard':\n          if (!chartData) {\n            throw new Error('Chart data is required for standard PDF export');\n          }\n          // Use serialization utility to ensure consistent data format\n          const serializedChartData = serializeAstrologyData(chartData as any);\n          exportData = {\n            chart_data: { chart: JSON.parse(serializedChartData) },\n            birth_info: birthInfo,\n            report_type: 'standard'\n          };\n          break;\n\n        case 'synastry':\n          if (!synastryData) {\n            throw new Error('Synastry data is required for synastry PDF export');\n          }\n          // Serialize synastry data if it matches our schema\n          try {\n            const serializedSynastryData = serializeAstrologyData(synastryData);\n            exportData = {\n              chart_data: { synastry: JSON.parse(serializedSynastryData) },\n              report_type: 'synastry'\n            };\n          } catch (serializationError) {\n            devConsole.warn?.('Could not serialize synastry data, using raw data:', serializationError);\n            exportData = {\n              chart_data: { synastry: synastryData },\n              report_type: 'synastry'\n            };\n          }\n          endpoint = '/api/export-synastry-pdf';\n          break;\n\n        case 'multi_system':\n          if (!multiSystemData) {\n            throw new Error('Multi-system data is required for multi-system PDF export');\n          }\n          exportData = {\n            chart_data: { charts: multiSystemData },\n            report_type: 'multi_system'\n          };\n          break;\n\n        default:\n          throw new Error('Invalid report type selected');\n      }\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(exportData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to generate PDF');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `cosmic_hub_${options.reportType}_report.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      toast({\n        title: 'PDF Generated',\n        description: 'Your report is downloading.',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (err) {\n      toast({\n        title: 'PDF Generation Failed',\n        description: err instanceof Error ? err.message : 'Unknown error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n      setIsOpen(false);\n    }\n  }, [options, chartData, birthInfo, synastryData, multiSystemData, toast]);\n\n  return (\n    <FeatureGuard requiredTier=\"premium\" feature=\"pdf_export\">\n      <div className=\"cosmic-card\">\n        <div className=\"p-6\">\n          <h2 className=\"mb-4 text-xl font-bold text-cosmic-gold\">Export to PDF</h2>\n          <p className=\"mb-6 text-cosmic-silver\">Download a professional PDF report of your chart analysis.</p>\n          <button\n            className=\"w-full cosmic-button\"\n            onClick={() => setIsOpen(true)}\n            disabled={loading}\n            aria-label=\"Open PDF Export Options\"\n          >\n            <FaDownload className=\"mr-2\" />\n            Export Chart to PDF\n          </button>\n        </div>\n      </div>\n\n      <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\n        <Dialog.Portal>\n          <Dialog.Overlay className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\" />\n          <Dialog.Content className=\"fixed w-full max-w-lg p-6 transform -translate-x-1/2 -translate-y-1/2 border rounded-lg top-1/2 left-1/2 bg-cosmic-blue/80 backdrop-blur-md border-cosmic-silver/20\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <Dialog.Title className=\"text-lg font-bold text-cosmic-gold\">PDF Export Options</Dialog.Title>\n              <Dialog.Close asChild>\n                <button className=\"text-cosmic-silver hover:text-cosmic-gold\" aria-label=\"Close\">\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </Dialog.Close>\n            </div>\n\n            <div className=\"flex flex-col space-y-6\">\n              <div>\n                <label htmlFor=\"reportType\" className=\"block mb-2 text-cosmic-gold\">Report Type</label>\n                <select\n                  id=\"reportType\"\n                  name=\"reportType\"\n                  value={options.reportType}\n                  onChange={handleOptionChange}\n                  className=\"cosmic-input\"\n                  aria-label=\"Report Type\"\n                >\n                  <option value=\"standard\">Standard Chart Report</option>\n                  <option value=\"synastry\">Synastry Report</option>\n                  <option value=\"multi_system\">Multi-System Report</option>\n                </select>\n              </div>\n\n              <div className=\"flex flex-col space-y-4\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"includeInterpretation\"\n                    checked={options.includeInterpretation}\n                    onChange={handleOptionChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Include AI Interpretation (Elite Feature)</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"includeAspects\"\n                    checked={options.includeAspects}\n                    onChange={handleOptionChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Include Detailed Aspects</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"includeTransits\"\n                    checked={options.includeTransits}\n                    onChange={handleOptionChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Include Current Transits (Elite Feature)</span>\n                </label>\n              </div>\n\n              <div className=\"flex p-4 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n                <span className=\"text-xl text-blue-500\">ℹ️</span>\n                <div className=\"flex flex-col space-y-2\">\n                  <p className=\"font-bold text-cosmic-silver\">What's Included:</p>\n                  <p className=\"text-sm text-cosmic-silver\">\n                    • Professional formatting with planetary positions<br />\n                    • House cusp details and sign placements<br />\n                    • Major aspect calculations with orbs\n                    {options.includeInterpretation && (\n                      <>\n                        <br />\n                        • AI-powered astrological interpretations\n                      </>\n                    )}\n                    {options.reportType === 'synastry' && (\n                      <>\n                        <br />\n                        • Relationship compatibility analysis<br />\n                        • House overlays and composite insights\n                      </>\n                    )}\n                    {options.reportType === 'multi_system' && (\n                      <>\n                        <br />\n                        • Western, Vedic, Chinese, and Mayan systems<br />\n                        • Integrated cross-system analysis\n                      </>\n                    )}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex mt-6 space-x-3\">\n              <button\n                className=\"flex-1 bg-transparent border cosmic-button border-cosmic-silver text-cosmic-silver hover:bg-cosmic-silver/10\"\n                onClick={() => setIsOpen(false)}\n                aria-label=\"Cancel\"\n              >\n                Cancel\n              </button>\n              <button\n                className=\"flex-1 cosmic-button\"\n                onClick={exportToPdf}\n                disabled={loading}\n              >\n                <FaDownload className=\"mr-2\" />\n                {loading ? 'Generating...' : 'Generate & Download'}\n              </button>\n            </div>\n          </Dialog.Content>\n        </Dialog.Portal>\n      </Dialog.Root>\n    </FeatureGuard>\n  );\n});\n\nPdfExport.displayName = 'PdfExport';\n\nexport default PdfExport;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PremiumFeaturesDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PricingPage.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":82,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":82,"endColumn":62},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":100,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":100,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { devConsole } from '../config/environment';\nimport { useAuth, useSubscription } from '@cosmichub/auth';\nimport { useToast } from './ToastProvider';\nimport { stripeService } from '@cosmichub/integrations';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport { FaCheck, FaTimes, FaStar, FaCrown, FaUser, FaChartLine, FaUsers, FaBrain, FaMagic, FaInfinity, FaQuestionCircle, FaHeart, FaCalendarAlt, FaFilePdf, FaSave, FaHeadset } from 'react-icons/fa';\n// Using centralized subscription tiers\nimport { COSMICHUB_TIERS, AstroSubscriptionTier } from '@cosmichub/subscriptions';\n\nconst PricingPage: React.FC = React.memo(() => {\n  const { user } = useAuth();\n  const { tier: userTier } = useSubscription();\n  const { toast } = useToast();\n  const [isAnnual, setIsAnnual] = useState(false);\n  const [loading, setLoading] = useState<string | null>(null);\n\n  const handleUpgrade = useCallback(async (tier: 'premium' | 'elite') => {\n    if (user === null || user === undefined) {\n      toast({\n        title: 'Authentication Required',\n        description: 'Please sign in to upgrade your plan.',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    if (stripeService === undefined || stripeService === null) {\n      toast({\n        title: 'Service Unavailable',\n        description: 'Payment service is currently unavailable. Please try again later.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setLoading(tier);\n    try {\n      const successUrl = `${window.location.origin}/pricing/success?tier=${tier}`;\n      const cancelUrl = `${window.location.origin}/pricing/cancel`;\n\n      await stripeService.createCheckoutSession({\n        tier,\n        userId: user.uid,\n        isAnnual,\n        successUrl,\n        cancelUrl,\n        metadata: {\n          sourceComponent: 'PricingPage',\n          billingCycle: isAnnual ? 'annual' : 'monthly'\n        }\n      });\n\n      // Update subscription data in Firestore\n      await stripeService.updateUserSubscription(user.uid, tier, isAnnual);\n      \n      toast({\n        title: 'Upgrade Initiated',\n        description: 'Redirecting to Stripe Checkout...',\n        status: 'info',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      devConsole.error('Upgrade error:', error);\n      toast({\n        title: 'Upgrade Failed',\n        description: 'An error occurred during the upgrade process. Please try again.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(null);\n    }\n  }, [user, isAnnual, toast]);\n\n  const getTierIcon = (tier: keyof typeof COSMICHUB_TIERS) => {\n    switch (tier) {\n      case 'free': return <FaUser className=\"text-gray-500\" />;\n      case 'premium': return <FaStar className=\"text-purple-500\" />;\n      case 'elite': return <FaCrown className=\"text-orange-500\" />;\n      default: return <FaUser className=\"text-gray-500\" />;\n    }\n  };\n\n  const getTierColor = (tier: keyof typeof COSMICHUB_TIERS): string => {\n    switch (tier) {\n      case 'free': return 'gray-500';\n      case 'premium': return 'purple-500';\n      case 'elite': return 'orange-500';\n      default: return 'gray-500';\n    }\n  };\n\n  const getFeatureIcon = (feature: string) => {\n    switch (feature) {\n      case 'Basic birth chart calculation': return <FaChartLine className=\"text-blue-500\" />;\n      case 'Western tropical astrology': return <FaUsers className=\"text-green-500\" />;\n      case 'Multi-system analysis': return <FaBrain className=\"text-purple-500\" />;\n      case 'Vedic sidereal charts': return <FaMagic className=\"text-orange-500\" />;\n      case 'Chinese astrology': return <FaInfinity className=\"text-red-500\" />;\n      case 'Mayan calendar': return <FaStar className=\"text-yellow-500\" />;\n      case 'Uranian astrology': return <FaCrown className=\"text-gold-500\" />;\n      case 'Synastry compatibility': return <FaHeart className=\"text-pink-500\" />;\n      case 'AI interpretations': return <FaBrain className=\"text-indigo-500\" />;\n      case 'Transit analysis': return <FaCalendarAlt className=\"text-cyan-500\" />;\n      case 'PDF export': return <FaFilePdf className=\"text-red-500\" />;\n      case 'Unlimited calculations': return <FaInfinity className=\"text-green-500\" />;\n      case 'Unlimited storage': return <FaSave className=\"text-blue-500\" />;\n      case 'Priority support': return <FaHeadset className=\"text-purple-500\" />;\n      default: return <FaQuestionCircle className=\"text-gray-500\" />;\n    }\n  };\n\n  const getFeatureDescription = (feature: string): string => {\n    const descriptions: Record<string, string> = {\n      'AI interpretations': 'Intelligent chart analysis powered by advanced AI models.',\n      'Transit analysis': 'Detailed forecasts of upcoming planetary influences and timing.',\n      'Multi-system analysis': 'Integrated Western, Vedic, Chinese, Mayan, and Uranian astrology.',\n      'Synastry compatibility': 'In-depth relationship analysis between multiple charts.',\n      'Vedic sidereal charts': 'Traditional Indian astrology with sidereal zodiac.',\n      'Chinese astrology': 'Four Pillars and Zi Wei Dou Shu systems.',\n      'Mayan calendar': 'Tzolk\\'in and Haab cycles for spiritual timing.',\n      'Uranian astrology': 'Midpoint and transneptunian planet analysis.'\n    };\n    const desc = descriptions[feature];\n    return desc === undefined || desc === '' ? 'Advanced astrological feature for deeper insights.' : desc;\n  };\n\n  const getFeatureExamples = (feature: string): string[] => {\n    const examples: Record<string, string[]> = {\n      'AI interpretations': [\n        'Personality analysis based on planetary patterns',\n        'Life purpose guidance from chart synthesis',\n        'Relationship compatibility insights',\n        'Career path recommendations'\n      ],\n      'Transit analysis': [\n        'Current life phase timing',\n        'Opportunity windows',\n        'Challenge periods',\n        'Growth cycles'\n      ],\n      'Multi-system analysis': [\n        'Western tropical chart for personality',\n        'Vedic sidereal for karmic patterns',\n        'Chinese Four Pillars for life cycles',\n        'Mayan calendar for spiritual purpose'\n      ],\n      'Synastry compatibility': [\n        'Romantic partnership analysis',\n        'Friendship compatibility',\n        'Family relationship dynamics',\n        'Business partnership potential'\n      ]\n    };\n    const ex = examples[feature];\n    return Array.isArray(ex) ? ex : [];\n  };\n\n  const getFeatureTier = (feature: string): 'free' | 'premium' | 'elite' | undefined => {\n    const tiers: Record<string, 'free' | 'premium' | 'elite'> = {\n      'AI interpretations': 'elite',\n      'Transit analysis': 'elite',\n      'Multi-system analysis': 'premium',\n      'Synastry compatibility': 'premium',\n      'Vedic sidereal charts': 'premium',\n      'Chinese astrology': 'premium',\n      'Uranian astrology': 'elite',\n      'Mayan calendar': 'premium'\n    };\n    return tiers[feature];\n  };\n\n  const getAllFeatures = (): string[] => [\n    'Basic birth chart calculation',\n    'Western tropical astrology',\n    'Multi-system analysis',\n    'Vedic sidereal charts',\n    'Chinese astrology',\n    'Mayan calendar',\n    'Uranian astrology',\n    'Synastry compatibility',\n    'AI interpretations',\n    'Transit analysis',\n    'PDF export',\n    'Unlimited calculations',\n    'Unlimited storage',\n    'Priority support'\n  ];\n\n  const isFeatureIncluded = (feature: string, planFeatures: string[]): boolean => {\n    return planFeatures.includes(feature);\n  };\n\n  return (\n    <div className=\"min-h-screen px-4 py-12 bg-gray-50\">\n      <div className=\"mx-auto max-w-7xl\">\n        <div className=\"mb-12 space-y-4 text-center\">\n          <h2 className=\"text-4xl font-bold text-cosmic-gold font-cinzel\">Pricing Plans</h2>\n          <p className=\"max-w-2xl mx-auto text-lg text-cosmic-silver\">\n            Choose the perfect plan to unlock the cosmos. All plans include core astrology features, with premium tiers adding advanced analysis and unlimited access.\n          </p>\n        </div>\n\n        <div className=\"flex justify-center mb-8\">\n          <label className=\"flex items-center space-x-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={isAnnual}\n              onChange={(e) => setIsAnnual(e.target.checked)}\n              className=\"w-5 h-5 text-purple-500 rounded\"\n            />\n            <span className=\"font-medium text-cosmic-silver\">Annual Billing</span>\n            <span className=\"px-2 py-1 text-sm text-green-500 rounded bg-green-500/20\">Save 20%</span>\n          </label>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 md:grid-cols-3\">\n          {Object.entries(COSMICHUB_TIERS).map(([tierKey, tier]: [string, AstroSubscriptionTier]) => (\n            <div key={tierKey} className={`cosmic-card ${tierKey === userTier ? 'border-2 border-purple-500 shadow-lg' : ''}`}>\n              <div className=\"p-6\">\n                <div className=\"flex items-center mb-4 space-x-3\">\n                  {getTierIcon(tierKey)}\n                  <h3 className=\"text-2xl font-bold text-cosmic-gold\">{tier.name}</h3>\n                </div>\n                <p className=\"mb-6 text-sm text-cosmic-silver\">{tier.description}</p>\n                <div className=\"flex items-baseline mb-6 space-x-2\">\n                  <span className=\"text-3xl font-bold text-cosmic-gold\">${isAnnual ? tier.price.yearly : tier.price.monthly}</span>\n                  <span className=\"text-sm text-cosmic-silver/80\">/{isAnnual ? 'year' : 'month'}</span>\n                </div>\n                <ul className=\"mb-6 space-y-4\">\n                  {tier.features.map((feature: string, index: number) => (\n                    <li key={index} className=\"flex items-start space-x-3\">\n                      <FaCheck className=\"mt-1 text-green-500\" />\n                      <div className=\"flex flex-col space-y-1\">\n                        <p className=\"text-sm text-cosmic-silver\">{feature}</p>\n                        <div className=\"flex items-center space-x-2\">\n                          {/* Guard against invalid tier color values (tailwind safelist recommended) */}\n                          <span className={`px-2 py-1 rounded text-xs bg-${getTierColor(feature)}/20 text-${getTierColor(feature)}`}>\n                            {getFeatureTier(feature)}\n                          </span>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <button className=\"text-cosmic-purple hover:text-cosmic-purple/80\" aria-label=\"Feature Information\">\n                                <FaQuestionCircle />\n                              </button>\n                            </Tooltip.Trigger>\n                            <Tooltip.Portal>\n                              <Tooltip.Content className=\"bg-cosmic-blue/80 backdrop-blur-md border border-cosmic-silver/20 rounded-md shadow-lg p-2 text-cosmic-silver max-w-[300px]\" side=\"top\">\n                                <p className=\"mb-2 font-bold\">{feature}</p>\n                                <p className=\"mb-2 text-sm\">{getFeatureDescription(feature)}</p>\n                                <div className=\"flex flex-col space-y-1\">\n                                  {getFeatureExamples(feature).map((example, i) => (\n                                    <p key={i} className=\"text-xs text-cosmic-silver/80\">• {example}</p>\n                                  ))}\n                                </div>\n                                <Tooltip.Arrow className=\"fill-cosmic-blue/80\" />\n                              </Tooltip.Content>\n                            </Tooltip.Portal>\n                          </Tooltip.Root>\n                        </div>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n                <button\n                  className=\"w-full cosmic-button\"\n                  disabled={(loading !== null && loading === tierKey) || (typeof userTier === 'string' && tierKey === userTier)}\n                  onClick={() => { void handleUpgrade(tierKey as 'premium' | 'elite'); }}\n                  aria-label={tierKey === userTier ? 'Current Plan' : 'Select Plan'}\n                >\n                  {tierKey === userTier ? 'Current Plan' : (tier.price.monthly === 0 ? 'Free' : 'Subscribe Now')}\n                </button>\n                {tier.price.monthly === 0 && typeof tier.price.monthly === 'number' && (\n                  <p className=\"mt-2 text-xs text-center text-cosmic-silver/80\">Always free</p>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <hr className=\"my-12 border-cosmic-silver/30\" />\n\n        <div className=\"space-y-4 text-center\">\n          <h2 className=\"text-2xl font-bold text-cosmic-gold\">Feature Comparison</h2>\n          <p className=\"text-sm text-cosmic-silver\">Hover over features for more details</p>\n        </div>\n\n        <div className=\"mt-8 overflow-x-auto\">\n          <table className=\"w-full table-auto\">\n            <thead>\n              <tr>\n                <th className=\"px-4 py-3 font-semibold text-left text-cosmic-silver\">Feature</th>\n                <th className=\"px-4 py-3 font-semibold text-center text-cosmic-silver\">Free</th>\n                <th className=\"px-4 py-3 font-semibold text-center text-cosmic-silver\">Premium</th>\n                <th className=\"px-4 py-3 font-semibold text-center text-cosmic-silver\">Elite</th>\n              </tr>\n            </thead>\n            <tbody>\n              {getAllFeatures().map((feature) => (\n                <tr key={feature} className=\"border-b border-cosmic-silver/20\">\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getFeatureIcon(feature)}\n                      <span className=\"text-cosmic-silver\">{feature}</span>\n                      <Tooltip.Root>\n                        <Tooltip.Trigger asChild>\n                          <button className=\"text-cosmic-purple hover:text-cosmic-purple/80\" aria-label=\"Feature Information\">\n                            <FaQuestionCircle />\n                          </button>\n                        </Tooltip.Trigger>\n                        <Tooltip.Portal>\n                          <Tooltip.Content className=\"bg-cosmic-blue/80 backdrop-blur-md border border-cosmic-silver/20 rounded-md shadow-lg p-2 text-cosmic-silver max-w-[300px]\" side=\"top\">\n                            <p className=\"mb-2 font-bold\">{feature}</p>\n                            <p className=\"mb-2 text-sm\">{getFeatureDescription(feature)}</p>\n                            <div className=\"flex flex-col space-y-1\">\n                              {getFeatureExamples(feature).map((example, i) => (\n                                <p key={i} className=\"text-xs text-cosmic-silver/80\">• {example}</p>\n                              ))}\n                            </div>\n                            <Tooltip.Arrow className=\"fill-cosmic-blue/80\" />\n                          </Tooltip.Content>\n                        </Tooltip.Portal>\n                      </Tooltip.Root>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">\n                    {isFeatureIncluded(feature, COSMICHUB_TIERS.free.features) ? <FaCheck className=\"mx-auto text-green-500\" /> : <FaTimes className=\"mx-auto text-red-500\" />}\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">\n                    {isFeatureIncluded(feature, COSMICHUB_TIERS.premium.features) ? <FaCheck className=\"mx-auto text-green-500\" /> : <FaTimes className=\"mx-auto text-red-500\" />}\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">\n                    {isFeatureIncluded(feature, COSMICHUB_TIERS.elite.features) ? <FaCheck className=\"mx-auto text-green-500\" /> : <FaTimes className=\"mx-auto text-red-500\" />}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nPricingPage.displayName = 'PricingPage';\n\nexport default PricingPage;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PrivacyPolicy.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"max-w-2xl mx-auto mt-16 p-8 rounded-2xl bg-purple-900/90 text-yellow-100 shadow-xl\">\n      <h1 className=\"text-yellow-300 mb-4 font-serif text-2xl font-bold\">Privacy Policy</h1>\n      <p className=\"text-base mb-2\">\n        We respect your privacy. Your astrology data and account information are never shared with third parties. All data is securely stored and only accessible to you.\n      </p>\n      <p className=\"text-sm text-yellow-300\">For more details, contact us at support@cosmichub.com.</p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ProgressBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SaveChart.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":27,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":90,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":92},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":32,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":32,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":32,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1691,1694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1691,1694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":59,"endColumn":71},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":59,"column":19,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":59,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1716,1742],"text":"(Boolean((err.response?.data?.detail)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":59,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":59,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":59,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1743,1745],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":60,"column":16,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":60,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":71,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":71,"endColumn":28},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":76,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":76,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":169,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":184,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":184,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5620,5625],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5620,5625],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5620,5625],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useToast } from './ToastProvider';\nimport axios from \"axios\";\nimport { useAuth } from \"@cosmichub/auth\";\n\nexport default function SaveChart() {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    year: \"\",\n    month: \"\",\n    day: \"\",\n    hour: \"\",\n    minute: \"\",\n    city: \"\",\n  });\n  const [houseSystem, setHouseSystem] = useState(\"P\");\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  if (!user) {\n    navigate(\"/login\");\n    return null;\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    try {\n      const token = await user.getIdToken();\n      await axios.post(\n        `${import.meta.env.VITE_BACKEND_URL}/save-chart`,\n        {\n          year: parseInt(formData.year),\n          month: parseInt(formData.month),\n          day: parseInt(formData.day),\n          hour: parseInt(formData.hour),\n          minute: parseInt(formData.minute),\n          city: formData.city,\n          house_system: houseSystem\n        },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      toast({\n        title: \"Chart Saved\",\n        description: \"Your natal chart has been saved successfully.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n      navigate(\"/saved-charts\");\n    } catch (err: any) {\n      const msg = err.response?.data?.detail || \"Failed to save chart\";\n      setError(msg);\n      toast({\n        title: \"Error\",\n        description: msg,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const isFormValid = () => Object.values(formData).every((v) => v);\n\n  return (\n    <div className=\"max-w-2xl p-6 mx-auto cosmic-card\">\n      <h1 className=\"mb-6 text-3xl font-bold text-center text-cosmic-gold font-cinzel\">Save Natal Chart</h1>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n          <div>\n            <label htmlFor=\"year\" className=\"block mb-2 text-cosmic-gold\">Year *</label>\n            <input\n              id=\"year\"\n              type=\"number\"\n              name=\"year\"\n              value={formData.year}\n              onChange={handleInputChange}\n              placeholder=\"1990\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"month\" className=\"block mb-2 text-cosmic-gold\">Month *</label>\n            <input\n              id=\"month\"\n              type=\"number\"\n              name=\"month\"\n              value={formData.month}\n              onChange={handleInputChange}\n              placeholder=\"1\"\n              min=\"1\"\n              max=\"12\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"day\" className=\"block mb-2 text-cosmic-gold\">Day *</label>\n            <input\n              id=\"day\"\n              type=\"number\"\n              name=\"day\"\n              value={formData.day}\n              onChange={handleInputChange}\n              placeholder=\"1\"\n              min=\"1\"\n              max=\"31\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"hour\" className=\"block mb-2 text-cosmic-gold\">Hour (24h) *</label>\n            <input\n              id=\"hour\"\n              type=\"number\"\n              name=\"hour\"\n              value={formData.hour}\n              onChange={handleInputChange}\n              placeholder=\"12\"\n              min=\"0\"\n              max=\"23\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"minute\" className=\"block mb-2 text-cosmic-gold\">Minute *</label>\n            <input\n              id=\"minute\"\n              type=\"number\"\n              name=\"minute\"\n              value={formData.minute}\n              onChange={handleInputChange}\n              placeholder=\"0\"\n              min=\"0\"\n              max=\"59\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"city\" className=\"block mb-2 text-cosmic-gold\">City *</label>\n            <input\n              id=\"city\"\n              name=\"city\"\n              value={formData.city}\n              onChange={handleInputChange}\n              placeholder=\"New York\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"houseSystem\" className=\"block mb-2 text-cosmic-gold\">House System *</label>\n          <select\n            id=\"houseSystem\"\n            value={houseSystem}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setHouseSystem(e.target.value)}\n            className=\"cosmic-input\"\n            required\n          >\n            <option value=\"P\">Placidus</option>\n            <option value=\"E\">Equal House</option>\n          </select>\n        </div>\n        <button\n          type=\"submit\"\n          className=\"w-full cosmic-button\"\n          disabled={!isFormValid()}\n        >\n          Save Chart\n        </button>\n        {error && <p className=\"text-center text-red-400\">{error}</p>}\n      </form>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SavedCharts.tsx","messages":[{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":5,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":5,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[180,182],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":39,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":28},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":72,"column":49,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":72,"endColumn":51,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[2601,2603],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":83,"column":45,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":83,"endColumn":47,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[3347,3349],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":89,"column":45,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":89,"endColumn":47,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[3778,3780],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":95,"column":49,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":95,"endColumn":51,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4221,4223],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\n// Fallback date formatter with better error handling\nconst formatDate = (date: string | Date | undefined | null): string => {\n  if (date == null || date === '') return 'Unknown';\n  try {\n    const d = typeof date === 'string' ? new Date(date) : date;\n    // Check if date is valid\n    if (isNaN(d.getTime())) return 'Invalid Date';\n    return d.toLocaleDateString();\n  } catch {\n    return 'Invalid Date';\n  }\n};\n\n/** Birth data information */\ninterface ChartBirthData {\n  city?: string;\n}\n\n/** Chart metadata for displaying saved charts */\ninterface Chart {\n  /** Unique identifier for the chart */\n  id: string;\n  /** Optional display name for the chart */\n  name: string | null;\n  /** Type of chart (natal, transit, etc.) */\n  chart_type: string | null;\n  /** Birth data containing optional city information */\n  birth_data: ChartBirthData | null;\n  /** Chart creation timestamp */\n  created_at: string | null;\n  /** Birth time for natal chart */\n  birth_time: string | null;\n  /** Birth location for natal chart */\n  birth_location: string | null;\n}\n\nconst SavedCharts = (): JSX.Element => {\n  // Example charts state (replace with real data/fetch)\n  const [charts] = useState<Chart[]>([]);\n\n  return (\n    <div className=\"cosmic-container\">\n      <div className=\"cosmic-section\">\n        <h1 className=\"mb-8 text-center cosmic-heading lg:mb-12 text-2xl font-bold\">\n          Saved Charts\n        </h1>\n        {charts.length === 0 ? (\n          <div className=\"py-16 text-center\">\n            <div className=\"max-w-md p-8 mx-auto cosmic-card\">\n              <p className=\"mb-4 text-lg cosmic-text\">No charts saved yet.</p>\n              <p className=\"text-sm cosmic-text opacity-80\">\n                Calculate your first chart to get started on your astrological journey!\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"responsive-grid\">\n            {charts.map((chart) => (\n              <div \n                key={chart.id} \n                className=\"transition-all duration-300 transform cursor-pointer cosmic-card group hover:scale-105\"\n              >\n                <div className=\"relative p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <h3 className=\"flex-1 text-lg font-semibold text-gray-900 line-clamp-2\">\n                        {(\n                          chart.name !== null && chart.name !== ''\n                            ? chart.name\n                            : (chart.birth_data != null && typeof chart.birth_data.city === 'string' && chart.birth_data.city !== ''\n                                ? `${chart.birth_data.city} Chart`\n                                : 'Unnamed Chart')\n                        )}\n                      </h3>\n                      <span className=\"px-2 py-1 text-xs text-purple-800 bg-purple-100 rounded\">{chart.chart_type}</span>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs text-gray-800 bg-gray-100 rounded\">Date</span>\n                        <span className=\"text-sm font-medium text-gray-700\">\n                          {chart.created_at != null && chart.created_at !== '' ? formatDate(chart.created_at) : 'Unknown'}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs text-gray-800 bg-gray-100 rounded\">Time</span>\n                        <span className=\"text-sm font-medium text-gray-700\">\n                          {chart.birth_time != null && chart.birth_time !== '' ? chart.birth_time : 'Unknown'}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs text-gray-800 bg-gray-100 rounded\">Location</span>\n                        <span className=\"flex-1 text-sm font-medium text-gray-700 truncate\">\n                          {chart.birth_location != null && chart.birth_location !== '' ? chart.birth_location : 'Unknown'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SavedCharts;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Signup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SimpleBirthForm.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":154,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":154,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, type FC, type FormEvent, type ChangeEvent } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card } from '@cosmichub/ui';\nimport { useBirthData } from '../contexts/BirthDataContext';\nimport type { ChartBirthData } from '@cosmichub/types';\nimport { devConsole } from '../config/environment';\n\n// Removed unused FormFields type (was never referenced)\n\ninterface SimpleBirthFormProps {\n  title?: string;\n  submitButtonText?: string;\n  onSubmit?: (data: ChartBirthData) => void;\n  showSampleButton?: boolean;\n  navigateTo?: string; // Custom navigation path\n}\n\nexport const SimpleBirthForm: FC<SimpleBirthFormProps> = ({\n  title = \"Birth Details\",\n  submitButtonText = \"Calculate Chart\",\n  onSubmit,\n  // showSampleButton removed (unused prop)\n  navigateTo\n}) => {\n  const navigate = useNavigate();\n  const { setBirthData } = useBirthData();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDetectingLocation, setIsDetectingLocation] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  // Form state with empty defaults - users must enter their own data\n  const [formData, setFormData] = useState({\n    birthDate: '',\n    birthTime: '',\n    birthLocation: ''\n  });\n\n  // Sample birth data removed - users must enter their own data\n\n  const validateFormData = (data: typeof formData): Record<string, string> => {\n    const errors: Record<string, string> = {};\n\n    // Required field validation (explicit empty string checks)\n    if (data.birthDate === '') {\n      errors.birthDate = 'Birth date is required';\n    }\n    if (data.birthTime === '') {\n      errors.birthTime = 'Birth time is required';\n    }\n    const trimmedLocation = data.birthLocation.trim();\n    if (trimmedLocation === '') {\n      errors.birthLocation = 'Birth location is required';\n    }\n    \n    return errors;\n  };\n\n  const handleFormSubmit = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n\n    // Clear previous validation errors\n    setValidationErrors({});\n\n    // Validate form data\n    const errors = validateFormData(formData);\n\n    // Check if date is reasonable (between 1900 and current year + 1)\n  if (formData.birthDate !== '') {\n      const [yearStr] = formData.birthDate.split('-');\n      const selectedYear = parseInt(yearStr, 10);\n      const currentYear = new Date().getFullYear();\n      if (selectedYear < 1900 || selectedYear > currentYear + 1) {\n        errors.birthDate = `Year must be between 1900 and ${currentYear + 1}`;\n      }\n    }\n\n  const hasErrors = Object.keys(errors).length !== 0;\n    if (hasErrors) {\n      setValidationErrors(errors);\n      return;\n    }\n\n    setIsLoading(true);\n\n  try {\n      // Parse the date string explicitly to avoid timezone issues\n      const [yearStr, monthStr, dayStr] = formData.birthDate.split('-');\n      const year = parseInt(yearStr, 10);\n      const month = parseInt(monthStr, 10);\n      const day = parseInt(dayStr, 10);\n\n      const [hours, minutes] = formData.birthTime.split(':').map(Number);\n\n      const chartData: ChartBirthData = {\n        year,\n        month,\n        day,\n        hour: hours,\n        minute: minutes,\n        city: formData.birthLocation.trim(),\n      };\n\n      setBirthData(chartData);\n\n      const storedBirthData = {\n        date: formData.birthDate,\n        time: formData.birthTime,\n        location: formData.birthLocation.trim(),\n      };\n\n      sessionStorage.setItem('birthData', JSON.stringify(storedBirthData));\n\n  if (onSubmit !== undefined && onSubmit !== null) {\n        onSubmit(chartData);\n      } else {\n        navigate(navigateTo ?? '/chart-results');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      devConsole.error('Error creating chart:', errorMessage);\n      setValidationErrors({ \n        form: 'Failed to create chart. Please check your inputs and try again.' \n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Sample functionality removed\n\n  // Geolocation functionality\n  interface ReverseGeocodeResponse {\n    address?: {\n      city?: string;\n      town?: string;\n      village?: string;\n      state?: string;\n      country?: string;\n    };\n  }\n\n  const handleDetectLocation = (): void => {\n  if (navigator.geolocation === null || navigator.geolocation === undefined) {\n      setValidationErrors({\n        birthLocation: 'Geolocation is not supported by this browser.'\n      });\n      return;\n    }\n\n    setIsDetectingLocation(true);\n    \n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        void (async () => {\n          try {\n          const { latitude, longitude } = position.coords;\n          \n          // Use reverse geocoding to get city name\n          const response = await fetch(\n            `https://api.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&addressdetails=1`\n          );\n          \n          if (response.status === 200) {\n            const data = await response.json() as unknown as ReverseGeocodeResponse; // typed response\n            const address = data.address ?? {};\n            const city = address.city ?? address.town ?? address.village ?? '';\n            const state = address.state ?? '';\n            const country = address.country ?? '';\n            let locationString = '';\n            if (city !== '' && state !== '' && country !== '') {\n              locationString = `${city}, ${state}, ${country}`;\n            } else if (city !== '' && country !== '') {\n              locationString = `${city}, ${country}`;\n            } else if (country !== '') {\n              locationString = country;\n            }\n\n            if (locationString !== '') {\n              setFormData(prev => ({ ...prev, birthLocation: locationString }));\n            } else {\n              setValidationErrors({\n                birthLocation: 'Could not determine location name. Please enter manually.'\n              });\n            }\n          } else {\n            setValidationErrors({\n              birthLocation: 'Could not determine location name. Please enter manually.'\n            });\n          }\n        } catch (error) {\n          devConsole.error('Error with reverse geocoding:', error);\n          setValidationErrors({\n            birthLocation: 'Could not determine location name. Please enter manually.'\n          });\n        } finally {\n          setIsDetectingLocation(false);\n        }\n        })();\n      },\n  (error: GeolocationPositionError) => {\n        devConsole.error('Geolocation error:', error);\n        let message = 'Could not get your location. ';\n        switch (error.code) {\n          case GeolocationPositionError.PERMISSION_DENIED:\n            message += 'Please allow location access and try again.';\n            break;\n          case GeolocationPositionError.POSITION_UNAVAILABLE:\n            message += 'Location information is unavailable.';\n            break;\n          case GeolocationPositionError.TIMEOUT:\n            message += 'Location request timed out.';\n            break;\n          default:\n            message += 'An unknown error occurred.';\n            break;\n        }\n        setValidationErrors({\n          birthLocation: message\n        });\n        setIsDetectingLocation(false);\n      },\n  {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 600000 // 10 minutes\n      }\n    );\n  };\n\n  return (\n    <Card title={title}>\n  <form onSubmit={(e) => { handleFormSubmit(e); }} className=\"space-y-4\">\n        {/* Birth Date - Single composite field */}\n        <div>\n          <label htmlFor=\"birth-date\" className=\"block text-cosmic-silver mb-2\">Birth Date</label>\n          <input \n            id=\"birth-date\"\n            name=\"birthDate\"\n            type=\"date\" \n            value={formData.birthDate}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => setFormData(prev => ({...prev, birthDate: e.target.value}))}\n            className={`w-full p-3 rounded bg-cosmic-dark border text-cosmic-silver ${\n              typeof validationErrors.birthDate === 'string' && validationErrors.birthDate !== ''\n                ? 'border-red-500 focus:border-red-400'\n                : 'border-cosmic-purple focus:border-cosmic-gold'\n            } transition-colors`}\n            required\n            aria-label=\"Select your birth date\"\n            aria-describedby=\"birth-date-error\"\n          />\n          {typeof validationErrors.birthDate === 'string' && validationErrors.birthDate !== '' && (\n            <p id=\"birth-date-error\" className=\"text-red-400 text-sm mt-1\" aria-live=\"polite\">\n              ⚠️ {validationErrors.birthDate}\n            </p>\n          )}\n        </div>\n        \n        {/* Birth Time - Single composite field */}\n        <div>\n          <label htmlFor=\"birth-time\" className=\"block text-cosmic-silver mb-2\">Birth Time</label>\n          <input \n            id=\"birth-time\"\n            type=\"time\" \n            value={formData.birthTime}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => setFormData(prev => ({...prev, birthTime: e.target.value}))}\n            className={`w-full p-3 rounded bg-cosmic-dark border text-cosmic-silver ${\n              typeof validationErrors.birthTime === 'string' && validationErrors.birthTime !== ''\n                ? 'border-red-500 focus:border-red-400'\n                : 'border-cosmic-purple focus:border-cosmic-gold'\n            } transition-colors`}\n            required\n            aria-label=\"Select your birth time\"\n            aria-describedby=\"birth-time-error\"\n          />\n          {typeof validationErrors.birthTime === 'string' && validationErrors.birthTime !== '' && (\n            <p id=\"birth-time-error\" className=\"text-red-400 text-sm mt-1\" aria-live=\"polite\">\n              ⚠️ {validationErrors.birthTime}\n            </p>\n          )}\n        </div>\n        \n        {/* Birth Location - Single composite field */}\n        <div>\n          <label htmlFor=\"birth-location\" className=\"block text-cosmic-silver mb-2\">Birth Location</label>\n          <div className=\"flex gap-2\">\n            <input \n              id=\"birth-location\"\n              type=\"text\" \n              placeholder=\"City, State/Country (e.g., New York, NY or London, UK)\"\n              value={formData.birthLocation}\n              onChange={(e: ChangeEvent<HTMLInputElement>) => setFormData(prev => ({...prev, birthLocation: e.target.value}))}\n              className={`flex-1 p-3 rounded bg-cosmic-dark border text-cosmic-silver ${\n                typeof validationErrors.birthLocation === 'string' && validationErrors.birthLocation !== ''\n                  ? 'border-red-500 focus:border-red-400'\n                  : 'border-cosmic-purple focus:border-cosmic-gold'\n              } transition-colors`}\n              required\n              aria-label=\"Enter your birth location\"\n              aria-describedby=\"birth-location-error\"\n            />\n            <button\n              type=\"button\"\n              onClick={handleDetectLocation}\n              disabled={isDetectingLocation}\n              className=\"px-4 py-3 bg-cosmic-gold/20 hover:bg-cosmic-gold/30 disabled:bg-gray-600 border border-cosmic-gold/30 text-cosmic-gold text-sm rounded transition-colors whitespace-nowrap\"\n              title=\"Use your current location\"\n            >\n              {isDetectingLocation ? '📍...' : '📍 Current'}\n            </button>\n          </div>\n          {typeof validationErrors.birthLocation === 'string' && validationErrors.birthLocation !== '' && (\n            <p id=\"birth-location-error\" className=\"text-red-400 text-sm mt-1\" aria-live=\"polite\">\n              ⚠️ {validationErrors.birthLocation}\n            </p>\n          )}\n          <p className=\"text-cosmic-silver/60 text-sm mt-1\">\n            💡 Timezone will be automatically detected from your location\n          </p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full bg-cosmic-purple hover:bg-cosmic-purple/80 disabled:bg-gray-600 text-white p-3 rounded transition-colors relative overflow-hidden\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center gap-2\">\n                <div className=\"animate-spin text-lg\">🌌</div>\n                <span>Calculating cosmic positions...</span>\n              </div>\n            ) : (\n              submitButtonText\n            )}\n          </button>\n          \n          {/* Quick tips */}\n          <div className=\"mt-4 p-3 bg-cosmic-gold/10 rounded-lg border border-cosmic-gold/20\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-cosmic-gold mt-0.5\">💡</span>\n              <div className=\"text-sm\">\n                <p className=\"text-cosmic-gold font-medium mb-1\">Pro Tips:</p>\n                <ul className=\"text-cosmic-silver/80 space-y-1 text-xs\">\n                  <li>• Use exact birth time from birth certificate for accuracy</li>\n                  <li>• Include state/province for better location matching</li>\n                  <li>• Click &quot;Current&quot; to use your current location as reference</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SubscriptionStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/SynastryAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-definitions","severity":2,"message":"Use an `interface` instead of a `type`.","line":6,"column":6,"nodeType":"Identifier","messageId":"interfaceOverType","endLine":6,"endColumn":17,"fix":{"range":[302,372],"text":"interface ApiResponse<T> { data: T; success: boolean; message?: string }"}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":37,"column":22,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":37,"endColumn":113,"fix":{"range":[1417,1448],"text":""}},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":87,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":87,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":98,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":98,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3465,3470],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3465,3470],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3465,3470],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":151,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":151,"endColumn":48}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport FeatureGuard from '../FeatureGuard';\nimport { apiClient } from '../../services/api';\n// Lightweight ApiResponse type (mirrors packages/config) to avoid cross-package path resolution issues here\ntype ApiResponse<T> = { data: T; success: boolean; message?: string };\nimport {\n  CompatibilityScore,\n  KeyAspects,\n  HouseOverlays,\n  CompositeChart,\n  RelationshipSummary\n} from './SynastryComponents';\nimport type { SynastryAnalysisProps, SynastryResult } from './types';\nimport { synastryRequestSchema } from '../../utils/validation';\n\nexport const SynastryAnalysis = React.memo<SynastryAnalysisProps>(({\n  person1,\n  person2,\n  person1Name = \"Person 1\",\n  person2Name = \"Person 2\"\n}) => {\n  const [synastryResult, setSynastryResult] = useState<SynastryResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const cardBg = 'cosmic-blue';\n  const borderColor = 'cosmic-silver/30';\n\n  const calculateSynastry = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const parsed = synastryRequestSchema.parse({ person1, person2 });\n      // Unified endpoint: backend router mounted at /api/synastry, path /calculate-synastry\n      const result = await apiClient.post('/synastry/calculate-synastry', parsed) as ApiResponse<SynastryResult>;\n      setSynastryResult(result.data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    } finally {\n      setLoading(false);\n    }\n  }, [person1, person2]);\n\n  const getAspectColor = useCallback((aspect: string) => {\n    switch (aspect) {\n      case 'conjunction':\n      case 'trine':\n      case 'sextile':\n        return 'green-500';\n      case 'square':\n      case 'opposition':\n        return 'orange-500';\n      default:\n        return 'gray-500';\n    }\n  }, []);\n\n  const formatPlanetName = useCallback((planet: string) => {\n    return planet.charAt(0).toUpperCase() + planet.slice(1);\n  }, []);\n\n  return (\n    <FeatureGuard requiredTier=\"premium\" feature=\"synastry_analysis\">\n      <div className=\"py-8 mx-auto max-w-7xl\">\n        <div className=\"flex flex-col space-y-6\">\n          <div className=\"text-center\">\n            <h2 className=\"mb-4 text-xl font-bold text-purple-600\">\n              💕 Relationship Compatibility Analysis\n            </h2>\n            <p className=\"text-lg text-white/80\">\n              Synastry Comparison: {person1Name} & {person2Name}\n            </p>\n          </div>\n\n          <div className={`cosmic-card bg-${cardBg} border border-${borderColor}`}>\n            <div className=\"p-4\">\n              <p className=\"mb-4 text-cosmic-silver\">\n                Synastry compares two birth charts to reveal relationship dynamics, compatibility patterns, \n                and growth opportunities between partners.\n              </p>\n\n        {!synastryResult && (\n                <button\n                  className=\"cosmic-button\"\n                  onClick={calculateSynastry}\n                  disabled={loading}\n                >\n          {loading ? 'Calculating...' : 'Calculate Compatibility'}\n                  <FaInfoCircle className=\"mr-2\" />\n          <span className=\"sr-only\">Start synastry compatibility calculation</span>\n                </button>\n              )}\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"p-4 border border-red-500 rounded-md bg-red-900/50\">\n              <div className=\"flex space-x-4\">\n                <span className=\"text-xl text-red-500\">⚠️</span>\n                {error}\n              </div>\n            </div>\n          )}\n\n          {loading && !synastryResult && (\n            <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2 animate-pulse\" aria-hidden>\n              {Array.from({length:4}).map((_,i)=>(\n                <div key={i} className=\"h-40 border rounded cosmic-card border-cosmic-silver/30 bg-gray-800/40\" />\n              ))}\n            </div>\n          )}\n\n          {synastryResult && !loading && (\n            <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\n              {/* Overall Compatibility Score */}\n              <CompatibilityScore synastryResult={synastryResult} />\n\n              {/* Key Relationship Aspects */}\n              <KeyAspects \n                synastryResult={synastryResult}\n                getAspectColor={getAspectColor}\n                formatPlanetName={formatPlanetName}\n              />\n\n              {/* House Overlays & Composite */}\n              <div className=\"flex flex-col space-y-4\">\n                <HouseOverlays \n                  synastryResult={synastryResult}\n                  formatPlanetName={formatPlanetName}\n                />\n\n                <CompositeChart synastryResult={synastryResult} />\n              </div>\n\n              {/* Relationship Summary */}\n              <RelationshipSummary synastryResult={synastryResult} />\n\n              {/* Action Buttons */}\n              <div className=\"col-span-1 lg:col-span-2\">\n                <div className=\"flex justify-center space-x-4\">\n                  <button\n                    className=\"px-4 py-2 text-blue-500 transition-colors border border-blue-500 rounded bg-blue-500/20 hover:bg-blue-500/30\"\n                    onClick={() => window.location.href = '/transits'}\n                  >\n                    View Relationship Transits\n                  </button>\n                  <button\n                    className=\"px-4 py-2 text-purple-500 transition-colors border border-purple-500 rounded bg-purple-500/20 hover:bg-purple-500/30\"\n                    onClick={calculateSynastry}\n                    disabled={loading}\n                  >\n                    Recalculate\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </FeatureGuard>\n  );\n});\n\nSynastryAnalysis.displayName = 'SynastryAnalysis';\n\nexport default SynastryAnalysis;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/SynastryComponents.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":89,"column":8,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":89,"endColumn":55}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport './SynastryComponents.css';\nimport { FaStar, FaChevronDown } from 'react-icons/fa';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport type { SynastryResult } from './types';\n\nconst SCORE_COLOR_MAP: Record<'excellent'|'good'|'moderate'|'low', string> = {\n  excellent: 'text-green-500',\n  good: 'text-blue-500',\n  moderate: 'text-yellow-500',\n  low: 'text-red-500'\n};\n\nconst FILL_COLOR_MAP: Record<'excellent'|'good'|'moderate'|'low', string> = {\n  excellent: 'bg-green-500',\n  good: 'bg-blue-500',\n  moderate: 'bg-yellow-500',\n  low: 'bg-red-500'\n};\n\n// Safe aspect color classes (avoid dynamic Tailwind construction & ensure purge safety)\nconst ASPECT_COLOR_CLASS: Record<string,string> = {\n  'green-500': 'bg-green-500',\n  'orange-500': 'bg-orange-500',\n  'gray-500': 'bg-gray-500'\n};\n\ninterface ProgressBarProps { score: number; tier: 'excellent'|'good'|'moderate'|'low'; }\n\nexport const ProgressBar: React.FC<ProgressBarProps> = React.memo(({ score, tier }) => {\n  const clamped = Math.min(Math.max(score, 0), 100);\n  const step = Math.round(clamped / 5) * 5;\n  const stepClass = `w-step-${step}`;\n  return (\n    <div className=\"progress-bar\">\n  <div className={`progress-fill ${stepClass} ${FILL_COLOR_MAP[tier]}`} />\n    </div>\n  );\n});\nProgressBar.displayName = \"ProgressBar\";\n\ninterface StarRatingProps {\n  score: number;\n}\n\nexport const StarRating: React.FC<StarRatingProps> = React.memo(({ score }) => {\n  const stars = Math.round(score / 20);\n  return (\n    <div className=\"flex\">\n      {Array.from({ length: 5 }).map((_, i) => (\n        <FaStar \n          key={i} \n          className={`${i < stars ? 'text-yellow-400' : 'text-gray-300'} text-xl`}\n        />\n      ))}\n    </div>\n  );\n});\nStarRating.displayName = \"StarRating\";\n\ninterface CompatibilityScoreProps { synastryResult: SynastryResult; }\n\nexport const CompatibilityScore: React.FC<CompatibilityScoreProps> = React.memo(({ synastryResult }) => {\n  const tierFor = (score:number): 'excellent'|'good'|'moderate'|'low' => {\n    if (score >= 80) return 'excellent';\n    if (score >= 60) return 'good';\n    if (score >= 40) return 'moderate';\n    return 'low';\n  };\n  const tier = tierFor(synastryResult.compatibility_analysis.overall_score);\n  const colorClass = SCORE_COLOR_MAP[tier];\n  return (\n  <div className=\"col-span-1 border lg:col-span-2 cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <h3 className=\"mb-4 font-bold text-md text-cosmic-silver\">Overall Compatibility Score</h3>\n      \n      <div className=\"flex items-center mb-4 space-x-4\">\n        <StarRating score={synastryResult.compatibility_analysis.overall_score} />\n        <span className={`text-3xl font-bold ${colorClass}`}>\n          {synastryResult.compatibility_analysis.overall_score}/100\n        </span>\n      </div>\n      \n      <p className=\"mb-6 text-cosmic-silver\">\n        {synastryResult.compatibility_analysis.interpretation}\n      </p>\n\n      {/* Compatibility Breakdown */}\n      {synastryResult.compatibility_analysis.breakdown && (\n        <div>\n          <h4 className=\"mb-4 text-sm font-bold text-cosmic-silver\">Compatibility Areas</h4>\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {Object.entries(synastryResult.compatibility_analysis.breakdown).map(([area, score]) => {\n              const t = tierFor(score);\n              return (\n              <div key={area} className=\"p-4 border rounded-md border-cosmic-silver/30\">\n                <p className=\"mb-2 text-sm font-semibold capitalize text-cosmic-silver\">\n                  {area.charAt(0).toUpperCase() + area.slice(1)}\n                </p>\n                <ProgressBar score={score} tier={t} />\n                <p className=\"text-sm text-white/80\">\n                  {score.toFixed(1)}%\n                </p>\n              </div>\n            );})}\n          </div>\n          {synastryResult.compatibility_analysis.meta && (\n            <div className=\"mt-6 text-xs text-white/60 space-y-1\">\n              <p className=\"font-semibold text-cosmic-silver\">Scoring Meta</p>\n              <p>Overlay Bonus Applied: {synastryResult.compatibility_analysis.meta.overlay_bonus_applied}</p>\n              <p>Aspect Counts: {Object.entries(synastryResult.compatibility_analysis.meta.aspect_type_counts).map(([k,v])=>`${k}:${v}`).join(', ')}</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  </div>\n);});\nCompatibilityScore.displayName = \"CompatibilityScore\";\n\ninterface KeyAspectsProps {\n  synastryResult: SynastryResult;\n  getAspectColor: (aspect: string) => string;\n  formatPlanetName: (planet: string) => string;\n}\n\nexport const KeyAspects: React.FC<KeyAspectsProps> = React.memo(({ \n  synastryResult, \n  getAspectColor, \n  formatPlanetName \n}) => (\n  <div className=\"border cosmic-card border-cosmic-silver/30 h-fit\">\n    <div className=\"p-4\">\n      <Accordion.Root type=\"single\" collapsible defaultValue=\"0\">\n        <Accordion.Item value=\"0\">\n          <Accordion.Trigger className=\"flex justify-between w-full\">\n            <span className=\"text-sm font-bold\">Key Relationship Aspects</span>\n            <FaChevronDown className=\"text-cosmic-silver\" />\n          </Accordion.Trigger>\n          <Accordion.Content className=\"pb-4\">\n            <div className=\"flex flex-col space-y-3\">\n              {synastryResult.interaspects.slice(0, 8).map((aspect, index) => (\n                <div key={index} className=\"p-3 border rounded-md border-cosmic-silver/30\">\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-sm font-semibold text-cosmic-silver\">\n                      {formatPlanetName(aspect.person1_planet)} {aspect.aspect} {formatPlanetName(aspect.person2_planet)}\n                    </span>\n                    <span className={`${ASPECT_COLOR_CLASS[getAspectColor(aspect.aspect)] || 'bg-gray-500'} text-white px-2 py-1 rounded text-sm`}>\n                      {aspect.aspect}\n                    </span>\n                  </div>\n                  <p className=\"mb-1 text-xs text-white/80\">\n                    Orb: {aspect.orb.toFixed(2)}° | Strength: {aspect.strength}\n                  </p>\n                  <p className=\"text-sm text-cosmic-silver\">\n                    {aspect.interpretation}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </Accordion.Content>\n        </Accordion.Item>\n      </Accordion.Root>\n    </div>\n  </div>\n));\nKeyAspects.displayName = \"KeyAspects\";\n\ninterface HouseOverlaysProps {\n  synastryResult: SynastryResult;\n  formatPlanetName: (planet: string) => string;\n}\n\nexport const HouseOverlays: React.FC<HouseOverlaysProps> = React.memo(({ \n  synastryResult, \n  formatPlanetName \n}) => (\n  <div className=\"border cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <Accordion.Root type=\"single\" collapsible>\n        <Accordion.Item value=\"0\">\n          <Accordion.Trigger className=\"flex justify-between w-full\">\n            <span className=\"text-sm font-bold\">House Overlays</span>\n            <FaChevronDown className=\"text-cosmic-silver\" />\n          </Accordion.Trigger>\n          <Accordion.Content className=\"pb-4\">\n            <div className=\"flex flex-col space-y-3\">\n              {synastryResult.house_overlays.slice(0, 6).map((overlay, index) => (\n                <div key={index} className=\"p-3 rounded-md bg-gray-50\">\n                  <p className=\"mb-1 text-sm font-semibold text-cosmic-silver\">\n                    {formatPlanetName(overlay.person1_planet)} in {overlay.person2_house}th House\n                  </p>\n                  <p className=\"text-sm text-white/80\">\n                    {overlay.interpretation}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </Accordion.Content>\n        </Accordion.Item>\n      </Accordion.Root>\n    </div>\n  </div>\n));\nHouseOverlays.displayName = \"HouseOverlays\";\n\ninterface CompositeChartProps {\n  synastryResult: SynastryResult;\n}\n\nexport const CompositeChart: React.FC<CompositeChartProps> = React.memo(({ synastryResult }) => (\n  <div className=\"border cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <Accordion.Root type=\"single\" collapsible>\n        <Accordion.Item value=\"0\">\n          <Accordion.Trigger className=\"flex justify-between w-full\">\n            <span className=\"text-sm font-bold\">Composite Chart</span>\n            <FaChevronDown className=\"text-cosmic-silver\" />\n          </Accordion.Trigger>\n          <Accordion.Content className=\"pb-4\">\n            <p className=\"mb-2 font-semibold text-cosmic-silver\">Relationship Purpose:</p>\n            <p className=\"mb-4 text-cosmic-silver\">\n              {synastryResult.composite_chart.relationship_purpose}\n            </p>\n            \n            <p className=\"text-sm text-white/80\">\n              Composite Sun: {synastryResult.composite_chart.midpoint_sun.toFixed(2)}°\n              <br />\n              Composite Moon: {synastryResult.composite_chart.midpoint_moon.toFixed(2)}°\n            </p>\n          </Accordion.Content>\n        </Accordion.Item>\n      </Accordion.Root>\n    </div>\n  </div>\n));\nCompositeChart.displayName = \"CompositeChart\";\n\ninterface RelationshipSummaryProps {\n  synastryResult: SynastryResult;\n}\n\nexport const RelationshipSummary: React.FC<RelationshipSummaryProps> = React.memo(({ synastryResult }) => (\n  <div className=\"col-span-1 border lg:col-span-2 cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <h3 className=\"mb-4 font-bold text-md text-cosmic-silver\">Relationship Summary</h3>\n      \n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n        <div className=\"flex flex-col space-y-4\">\n          <div>\n            <p className=\"mb-2 font-semibold text-green-600\">\n              🌟 Key Themes\n            </p>\n            <div className=\"flex flex-wrap space-x-2\">\n              {synastryResult.summary.key_themes.map((theme, index) => (\n                <span key={index} className=\"px-2 py-1 text-sm text-green-500 rounded bg-green-500/20\">\n                  {theme}\n                </span>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <p className=\"mb-2 font-semibold text-blue-600\">\n              💪 Strengths\n            </p>\n            <div className=\"flex flex-col space-y-1\">\n              {synastryResult.summary.strengths.map((strength, index) => (\n                <p key={index} className=\"text-sm text-cosmic-silver\">\n                  • {strength}\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col space-y-4\">\n          <div>\n            <p className=\"mb-2 font-semibold text-orange-600\">\n              🔄 Growth Areas\n            </p>\n            <div className=\"flex flex-col space-y-1\">\n              {synastryResult.summary.challenges.map((challenge, index) => (\n                <p key={index} className=\"text-sm text-cosmic-silver\">\n                  • {challenge}\n                </p>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <p className=\"mb-2 font-semibold text-purple-600\">\n              💡 Relationship Advice\n            </p>\n            <div className=\"flex flex-col space-y-1\">\n              {synastryResult.summary.advice.map((advice, index) => (\n                <p key={index} className=\"text-sm text-cosmic-silver\">\n                  • {advice}\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n));\nRelationshipSummary.displayName = \"RelationshipSummary\";\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TermsOfService.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport default function TermsOfService() {\n  return (\n    <div className=\"max-w-2xl mx-auto mt-16 p-8 rounded-2xl bg-purple-900/90 text-yellow-100 shadow-xl\">\n      <h1 className=\"text-yellow-300 mb-4 font-serif text-2xl font-bold\">Terms of Service</h1>\n      <p className=\"text-base mb-2\">\n        By using Cosmic Hub, you agree to use the app for personal, non-commercial purposes. We do not guarantee the accuracy of astrological predictions. Use at your own discretion.\n      </p>\n      <p className=\"text-sm text-yellow-300\">For questions, contact us at support@cosmichub.com.</p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ToastProvider.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":2,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":36,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext } from 'react';\nimport type { ReactNode } from 'react';\nimport { devConsole } from '../config/environment';\n\nexport interface Toast {\n  id: string;\n  title?: string;\n  description: string;\n  status: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  isClosable?: boolean;\n}\n\ninterface ToastContextType {\n  toast: (options: Omit<Toast, 'id'>) => void;\n  closeToast: (id: string) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const useToast = (): ToastContextType => {\n  const context = useContext(ToastContext);\n  if (context === undefined) {\n    // Return a mock implementation to prevent compilation errors\n    return {\n      toast: () => devConsole.log('Toast provider not available'),\n      closeToast: () => devConsole.log('Toast provider not available')\n    };\n  }\n  return context;\n};\n\n// Simple provider implementation\nexport const ToastProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const toast = () => {};\n  const closeToast = () => {};\n  \n  return (\n    <ToastContext.Provider value={{ toast, closeToast }}>\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/DateRangeForm.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":76},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { DateRange } from './types';\n\ninterface DateRangeFormProps {\n  dateRange: DateRange;\n  setDateRange: (dateRange: DateRange) => void;\n}\n\nconst DateRangeForm: React.FC<DateRangeFormProps> = ({ dateRange, setDateRange }) => {\n  const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDateRange({ ...dateRange, startDate: e.target.value });\n  };\n\n  const handleEndDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDateRange({ ...dateRange, endDate: e.target.value });\n  };\n\n  return (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <h3 className=\"mb-4 text-lg font-semibold text-cosmic-gold\">Date Range</h3>\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n          <div>\n            <label htmlFor=\"startDate\" className=\"block mb-2 text-sm font-medium text-cosmic-silver\">\n              Start Date\n            </label>\n            <input\n              id=\"startDate\"\n              type=\"date\"\n              value={dateRange.startDate}\n              onChange={handleStartDateChange}\n              className=\"cosmic-input\"\n            />\n          </div>\n          <div>\n            <label htmlFor=\"endDate\" className=\"block mb-2 text-sm font-medium text-cosmic-silver\">\n              End Date\n            </label>\n            <input\n              id=\"endDate\"\n              type=\"date\"\n              value={dateRange.endDate}\n              onChange={handleEndDateChange}\n              className=\"cosmic-input\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DateRangeForm;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/EphemerisChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/EphemerisChartWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/LunarCyclesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TabLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":61,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":61,"endColumn":52},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":62,"column":30,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":62,"endColumn":54}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense } from 'react';\nimport FeatureGuard from '../FeatureGuard';\nimport TransitTabs from './TransitsTab';  // Note: TransitTabs component is in TransitsTab.tsx file\nimport { TabLoader } from './TabLoader';\nimport { useTransitAnalysis } from './useTransitAnalysis';\nimport type { TransitBirthData } from './types';\n\nexport interface TransitAnalysisProps {\n  birthData: TransitBirthData;\n}\n\nconst TransitAnalysis: React.FC<TransitAnalysisProps> = ({ birthData }) => {\n  const { \n    activeTab, \n    setActiveTab, \n    transitResults, \n    lunarTransits, \n    loading, \n    loadingLunar, \n    error,\n    dateRange, \n    setDateRange, \n    calculateTransits, \n    calculateLunarTransits,\n    clearError,\n    isValidDateRange,\n    transitSummary,\n    lunarSummary,\n    hasResults\n  } = useTransitAnalysis(birthData);\n\n  return (\n    <FeatureGuard feature=\"transitAnalysis\" requiredTier=\"premium\">\n      <div className=\"max-w-6xl p-6 mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"mb-4 text-3xl font-bold text-cosmic-gold\">Transit Analysis</h1>\n          <p className=\"leading-relaxed text-cosmic-silver\">\n            Explore how current planetary movements influence your natal chart. \n            Transit analysis reveals timing for opportunities, challenges, and personal growth.\n          </p>\n          {!isValidDateRange && (\n            <div className=\"mt-4 p-3 bg-yellow-900/20 border border-yellow-500/30 rounded-lg\">\n              <p className=\"text-yellow-400 text-sm\">\n                Please select a valid date range (max 1 year) to calculate transits.\n              </p>\n            </div>\n          )}\n        </div>\n        \n        <Suspense fallback={<TabLoader />}>\n          <TransitTabs\n            activeTab={activeTab}\n            setActiveTab={setActiveTab}\n            transitResults={transitResults}\n            lunarTransits={lunarTransits}\n            loading={loading}\n            loadingLunar={loadingLunar}\n            error={error}\n            dateRange={dateRange}\n            setDateRange={setDateRange}\n            onCalculateTransits={calculateTransits}\n            onCalculateLunar={calculateLunarTransits}\n            onClearError={clearError}\n            transitSummary={transitSummary}\n            lunarSummary={lunarSummary}\n          />\n        </Suspense>\n        \n        {hasResults && (\n          <div className=\"mt-8 p-4 bg-cosmic-deep-purple/20 rounded-lg border border-cosmic-purple/20\">\n            <h3 className=\"text-lg font-semibold text-cosmic-gold mb-2\">\n              Analysis Complete\n            </h3>\n            <p className=\"text-cosmic-silver text-sm\">\n              Your transit analysis is ready. Use the tabs above to explore planetary transits \n              and lunar cycles for your selected date range. Results are cached for faster subsequent access.\n            </p>\n          </div>\n        )}\n      </div>\n    </FeatureGuard>\n  );\n};\n\nexport default TransitAnalysis;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitsTab.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":32,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1148,1153],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1148,1153],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1148,1153],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":100,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":100,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4421,4440],"text":"(transit.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4421,4440],"text":"(transit.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4421,4440],"text":"(Boolean(transit.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":140,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":140,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5675,5680],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5675,5680],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5675,5680],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":205,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":205,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8818,8835],"text":"(lunar.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8818,8835],"text":"(lunar.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8818,8835],"text":"(Boolean(lunar.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { FaCalendarAlt, FaClock, FaSpinner, FaExclamationTriangle } from 'react-icons/fa';\nimport DateRangeForm from './DateRangeForm';\nimport type { TransitResult, LunarTransitResult, DateRange } from './types';\n\n// Enhanced components with better UI and error handling\nconst TransitsTabContent: React.FC<{\n  transitResults: TransitResult[];\n  loading: boolean;\n  error: string | null;\n  dateRange: DateRange;\n  onCalculateTransits: () => void;\n  onClearError: () => void;\n  transitSummary: {\n    total: number;\n    major: number;\n    challenging: number;\n    harmonious: number;\n    intensity: number;\n  };\n}> = ({ transitResults, loading, error, dateRange, onCalculateTransits, onClearError, transitSummary }) => (\n  <div className=\"cosmic-card\">\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-cosmic-gold\">Planet Transits</h3>\n        <span className=\"text-sm text-cosmic-silver\">\n          {dateRange.startDate} to {dateRange.endDate}\n        </span>\n      </div>\n      \n      {error && (\n        <div className=\"mb-4 p-3 bg-red-900/20 border border-red-500/30 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-red-400\">\n            <FaExclamationTriangle className=\"flex-shrink-0\" />\n            <span className=\"text-sm\">{error}</span>\n            <button \n              onClick={onClearError}\n              className=\"ml-auto text-xs hover:text-red-300 transition-colors\"\n            >\n              Dismiss\n            </button>\n          </div>\n        </div>\n      )}\n      \n      <button\n        onClick={onCalculateTransits}\n        disabled={loading}\n        className=\"mb-4 cosmic-button flex items-center gap-2\"\n      >\n        {loading && <FaSpinner className=\"animate-spin\" />}\n        {loading ? 'Calculating...' : 'Calculate Transits'}\n      </button>\n      \n      {transitResults.length > 0 && (\n        <div className=\"space-y-4\">\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 p-4 bg-cosmic-deep-purple/30 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-gold\">{transitSummary.total}</div>\n              <div className=\"text-xs text-cosmic-silver\">Total Aspects</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-green-400\">{transitSummary.harmonious}</div>\n              <div className=\"text-xs text-cosmic-silver\">Harmonious</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-red-400\">{transitSummary.challenging}</div>\n              <div className=\"text-xs text-cosmic-silver\">Challenging</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-purple\">{transitSummary.intensity}%</div>\n              <div className=\"text-xs text-cosmic-silver\">Avg Intensity</div>\n            </div>\n          </div>\n          \n          {/* Transit Results */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {transitResults.slice(0, 10).map((transit) => (\n              <div key={transit.id} className=\"p-3 bg-cosmic-deep-purple/20 rounded-lg border border-cosmic-purple/20\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-cosmic-gold\">\n                    {transit.planet} {transit.aspect} {transit.natal_planet}\n                  </span>\n                  <span className=\"text-xs text-cosmic-silver\">{transit.date}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className={`px-2 py-1 rounded text-xs ${\n                    transit.energy === 'harmonious' ? 'bg-green-900/30 text-green-400' :\n                    transit.energy === 'challenging' ? 'bg-red-900/30 text-red-400' :\n                    'bg-cosmic-purple/30 text-cosmic-silver'\n                  }`}>\n                    {transit.energy}\n                  </span>\n                  <span className=\"text-cosmic-silver\">\n                    Intensity: {Math.round(transit.intensity)}%\n                  </span>\n                </div>\n                {transit.description && (\n                  <p className=\"text-xs text-cosmic-silver mt-2\">{transit.description}</p>\n                )}\n              </div>\n            ))}\n            {transitResults.length > 10 && (\n              <div className=\"text-center text-cosmic-silver text-sm py-2\">\n                Showing first 10 of {transitResults.length} transits\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\nconst LunarCyclesTabContent: React.FC<{\n  lunarTransits: LunarTransitResult[];\n  loadingLunar: boolean;\n  error: string | null;\n  dateRange: DateRange;\n  onCalculateLunar: () => void;\n  onClearError: () => void;\n  lunarSummary: {\n    total: number;\n    newMoons: number;\n    fullMoons: number;\n    averageIntensity: number;\n  };\n}> = ({ lunarTransits, loadingLunar, error, dateRange, onCalculateLunar, onClearError, lunarSummary }) => (\n  <div className=\"cosmic-card\">\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-cosmic-gold\">Lunar Cycles</h3>\n        <span className=\"text-sm text-cosmic-silver\">\n          {dateRange.startDate} to {dateRange.endDate}\n        </span>\n      </div>\n      \n      {error && (\n        <div className=\"mb-4 p-3 bg-red-900/20 border border-red-500/30 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-red-400\">\n            <FaExclamationTriangle className=\"flex-shrink-0\" />\n            <span className=\"text-sm\">{error}</span>\n            <button \n              onClick={onClearError}\n              className=\"ml-auto text-xs hover:text-red-300 transition-colors\"\n            >\n              Dismiss\n            </button>\n          </div>\n        </div>\n      )}\n      \n      <button\n        onClick={onCalculateLunar}\n        disabled={loadingLunar}\n        className=\"mb-4 cosmic-button flex items-center gap-2\"\n      >\n        {loadingLunar && <FaSpinner className=\"animate-spin\" />}\n        {loadingLunar ? 'Calculating...' : 'Calculate Lunar Cycles'}\n      </button>\n      \n      {lunarTransits.length > 0 && (\n        <div className=\"space-y-4\">\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 p-4 bg-cosmic-deep-purple/30 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-gold\">{lunarSummary.total}</div>\n              <div className=\"text-xs text-cosmic-silver\">Total Days</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-blue-400\">{lunarSummary.newMoons}</div>\n              <div className=\"text-xs text-cosmic-silver\">New Moons</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-yellow-400\">{lunarSummary.fullMoons}</div>\n              <div className=\"text-xs text-cosmic-silver\">Full Moons</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-purple\">{lunarSummary.averageIntensity}%</div>\n              <div className=\"text-xs text-cosmic-silver\">Avg Intensity</div>\n            </div>\n          </div>\n          \n          {/* Lunar Transit Results */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {lunarTransits.slice(0, 10).map((lunar, index) => (\n              <div key={`${lunar.date}-${index}`} className=\"p-3 bg-cosmic-deep-purple/20 rounded-lg border border-cosmic-purple/20\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-cosmic-gold\">{lunar.phase}</span>\n                  <span className=\"text-xs text-cosmic-silver\">{lunar.date}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-cosmic-silver\">Moon in {lunar.moon_sign}</span>\n                  <span className=\"text-cosmic-silver\">\n                    Intensity: {Math.round(lunar.intensity)}%\n                  </span>\n                </div>\n                <div className=\"mt-2\">\n                  <span className=\"px-2 py-1 rounded text-xs bg-cosmic-purple/30 text-cosmic-silver\">\n                    {lunar.energy}\n                  </span>\n                </div>\n                {lunar.description && (\n                  <p className=\"text-xs text-cosmic-silver mt-2\">{lunar.description}</p>\n                )}\n              </div>\n            ))}\n            {lunarTransits.length > 10 && (\n              <div className=\"text-center text-cosmic-silver text-sm py-2\">\n                Showing first 10 of {lunarTransits.length} lunar transits\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\ninterface TransitTabsProps {\n  activeTab: string;\n  setActiveTab: (value: string) => void;\n  transitResults: TransitResult[];\n  lunarTransits: LunarTransitResult[];\n  loading: boolean;\n  loadingLunar: boolean;\n  error: string | null;\n  dateRange: DateRange;\n  setDateRange: (dateRange: DateRange) => void;\n  onCalculateTransits: () => void;\n  onCalculateLunar: () => void;\n  onClearError: () => void;\n  transitSummary: {\n    total: number;\n    major: number;\n    challenging: number;\n    harmonious: number;\n    intensity: number;\n  };\n  lunarSummary: {\n    total: number;\n    newMoons: number;\n    fullMoons: number;\n    averageIntensity: number;\n  };\n}\n\nconst TransitTabs: React.FC<TransitTabsProps> = ({\n  activeTab,\n  setActiveTab,\n  transitResults,\n  lunarTransits,\n  loading,\n  loadingLunar,\n  error,\n  dateRange,\n  setDateRange,\n  onCalculateTransits,\n  onCalculateLunar,\n  onClearError,\n  transitSummary,\n  lunarSummary,\n}) => {\n  return (\n    <Tabs.Root value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n      <Tabs.List className=\"flex p-1 border rounded-lg bg-cosmic-deep-purple/30 backdrop-blur-sm border-cosmic-purple/20\">\n        <Tabs.Trigger\n          value=\"transits\"\n          className=\"flex-1 flex items-center justify-center px-4 py-3 text-sm font-medium rounded-md transition-all duration-200 data-[state=active]:bg-cosmic-purple data-[state=active]:text-white data-[state=active]:shadow-sm text-cosmic-silver hover:text-white hover:bg-cosmic-purple/50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-cosmic-deep-purple\"\n          aria-label=\"Planet Transits\"\n        >\n          <FaCalendarAlt className=\"mr-2\" />\n          Planet Transits\n          {transitResults.length > 0 && (\n            <span className=\"ml-2 px-1.5 py-0.5 text-xs bg-cosmic-gold/20 text-cosmic-gold rounded\">\n              {transitResults.length}\n            </span>\n          )}\n        </Tabs.Trigger>\n        <Tabs.Trigger\n          value=\"lunar\"\n          className=\"flex-1 flex items-center justify-center px-4 py-3 text-sm font-medium rounded-md transition-all duration-200 data-[state=active]:bg-cosmic-purple data-[state=active]:text-white data-[state=active]:shadow-sm text-cosmic-silver hover:text-white hover:bg-cosmic-purple/50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-cosmic-deep-purple\"\n          aria-label=\"Lunar Cycles\"\n        >\n          <FaClock className=\"mr-2\" />\n          Lunar Cycles\n          {lunarTransits.length > 0 && (\n            <span className=\"ml-2 px-1.5 py-0.5 text-xs bg-cosmic-gold/20 text-cosmic-gold rounded\">\n              {lunarTransits.length}\n            </span>\n          )}\n        </Tabs.Trigger>\n      </Tabs.List>\n      \n      <DateRangeForm dateRange={dateRange} setDateRange={setDateRange} />\n      \n      <Tabs.Content value=\"transits\" className=\"focus:outline-none\">\n        <TransitsTabContent\n          transitResults={transitResults}\n          loading={loading}\n          error={error}\n          dateRange={dateRange}\n          onCalculateTransits={onCalculateTransits}\n          onClearError={onClearError}\n          transitSummary={transitSummary}\n        />\n      </Tabs.Content>\n      \n      <Tabs.Content value=\"lunar\" className=\"focus:outline-none\">\n        <LunarCyclesTabContent\n          lunarTransits={lunarTransits}\n          loadingLunar={loadingLunar}\n          error={error}\n          dateRange={dateRange}\n          onCalculateLunar={onCalculateLunar}\n          onClearError={onClearError}\n          lunarSummary={lunarSummary}\n        />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\nexport default TransitTabs;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/__tests__/TransitAnalysis.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/TransitAnalysis/__tests__/TransitAnalysis.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render } from '@testing-library/react';\n\ndescribe('TransitAnalysis Tests', () => {\n  it('should pass basic Vitest functionality test', () => {\n    // Test that Vitest is working correctly\n    expect(2 + 2).toBe(4);\n    expect('transit').toContain('trans');\n    expect([1, 2, 3]).toHaveLength(3);\n  });\n\n  it('should handle mock data structures', () => {\n    const mockTransitData = {\n      id: 'sun_conjunction_sun_20250101',\n      planet: 'Sun',\n      aspect: 'conjunction',\n      natal_planet: 'Sun',\n      date: '2025-01-01',\n      degree: 280.81,\n      intensity: 99.98,\n      energy: 'intense',\n      duration_days: 3,\n      description: 'Sun conjunction natal Sun'\n    };\n\n    expect(mockTransitData).toHaveProperty('planet', 'Sun');\n    expect(mockTransitData.intensity).toBeGreaterThan(90);\n    expect(mockTransitData.energy).toBe('intense');\n  });\n\n  it('should validate birth data structure', () => {\n    const mockBirthData = {\n      birth_date: '1990-01-01',\n      birth_time: '12:00',\n      latitude: 40.7128,\n      longitude: -74.0060,\n      timezone: 'America/New_York'\n    };\n\n    expect(mockBirthData.birth_date).toMatch(/^\\d{4}-\\d{2}-\\d{2}$/);\n    expect(mockBirthData.birth_time).toMatch(/^\\d{2}:\\d{2}$/);\n    expect(mockBirthData.latitude).toBeTypeOf('number');\n    expect(mockBirthData.longitude).toBeTypeOf('number');\n  });\n\n  it('should test API endpoint format validation', () => {\n    const apiResponse = [\n      {\n        id: 'sun_conjunction_sun_20250101',\n        planet: 'Sun',\n        aspect: 'conjunction',\n        natal_planet: 'Sun',\n        date: '2025-01-01',\n        degree: 280.81,\n        intensity: 99.98,\n        energy: 'intense',\n        duration_days: 3,\n        description: 'Sun conjunction natal Sun'\n      }\n    ];\n\n    expect(Array.isArray(apiResponse)).toBe(true);\n    expect(apiResponse).toHaveLength(1);\n    expect(apiResponse[0]).toHaveProperty('planet');\n    expect(apiResponse[0]).toHaveProperty('aspect');\n    expect(apiResponse[0]).toHaveProperty('date');\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/__tests__/TransitApiIntegration.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/components/TransitAnalysis/__tests__/TransitApiIntegration.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\n\ndescribe('Transit API Integration Tests', () => {\n  // Mock fetch for API calls\n  const mockFetch = vi.fn();\n  global.fetch = mockFetch;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should validate transit API endpoint response format', async () => {\n    // Mock API response matching our backend format\n    const mockResponse = [\n      {\n        id: 'sun_conjunction_sun_20250101',\n        planet: 'Sun',\n        aspect: 'conjunction',\n        natal_planet: 'Sun',\n        date: '2025-01-01',\n        degree: 280.81,\n        exact_time: null,\n        orb: 0.0006455766911699357,\n        intensity: 99.98,\n        energy: 'intense',\n        duration_days: 3,\n        description: 'Sun conjunction natal Sun'\n      }\n    ];\n\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockResponse,\n    });\n\n    // Test API call structure\n    const requestBody = {\n      birth_data: {\n        birth_date: '1990-01-01',\n        birth_time: '12:00',\n        latitude: 40.7128,\n        longitude: -74.0060,\n        timezone: 'America/New_York'\n      },\n      date_range: {\n        start_date: '2025-01-01',\n        end_date: '2025-01-31'\n      }\n    };\n\n    const response = await fetch('http://localhost:8000/api/astro/transits', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(requestBody)\n    });\n\n    const data = await response.json();\n\n    // Validate API call was made correctly\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:8000/api/astro/transits',\n      expect.objectContaining({\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody)\n      })\n    );\n\n    // Validate response format\n    expect(Array.isArray(data)).toBe(true);\n    expect(data[0]).toHaveProperty('id');\n    expect(data[0]).toHaveProperty('planet');\n    expect(data[0]).toHaveProperty('aspect');\n    expect(data[0]).toHaveProperty('date');\n    expect(data[0]).toHaveProperty('intensity');\n    expect(data[0].intensity).toBeGreaterThan(90);\n  });\n\n  it('should validate lunar transit API response format', async () => {\n    const mockLunarResponse = [\n      {\n        phase: 'New Moon',\n        date: '2025-01-01',\n        exact_time: '00:00:00',\n        energy: 'new beginnings',\n        degree: 293.91,\n        moon_sign: 'Capricorn',\n        intensity: 100.0,\n        description: 'Perfect for setting intentions'\n      }\n    ];\n\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockLunarResponse,\n    });\n\n    const response = await fetch('http://localhost:8000/api/astro/lunar-transits', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        birth_data: {\n          birth_date: '1990-01-01',\n          birth_time: '12:00',\n          latitude: 40.7128,\n          longitude: -74.0060\n        },\n        date_range: {\n          start_date: '2025-01-01',\n          end_date: '2025-01-31'\n        }\n      })\n    });\n\n    const data = await response.json();\n\n    expect(Array.isArray(data)).toBe(true);\n    expect(data[0]).toHaveProperty('phase');\n    expect(data[0]).toHaveProperty('date');\n    expect(data[0]).toHaveProperty('energy');\n    expect(data[0]).toHaveProperty('moon_sign');\n    expect(data[0].intensity).toBe(100.0);\n  });\n\n  it('should handle API error responses correctly', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 422,\n      json: async () => ({ detail: 'Validation error' }),\n    });\n\n    const response = await fetch('http://localhost:8000/api/astro/transits', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        birth_data: {\n          birth_date: 'invalid-date', // Invalid date format\n          birth_time: '12:00',\n          latitude: 40.7128,\n          longitude: -74.0060\n        },\n        date_range: {\n          start_date: '2025-01-01',\n          end_date: '2025-01-31'\n        }\n      })\n    });\n\n    expect(response.ok).toBe(false);\n    expect(response.status).toBe(422);\n\n    const errorData = await response.json();\n    expect(errorData).toHaveProperty('detail');\n  });\n\n  it('should validate shared type definitions match API', () => {\n    // Test that our TypeScript types align with API responses\n    interface TransitResult {\n      id: string;\n      planet: string;\n      aspect: string;\n      natal_planet: string;\n      date: string;\n      degree: number;\n      exact_time?: string | null;\n      orb: number;\n      intensity: number;\n      energy: string;\n      duration_days: number;\n      description?: string;\n    }\n\n    interface BirthData {\n      birth_date: string;\n      birth_time: string;\n      latitude: number;\n      longitude: number;\n      timezone?: string;\n    }\n\n    const sampleTransit: TransitResult = {\n      id: 'sun_conjunction_sun_20250101',\n      planet: 'Sun',\n      aspect: 'conjunction',\n      natal_planet: 'Sun',\n      date: '2025-01-01',\n      degree: 280.81,\n      exact_time: null,\n      orb: 0.001,\n      intensity: 99.98,\n      energy: 'intense',\n      duration_days: 3,\n      description: 'Sun conjunction natal Sun'\n    };\n\n    const sampleBirthData: BirthData = {\n      birth_date: '1990-01-01',\n      birth_time: '12:00',\n      latitude: 40.7128,\n      longitude: -74.0060,\n      timezone: 'America/New_York'\n    };\n\n    // Type validation tests\n    expect(typeof sampleTransit.id).toBe('string');\n    expect(typeof sampleTransit.intensity).toBe('number');\n    expect(typeof sampleBirthData.latitude).toBe('number');\n    expect(sampleBirthData.birth_date).toMatch(/^\\d{4}-\\d{2}-\\d{2}$/);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1571,1574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1571,1574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Core types for transit analysis birth data (textual form)\n// NOTE: This differs from the shared ChartBirthData (numeric unified form)\nexport interface TransitBirthData {\n  birth_date: string; // ISO format: YYYY-MM-DD\n  birth_time: string; // HH:MM:SS\n  latitude: number;\n  longitude: number;\n  timezone?: string;\n  city?: string;\n}\n\nexport interface DateRange {\n  startDate: string; // ISO format: YYYY-MM-DD\n  endDate: string;   // ISO format: YYYY-MM-DD\n}\n\n// Enhanced transit result interface\nexport interface TransitResult {\n  id: string;\n  planet: string;\n  aspect: string;\n  natal_planet: string;\n  date: string; // ISO format: YYYY-MM-DD\n  degree: number;\n  exact_time?: string;\n  orb: number;\n  intensity: number; // 0-100 scale\n  energy: string;\n  duration_days: number;\n  description?: string;\n}\n\n// Enhanced lunar transit result interface\nexport interface LunarTransitResult {\n  phase: string;\n  date: string; // ISO format: YYYY-MM-DD\n  exact_time: string;\n  energy: string;\n  degree: number;\n  moon_sign: string;\n  intensity: number; // 0-100 scale\n  description?: string;\n}\n\n// API Response types\nexport interface TransitCalculationResponse {\n  results: TransitResult[];\n  totalCount: number;\n  dateRange: DateRange;\n  calculatedAt: string;\n  cached: boolean;\n}\n\nexport interface LunarTransitCalculationResponse {\n  results: LunarTransitResult[];\n  totalCount: number;\n  dateRange: DateRange;\n  calculatedAt: string;\n  cached: boolean;\n}\n\n// Error handling types\nexport interface ApiError {\n  message: string;\n  code: string;\n  details?: Record<string, any>;\n}\n\n// Transit analysis options\nexport interface TransitAnalysisOptions {\n  includeMinorAspects?: boolean;\n  includeAsteroids?: boolean;\n  orb?: number;\n}\n\nexport interface LunarAnalysisOptions {\n  includeVoidOfCourse?: boolean;\n  includeDailyPhases?: boolean;\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/useTransitAnalysis.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useMemo } from 'react';\nimport { devConsole } from '../../config/environment';\nimport axios, { AxiosError } from 'axios';\nimport type { \n  TransitBirthData as BirthData, \n  TransitResult, \n  LunarTransitResult, \n  DateRange,\n  TransitAnalysisOptions,\n  LunarAnalysisOptions\n} from './types';\n\nexport const useTransitAnalysis = (birthData: BirthData) => {\n  const [activeTab, setActiveTab] = useState<string>('transits');\n  const [transitResults, setTransitResults] = useState<TransitResult[]>([]);\n  const [lunarTransits, setLunarTransits] = useState<LunarTransitResult[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingLunar, setLoadingLunar] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const [dateRange, setDateRange] = useState<DateRange>({\n    startDate: new Date().toISOString().split('T')[0],\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n  });\n\n  // API base URL - could be moved to config\n  const API_BASE_URL = typeof import.meta.env.VITE_API_URL === 'string' && import.meta.env.VITE_API_URL.length > 0\n    ? import.meta.env.VITE_API_URL\n    : 'http://localhost:8000';\n\n  const calculateTransits = useCallback(async (options: TransitAnalysisOptions = {}) => {\n    setLoading(true);\n    setError(undefined);\n    \n    try {\n      const requestPayload = {\n        birth_data: {\n          birth_date: birthData.birth_date,\n          birth_time: birthData.birth_time,\n          latitude: birthData.latitude,\n          longitude: birthData.longitude,\n          timezone: birthData.timezone ?? 'UTC'\n        },\n        date_range: {\n          start_date: dateRange.startDate,\n          end_date: dateRange.endDate\n        },\n        include_minor_aspects: options.includeMinorAspects ?? false,\n        include_asteroids: options.includeAsteroids ?? false,\n        orb: options.orb ?? 2.0\n      };\n\n  devConsole.log?.('🚀 Calculating transits with payload:', requestPayload);\n\n      const response = await axios.post<TransitResult[]>(\n        `${API_BASE_URL}/api/astro/transits`,\n        requestPayload,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 30000, // 30 second timeout\n        }\n      );\n  if (Array.isArray(response.data) === true) {\n        setTransitResults(response.data);\n  devConsole.log?.(`✅ Transit calculation successful: ${response.data.length} results`);\n      } else {\n        devConsole.error('❌ Invalid response format:', response.data);\n        setError('Invalid response format from server');\n      }\n    } catch (err: unknown) {\n      devConsole.error('❌ Error calculating transits:', err);\n  if (isAxiosError(err) && err.response !== null && err.response !== undefined) {\n        // Server responded with error status\n        const detail = (err.response.data as Record<string, unknown>)?.detail;\n        const message = (err.response.data as Record<string, unknown>)?.message;\n        const errorMessage = typeof detail === 'string' ? detail : (typeof message === 'string' ? message : `Server error: ${err.response.status}`);\n        setError(errorMessage);\n  } else if (isAxiosError(err) && err.request !== null && err.request !== undefined) {\n        // Request was made but no response received\n        setError('Unable to connect to transit calculation service. Please check your connection.');\n      } else {\n        // Something else happened\n        setError('Failed to calculate transits. Please try again.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [birthData, dateRange, API_BASE_URL]);\n\n  const calculateLunarTransits = useCallback(async (options: LunarAnalysisOptions = {}) => {\n    setLoadingLunar(true);\n    setError(undefined);\n    \n    try {\n      const requestPayload = {\n        birth_data: {\n          birth_date: birthData.birth_date,\n          birth_time: birthData.birth_time,\n          latitude: birthData.latitude,\n          longitude: birthData.longitude,\n          timezone: birthData.timezone ?? 'UTC'\n        },\n        date_range: {\n          start_date: dateRange.startDate,\n          end_date: dateRange.endDate\n        },\n        include_void_of_course: options.includeVoidOfCourse ?? false,\n        include_daily_phases: options.includeDailyPhases ?? true\n      };\n\n  devConsole.log?.('🌙 Calculating lunar transits with payload:', requestPayload);\n\n      const response = await axios.post<LunarTransitResult[]>(\n        `${API_BASE_URL}/api/astro/lunar-transits`,\n        requestPayload,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 30000, // 30 second timeout\n        }\n      );\n\n  if (Array.isArray(response.data) === true) {\n        setLunarTransits(response.data);\n  devConsole.log?.(`✅ Lunar transit calculation successful: ${response.data.length} results`);\n      } else {\n        devConsole.error('❌ Invalid lunar response format:', response.data);\n        setError('Invalid response format from server');\n      }\n    } catch (err: unknown) {\n      devConsole.error('❌ Error calculating lunar transits:', err);\n  if (isAxiosError(err) && err.response !== null && err.response !== undefined) {\n        // Server responded with error status\n        const detail = (err.response.data as Record<string, unknown>)?.detail;\n        const message = (err.response.data as Record<string, unknown>)?.message;\n        const errorMessage = typeof detail === 'string' ? detail : (typeof message === 'string' ? message : `Server error: ${err.response.status}`);\n        setError(errorMessage);\n  } else if (isAxiosError(err) && err.request !== null && err.request !== undefined) {\n        // Request was made but no response received\n        setError('Unable to connect to lunar transit service. Please check your connection.');\n      } else {\n        // Something else happened\n        setError('Failed to calculate lunar transits. Please try again.');\n      }\n    } finally {\n      setLoadingLunar(false);\n    }\n  }, [birthData, dateRange, API_BASE_URL]);\n\n  // Clear error when user changes settings\n  const clearError = useCallback(() => {\n    setError(undefined);\n  }, []);\n\n  // Memoize results to prevent unnecessary re-renders\n  const memoizedTransitResults = useMemo(() => transitResults, [transitResults]);\n  const memoizedLunarTransits = useMemo(() => lunarTransits, [lunarTransits]);\n\n  // Enhanced date range validation\n  const isValidDateRange = useMemo(() => {\n    const start = new Date(dateRange.startDate);\n    const end = new Date(dateRange.endDate);\n    const diffDays = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24);\n    \n    return diffDays > 0 && diffDays <= 365; // Max 1 year range\n  }, [dateRange]);\n\n  // Calculate summary statistics\n  const transitSummary = useMemo(() => {\n  const majorAspectSet = new Set(['conjunction', 'opposition', 'trine', 'square', 'sextile']);\n  const challengingSet = new Set(['opposition', 'square']);\n  const harmoniousSet = new Set(['trine', 'sextile']);\n  const majorAspects = transitResults.filter(t => majorAspectSet.has(t.aspect));\n  const challengingAspects = transitResults.filter(t => challengingSet.has(t.aspect));\n  const harmonious = transitResults.filter(t => harmoniousSet.has(t.aspect));\n    \n    return {\n      total: transitResults.length,\n      major: majorAspects.length,\n      challenging: challengingAspects.length,\n      harmonious: harmonious.length,\n  intensity: transitResults.length > 0\n        ? Math.round(transitResults.reduce((sum, t) => sum + (t.intensity ?? 0), 0) / transitResults.length)\n        : 0\n    };\n  }, [transitResults]);\n\n  const lunarSummary = useMemo(() => {\n  const newMoons = lunarTransits.filter(l => l.phase.toLowerCase().includes('new'));\n  const fullMoons = lunarTransits.filter(l => l.phase.toLowerCase().includes('full'));\n    \n    return {\n      total: lunarTransits.length,\n      newMoons: newMoons.length,\n      fullMoons: fullMoons.length,\n  averageIntensity: lunarTransits.length > 0\n        ? Math.round(lunarTransits.reduce((sum, l) => sum + (l.intensity ?? 0), 0) / lunarTransits.length)\n        : 0\n    };\n  }, [lunarTransits]);\n\n  return {\n    // State\n    activeTab,\n    setActiveTab,\n    transitResults: memoizedTransitResults,\n    lunarTransits: memoizedLunarTransits,\n    loading,\n    loadingLunar,\n    error,\n    dateRange,\n    setDateRange,\n    \n    // Actions\n    calculateTransits,\n    calculateLunarTransits,\n    clearError,\n    \n    // Computed values\n    isValidDateRange,\n    transitSummary,\n    lunarSummary,\n    \n    // Helper values\n    hasResults: transitResults.length > 0 || lunarTransits.length > 0,\n    isCalculating: loading || loadingLunar,\n  };\n};\n\nfunction isAxiosError(error: unknown): error is AxiosError {\n  const err = error as Error & { isAxiosError?: boolean };\n  return err !== null && typeof err === 'object' && err.isAxiosError === true;\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UnifiedBirthInput.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":59,"column":11,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":59,"endColumn":89,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2265,2343],"text":"birthData?.city ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":62,"column":15,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":62,"endColumn":105,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2501,2591],"text":"birthData?.timezone ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":77,"column":15,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":77,"endColumn":92,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3303,3380],"text":"birthData.city ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":80,"column":19,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":80,"endColumn":108,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3548,3637],"text":"birthData.timezone ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":196,"column":17,"nodeType":"JSXOpeningElement","endLine":196,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":211,"column":17,"nodeType":"JSXOpeningElement","endLine":211,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":230,"column":17,"nodeType":"JSXOpeningElement","endLine":230,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":249,"column":17,"nodeType":"JSXOpeningElement","endLine":249,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":264,"column":17,"nodeType":"JSXOpeningElement","endLine":264,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":282,"column":15,"nodeType":"JSXOpeningElement","endLine":282,"endColumn":76},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":324,"column":21,"nodeType":"JSXOpeningElement","endLine":324,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":337,"column":21,"nodeType":"JSXOpeningElement","endLine":337,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":350,"column":21,"nodeType":"JSXOpeningElement","endLine":350,"endColumn":85}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useBirthData, formatBirthDataDisplay } from '../contexts/BirthDataContext';\nimport type { ChartBirthData } from '@cosmichub/types';\n\ninterface UnifiedBirthInputProps {\n  onSubmit?: (data: ChartBirthData) => void;\n  showSubmitButton?: boolean;\n  submitButtonText?: string;\n  title?: string;\n  description?: string;\n  autoSubmit?: boolean;\n  showCurrentData?: boolean;\n  className?: string;\n}\n\nconst SAMPLE_DATA = {\n  year: 1990,\n  month: 6,\n  day: 21,\n  hour: 14,\n  minute: 30,\n  city: 'New York, NY',\n  lat: 40.7128,\n  lon: -74.0060,\n  timezone: 'America/New_York'\n};\n\nconst MAJOR_CITIES = [\n  { name: 'New York, NY', lat: 40.7128, lon: -74.0060, tz: 'America/New_York' },\n  { name: 'Los Angeles, CA', lat: 34.0522, lon: -118.2437, tz: 'America/Los_Angeles' },\n  { name: 'London, UK', lat: 51.5074, lon: -0.1278, tz: 'Europe/London' },\n  { name: 'Paris, France', lat: 48.8566, lon: 2.3522, tz: 'Europe/Paris' },\n  { name: 'Tokyo, Japan', lat: 35.6762, lon: 139.6503, tz: 'Asia/Tokyo' },\n  { name: 'Sydney, Australia', lat: -33.8688, lon: 151.2093, tz: 'Australia/Sydney' },\n  { name: 'Mumbai, India', lat: 19.0760, lon: 72.8777, tz: 'Asia/Kolkata' },\n  { name: 'São Paulo, Brazil', lat: -23.5558, lon: -46.6396, tz: 'America/Sao_Paulo' }\n];\n\nexport const UnifiedBirthInput: React.FC<UnifiedBirthInputProps> = ({\n  onSubmit,\n  showSubmitButton = true,\n  submitButtonText = 'Calculate Chart',\n  title = 'Birth Information',\n  description = 'Enter your birth details to unlock your cosmic blueprint',\n  autoSubmit = false,\n  showCurrentData = true,\n  className = ''\n}) => {\n  const { birthData, setBirthData, isDataValid } = useBirthData();\n  \n  // Form state - initialize with existing birth data or defaults\n  const [formData, setFormData] = useState(() => ({\n    year: birthData?.year !== undefined ? birthData.year.toString() : '',\n    month: birthData?.month !== undefined ? birthData.month.toString() : '',\n    day: birthData?.day !== undefined ? birthData.day.toString() : '',\n    hour: birthData?.hour !== undefined ? birthData.hour.toString() : '',\n    minute: birthData?.minute !== undefined ? birthData.minute.toString() : '',\n    city: birthData?.city !== undefined && birthData.city !== null ? birthData.city : '',\n    lat: birthData?.lat !== undefined ? birthData.lat.toString() : '',\n    lon: birthData?.lon !== undefined ? birthData.lon.toString() : '',\n    timezone: birthData?.timezone !== undefined && birthData.timezone !== null ? birthData.timezone : ''\n  }));\n\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [citySearchResults, setCitySearchResults] = useState<typeof MAJOR_CITIES>([]);\n\n  // Update form when birth data changes from context\n  useEffect(() => {\n    if (birthData !== null && birthData !== undefined) {\n      setFormData({\n        year: birthData.year !== undefined ? birthData.year.toString() : '',\n        month: birthData.month !== undefined ? birthData.month.toString() : '',\n        day: birthData.day !== undefined ? birthData.day.toString() : '',\n        hour: birthData.hour !== undefined ? birthData.hour.toString() : '',\n        minute: birthData.minute !== undefined ? birthData.minute.toString() : '',\n        city: birthData.city !== undefined && birthData.city !== null ? birthData.city : '',\n        lat: birthData.lat !== undefined ? birthData.lat.toString() : '',\n        lon: birthData.lon !== undefined ? birthData.lon.toString() : '',\n        timezone: birthData.timezone !== undefined && birthData.timezone !== null ? birthData.timezone : ''\n      });\n    }\n  }, [birthData]);\n\n  const handleInputChange = useCallback((field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Smart city search\n    if (field === 'city') {\n      if (value.length > 2) {\n        const filtered = MAJOR_CITIES.filter(city => \n          typeof city.name === 'string' && city.name.length > 0 && \n          city.name.toLowerCase().includes(value.toLowerCase())\n        );\n        setCitySearchResults(filtered.slice(0, 5));\n      } else {\n        setCitySearchResults([]);\n      }\n    }\n  }, []);\n\n  const handleCitySelect = useCallback((city: typeof MAJOR_CITIES[0]) => {\n    setFormData(prev => ({\n      ...prev,\n      city: city.name,\n      lat: city.lat.toString(),\n      lon: city.lon.toString(),\n      timezone: city.tz\n    }));\n    setCitySearchResults([]);\n  }, []);\n\n  const loadSampleData = useCallback(() => {\n    setFormData({\n      year: SAMPLE_DATA.year.toString(),\n      month: SAMPLE_DATA.month.toString(),\n      day: SAMPLE_DATA.day.toString(),\n      hour: SAMPLE_DATA.hour.toString(),\n      minute: SAMPLE_DATA.minute.toString(),\n      city: SAMPLE_DATA.city,\n      lat: SAMPLE_DATA.lat.toString(),\n      lon: SAMPLE_DATA.lon.toString(),\n      timezone: SAMPLE_DATA.timezone\n    });\n  }, []);\n\n  const handleSubmit = useCallback((e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const newBirthData: ChartBirthData = {\n      year: formData.year.length > 0 ? parseInt(formData.year, 10) : 0,\n      month: formData.month.length > 0 ? parseInt(formData.month, 10) : 0,\n      day: formData.day.length > 0 ? parseInt(formData.day, 10) : 0,\n      hour: formData.hour.length > 0 ? parseInt(formData.hour, 10) : 0,\n      minute: formData.minute.length > 0 ? parseInt(formData.minute, 10) : 0,\n      city: formData.city.length > 0 ? formData.city : '',\n      lat: formData.lat.length > 0 ? parseFloat(formData.lat) : undefined,\n      lon: formData.lon.length > 0 ? parseFloat(formData.lon) : undefined,\n      timezone: formData.timezone.length > 0 ? formData.timezone : undefined\n    };\n\n    // Validate required fields\n    if (newBirthData.year === 0 || newBirthData.month === 0 || newBirthData.day === 0 || \n        newBirthData.hour === 0 || newBirthData.minute === 0 || newBirthData.city === '') {\n      alert('Please fill in all required fields');\n      return;\n    }\n\n    setBirthData(newBirthData);\n    onSubmit?.(newBirthData);\n  }, [formData, setBirthData, onSubmit]);\n\n  // Auto-submit when data is complete and valid\n  useEffect(() => {\n    if (autoSubmit === true && isDataValid === true && birthData !== null && birthData !== undefined) {\n      onSubmit?.(birthData);\n    }\n  }, [autoSubmit, isDataValid, birthData, onSubmit]);\n\n  const isFormComplete = formData.year.length > 0 && formData.month.length > 0 && \n                        formData.day.length > 0 && formData.hour.length > 0 && \n                        formData.minute.length > 0 && formData.city.length > 0;\n\n  return (\n    <div className={`unified-birth-input ${className}`}>\n      {/* Current Data Display */}\n      {showCurrentData === true && birthData !== null && birthData !== undefined && (\n        <Card className=\"mb-6 bg-cosmic-gold/10 border-cosmic-gold/30\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"text-cosmic-gold font-semibold mb-1\">Current Birth Data</h4>\n              <p className=\"text-cosmic-silver/80 text-sm\">\n                {formatBirthDataDisplay(birthData)}\n              </p>\n            </div>\n            <Button \n              onClick={() => setBirthData(null)} \n              variant=\"secondary\" \n              className=\"text-sm\"\n            >\n              Edit\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Input Form */}\n      {(birthData === null || birthData === undefined || showCurrentData === false) && (\n        <Card title={title}>\n          <p className=\"text-cosmic-silver/70 mb-6\">{description}</p>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Date of Birth */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Year <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.year}\n                  onChange={(e) => handleInputChange('year', e.target.value)}\n                  placeholder=\"1990\"\n                  min=\"1900\"\n                  max=\"2030\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Month <span className=\"text-red-400\">*</span>\n                </label>\n                <select\n                  value={formData.month}\n                  onChange={(e) => handleInputChange('month', e.target.value)}\n                  required\n                  title=\"Select birth month\"\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                >\n                  <option value=\"\">Select Month</option>\n                  {Array.from({ length: 12 }, (_, i) => (\n                    <option key={i + 1} value={i + 1}>\n                      {new Date(2000, i).toLocaleString('default', { month: 'long' })}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Day <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.day}\n                  onChange={(e) => handleInputChange('day', e.target.value)}\n                  placeholder=\"15\"\n                  min=\"1\"\n                  max=\"31\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n            </div>\n\n            {/* Time of Birth */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Hour (24-hour) <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.hour}\n                  onChange={(e) => handleInputChange('hour', e.target.value)}\n                  placeholder=\"14\"\n                  min=\"0\"\n                  max=\"23\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Minute <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.minute}\n                  onChange={(e) => handleInputChange('minute', e.target.value)}\n                  placeholder=\"30\"\n                  min=\"0\"\n                  max=\"59\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n            </div>\n\n            {/* Birth Location */}\n            <div className=\"relative\">\n              <label className=\"block text-cosmic-silver font-medium mb-2\">\n                Birth City <span className=\"text-red-400\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.city}\n                onChange={(e) => handleInputChange('city', e.target.value)}\n                placeholder=\"Start typing a city name...\"\n                required\n                className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n              />\n              \n              {/* City Search Results */}\n              {citySearchResults.length > 0 && (\n                <div className=\"absolute z-10 w-full mt-1 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg shadow-lg\">\n                  {citySearchResults.map((city, index) => (\n                    <button\n                      key={index}\n                      type=\"button\"\n                      onClick={() => handleCitySelect(city)}\n                      className=\"w-full px-4 py-2 text-left text-cosmic-silver hover:bg-cosmic-purple/20 first:rounded-t-lg last:rounded-b-lg transition-colors\"\n                    >\n                      {city.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Advanced Options */}\n            <div>\n              <button\n                type=\"button\"\n                onClick={() => setShowAdvanced(!showAdvanced)}\n                className=\"text-cosmic-gold hover:text-cosmic-gold/80 transition-colors text-sm font-medium\"\n              >\n                {showAdvanced ? '▼' : '▶'} Advanced Options (Optional)\n              </button>\n              \n              {showAdvanced && (\n                <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-cosmic-silver/70 font-medium mb-2\">\n                      Latitude\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.000001\"\n                      value={formData.lat}\n                      onChange={(e) => handleInputChange('lat', e.target.value)}\n                      placeholder=\"40.7128\"\n                      className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-cosmic-silver/70 font-medium mb-2\">\n                      Longitude\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.000001\"\n                      value={formData.lon}\n                      onChange={(e) => handleInputChange('lon', e.target.value)}\n                      placeholder=\"-74.0060\"\n                      className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-cosmic-silver/70 font-medium mb-2\">\n                      Timezone\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={formData.timezone}\n                      onChange={(e) => handleInputChange('timezone', e.target.value)}\n                      placeholder=\"America/New_York\"\n                      className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 items-center justify-between pt-4\">\n              <Button\n                onClick={loadSampleData}\n                variant=\"secondary\"\n                className=\"w-full sm:w-auto\"\n              >\n                📄 Load Sample Data\n              </Button>\n              \n              {showSubmitButton && (\n                <button\n                  type=\"submit\"\n                  disabled={!isFormComplete}\n                  className={`w-full sm:w-auto px-8 py-3 rounded-lg font-semibold transition-all duration-300 ${\n                    isFormComplete\n                      ? 'bg-cosmic-gold text-cosmic-dark hover:bg-cosmic-gold/90'\n                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                  }`}\n                >\n                  ✨ {submitButtonText}\n                </button>\n              )}\n            </div>\n          </form>\n        </Card>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradeModalDemo.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":108,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":110},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":123,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":125},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":31,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":39,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":39,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useSubscription } from '@cosmichub/auth';\n\n/**\n * Demo component to test the upgrade modal functionality\n * This demonstrates how to use the subscription system to gate premium features\n */\nexport const UpgradeModalDemo: React.FC = () => {\n  const subscriptionData = useSubscription();\n  const hasFeature = typeof subscriptionData?.hasFeature === 'function' ? subscriptionData.hasFeature : () => false;\n  const upgradeRequired = typeof subscriptionData?.upgradeRequired === 'function' ? subscriptionData.upgradeRequired : () => {};\n  const userTier = (subscriptionData?.tier ?? subscriptionData?.userTier ?? 'Free');\n\n  const testGeneKeysFeature = () => {\n  if (hasFeature('Pro') !== true) {\n      upgradeRequired('Gene Keys Analysis');\n      return;\n    }\n    // Feature logic would go here\n    alert('Gene Keys Analysis is available! (This would open the actual feature)');\n  };\n\n  const testSynastryFeature = () => {\n  if (hasFeature('Pro') !== true) {\n      upgradeRequired('Synastry Compatibility Analysis');\n      return;\n    }\n    alert('Synastry Analysis is available!');\n  };\n\n  const testPdfExport = () => {\n  if (hasFeature('Pro') !== true) {\n      upgradeRequired('PDF Chart Export');\n      return;\n    }\n    alert('PDF Export is available!');\n  };\n\n  const testEnterpriseFeature = () => {\n  if (hasFeature('Enterprise') !== true) {\n      upgradeRequired('API Access & White-label Solutions');\n      return;\n    }\n    alert('Enterprise features are available!');\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"bg-white rounded-lg shadow-lg p-8\">\n        <h2 className=\"text-3xl font-bold text-cosmic-dark mb-6 text-center\">\n          Upgrade Modal Demo\n        </h2>\n        \n        <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n          <p className=\"text-lg\">\n            <span className=\"font-semibold\">Current Tier:</span> \n            <span className={`ml-2 px-3 py-1 rounded-full text-sm font-bold ${\n              userTier === 'Free' ? 'bg-gray-200 text-gray-800' :\n              userTier === 'Basic' ? 'bg-blue-200 text-blue-800' :\n              userTier === 'Pro' ? 'bg-purple-200 text-purple-800' :\n              'bg-gold-200 text-gold-800'\n            }`}>\n              {userTier}\n            </span>\n          </p>\n          <p className=\"text-gray-600 mt-2\">\n            Click the buttons below to test different upgrade scenarios. \n            If you don&apos;t have access, you&apos;ll see the upgrade modal.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-cosmic-dark\">Pro Features</h3>\n            \n            <button\n              onClick={testGeneKeysFeature}\n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              🧬 Try Gene Keys Analysis\n            </button>\n            \n            <button\n              onClick={testSynastryFeature}\n              className=\"w-full bg-pink-600 hover:bg-pink-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              💕 Try Synastry Analysis\n            </button>\n            \n            <button\n              onClick={testPdfExport}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              📄 Try PDF Export\n            </button>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-cosmic-dark\">Enterprise Features</h3>\n            \n            <button\n              onClick={testEnterpriseFeature}\n              className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              🚀 Try Enterprise Features\n            </button>\n            \n            <div className=\"p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n              <h4 className=\"font-semibold text-yellow-800 mb-2\">How it works:</h4>\n              <ul className=\"text-sm text-yellow-700 space-y-1\">\n                <li>• Feature check using <code>hasFeature()</code></li>\n                <li>• Automatic upgrade modal trigger</li>\n                <li>• Contextual pricing recommendations</li>\n                <li>• Graceful upgrade flow</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-8 p-4 bg-cosmic-purple bg-opacity-10 rounded-lg border border-cosmic-purple border-opacity-30\">\n          <h4 className=\"font-semibold text-cosmic-purple mb-2\">🔧 Developer Notes:</h4>\n          <ul className=\"text-sm text-gray-700 space-y-1\">\n              <li>• The upgrade modal will show tier-specific recommendations</li>\n            <li>• Currently redirects to pricing page with pre-selected tier</li>\n            <li>• Ready for Stripe integration (TODO items marked)</li>\n            <li>• Event-based system prevents circular dependencies</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UpgradeModalDemo;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradeModalManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradePrompt.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\nimport { devConsole } from '../config/environment';\nimport * as Dialog from '@radix-ui/react-dialog';\nimport { FaCheck } from 'react-icons/fa';\nimport { COSMICHUB_TIERS } from '@cosmichub/subscriptions';\n\ninterface UpgradePromptProps {\n  isOpen: boolean;\n  onClose: () => void;\n  feature: string;\n  requiredTier: 'premium' | 'elite';\n  trigger?: 'usage_limit' | 'feature_access';\n}\n\nconst UpgradePrompt: React.FC<UpgradePromptProps> = React.memo(({ isOpen, onClose, feature, requiredTier, trigger = 'feature_access' }) => {\n  const tier = COSMICHUB_TIERS[requiredTier];\n\n  const handleUpgrade = useCallback(() => {\n    devConsole.log(`Upgrading to ${tier.name}`);\n    onClose();\n  }, [tier.name, onClose]);\n\n  const getTriggerMessage = () => {\n    switch (trigger) {\n      case 'usage_limit':\n        return \"You've reached your usage limit for this month.\";\n      case 'feature_access':\n        return `${feature} requires ${tier.name}.`;\n      default:\n        return `Upgrade to ${tier.name} to continue.`;\n    }\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={onClose}>\n      <Dialog.Portal>\n        <Dialog.Overlay className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\" />\n        <Dialog.Content className=\"fixed w-full max-w-lg p-6 transform -translate-x-1/2 -translate-y-1/2 border rounded-lg top-1/2 left-1/2 bg-cosmic-blue/80 backdrop-blur-md border-cosmic-silver/20\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex flex-col space-y-2\">\n              <Dialog.Title className=\"text-lg font-bold text-cosmic-gold\">Upgrade to {tier.name}</Dialog.Title>\n              <span className=\"px-2 py-1 text-sm text-purple-500 rounded bg-purple-500/20\">\n                {tier.price.monthly > 0 ? `$${tier.price.monthly}/month` : 'Free'}\n              </span>\n            </div>\n            <Dialog.Close asChild>\n              <button className=\"text-cosmic-silver hover:text-cosmic-gold\" aria-label=\"Close\">\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </Dialog.Close>\n          </div>\n\n          <div className=\"flex flex-col space-y-4\">\n            <div className=\"flex p-4 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n              <span className=\"text-xl text-blue-500\">ℹ️</span>\n              <p className=\"text-cosmic-silver\">{getTriggerMessage()}</p>\n            </div>\n\n            <div>\n              <p className=\"mb-2 font-semibold text-purple-600\">{tier.name} includes:</p>\n              <ul className=\"space-y-2\">\n                {tier.features.slice(0, 6).map((feature: string, index: number) => (\n                  <li key={index} className=\"flex items-center space-x-2\">\n                    <FaCheck className=\"text-green-500\" />\n                    <span className=\"text-sm text-cosmic-silver\">{feature}</span>\n                  </li>\n                ))}\n                {tier.features.length > 6 && (\n                  <li className=\"text-sm italic text-cosmic-silver/60\">+ {tier.features.length - 6} more features</li>\n                )}\n              </ul>\n            </div>\n\n            <div className=\"flex p-4 space-x-4 border border-green-500 rounded-md bg-green-900/50\">\n              <span className=\"text-xl text-green-500\">✅</span>\n              <div className=\"flex flex-col space-y-1\">\n                <p className=\"font-semibold text-cosmic-silver\">7-day free trial</p>\n                <p className=\"text-sm text-cosmic-silver\">Cancel anytime, no commitment</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex mt-6 space-x-3\">\n            <button\n              className=\"flex-1 bg-transparent border cosmic-button border-cosmic-silver text-cosmic-silver hover:bg-cosmic-silver/10\"\n              onClick={onClose}\n              aria-label=\"Close Modal\"\n            >\n              Maybe Later\n            </button>\n            <button\n              className=\"flex-1 cosmic-button\"\n              onClick={handleUpgrade}\n              aria-label=\"Start Free Trial\"\n            >\n              Start Free Trial\n            </button>\n          </div>\n        </Dialog.Content>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n});\n\nUpgradePrompt.displayName = 'UpgradePrompt';\n\nexport default UpgradePrompt;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UserMenu.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { FaUser, FaChartLine, FaBolt, FaSignOutAlt, FaCrown, FaStar } from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\n\ninterface UserMenuProps {\n  user: { email: string };\n  userTier: string;\n  handleSignOut: () => void;\n}\n\nconst UserMenu: React.FC<UserMenuProps> = React.memo(({ user, userTier, handleSignOut }) => {\n  const navigate = useNavigate();\n\n  const getTierIcon = (tier: string) => {\n    switch (tier) {\n      case 'elite': return <FaCrown className=\"text-gold-500\" />;\n      case 'premium': return <FaStar className=\"text-purple-500\" />;\n      default: return <FaUser className=\"text-gray-500\" />;\n    }\n  };\n\n  const getTierBadge = (tier: string) => {\n    switch (tier) {\n      case 'elite':\n        return <span className=\"px-2 py-1 text-xs font-bold text-gold-900 bg-gradient-to-r from-gold-400 to-gold-600 rounded-full\">ELITE</span>;\n      case 'premium':\n        return <span className=\"px-2 py-1 text-xs font-bold text-purple-900 bg-gradient-to-r from-purple-400 to-purple-600 rounded-full\">PRO</span>;\n      default:\n        return <span className=\"px-2 py-1 text-xs font-semibold text-gray-600 bg-gray-200 rounded-full\">FREE</span>;\n    }\n  };\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <button\n          className=\"flex items-center gap-3 p-2 rounded-lg bg-cosmic-blue/20 hover:bg-cosmic-blue/30 transition-colors\"\n          aria-label=\"User Menu\"\n        >\n          <div className=\"w-8 h-8 rounded-full bg-cosmic-silver/20 flex items-center justify-center\">\n            {getTierIcon(userTier)}\n          </div>\n          <div className=\"flex flex-col items-start\">\n            <span className=\"text-sm font-medium text-cosmic-silver truncate max-w-32\">{user.email}</span>\n            {getTierBadge(userTier)}\n          </div>\n          <svg className=\"w-4 h-4 text-cosmic-silver\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </button>\n      </DropdownMenu.Trigger>\n\n      <DropdownMenu.Portal>\n        <DropdownMenu.Content\n          className=\"bg-cosmic-dark/95 backdrop-blur-lg border border-cosmic-silver/20 rounded-lg p-2 min-w-[200px] shadow-lg\"\n          sideOffset={8}\n        >\n          <DropdownMenu.Item\n            className=\"flex items-center gap-2 p-2 rounded-md hover:bg-cosmic-purple/10 text-cosmic-silver cursor-pointer transition-colors\"\n            onSelect={() => navigate('/profile')}\n          >\n            <FaUser />\n            Profile\n          </DropdownMenu.Item>\n          <DropdownMenu.Item\n            className=\"flex items-center gap-2 p-2 rounded-md hover:bg-cosmic-purple/10 text-cosmic-silver cursor-pointer transition-colors\"\n            onSelect={() => navigate('/saved-charts')}\n          >\n            <FaChartLine />\n            Saved Charts\n          </DropdownMenu.Item>\n          {userTier === 'free' && (\n            <DropdownMenu.Item\n              className=\"flex items-center gap-2 p-2 rounded-md hover:bg-gold-500/10 text-gold-400 cursor-pointer transition-colors\"\n              onSelect={() => navigate('/upgrade')}\n            >\n              <FaBolt />\n              Upgrade to Pro\n            </DropdownMenu.Item>\n          )}\n          <DropdownMenu.Separator className=\"h-px my-2 bg-cosmic-silver/20\" />\n          <DropdownMenu.Item\n            className=\"flex items-center gap-2 p-2 rounded-md hover:bg-red-900/10 text-red-400 cursor-pointer transition-colors\"\n            onSelect={handleSignOut}\n          >\n            <FaSignOutAlt />\n            Sign Out\n          </DropdownMenu.Item>\n        </DropdownMenu.Content>\n      </DropdownMenu.Portal>\n    </DropdownMenu.Root>\n  );\n});\n\nUserMenu.displayName = 'UserMenu';\n\nexport default UserMenu;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UserProfile.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":69,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":69,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":261,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":261,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { devConsole } from '../config/environment';\nimport { VisuallyHidden } from '@/components/accessibility/VisuallyHidden';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth, useSubscription, type SubscriptionState } from '@cosmichub/auth';\nimport { useToast } from './ToastProvider';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { \n  FaUser, \n  FaCrown, \n  FaStar, \n  FaCalendarAlt, \n  FaCreditCard, \n  FaArrowUp, \n  FaHistory \n} from 'react-icons/fa';\nimport { COSMICHUB_TIERS } from '@cosmichub/subscriptions';\nimport ProgressBar from './ProgressBar';\nimport './UserProfile.module.css';\nimport { serializeAstrologyData, type UserProfile as UserProfileType } from '@cosmichub/types';\n\ninterface UserStats {\n  totalCharts: number;\n  chartsThisMonth: number;\n  savedCharts: number;\n  joinDate: Date;\n  lastLogin: Date;\n}\n\n// Removed unused interfaces (UsageLimit, UsageLimits, ToastConfig) per lint\n\nconst UserProfile = React.memo(() => {\n  const { user } = useAuth();\n  const subscriptionUnknown = useSubscription();\n  const isSubscriptionState = (val: unknown): val is SubscriptionState => {\n    return (\n      val !== null &&\n      typeof val === 'object' &&\n      'userTier' in (val as Record<string, unknown>) &&\n      'checkUsageLimit' in (val as Record<string, unknown>)\n    );\n  };\n  const fallbackSubscription = {\n    subscription: undefined,\n    userTier: 'free',\n    isLoading: false,\n    checkUsageLimit: () => ({ current: 0, limit: 0 }),\n    tier: 'free',\n    hasFeature: () => false,\n    upgradeRequired: () => {},\n    refreshSubscription: async () => {}\n  } as unknown as SubscriptionState;\n  const subscriptionState: SubscriptionState = isSubscriptionState(subscriptionUnknown)\n    ? subscriptionUnknown\n    : fallbackSubscription;\n  // Destructure only safely typed fields we consume frequently\n  const { userTier, isLoading, checkUsageLimit } = subscriptionState;\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const [userStats, setUserStats] = useState<UserStats>({\n    totalCharts: 0,\n    chartsThisMonth: 0,\n    savedCharts: 0,\n    joinDate: new Date(),\n    lastLogin: new Date(),\n  });\n\n  const handleSaveProfile = () => {\n    if (user === null || user === undefined) {\n      toast({\n        description: \"Please log in to save your profile.\",\n        status: 'error'\n      });\n      return;\n    }\n\n    const profileData: UserProfileType = {\n      userId: user.uid,\n      birthData: { // This is mock data, replace with actual form data\n        date: '1990-01-01',\n        time: '12:00',\n        location: 'Greenwich, UK',\n      }\n    };\n\n    try {\n      const serializedProfile = serializeAstrologyData(profileData);\n      // TODO: integrate persistence service. For now just ensure variable is used implicitly\n      if (serializedProfile.length === 0) {\n        devConsole.warn?.('Serialized profile unexpectedly empty');\n      }\n      \n      toast({\n        description: \"Profile saved successfully!\",\n        status: 'success',\n        duration: 3000\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n  devConsole.error(\"Failed to serialize profile:\", errorMessage);\n      \n      toast({\n        description: \"Failed to save profile. Please try again.\",\n        status: 'error',\n        duration: 5000\n      });\n    }\n  };\n\n  const loadUserStats = useCallback(() => {\n    if (user === null || user === undefined || typeof checkUsageLimit !== 'function') {\n      return;\n    }\n\n  try {\n  const chartsUsage = checkUsageLimit('chartsPerMonth');\n  const savedUsage = checkUsageLimit('chartStorage');\n      \n      setUserStats({\n        totalCharts: chartsUsage.current + 50, // TODO: Get actual total from backend\n        chartsThisMonth: chartsUsage.current,\n        savedCharts: savedUsage.current,\n        joinDate: new Date(user.metadata?.creationTime ?? Date.now()),\n        lastLogin: new Date(user.metadata?.lastSignInTime ?? Date.now()),\n      });\n    } catch (error) {\n  devConsole.error('Failed to load user stats:', error);\n      toast({\n        description: 'Failed to load usage statistics. Please refresh the page.',\n        status: 'error',\n        duration: 5000\n      });\n    }\n  }, [user, checkUsageLimit, toast]);\n\n  useEffect(() => {\n  void loadUserStats();\n  }, [loadUserStats]);\n\n  const getTierIcon = (tier: keyof typeof COSMICHUB_TIERS): React.ReactElement => {\n    const iconProps = {\n      className: \"text-cosmic-silver\",\n      \"aria-hidden\": \"true\" as const\n    };\n\n    switch (tier) {\n      case 'free':\n        return <FaUser {...iconProps} />;\n      case 'premium':\n        return <FaStar className=\"text-cosmic-purple\" aria-hidden=\"true\" />;\n      case 'elite':\n        return <FaCrown className=\"text-cosmic-gold\" aria-hidden=\"true\" />;\n      default:\n        return <FaUser {...iconProps} />;\n    }\n  };\n\n  const getTierColor = (tier: keyof typeof COSMICHUB_TIERS): string => {\n    switch (tier) {\n      case 'free':\n        return 'cosmic-silver';\n      case 'premium':\n        return 'cosmic-purple';\n      case 'elite':\n        return 'cosmic-gold';\n      default:\n        return 'cosmic-silver';\n    }\n  };\n\n  const handleUpgrade = useCallback(() => {\n    navigate('/upgrade');\n  }, [navigate]);\n\n  const isTierKey = (t: unknown): t is keyof typeof COSMICHUB_TIERS =>\n    typeof t === 'string' && t in COSMICHUB_TIERS;\n  const tierKey: keyof typeof COSMICHUB_TIERS = isTierKey(userTier) ? userTier : 'free';\n  const currentTier = COSMICHUB_TIERS[tierKey];\n  const chartsUsage = typeof checkUsageLimit === 'function' ? checkUsageLimit('chartsPerMonth') : { current: 0, limit: 0 };\n  const savedUsage = typeof checkUsageLimit === 'function' ? checkUsageLimit('chartStorage') : { current: 0, limit: 0 };\n\n  if (isLoading || user === null || user === undefined) {\n    return (\n      <div className=\"py-10 text-center\" role=\"status\" aria-label=\"Loading profile\">\n        <div className=\"mx-auto text-4xl text-cosmic-purple animate-spin\" aria-hidden=\"true\">⭐</div>\n        <p className=\"mt-4 text-cosmic-silver\">Loading profile...</p>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"max-w-4xl py-8 mx-auto\">\n      <div className=\"cosmic-card p-6 rounded-lg shadow-lg bg-cosmic-dark\">\n        <header className=\"flex flex-col items-center mb-6 space-y-4 sm:flex-row sm:space-y-0 sm:space-x-6\">\n          <div \n            className=\"flex items-center justify-center w-24 h-24 rounded-full bg-cosmic-blue/30\"\n            role=\"img\"\n            aria-label=\"User avatar\"\n          >\n            <FaUser \n              className=\"text-3xl text-cosmic-silver\" \n              aria-hidden=\"true\"\n              role=\"img\"\n              aria-label=\"Default user avatar\" \n            />\n          </div>\n          <div className=\"text-center sm:text-left\">\n            <h1 className=\"text-2xl font-bold text-cosmic-gold\">{user.email}</h1>\n            <div className=\"flex items-center mt-2 space-x-2\" role=\"status\" aria-label={`Subscription tier: ${userTier}`}>\n              {getTierIcon(userTier)}\n              <span \n                className={`bg-${getTierColor(userTier)}/20 text-${getTierColor(userTier)} px-2 py-1 rounded text-sm font-semibold uppercase`}\n              >\n                {userTier}\n              </span>\n            </div>\n          </div>\n        </header>\n\n        <Tabs.Root defaultValue=\"overview\" aria-label=\"User Profile\">\n          <Tabs.List \n            className=\"flex mb-6 border-b border-cosmic-silver/30\" \n            aria-label=\"User Profile Sections\"\n          >\n            {[\n              { id: 'overview', label: 'Overview' },\n              { id: 'usage', label: 'Usage' },\n              { id: 'account', label: 'Account' }\n            ].map((tab) => (\n              <Tabs.Trigger\n                key={tab.id}\n                value={tab.id}\n                className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple focus:outline-none focus:ring-2 focus:ring-cosmic-purple\"\n                aria-controls={`${tab.id}-tab`}\n              >\n                {tab.label}\n              </Tabs.Trigger>\n            ))}\n          </Tabs.List>\n\n          <Tabs.Content value=\"overview\" id=\"overview-tab\" role=\"tabpanel\" aria-labelledby=\"overview\">\n            <div className=\"flex flex-col space-y-6\">\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"subscription-details\">\n                <h2 id=\"subscription-details\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Subscription Details\n                </h2>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div>\n                    <p className=\"text-cosmic-silver\">Current Plan</p>\n                    <p className=\"font-bold text-cosmic-gold\">{currentTier.name}</p>\n                    <p className=\"text-sm text-cosmic-silver/80\">{currentTier.description}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-cosmic-silver\">Billing</p>\n                    <p className=\"font-bold text-cosmic-gold\">\n                      {currentTier.price.monthly > 0 \n                        ? `$${currentTier.price.monthly.toFixed(2)}/month` \n                        : 'Free'}\n                    </p>\n                    {(() => {\n                      if (currentTier.price.monthly <= 0) return null;\n                      if (\n                        subscriptionState.subscription !== null &&\n                        subscriptionState.subscription !== undefined &&\n                        typeof subscriptionState.subscription === 'object' &&\n                        typeof (subscriptionState.subscription as { currentPeriodEnd?: unknown }).currentPeriodEnd === 'number'\n                      ) {\n                        const end = (subscriptionState.subscription as { currentPeriodEnd: number }).currentPeriodEnd;\n                        const dateStr = new Date(end).toLocaleDateString();\n                        return (\n                          <p className=\"text-sm text-cosmic-silver/80\">\n                            Next billing: {dateStr}\n                          </p>\n                        );\n                      }\n                      return null;\n                    })()}\n                  </div>\n                </div>\n                <button\n                  className=\"w-full mt-4 cosmic-button sm:w-auto\"\n                  onClick={handleUpgrade}\n                  aria-label={currentTier.name === 'Free' ? 'Upgrade Plan' : 'Manage Subscription'}\n                >\n                  {currentTier.name === 'Free' ? (\n                    <span className=\"flex items-center space-x-2\">\n                      <FaArrowUp />\n                      <span>Upgrade Plan</span>\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center space-x-2\">\n                      <FaCreditCard />\n                      <span>Manage Subscription</span>\n                    </span>\n                  )}\n                </button>\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"activity-summary-heading\">\n                <h2 id=\"activity-summary-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Activity Summary\n                </h2>\n                <div \n                  className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\" \n                  role=\"list\" \n                  aria-label=\"Chart statistics\"\n                >\n                  <div role=\"listitem\">\n                    <p className=\"text-cosmic-silver\">Total Charts Created</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">\n                      <VisuallyHidden>Created </VisuallyHidden>\n                      {userStats.totalCharts}\n                      <VisuallyHidden> charts in total</VisuallyHidden>\n                    </p>\n                  </div>\n                  <div role=\"listitem\">\n                    <p className=\"text-cosmic-silver\">Charts This Month</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">\n                      <VisuallyHidden>Created </VisuallyHidden>\n                      {userStats.chartsThisMonth}\n                      <VisuallyHidden> charts this month</VisuallyHidden>\n                    </p>\n                  </div>\n                  <div role=\"listitem\">\n                    <p className=\"text-cosmic-silver\">Saved Charts</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">\n                      <VisuallyHidden>Have </VisuallyHidden>\n                      {userStats.savedCharts}\n                      <VisuallyHidden> saved charts</VisuallyHidden>\n                    </p>\n                  </div>\n                </div>\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"recent-activity-heading\">\n                <h2 id=\"recent-activity-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Recent Activity\n                </h2>\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-center space-x-2\">\n                    <FaHistory className=\"text-cosmic-blue\" aria-hidden=\"true\" />\n                    <span className=\"text-cosmic-silver\">\n                      Last Login: <time dateTime={userStats.lastLogin.toISOString()}>\n                        {userStats.lastLogin.toLocaleString()}\n                      </time>\n                    </span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <FaCalendarAlt className=\"text-cosmic-blue\" aria-hidden=\"true\" />\n                    <span className=\"text-cosmic-silver\">\n                      Joined: <time dateTime={userStats.joinDate.toISOString()}>\n                        {userStats.joinDate.toLocaleDateString()}\n                      </time>\n                    </span>\n                  </li>\n                </ul>\n              </section>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"usage\" id=\"usage-tab\" role=\"tabpanel\" aria-labelledby=\"usage\">\n            <div className=\"flex flex-col space-y-6\">\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"chart-creation-heading\">\n                <h2 id=\"chart-creation-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Chart Creation\n                </h2>\n                <div className=\"flex justify-between mb-2\" role=\"status\" aria-label=\"Monthly chart usage\">\n                  <p className=\"text-cosmic-silver\">Charts This Month</p>\n                  <p className=\"font-bold text-cosmic-gold\">\n                    <VisuallyHidden>Using </VisuallyHidden>\n                    {chartsUsage.current} / {chartsUsage.limit}\n                    <VisuallyHidden> charts</VisuallyHidden>\n                  </p>\n                </div>\n                <ProgressBar\n                  percentage={(chartsUsage.current / Math.max(chartsUsage.limit, 1)) * 100}\n                  color=\"purple\"\n                  aria-label={`Monthly chart usage: ${chartsUsage.current} of ${chartsUsage.limit} charts used (${((chartsUsage.current / Math.max(chartsUsage.limit, 1)) * 100).toFixed(0)}%)`}\n                />\n                {chartsUsage.current >= chartsUsage.limit && (\n                  <div \n                    className=\"flex p-4 mt-4 space-x-4 border border-yellow-500 rounded-md bg-yellow-900/50\"\n                    role=\"alert\"\n                    aria-live=\"polite\"\n                  >\n                    <span className=\"text-xl text-yellow-500\" aria-hidden=\"true\">⚠️</span>\n                    <p className=\"text-cosmic-silver\">You&apos;ve reached your monthly chart limit. Upgrade your plan to create more charts.</p>\n                  </div>\n                )}\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"chart-storage-heading\">\n                <h2 id=\"chart-storage-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Chart Storage\n                </h2>\n                <div className=\"flex justify-between mb-2\" role=\"status\" aria-label=\"Chart storage usage\">\n                  <p className=\"text-cosmic-silver\">Saved Charts</p>\n                  <p className=\"font-bold text-cosmic-gold\">\n                    <VisuallyHidden>Using </VisuallyHidden>\n                    {savedUsage.current} / {savedUsage.limit}\n                    <VisuallyHidden> storage slots</VisuallyHidden>\n                  </p>\n                </div>\n                <ProgressBar\n                  percentage={(savedUsage.current / Math.max(savedUsage.limit, 1)) * 100}\n                  color=\"blue\"\n                  aria-label={`Storage usage progress: ${savedUsage.current} of ${savedUsage.limit}`}\n                />\n                {savedUsage.current >= savedUsage.limit && (\n                  <div \n                    className=\"flex p-4 mt-4 space-x-4 border border-yellow-500 rounded-md bg-yellow-900/50\"\n                    role=\"alert\"\n                    aria-live=\"polite\"\n                  >\n                    <span className=\"text-xl text-yellow-500\" aria-hidden=\"true\">⚠️</span>\n                    <p className=\"text-cosmic-silver\">You&apos;ve reached your chart storage limit. Upgrade your plan to save more charts.</p>\n                  </div>\n                )}\n              </section>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"account\" id=\"account-tab\" role=\"tabpanel\" aria-labelledby=\"account\">\n            <div className=\"flex flex-col space-y-6\">\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"account-info-heading\">\n                <h2 id=\"account-info-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Account Information\n                </h2>\n                <dl className=\"flex flex-col space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Email Address</dt>\n                    <dd className=\"text-cosmic-silver\">{user.email}</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Email Verified</dt>\n                    <dd>\n                      <span \n                        className={`px-2 py-1 rounded text-sm ${user.emailVerified ? 'bg-green-500/20 text-green-500' : 'bg-red-500/20 text-red-500'}`}\n                        role=\"status\"\n                      >\n                        {user.emailVerified ? 'Verified' : 'Not Verified'}\n                      </span>\n                    </dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Account ID</dt>\n                    <dd className=\"font-mono text-sm text-cosmic-silver\" title={user.uid}>{user.uid.slice(0, 8)}...</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Two-Factor Auth</dt>\n                    <dd>\n                      <span className=\"px-2 py-1 text-sm text-cosmic-silver rounded bg-cosmic-silver/20\" role=\"status\">\n                        Not Set Up\n                      </span>\n                    </dd>\n                  </div>\n                </dl>\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"preferences-heading\">\n                <h2 id=\"preferences-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Preferences\n                </h2>\n                <dl className=\"flex flex-col space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Email Notifications</dt>\n                    <dd>\n                      <span \n                        className=\"px-2 py-1 text-sm text-green-500 rounded bg-green-500/20\"\n                        role=\"status\"\n                      >\n                        Enabled\n                      </span>\n                    </dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Marketing Emails</dt>\n                    <dd>\n                      <span \n                        className=\"px-2 py-1 text-sm text-cosmic-silver rounded bg-cosmic-silver/20\"\n                        role=\"status\"\n                      >\n                        Disabled\n                      </span>\n                    </dd>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <dt className=\"font-medium text-cosmic-silver\">Data Export</dt>\n                    <dd>\n                      <button \n                        type=\"button\"\n                        className=\"w-auto cosmic-button focus:ring-2 focus:ring-cosmic-purple focus:outline-none\"\n                        onClick={handleSaveProfile}\n                        aria-label=\"Request a data export of your account\"\n                      >\n                        Request Data\n                      </button>\n                    </dd>\n                  </div>\n                </dl>\n              </section>\n            </div>\n          </Tabs.Content>\n        </Tabs.Root>\n      </div>\n    </main>\n  );\n});\n\nUserProfile.displayName = 'UserProfile';\n\nexport default UserProfile;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/accessibility/VisuallyHidden.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":9,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * VisuallyHidden\n * Renders content that remains available to assistive technologies while being visually hidden.\n * Use for live updates, contextual labels for icon-only buttons, and status messages.\n */\nexport interface VisuallyHiddenProps {\n  as?: keyof JSX.IntrinsicElements;\n  children: React.ReactNode;\n  /**\n   * If true, element becomes visible when focused (for skip links). Ensure element is focusable.\n   */\n  focusable?: boolean;\n  className?: string;\n}\n\nconst baseClass = 'sr-only';\nconst focusableClass = 'sr-only-focusable';\n\nexport const VisuallyHidden: React.FC<VisuallyHiddenProps> = ({\n  as: Component = 'span',\n  children,\n  focusable = false,\n  className = ''\n}) => {\n  const classes = [baseClass, focusable ? focusableClass : '', className].filter(Boolean).join(' ');\n  return <Component className={classes}>{children}</Component>;\n};\n\nVisuallyHidden.displayName = 'VisuallyHidden';\n\nexport default VisuallyHidden;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/integrations/HealwaveIntegration/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/shared/AppSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/config/environment.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":19,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":19,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":34,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":36,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":114,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":114,"endColumn":29}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":18,"suggestions":[{"fix":{"range":[1217,1272],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":26,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":28,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":10,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\n// Environment validation schema\nconst envSchema = z.object({\n  VITE_FIREBASE_API_KEY: z.string().min(1, 'Firebase API key is required'),\n  VITE_FIREBASE_AUTH_DOMAIN: z.string().min(1, 'Firebase auth domain is required'),\n  VITE_FIREBASE_PROJECT_ID: z.string().min(1, 'Firebase project ID is required'),\n  VITE_FIREBASE_STORAGE_BUCKET: z.string().min(1, 'Firebase storage bucket is required'),\n  VITE_FIREBASE_MESSAGING_SENDER_ID: z.string().min(1, 'Firebase messaging sender ID is required'),\n  VITE_FIREBASE_APP_ID: z.string().min(1, 'Firebase app ID is required'),\n  VITE_API_URL: z.string().url().optional(),\n  VITE_XAI_API_KEY: z.string().optional(),\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n  VITE_ENABLE_ANALYTICS: z.string().transform(val => val === 'true').optional(),\n  VITE_ENABLE_ERROR_REPORTING: z.string().transform(val => val === 'true').optional(),\n});\n\n// Validate environment variables\nfunction validateEnvironment() {\n  try {\n    return envSchema.parse(import.meta.env);\n  } catch (error) {\n    // Use raw console.error here intentionally (bootstrapping prior to devConsole creation)\n    // eslint-disable-next-line no-console\n    console.error('Environment validation failed:', error);\n    throw new Error('Invalid environment configuration');\n  }\n}\n\n// Export validated environment\nexport const env = validateEnvironment();\n\n// Environment helper functions\nexport const isDevelopment = () => env.NODE_ENV === 'development';\nexport const isProduction = () => env.NODE_ENV === 'production';\nexport const isTest = () => env.NODE_ENV === 'test';\n\n// Feature flags\nexport const features = {\n  analytics: env.VITE_ENABLE_ANALYTICS ?? false,\n  errorReporting: env.VITE_ENABLE_ERROR_REPORTING ?? isProduction(),\n  healwave: true,\n  numerology: true,\n  humanDesign: true,\n  crossAppIntegration: true,\n};\n\n// API configuration\nexport const apiConfig = {\n  baseUrl: env.VITE_API_URL ?? 'http://localhost:8001',\n  timeout: 10000,\n  retries: 3,\n};\n\n// Firebase configuration\nexport const firebaseConfig = {\n  apiKey: env.VITE_FIREBASE_API_KEY,\n  authDomain: env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: env.VITE_FIREBASE_APP_ID,\n};\n\n// Security configuration\nexport const securityConfig = {\n  enableCSP: isProduction(),\n  enableHSTS: isProduction(),\n  sessionTimeout: 24 * 60 * 60 * 1000, // 24 hours\n  maxLoginAttempts: 5,\n  lockoutDuration: 15 * 60 * 1000, // 15 minutes\n};\n\n// XAI API configuration\nexport const xaiConfig = {\n  apiKey: env.VITE_XAI_API_KEY,\n  baseUrl: 'https://api.x.ai/v1',\n  model: 'grok-beta',\n  timeout: 30000,\n  enabled: env.VITE_XAI_API_KEY !== null && env.VITE_XAI_API_KEY !== undefined && env.VITE_XAI_API_KEY !== '',\n};\n\n// Logging configuration\nexport const loggingConfig = {\n  level: isDevelopment() ? 'debug' : 'warn',\n  enableConsole: isDevelopment(),\n  enableRemote: isProduction(),\n};\n\n// Performance monitoring configuration\nexport const performanceConfig = {\n  enabled: isDevelopment() || env.VITE_ENABLE_ANALYTICS === true,\n  trackingInterval: 5000, // 5 seconds\n  maxOperations: 1000, // Keep last 1000 operations\n  enableMemoryTracking: 'memory' in performance,\n  enablePagePerformance: true,\n  enableComponentTracking: isDevelopment(),\n  thresholds: {\n    slowOperation: 1000, // 1 second\n    memoryWarning: 80, // 80% of heap limit\n    renderWarning: 100, // 100ms render time\n  },\n  logging: {\n    enabled: isDevelopment(),\n    verbose: false,\n    logSlowOperations: true,\n  },\n};\n\n// Development utilities\n// Dev logging abstraction (silences in production except errors)\n// Wrapped in factory to support tree-shaking and easier future extension (e.g., remote logging)\n/* eslint-disable no-console */\nconst makeDevConsole = () => ({\n  log: isDevelopment() ? console.log.bind(console) : undefined,\n  warn: isDevelopment() ? console.warn.bind(console) : undefined,\n  info: isDevelopment() ? console.info?.bind(console) : undefined,\n  debug: isDevelopment() ? console.debug?.bind(console) : undefined,\n  error: console.error.bind(console), // Always surface errors\n});\n/* eslint-enable no-console */\n\nexport const devConsole = makeDevConsole();\n\nexport default env;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/BirthDataContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/IntegrationContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/NotificationContext.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":19,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":19,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":34,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":70},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":47,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":47,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id'>) => void;\n  removeNotification: (id: string) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined || context === null) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  const addNotification = (notification: Omit<Notification, 'id'>) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newNotification = { ...notification, id };\n    \n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove notification after duration (default 5 seconds)\n    const duration = typeof notification.duration === 'number' ? notification.duration : 5000;\n    setTimeout(() => {\n      removeNotification(id);\n    }, duration);\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  const value = {\n    notifications,\n    addNotification,\n    removeNotification,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/UpgradeModalContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/examples/InteractiveChartExample.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":36,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":60,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":60,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":87,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":87,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Interactive Chart Integration Example\n * Demonstrates how to use the enhanced chart system\n */\n\nimport React, { useState, Suspense, lazy } from 'react';\nimport { devConsole } from '../config/environment';\nimport { getChartSyncService } from '../services/chartSyncService';\nimport { getChartAnalyticsService, type PersonalityInsight, type ChartAnalysis } from '../services/chartAnalyticsService';\nimport { getNotificationManager } from '../services/notificationManager';\nimport { Button } from '@cosmichub/ui';\n\n// Lazy load the heavy chart component\nconst ChartWheelInteractive = lazy(() => import('../features/ChartWheelInteractive'));\n// Re-exported Aspect type from ChartWheelInteractive for callback typing (dynamic import so use typeof inference if needed)\nimport type { Aspect } from '../features/ChartWheelInteractive';\n\nconst sampleBirthData = {\n  year: 1990,\n  month: 6,\n  day: 15,\n  hour: 14,\n  minute: 30,\n  lat: 40.7128,\n  lon: -74.0060,\n  timezone: 'America/New_York',\n  city: 'New York'\n};\n\nexport const InteractiveChartExample: React.FC = () => {\n  const [selectedPlanet, setSelectedPlanet] = useState<string | null>(null);\n  type AnalysisState = PersonalityInsight[] | ChartAnalysis | null;\n  const [analysisResult, setAnalysisResult] = useState<AnalysisState>(null);\n  const [chartRegistered, setChartRegistered] = useState(false);\n\n  const handlePlanetSelect = async (planet: string) => {\n    setSelectedPlanet(planet);\n    \n    // Get analytics for selected planet\n    const analyticsService = getChartAnalyticsService();\n  const insights = analyticsService.getPersonalityInsights({\n      planets: { [planet]: { name: planet, position: 0 } },\n      houses: [],\n      aspects: []\n    });\n    \n    setAnalysisResult(insights);\n\n    // Send notification about planet selection\n  const notificationManager = getNotificationManager();\n  // Updated to use unified notification manager test API\n    if (typeof notificationManager.sendTest === 'function') {\n      const result = notificationManager.sendTest.call(notificationManager);\n      if (result !== null && typeof result === 'object' && 'then' in result && typeof (result as Promise<unknown>).then === 'function') {\n        await (result as Promise<unknown>);\n      }\n    }\n  };\n\n  const handleRegisterChart = async () => {\n    const syncService = getChartSyncService();\n    \n    try {\n      await syncService.registerChart('example-chart', sampleBirthData, {\n        enableTransitUpdates: true,\n        enableProgressions: false,\n        aspectAlerts: true,\n        updateInterval: 1 // 1 minute for demo\n      });\n      \n      setChartRegistered(true);\n      \n      // Listen for chart events\n      syncService.on('aspect-event', (event) => {\n        devConsole.log?.('Aspect event detected:', event);\n      });\n      \n      syncService.on('transit-update', (event) => {\n        devConsole.log?.('Transit update received:', event);\n      });\n      \n    } catch (error) {\n      devConsole.error('❌ Failed to register chart:', error);\n    }\n  };\n\n  const handleAnalyzeChart = () => {\n    const analyticsService = getChartAnalyticsService();\n    \n    try {\n  const analysis = analyticsService.analyzeChart('example-chart', {\n        planets: { \n          sun: { name: 'sun', position: 75 }, // Leo\n          moon: { name: 'moon', position: 180 }, // Libra\n          mercury: { name: 'mercury', position: 60 } // Gemini\n        },\n        houses: [\n          { number: 1, cusp: 0, sign: 'Aries' },\n          { number: 2, cusp: 30, sign: 'Taurus' }\n        ],\n        aspects: [\n          { transitPlanet: 'sun', natalPlanet: 'moon', aspectType: 'square', orb: 5, type: 'aspect-forming', exactDate: new Date(), strength: 'medium' }\n        ]\n      });\n      \n      setAnalysisResult(analysis);\n      \n    } catch (error) {\n      devConsole.error('❌ Failed to analyze chart:', error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-cosmic-dark/50 rounded-lg p-6 border border-cosmic-gold/30\">\n        <h2 className=\"text-2xl font-bold text-cosmic-gold mb-4\">\n          🌟 Interactive Chart Integration Demo\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Button \n            onClick={() => { void handleRegisterChart(); }}\n            disabled={chartRegistered}\n            variant=\"primary\"\n            className=\"w-full\"\n          >\n            {chartRegistered ? '✅ Chart Registered' : '🔄 Register Chart'}\n          </Button>\n          \n          <Button \n            onClick={() => { void handleAnalyzeChart(); }}\n            variant=\"secondary\"\n            className=\"w-full\"\n          >\n            📊 Analyze Chart\n          </Button>\n          \n          <Button \n            onClick={() => { setAnalysisResult(null); }}\n            variant=\"secondary\"\n            className=\"w-full\"\n          >\n            🗑️ Clear Results\n          </Button>\n        </div>\n\n  {selectedPlanet !== null && selectedPlanet !== undefined && (\n          <div className=\"bg-cosmic-purple/20 rounded p-4 mb-4 border border-cosmic-gold/20\">\n            <h3 className=\"text-cosmic-gold font-semibold mb-2\">\n              Selected Planet: {selectedPlanet}\n            </h3>\n            <p className=\"text-cosmic-silver text-sm\">\n              Click on planets in the chart below to explore their energies and meanings.\n            </p>\n          </div>\n        )}\n\n  {analysisResult !== null && analysisResult !== undefined && (\n          <div className=\"bg-green-900/20 rounded p-4 mb-4 border border-green-500/30\">\n            <h3 className=\"text-green-400 font-semibold mb-2\">Analysis Results</h3>\n            <pre className=\"text-green-300 text-xs overflow-auto max-h-32\">\n              {JSON.stringify(analysisResult, null, 2)}\n            </pre>\n          </div>\n        )}\n      </div>\n\n      {/* Interactive Chart */}\n      <Suspense fallback={\n        <div className=\"flex items-center justify-center h-[600px] bg-cosmic-dark rounded-lg border border-cosmic-purple animate-pulse\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-cosmic-gold\"></div>\n            <span className=\"text-cosmic-silver\">Loading Interactive Chart...</span>\n          </div>\n        </div>\n      }>\n        <ChartWheelInteractive\n          birthData={sampleBirthData}\n        showAspects={true}\n        showAnimation={true}\n        showTransits={chartRegistered}\n        realTimeUpdates={chartRegistered}\n  onPlanetSelect={(planet) => { void handlePlanetSelect(planet); }}\n  onAspectSelect={(aspect: Aspect) => {\n          devConsole.log?.('Aspect selected:', {\n            planets: `${aspect.planet1}-${aspect.planet2}`,\n            type: aspect.type,\n            orb: aspect.orb,\n            strength: aspect.strength\n          });\n        }}\n      />\n      </Suspense>\n\n      {/* Feature Showcase */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <div className=\"bg-blue-900/20 rounded p-4 border border-blue-500/30\">\n          <h3 className=\"text-blue-400 font-semibold mb-2\">🔄 Real-time Transits</h3>\n          <p className=\"text-blue-300 text-sm\">\n            Live planetary positions updated every minute with automatic aspect detection.\n          </p>\n        </div>\n        \n        <div className=\"bg-purple-900/20 rounded p-4 border border-purple-500/30\">\n          <h3 className=\"text-purple-400 font-semibold mb-2\">📊 Smart Analytics</h3>\n          <p className=\"text-purple-300 text-sm\">\n            AI-powered pattern recognition and personality insights from chart data.\n          </p>\n        </div>\n        \n        <div className=\"bg-orange-900/20 rounded p-4 border border-orange-500/30\">\n          <h3 className=\"text-orange-400 font-semibold mb-2\">🎯 Interactive D3</h3>\n          <p className=\"text-orange-300 text-sm\">\n            Smooth animations, hover tooltips, and clickable chart elements.\n          </p>\n        </div>\n        \n        <div className=\"bg-green-900/20 rounded p-4 border border-green-500/30\">\n          <h3 className=\"text-green-400 font-semibold mb-2\">🔔 Smart Notifications</h3>\n          <p className=\"text-green-300 text-sm\">\n            Personalized alerts for important transits and astrological events.\n          </p>\n        </div>\n        \n        <div className=\"bg-pink-900/20 rounded p-4 border border-pink-500/30\">\n          <h3 className=\"text-pink-400 font-semibold mb-2\">📱 Responsive Design</h3>\n          <p className=\"text-pink-300 text-sm\">\n            Perfect viewing experience across all devices with touch support.\n          </p>\n        </div>\n        \n        <div className=\"bg-yellow-900/20 rounded p-4 border border-yellow-500/30\">\n          <h3 className=\"text-yellow-400 font-semibold mb-2\">⚡ Performance</h3>\n          <p className=\"text-yellow-300 text-sm\">\n            Optimized rendering with smart caching and efficient data updates.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveChartExample;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/examples/NotificationIntegrationExamples.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":139,"column":23,"nodeType":null,"messageId":"preferOptionalChain","endLine":139,"endColumn":76,"fix":{"range":[4318,4371],"text":"raw.push?.permissionStatus != null"}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":139,"column":32,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":139,"endColumn":34,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4327,4329],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":139,"column":69,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":139,"endColumn":71,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4364,4366],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":140,"column":21,"nodeType":null,"messageId":"preferOptionalChain","endLine":140,"endColumn":78,"fix":{"range":[4442,4499],"text":"raw.background?.isOnline != null"}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":140,"column":36,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":140,"endColumn":38,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4457,4459],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":140,"column":71,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":140,"endColumn":73,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4492,4494],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":163,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":163,"endColumn":17},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":190,"column":41,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":190,"endColumn":43,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[6325,6327],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":197,"column":38,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":197,"endColumn":40,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[6664,6666],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":204,"column":16,"nodeType":null,"messageId":"preferOptionalChain","endLine":204,"endColumn":90,"fix":{"range":[6970,7044],"text":"status.backgroundSync?.queuedItems != null"}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":204,"column":38,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":204,"endColumn":40,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[6992,6994],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":204,"column":83,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":204,"endColumn":85,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[7037,7039],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":211,"column":16,"nodeType":null,"messageId":"preferOptionalChain","endLine":211,"endColumn":104,"fix":{"range":[7321,7409],"text":"status.pushNotifications?.activeSubscriptions != null"}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":211,"column":41,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":211,"endColumn":43,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[7346,7348],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":211,"column":97,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":211,"endColumn":99,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[7402,7404],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":296,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":296,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":370,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":370,"endColumn":38},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":377,"column":26,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":377,"endColumn":28,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[13223,13225],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":378,"column":30,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":378,"endColumn":32,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[13351,13353],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":400,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":400,"endColumn":17},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":406,"column":36,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":406,"endColumn":38,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[14431,14433],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":407,"column":44,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":407,"endColumn":46,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[14527,14529],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":408,"column":18,"nodeType":null,"messageId":"preferOptionalChain","endLine":408,"endColumn":92,"fix":{"range":[14613,14687],"text":"status.backgroundSync?.queuedItems != null"}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":408,"column":40,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":408,"endColumn":42,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[14635,14637],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":408,"column":85,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":408,"endColumn":87,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[14680,14682],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":411,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":411,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":413,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":413,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":415,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":415,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":417,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":417,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":419,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":419,"endColumn":16}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":20,"suggestions":[{"fix":{"range":[3360,3410],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":24,"suggestions":[{"fix":{"range":[8242,8289],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":21,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":5,"fixableWarningCount":0,"source":"/**\n * Example Integration: Using Push Notifications in CosmicHub Components\n * This shows how to integrate the notification system into your existing components\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { getNotificationManager } from '../services/notificationManager';\nimport { devConsole } from '../config/environment';\nimport type { NotificationPreferences } from '@cosmichub/config';\nimport type { ChartData } from '../types/notifications';\n\n// Type definitions\ninterface BirthData {\n  userId: string;\n  birthDate?: string;\n  birthTime?: string;\n  birthLocation?: string;\n  [key: string]: unknown;\n}\n\ninterface NotificationStatus {\n  pushNotifications?: {\n    permissionStatus: string;\n    activeSubscriptions?: number;\n  };\n  backgroundSync?: {\n    isOnline: boolean;\n    queuedItems?: number;\n  };\n}\n\ntype NotificationType = 'chart_synced' | 'user_data_synced';\ninterface NotificationItem {\n  id: number;\n  type: NotificationType;\n  data: Record<string, unknown>;\n  timestamp: number;\n}\n\ninterface StorageMessage {\n  type: 'cosmichub-sync-chart_synced' | 'cosmichub-sync-user_data_synced';\n  data?: unknown;\n  timestamp: number;\n}\n\ninterface UserPreferences {\n  dailyHoroscope: boolean;\n  transitAlerts: boolean;\n  frequencyReminders: boolean;\n  appUpdates: boolean;\n  quietHours: {\n    enabled: boolean;\n    start: string;\n    end: string;\n  };\n  frequency: 'daily' | 'weekly' | 'monthly';\n}\n\n// (Removed MinimalChartData – using ChartData directly via guard)\n\n// Type guard functions\nfunction isValidChartData(data: unknown): data is ChartData {\n  if (typeof data !== 'object' || data === null) return false;\n  return 'id' in data && typeof (data as { id: unknown }).id === 'string';\n}\n\n// Example: Chart Calculation Component with Notifications\nexport const ChartCalculationWithNotifications: React.FC = () => {\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [notificationManager] = useState(() => getNotificationManager());\n\n  const calculateChart = async (birthData: BirthData): Promise<ChartData | null> => {\n    setIsCalculating(true);\n    \n    try {\n      // Start calculation\n      const calculationPromise = fetch('/api/charts/calculate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(birthData)\n      });\n\n      // Queue for background sync in case of network issues\n      // Optional background sync if API exists\n      const maybeSync = (notificationManager as unknown as { syncChartCalculation?: (data: { userId: string; birthData: BirthData; timestamp: number })=>Promise<void> }).syncChartCalculation;\n      if (typeof maybeSync === 'function') {\n        await maybeSync({ userId: birthData.userId, birthData, timestamp: Date.now() });\n      }\n\n      const result = await calculationPromise;\n      const chartData: unknown = await result.json();\n      \n      // Notify chart completion using the correct method\n      if (isValidChartData(chartData)) {\n        await notificationManager.notifyChartReady(chartData);\n        setIsCalculating(false);\n        return chartData;\n      }\n      setIsCalculating(false);\n      return null;\n\n    } catch (error) {\n      setIsCalculating(false);\n      \n      // Error handling - notification manager doesn't support direct queue access\n      // eslint-disable-next-line no-console\n      console.error('Chart calculation failed:', error);\n      \n      throw error;\n    }\n  };\n\n  const handleCalculateChart = (): void => {\n    void calculateChart({ userId: 'user123' /* birth data */ });\n  };\n\n  return (\n    <div className=\"chart-calculation\">\n      <button \n        onClick={handleCalculateChart}\n        disabled={isCalculating}\n        className=\"px-6 py-3 bg-purple-600 text-white rounded-lg disabled:opacity-50\"\n      >\n        {isCalculating ? 'Calculating...' : 'Calculate Chart'}\n      </button>\n    </div>\n  );\n};\n\n// Example: User Settings Page with Notification Preferences\nexport const UserSettingsWithNotifications: React.FC = () => {\n  const [notificationManager] = useState(() => getNotificationManager());\n  const [status, setStatus] = useState<NotificationStatus>({});\n\n  useEffect(() => {\n    // Load notification status\n    const loadStatus = (): void => {\n      const raw = notificationManager.status();\n      const hasPerm = raw.push != null && raw.push.permissionStatus != null && typeof raw.push.permissionStatus === 'string';\n      const hasBg = raw.background != null && raw.background.isOnline != null;\n      let pushNotifications: NotificationStatus['pushNotifications'];\n  if (hasPerm) {\n        pushNotifications = {\n          permissionStatus: raw.push.permissionStatus,\n          activeSubscriptions: typeof raw.push.activeSubscriptions === 'number' ? raw.push.activeSubscriptions : undefined\n        };\n      }\n      let backgroundSync: NotificationStatus['backgroundSync'];\n  if (hasBg && raw.background !== undefined && raw.background !== null) {\n        backgroundSync = {\n          isOnline: raw.background.isOnline,\n          queuedItems: typeof raw.background.queuedItems === 'number' ? raw.background.queuedItems : undefined\n        };\n      }\n      const mapped: NotificationStatus = { pushNotifications, backgroundSync };\n      setStatus(mapped);\n    };\n\n    loadStatus();\n    \n    // Update status every 10 seconds\n    const interval = setInterval(loadStatus, 10000);\n    return () => clearInterval(interval);\n  }, [notificationManager]);\n\n  const handleSubscribe = async (): Promise<void> => {\n  const success = await notificationManager.subscribe('user123', {\n      dailyHoroscope: true,\n      transitAlerts: true,\n      frequencyReminders: false,\n      appUpdates: true,\n      quietHours: { enabled: true, start: '22:00', end: '08:00' },\n      frequency: 'daily' as const\n  } satisfies NotificationPreferences);\n\n    if (success) {\n      // Send welcome notification\n      await notificationManager.sendTest();\n    }\n  };\n\n  return (\n    <div className=\"user-settings\">\n      <div className=\"notification-status mb-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Notification Status</h3>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {status.pushNotifications != null && status.pushNotifications.permissionStatus === 'granted' ? '✅' : '❌'}\n            </div>\n            <div className=\"text-sm\">Push Permission</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {status.backgroundSync != null && status.backgroundSync.isOnline === true ? '🌐' : '📴'}\n            </div>\n            <div className=\"text-sm\">Connection Status</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {status.backgroundSync != null && status.backgroundSync.queuedItems != null ? status.backgroundSync.queuedItems : 0}\n            </div>\n            <div className=\"text-sm\">Queued Items</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {status.pushNotifications != null && status.pushNotifications.activeSubscriptions != null ? status.pushNotifications.activeSubscriptions : 0}\n            </div>\n            <div className=\"text-sm\">Active Devices</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"notification-actions\">\n        <button\n          onClick={() => { void handleSubscribe(); }}\n          className=\"px-4 py-2 bg-green-600 text-white rounded mr-4\"\n        >\n          Enable Notifications\n        </button>\n        \n        <button\n          onClick={() => { void notificationManager.sendTest(); }}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded mr-4\"\n        >\n          Test Notification\n        </button>\n        \n        <button\n          onClick={() => { \n            // getSmartSuggestions method not available in current implementation\n            // eslint-disable-next-line no-console\n            console.log('Smart setup not yet implemented');\n          }}\n          className=\"px-4 py-2 bg-purple-600 text-white rounded\"\n        >\n          Smart Setup\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Example: Dashboard with Real-time Notifications\nexport const DashboardWithNotifications: React.FC = () => {\n  const [notifications, setNotifications] = useState<NotificationItem[]>([]);\n\n  useEffect(() => {\n    // Listen for background sync events\n    const handleStorageChange = (event: StorageEvent): void => {\n      if (typeof event.key === 'string' && event.key.startsWith('cosmichub-sync-') && typeof event.newValue === 'string' && event.newValue.length > 0) {\n        try {\n          const parsed: unknown = JSON.parse(event.newValue);\n          if (parsed === null || typeof parsed !== 'object') return;\n          const maybe = parsed as { type?: unknown; timestamp?: unknown; data?: unknown };\n          if (maybe.type === 'cosmichub-sync-chart_synced' || maybe.type === 'cosmichub-sync-user_data_synced') {\n            if (typeof maybe.timestamp !== 'number') return;\n            const msg: StorageMessage = { type: maybe.type, timestamp: maybe.timestamp, data: maybe.data };\n            setNotifications(prev => [{\n              id: Date.now(),\n              type: msg.type === 'cosmichub-sync-chart_synced' ? 'chart_synced' : 'user_data_synced',\n              data: (msg.data !== undefined && msg.data !== null && typeof msg.data === 'object') ? (msg.data as Record<string, unknown>) : {},\n              timestamp: msg.timestamp\n            }, ...prev.slice(0, 9)]);\n          }\n        } catch (error) {\n          devConsole.warn?.('Failed to parse sync message:', error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Simulate some notifications for demo\n    const demoNotifications: NotificationItem[] = [\n      {\n        id: 1,\n        type: 'chart_synced',\n        data: { chartId: 'chart123' },\n        timestamp: Date.now() - 300000 // 5 minutes ago\n      },\n      {\n        id: 2,\n        type: 'user_data_synced',\n        data: { userId: 'user123' },\n        timestamp: Date.now() - 600000 // 10 minutes ago\n      }\n    ];\n    \n    setNotifications(demoNotifications);\n\n    return () => { window.removeEventListener('storage', handleStorageChange); };\n  }, []);\n\n  const triggerTransitAlert = (): void => {\n    devConsole.debug?.('Transit alert demo');\n  };\n\n  const triggerDailyHoroscope = (): void => {\n    devConsole.debug?.('Daily horoscope demo');\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"notification-feed mb-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Recent Activity</h3>\n        <div className=\"space-y-2\">\n          {notifications.map(notification => (\n            <div \n              key={notification.id}\n              className=\"p-3 bg-blue-50 border-l-4 border-blue-400 rounded\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <div className=\"font-medium\">\n                    {notification.type === 'chart_synced' && '📊 Chart Synchronized'}\n                    {notification.type === 'user_data_synced' && '👤 Profile Updated'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    {new Date(notification.timestamp).toLocaleTimeString()}\n                  </div>\n                </div>\n                <div className=\"text-xs text-blue-600\">\n                  ✅ Synced\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n  <div className=\"demo-triggers\">\n        <h3 className=\"text-lg font-semibold mb-4\">Demo Notifications</h3>\n        \n        <div className=\"space-x-4\">\n          <button\n            onClick={() => { void triggerTransitAlert(); }}\n            className=\"px-4 py-2 bg-red-600 text-white rounded\"\n          >\n            🪐 Transit Alert\n          </button>\n          \n          <button\n            onClick={() => { void triggerDailyHoroscope(); }}\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded\"\n          >\n            ✨ Daily Horoscope\n          </button>\n          \n          <button\n            onClick={() => { \n              // notifyRetrograde method not available in current implementation\n              devConsole.debug?.('Retrograde alert demo: Mercury entering retrograde');\n            }}\n            className=\"px-4 py-2 bg-purple-600 text-white rounded\"\n          >\n            ↩️ Retrograde Alert\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Example: Hook for using notifications in any component\nexport const useNotifications = () => {\n  const [manager] = useState(() => getNotificationManager());\n  const [status, setStatus] = useState<NotificationStatus>({});\n\n  useEffect(() => {\n    const updateStatus = (): void => {\n      const raw = manager.status();\n  const perm = (raw.push != null && typeof raw.push.permissionStatus === 'string' && raw.push.permissionStatus.length > 0);\n  const bg = (raw.background != null && typeof raw.background.isOnline === 'boolean');\n      let pushNotifications: NotificationStatus['pushNotifications'];\n  if (perm && raw.push !== undefined && raw.push !== null) {\n        pushNotifications = {\n          permissionStatus: raw.push.permissionStatus,\n          activeSubscriptions: typeof raw.push.activeSubscriptions === 'number' ? raw.push.activeSubscriptions : undefined\n        };\n      }\n      let backgroundSync: NotificationStatus['backgroundSync'];\n  if (bg && raw.background !== undefined && raw.background !== null) {\n        backgroundSync = {\n          isOnline: raw.background.isOnline,\n          queuedItems: typeof raw.background.queuedItems === 'number' ? raw.background.queuedItems : undefined\n        };\n      }\n      const narrowed: NotificationStatus = { pushNotifications, backgroundSync };\n      setStatus(narrowed);\n    };\n    \n    updateStatus();\n    const interval = setInterval(updateStatus, 5000);\n    \n    return () => clearInterval(interval);\n  }, [manager]);\n\n  return {\n  manager,\n  status,\n  isOnline: (status.backgroundSync != null && status.backgroundSync.isOnline === true),\n  hasPermission: (status.pushNotifications != null && status.pushNotifications.permissionStatus === 'granted'),\n    queuedItems: status.backgroundSync != null && status.backgroundSync.queuedItems != null ? status.backgroundSync.queuedItems : 0,\n    \n    // Helper methods\n  subscribe: (userId: string, preferences?: UserPreferences) => manager.subscribe(userId, preferences),\n    \n  unsubscribe: () => Promise.resolve(),\n    \n  sendTest: () => manager.sendTest(),\n    \n  notifyChart: (chartData: unknown) => isValidChartData(chartData) ? manager.notifyChartReady(chartData) : Promise.resolve(),\n    \n    syncChart: () => {\n      // syncChartCalculation method not available in current implementation\n  devConsole.debug?.('Sync chart not yet implemented');\n      return Promise.resolve();\n    }\n  };\n};\n\n// Example usage in any component:\n/*\nfunction MyComponent() {\n  const { \n    hasPermission, \n    isOnline, \n    queuedItems, \n    subscribe, \n    sendTest \n  } = useNotifications();\n\n  return (\n    <div>\n      <p>Permission: {hasPermission ? '✅' : '❌'}</p>\n      <p>Online: {isOnline ? '🌐' : '📴'}</p>\n      <p>Queued: {queuedItems}</p>\n      \n      <button onClick={() => subscribe('user123')}>\n        Enable Notifications\n      </button>\n      \n      <button onClick={sendTest}>\n        Test Notification\n      </button>\n    </div>\n  );\n}\n*/\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/ChartWheel.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":295,"column":5,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":295,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":466,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":466,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":471,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":471,"endColumn":30}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BackendChartResponse' is defined but never used.","line":60,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, memo, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchChartData, type ChartBirthData, type ChartData as APIChartData } from '../services/api';\nimport { Button } from '@cosmichub/ui';\n\n// Enhanced TypeScript interfaces\ninterface BackendPlanet {\n  position: number;\n  retrograde?: boolean;\n  speed?: number;\n}\n\ninterface BackendHouse {\n  house: number;\n  cusp: number;\n  sign?: string;\n}\n\ninterface Planet {\n  name: string;\n  position: number; // Degree in zodiac (0-360)\n  retrograde?: boolean;\n  speed?: number;\n}\n\ninterface House {\n  house: number;\n  number: number;\n  cusp: number; // Degree position\n  sign: string;\n}\n\ninterface APIAspect {\n  point1: string;\n  point2: string;\n  aspect: string;\n  orb: number;\n}\n\ninterface ChartData {\n  planets: Record<string, Planet>;\n  houses: House[];\n  aspects?: Aspect[];\n  angles?: Record<string, number>;\n}\n\ninterface Aspect {\n  planet1: string;\n  planet2: string;\n  angle: number;\n  orb: number;\n  type: AspectType;\n  applying: boolean;\n}\n\ntype AspectType = 'conjunction' | 'opposition' | 'trine' | 'square' | 'sextile' | 'quincunx';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface BackendChartResponse {\n  planets?: Record<string, BackendPlanet>;\n  houses?: Record<string, BackendHouse>;\n  aspects?: APIAspect[];\n  latitude?: number;\n  longitude?: number;\n  timezone?: string;\n  julian_day?: number;\n  angles?: Record<string, number>;\n}\n\ninterface ChartWheelProps {\n  birthData?: ChartBirthData;\n  chartData?: ChartData; // Add pre-transformed chart data prop\n  showAspects?: boolean;\n  showAnimation?: boolean;\n}\n\n// Enhanced ChartWheel component with aspects and animations\nconst ChartWheel: React.FC<ChartWheelProps> = ({ \n  birthData, \n  chartData: preTransformedData,\n  showAspects = true, \n  showAnimation = true \n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  // Fetch chart data from backend using the /calculate endpoint (only if no pre-transformed data)\n  const { data: fetchedData, isLoading, error, refetch } = useQuery<ChartData>({\n    queryKey: ['chartData', birthData],\n  queryFn: async () => {\n  if (birthData === null || birthData === undefined) throw new Error('Birth data required');\n      const response = await fetchChartData(birthData);\n      return transformAPIResponseToChartData(response);\n    },\n  enabled: birthData !== null && birthData !== undefined && preTransformedData === null,\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n    gcTime: 10 * 60 * 1000, // Keep in cache for 10 minutes\n    retry: 2,\n  });\n\n  // Use pre-transformed data if available, otherwise use fetched data\n  const data = preTransformedData ?? fetchedData;\n\n  // Transform API response to our internal ChartData format (only used when no pre-transformed data)\n  const transformAPIResponseToChartData = (apiData: APIChartData): ChartData => {\n    // Transform planets\n    const transformedPlanets: Record<string, Planet> = {};\n    const planets = apiData.planets ?? {};\n    Object.entries(planets).forEach(([name, planetData]) => {\n      if (planetData === null || planetData === undefined) return;\n      if (typeof planetData.position !== 'number') return;\n      \n      transformedPlanets[name] = {\n        name,\n        position: planetData.position,\n        retrograde: planetData.retrograde === true,\n        speed: typeof planetData.speed === 'number' ? planetData.speed : 0,\n      };\n    });\n\n    // Transform houses \n    const transformedHouses: House[] = [];\n    Object.entries(apiData.houses ?? {}).forEach(([, houseData]) => {\n      function isAPIHouse(data: unknown): data is { house: number; cusp: number; sign?: string } {\n        if (data === null || data === undefined || typeof data !== 'object') return false;\n        const h = data as { house?: number; cusp?: number; sign?: string };\n        return typeof h.house === 'number' && typeof h.cusp === 'number';\n      }\n\n      if (isAPIHouse(houseData)) {\n        transformedHouses.push({\n          house: houseData.house,\n          number: houseData.house,\n          cusp: houseData.cusp,\n          sign: typeof houseData.sign === 'string' ? houseData.sign : '',\n        });\n      }\n    });\n\n    // Transform aspects with proper type handling\n    const transformedAspects: Aspect[] = [];\n    const aspects = apiData.aspects ?? [];\n    \n    function isAPIAspect(data: unknown): data is APIAspect {\n      if (data === null || data === undefined || typeof data !== 'object') return false;\n      const a = data as APIAspect;\n      return (\n        typeof a.point1 === 'string' &&\n        typeof a.point2 === 'string' &&\n        typeof a.aspect === 'string' &&\n        typeof a.orb === 'number'\n      );\n    }\n    \n    for (const aspect of aspects) {\n      if (!isAPIAspect(aspect)) continue;\n      \n      const { point1, point2, aspect: aspectType, orb } = aspect;\n\n      transformedAspects.push({\n        planet1: point1,\n        planet2: point2,\n        angle: getAspectAngle(aspectType),\n        orb: orb,\n        type: aspectType.toLowerCase() as AspectType,\n        applying: false,\n      });\n    }\n\n  const angles = (apiData.angles !== null && apiData.angles !== undefined) ? { ...apiData.angles } : undefined;\n\n    return {\n      planets: transformedPlanets,\n      houses: transformedHouses.sort((a, b) => a.number - b.number),\n      aspects: transformedAspects,\n      angles,\n    };\n  };\n\n  // Helper function for aspect angle calculation\n  const getAspectAngle = (aspectType: string): number => {\n    const aspectAngles: Record<string, number> = {\n      'conjunction': 0,\n      'opposition': 180,\n      'trine': 120,\n      'square': 90,\n      'sextile': 60,\n      'quincunx': 150,\n      'semisextile': 30,\n      'semisquare': 45,\n      'sesquiquadrate': 135,\n      'quintile': 72,\n    };\n  const key = aspectType.toLowerCase();\n  if (Object.prototype.hasOwnProperty.call(aspectAngles, key)) return aspectAngles[key];\n  return 0;\n  };\n\n  // Memoized constants for performance\n  const chartConstants = useMemo(() => ({\n    width: 800,\n    height: 800,\n    radius: 320,\n    center: { x: 400, y: 400 },\n    signs: [\n      'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n      'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'\n    ],\n    signSymbols: ['♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓'],\n    signColors: [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD',\n      '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9', '#F8C471', '#82E0AA'\n    ],\n    planetSymbols: {\n      sun: '☉', moon: '☽', mercury: '☿', venus: '♀', mars: '♂',\n      jupiter: '♃', saturn: '♄', uranus: '♅', neptune: '♆', pluto: '♇',\n      chiron: '⚷', ceres: '⚳', pallas: '⚴', juno: '⚵', vesta: '⚶'\n    } as Record<string, string>,\n    planetColors: {\n      sun: '#FFD700', moon: '#E8E8E8', mercury: '#87CEEB', venus: '#32CD32', mars: '#FF4500',\n      jupiter: '#FF8C00', saturn: '#DAA520', uranus: '#4FD0E4', neptune: '#6495ED', pluto: '#DA70D6',\n      chiron: '#D2691E', ceres: '#90EE90', pallas: '#DDA0DD', juno: '#FFB6C1', vesta: '#F0E68C'\n    } as Record<string, string>,\n    aspectColors: {\n      conjunction: '#FF0000',\n      opposition: '#0066CC',\n      trine: '#00AA00',\n      square: '#FF6600',\n      sextile: '#9966FF',\n      quincunx: '#666666',\n    } as Record<string, string>\n  }), []);\n\n  useEffect(() => {\n  if (data === null || data === undefined || svgRef.current === null || svgRef.current === undefined) return;\n\n    const { width, height, radius, center, signs, signSymbols, planetSymbols, planetColors, aspectColors } = chartConstants;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', `0 0 ${width} ${height}`)\n      .attr('class', 'mx-auto')\n      .attr('role', 'img')\n      .attr('aria-label', 'Astrological natal chart wheel');\n\n    const g = svg.append('g').attr('transform', `translate(${center.x}, ${center.y})`);\n\n    // Define concentric ring radii\n    const outerRadius = radius;\n    const houseNumberRadius = radius - 25;\n    const zodiacSymbolRadius = radius - 50;  // Outermost planet ring\n    const degreeRadius = radius - 80;        // Degree ring\n    const signRadius = radius - 110;         // Sign ring  \n    const retrogradeRadius = radius - 140;   // Innermost retrograde ring\n    const innerRadius = radius - 170;\n\n    // Draw 12 equal house divisions (30 degrees each)\n    for (let i = 0; i < 12; i++) {\n      const startAngle = (i * 30 - 90) * Math.PI / 180;\n\n      // House division lines (every 30 degrees) - equal houses\n      g.append('line')\n        .attr('x1', Math.cos(startAngle) * innerRadius)\n        .attr('y1', Math.sin(startAngle) * innerRadius)\n        .attr('x2', Math.cos(startAngle) * outerRadius)\n        .attr('y2', Math.sin(startAngle) * outerRadius)\n        .attr('stroke', '#333333')\n        .attr('stroke-width', 2)\n        .attr('stroke-opacity', 0.8)\n        .attr('aria-label', `House ${i + 1} division`);\n    }\n\n    // Draw house numbers in equal 30-degree segments\n    for (let i = 0; i < 12; i++) {\n      const midAngle = (i * 30 + 15 - 90) * Math.PI / 180; // Middle of each 30-degree segment\n      \n      g.append('text')\n        .attr('x', Math.cos(midAngle) * houseNumberRadius)\n        .attr('y', Math.sin(midAngle) * houseNumberRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '16')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#333333')\n        .text((i + 1).toString());\n    }\n\n    // Helper function to get zodiac sign info\n    function getZodiacInfo(position: number) {\n      const signIndex = Math.floor(position / 30);\n      const degreeInSign = Math.floor(position % 30);\n      const minuteInSign = Math.floor((position % 1) * 60);\n      return {\n        signIndex,\n        signName: signs[signIndex],\n        signSymbol: signSymbols[signIndex],\n        degree: degreeInSign,\n        minute: minuteInSign,\n        formatted: `${degreeInSign}°${minuteInSign.toString().padStart(2, '0')}'`\n      };\n    }\n\n    // Draw planets in concentric rings\n  const planets: Record<string, Planet> = data.planets ?? {};\n    Object.entries(planets).forEach(([name, planet]: [string, Planet], index: number) => {\n      const angle = (planet.position - 90) * Math.PI / 180;\n      const zodiacInfo = getZodiacInfo(planet.position);\n      \n      const planetGroup = g.append('g')\n        .attr('class', 'planet-group')\n  .attr('aria-label', `Planet ${String(planet.name)} at ${planet.position.toFixed(1)} degrees${planet.retrograde === true ? ' retrograde' : ''}`);\n\n      // Ring 1: Planet Symbol (outermost) - use planet symbol, not zodiac\n        const planetSymbol = planetGroup.append('text')\n        .attr('x', Math.cos(angle) * zodiacSymbolRadius)\n        .attr('y', Math.sin(angle) * zodiacSymbolRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '18')\n        .attr('font-weight', 'bold')\n          .attr('fill', planetColors[name.toLowerCase()] ?? '#333333')\n        .attr('opacity', 0)\n          .text(planetSymbols[name.toLowerCase()] ?? name.slice(0, 2).toUpperCase());\n\n      // Ring 2: Degree\n      const degreeText = planetGroup.append('text')\n        .attr('x', Math.cos(angle) * degreeRadius)\n        .attr('y', Math.sin(angle) * degreeRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '11')\n        .attr('font-weight', 'normal')\n        .attr('fill', '#333333')\n        .attr('opacity', 0)\n        .text(zodiacInfo.formatted);\n\n      // Ring 3: Zodiac Sign Symbol (where the planet is located)\n      const signText = planetGroup.append('text')\n        .attr('x', Math.cos(angle) * signRadius)\n        .attr('y', Math.sin(angle) * signRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '16')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#666666')\n        .attr('opacity', 0)\n        .text(zodiacInfo.signSymbol);\n\n      // Ring 4: Retrograde indicator (innermost)\n      if (planet.retrograde === true) {\n        planetGroup.append('text')\n          .attr('x', Math.cos(angle) * retrogradeRadius)\n          .attr('y', Math.sin(angle) * retrogradeRadius)\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'middle')\n          .attr('font-size', '12')\n          .attr('font-weight', 'bold')\n          .attr('fill', '#FF0000')\n          .attr('opacity', 0)\n          .text('℞')\n          .transition()\n          .delay(showAnimation ? index * 100 + 600 : 0)\n          .duration(showAnimation ? 300 : 0)\n          .attr('opacity', 1);\n      }\n\n      // Animate elements in sequence\n  if (showAnimation) {\n        planetSymbol\n          .transition()\n          .delay(index * 100)\n          .duration(400)\n          .attr('opacity', 1);\n\n        degreeText\n          .transition()\n          .delay(index * 100 + 150)\n          .duration(400)\n          .attr('opacity', 1);\n\n        signText\n          .transition()\n          .delay(index * 100 + 300)\n          .duration(400)\n          .attr('opacity', 1);\n      } else {\n        planetSymbol.attr('opacity', 1);\n        degreeText.attr('opacity', 1);\n        signText.attr('opacity', 1);\n      }\n    });\n\n    // Draw aspects more subtly\n  const aspects: Aspect[] = Array.isArray(data.aspects) ? data.aspects : [];\n  if (showAspects && aspects.length > 0) {\n      aspects.forEach((aspect, index) => {\n        const planet1 = data.planets[aspect.planet1];\n        const planet2 = data.planets[aspect.planet2];\n        \n  if (planet1 === null || planet1 === undefined || planet2 === null || planet2 === undefined) return;\n\n        const angle1 = (planet1.position - 90) * Math.PI / 180;\n        const angle2 = (planet2.position - 90) * Math.PI / 180;\n        const aspectRadius = innerRadius - 20; // Position aspects in the center area\n\n          const line = g.append('line')\n          .attr('x1', Math.cos(angle1) * aspectRadius)\n          .attr('y1', Math.sin(angle1) * aspectRadius)\n          .attr('x2', Math.cos(angle1) * aspectRadius)\n          .attr('y2', Math.sin(angle1) * aspectRadius)\n            .attr('stroke', aspectColors[aspect.type] ?? '#666666')\n          .attr('stroke-width', aspect.type === 'conjunction' || aspect.type === 'opposition' ? 2 : 1)\n          .attr('stroke-opacity', 0.4)\n          .attr('stroke-dasharray', (aspect.type === 'sextile' || aspect.type === 'quincunx') ? '3,3' : null)\n          .attr('aria-label', `${String(aspect.type)} aspect between ${String(aspect.planet1)} and ${String(aspect.planet2)}`);\n\n        // Animate aspect lines\n  if (showAnimation === true) {\n          line\n            .transition()\n            .delay(1500 + index * 100)\n            .duration(800)\n            .attr('x2', Math.cos(angle2) * aspectRadius)\n            .attr('y2', Math.sin(angle2) * aspectRadius);\n        } else {\n          line\n            .attr('x2', Math.cos(angle2) * aspectRadius)\n            .attr('y2', Math.sin(angle2) * aspectRadius);\n        }\n      });\n    }\n\n    // Draw chart borders - clean and simple\n    // Outer circle\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', outerRadius)\n      .attr('fill', 'none')\n      .attr('stroke', '#333333')\n      .attr('stroke-width', 3);\n\n    // Inner circle only\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', innerRadius)\n      .attr('fill', '#ffffff')\n      .attr('stroke', '#333333')\n      .attr('stroke-width', 2);\n\n    // Center point\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', 3)\n      .attr('fill', '#333333');\n\n    // Cleanup function\n    return () => {\n      svg.selectAll('*').remove();\n    };\n  }, [data, showAspects, showAnimation, chartConstants]);\n\n  const handleRefresh = () => {\n    setIsAnimating(true);\n    void refetch().finally(() => setIsAnimating(false));\n  };\n\n  if (isLoading && (preTransformedData === null || preTransformedData === undefined)) return (\n    <div className=\"flex items-center justify-center p-8\">\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-cosmic-gold\"></div>\n      <span className=\"ml-2 text-cosmic-silver\">Loading chart...</span>\n    </div>\n  );\n\n  if (error !== null && error !== undefined) return (\n    <div className=\"text-center p-8\">\n      <div className=\"text-red-500 mb-4\">Error loading chart</div>\n      <Button onClick={handleRefresh} variant=\"secondary\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  if (data === null || data === undefined) return (\n    <div className=\"text-center p-8\">\n      <div className=\"text-cosmic-silver mb-4\">No chart data available</div>\n    </div>\n  );\n\n  return (\n    <div className=\"w-full max-w-5xl mx-auto p-4\">\n      <div className=\"mb-4 flex justify-between items-center\">\n        <h3 className=\"text-xl font-semibold text-cosmic-gold\">Natal Chart</h3>\n        <div className=\"flex gap-2\">\n          <Button onClick={handleRefresh} variant=\"secondary\" disabled={isAnimating}>\n            {isAnimating ? 'Refreshing...' : 'Refresh'}\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"bg-white rounded-lg p-6 border border-gray-300 shadow-lg\">\n        <svg \n          ref={svgRef} \n          className=\"w-full h-auto max-w-[800px] mx-auto\"\n        />\n        \n  {showAspects && ((data.aspects?.length ?? 0) > 0) && (\n          <div className=\"mt-6 text-sm text-gray-700\">\n            <div className=\"font-medium mb-3 text-gray-900\">Major Aspects ({(data.aspects?.length ?? 0)})</div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 text-xs\">\n              {(Array.isArray(data.aspects) ? data.aspects : []).slice(0, 9).map((aspect, index) => (\n                <div key={index} className=\"flex items-center gap-2 p-2 bg-gray-50 rounded border border-gray-200\">\n                  <span className=\"capitalize font-medium\">{aspect.type}</span>\n                  <span className=\"text-gray-600\">\n                    {aspect.planet1} - {aspect.planet2}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Memoize to prevent unnecessary re-renders\nexport default memo(ChartWheel);","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/ChartWheelInteractive.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":702,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":702,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":707,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":707,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":714,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":714,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":724,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":724,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced Interactive Chart Wheel with Real-Time Features\n * Enhanced version with tooltips, animations, and real-time updates\n */\n\nimport React, { useEffect, useRef, memo, useState, useMemo, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchChartData, type ChartBirthData } from '../services/api';\nimport { Button } from '@cosmichub/ui';\nimport styles from './ChartWheelInteractive.module.css';\n\nimport type { AspectType, Planet as APIPlanet, House as APIHouse, Aspect as APIAspect, ChartData as APIChartData } from '../services/api.types';\n\n// Enhanced interfaces for interactivity that extend API types\ninterface Planet extends Omit<APIPlanet, 'dignity' | 'essential_dignity' | 'sign' | 'name'> {\n  name: string;\n  color?: string;\n}\n\ninterface House extends Omit<APIHouse, 'sign'> {\n  sign: string;\n  planets?: string[];\n}\n\nexport interface Aspect extends Omit<APIAspect, 'aspect_type' | 'power' | 'planet1' | 'planet2' | 'exact'> {\n  planet1: string;\n  planet2: string;\n  angle: number;\n  type: AspectType;\n  strength: 'strong' | 'medium' | 'weak';\n  exact?: boolean;\n}\n\ninterface ChartData extends Omit<APIChartData, 'planets' | 'houses' | 'aspects' | 'house_system' | 'sidereal'> {\n  planets: Record<string, Planet>;\n  houses: House[];\n  aspects?: Aspect[];\n  transits?: Record<string, Planet>; // Real-time transit positions\n}\n\ninterface InteractiveState {\n  selectedPlanet: string | null;\n  hoveredElement: string | null;\n  showTransits: boolean;\n  highlightedAspects: string[];\n  zoomLevel: number;\n  rotationOffset: number;\n}\n\ninterface ChartWheelInteractiveProps {\n  birthData?: ChartBirthData;\n  chartData?: ChartData;\n  showAspects?: boolean;\n  showAnimation?: boolean;\n  showTransits?: boolean;\n  realTimeUpdates?: boolean;\n  onPlanetSelect?: (planet: string) => void;\n  onAspectSelect?: (aspect: Aspect) => void;\n}\n\nconst ChartWheelInteractive: React.FC<ChartWheelInteractiveProps> = ({\n  birthData,\n  chartData: preTransformedData,\n  showAspects = true,\n  showAnimation = true,\n  showTransits = false,\n  realTimeUpdates = false,\n  onPlanetSelect,\n  onAspectSelect\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [interactiveState, setInteractiveState] = useState<InteractiveState>({\n    selectedPlanet: null,\n    hoveredElement: null,\n    showTransits: showTransits,\n    highlightedAspects: [],\n    zoomLevel: 1,\n    rotationOffset: 0\n  });\n\n  // Fetch natal chart data\n  const { data: fetchedData, isLoading, error, refetch } = useQuery<ChartData>({\n    queryKey: ['chartData', birthData],\n    queryFn: async () => {\n      if (birthData === null || birthData === undefined) throw new Error('Birth data required');\n      const response = await fetchChartData(birthData);\n      return transformAPIResponseToChartData(response);\n    },\n    enabled: birthData !== null && birthData !== undefined && preTransformedData === null,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n    retry: 2,\n  });\n\n  // Fetch real-time transit data\n  const { data: transitData } = useQuery<Record<string, Planet>>({\n    queryKey: ['transitData'],\n    queryFn: async () => {\n      const currentTime = new Date();\n      const transitBirthData: ChartBirthData = {\n        year: currentTime.getFullYear(),\n        month: currentTime.getMonth() + 1,\n        day: currentTime.getDate(),\n        hour: currentTime.getHours(),\n        minute: currentTime.getMinutes(),\n        lat: 0, // Use chart location or default\n        lon: 0,\n        timezone: 'UTC',\n        city: 'Greenwich'\n      };\n      const response = await fetchChartData(transitBirthData);\n      return response.planets ?? {};\n    },\n    enabled: realTimeUpdates === true && interactiveState.showTransits === true,\n    refetchInterval: 60000, // Update every minute\n    staleTime: 30000\n  });\n\n  const data = preTransformedData ?? fetchedData;\n\n  // Transform API response with type-safe handling\n    // Transform API response with proper typing\n  const transformAPIResponseToChartData = (apiData: APIChartData): ChartData => {\n    const transformedPlanets: Record<string, Planet> = {};\n    const planets = apiData.planets ?? {};\n    \n    Object.entries(planets).forEach(([name, planetData]) => {\n      if (planetData === null || planetData === undefined || typeof planetData !== 'object') {\n        return;\n      }\n      \n      // Safe access with type checking\n      const planetObj = planetData as unknown as Record<string, unknown>;\n      const position = typeof planetObj.position === 'number' ? planetObj.position : 0;\n      const retrograde = planetObj.retrograde === true;\n      const speed = typeof planetObj.speed === 'number' ? planetObj.speed : 0;\n      \n      transformedPlanets[name] = {\n        name,\n        position,\n        retrograde,\n        speed,\n        house: calculateHouseForPlanet(position)\n      };\n    });\n\n    const transformedHouses: House[] = (apiData.houses ?? []).map(houseData => ({\n      number: houseData.number,\n      cusp: houseData.cusp,\n      sign: houseData.sign,\n      planets: []\n    }));\n\n    // Add planets to houses\n    Object.entries(transformedPlanets).forEach(([planetName, planet]) => {\n      const house = transformedHouses.find(h => h.number === planet.house);\n      if (house !== null && house !== undefined) {\n        house.planets ??= [];\n        house.planets.push(planetName);\n      }\n    });\n\n    const transformedAspects = (apiData.aspects ?? []).map(aspect => ({\n      planet1: aspect.planet1,\n      planet2: aspect.planet2,\n      angle: getAspectAngle(aspect.aspect_type),\n      orb: aspect.orb,\n      type: aspect.aspect_type,\n      applying: aspect.applying,\n      strength: getAspectStrength(aspect.orb)\n    }));\n\n    return {\n      planets: transformedPlanets,\n      houses: transformedHouses.sort((a, b) => a.number - b.number),\n      aspects: transformedAspects,\n      angles: apiData.angles,\n      transits: transitData,\n      latitude: apiData.latitude ?? 0,\n      longitude: apiData.longitude ?? 0,\n      timezone: apiData.timezone ?? 'UTC',\n      julian_day: apiData.julian_day ?? 0\n    };\n  };\n\n  // Utility functions\n  const calculateHouseForPlanet = (position: number): number => {\n    if (position === null || position === undefined) return 1;\n    // Simple house calculation - in production, use more accurate method\n    return Math.floor(position / 30) + 1;\n  };\n\n  const getAspectAngle = (aspectType: string): number => {\n    const aspectAngles: Record<string, number> = {\n      'conjunction': 0, 'opposition': 180, 'trine': 120,\n      'square': 90, 'sextile': 60, 'quincunx': 150\n    };\n    const key = aspectType.toLowerCase();\n    return aspectAngles[key] ?? 0;\n  };\n\n  const getAspectStrength = (orb: number): 'strong' | 'medium' | 'weak' => {\n    if (orb !== null && orb !== undefined) {\n      if (typeof orb === 'number') {\n        if (orb === 0 || orb <= 2) return 'strong';\n        if (orb > 2 && orb <= 5) return 'medium';\n      }\n    }\n    return 'weak';\n  };\n\n  // Interactive event handlers\n  const handlePlanetClick = useCallback((planetName: string) => {\n    setInteractiveState(prev => ({\n      ...prev,\n      selectedPlanet: prev.selectedPlanet === planetName ? null : planetName,\n      highlightedAspects: prev.selectedPlanet === planetName ? [] : \n        (data?.aspects?.filter(a => a.planet1 === planetName || a.planet2 === planetName).map(a => `${a.planet1}-${a.planet2}`) ?? [])\n    }));\n    onPlanetSelect?.(planetName);\n  }, [data?.aspects, onPlanetSelect]);\n\n  const handleAspectClick = useCallback((aspect: Aspect) => {\n    onAspectSelect?.(aspect);\n    setInteractiveState(prev => ({\n      ...prev,\n      highlightedAspects: [`${aspect.planet1}-${aspect.planet2}`]\n    }));\n  }, [onAspectSelect]);\n\n  const showTooltip = useCallback((content: string, event: { pageX: number; pageY: number }) => {\n    if (\n      tooltipRef.current === null || \n      tooltipRef.current === undefined ||\n      typeof content !== 'string' ||\n      content.length === 0 ||\n      typeof event?.pageX !== 'number' ||\n      typeof event?.pageY !== 'number'\n    ) {\n      return;\n    }\n    \n    tooltipRef.current.innerHTML = content;\n    tooltipRef.current.style.display = 'block';\n    tooltipRef.current.style.left = `${event.pageX + 10}px`;\n    tooltipRef.current.style.top = `${event.pageY - 10}px`;\n  }, []);\n\n  const hideTooltip = useCallback(() => {\n    if (tooltipRef.current === null) return;\n    tooltipRef.current.style.display = 'none';\n  }, []);\n\n  // Chart constants with enhanced styling\n  const chartConstants = useMemo(() => ({\n    width: 900,\n    height: 900,\n    radius: 380,\n    center: { x: 450, y: 450 },\n    signs: [\n      'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n      'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'\n    ],\n    signSymbols: ['♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓'],\n    signColors: [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD',\n      '#74B9FF', '#A29BFE', '#FD79A8', '#FDCB6E', '#6C5CE7', '#00B894'\n    ],\n    planetSymbols: {\n      sun: '☉', moon: '☽', mercury: '☿', venus: '♀', mars: '♂',\n      jupiter: '♃', saturn: '♄', uranus: '♅', neptune: '♆', pluto: '♇',\n      chiron: '⚷', ceres: '⚳', pallas: '⚴', juno: '⚵', vesta: '⚶'\n    } as Record<string, string>,\n    planetColors: {\n      sun: '#FFD700', moon: '#E8E8E8', mercury: '#87CEEB', venus: '#32CD32', mars: '#FF4500',\n      jupiter: '#FF8C00', saturn: '#DAA520', uranus: '#4FD0E4', neptune: '#6495ED', pluto: '#DA70D6',\n      chiron: '#D2691E', ceres: '#90EE90', pallas: '#DDA0DD', juno: '#FFB6C1', vesta: '#F0E68C'\n    } as Record<string, string>,\n    aspectColors: {\n      conjunction: '#FF0000', opposition: '#0066CC', trine: '#00AA00',\n      square: '#FF6600', sextile: '#9966FF', quincunx: '#666666'\n    } as Record<string, string>,\n    transitColors: {\n      sun: '#FFD700AA', moon: '#E8E8E8AA', mercury: '#87CEEBAA', venus: '#32CD32AA', mars: '#FF4500AA'\n    } as Record<string, string>\n  }), []);\n\n  // Main chart rendering effect\n  useEffect(() => {\n    if (data === null || data === undefined || svgRef.current === null) {\n      return;\n    }\n\n    const { width, height, radius, center, signs, signSymbols, signColors, planetSymbols, planetColors, aspectColors } = chartConstants;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', `0 0 ${width} ${height}`)\n      .attr('class', 'mx-auto cursor-crosshair')\n      .style('background', 'radial-gradient(circle, #f8f9fa 0%, #e9ecef 100%)')\n      .attr('role', 'img')\n      .attr('aria-label', 'Interactive astrological natal chart wheel');\n\n    const g = svg.append('g')\n      .attr('transform', `translate(${center.x}, ${center.y}) scale(${interactiveState.zoomLevel}) rotate(${interactiveState.rotationOffset})`);\n\n    // Define enhanced ring radii\n    const outerRadius = radius;\n    const signBandRadius = radius - 30;\n    const houseNumberRadius = radius - 60;\n    const planetRadius = radius - 90;\n    const transitRadius = radius - 120;\n    const aspectRadius = radius - 180;\n    const innerRadius = radius - 200;\n\n    // Draw zodiac sign bands with gradients\n    const defs = svg.append('defs');\n    signColors.forEach((color, index) => {\n      const gradient = defs.append('linearGradient')\n        .attr('id', `signGradient${index}`)\n        .attr('x1', '0%').attr('y1', '0%')\n        .attr('x2', '100%').attr('y2', '100%');\n      \n      gradient.append('stop')\n        .attr('offset', '0%')\n        .attr('stop-color', color)\n        .attr('stop-opacity', 0.3);\n      \n      gradient.append('stop')\n        .attr('offset', '100%')\n        .attr('stop-color', color)\n        .attr('stop-opacity', 0.1);\n    });\n\n    // Draw zodiac sign sectors\n    signs.forEach((sign, index) => {\n      const startAngle = (index * 30 - 90) * Math.PI / 180;\n      const endAngle = ((index + 1) * 30 - 90) * Math.PI / 180;\n\n      const arcData = { startAngle, endAngle };\n      const arc = d3.arc<void, typeof arcData>()\n        .innerRadius(signBandRadius)\n        .outerRadius(outerRadius);\n\n      g.append('path')\n        .attr('d', arc(arcData) as string)\n        .attr('fill', `url(#signGradient${index})`)\n        .attr('stroke', '#ffffff')\n        .attr('stroke-width', 1)\n        .style('cursor', 'pointer')\n        .on('mouseover', function(this: SVGPathElement, event: MouseEvent) {\n          if (sign.length > 0) {\n            d3.select(this).attr('fill-opacity', 0.8);\n            showTooltip(`<strong>${sign}</strong><br/>Element: ${getSignElement(sign)}<br/>Quality: ${getSignQuality(sign)}`, { \n              pageX: event.pageX, \n              pageY: event.pageY \n            });\n          }\n        })\n        .on('mouseout', function() {\n          d3.select(this).attr('fill-opacity', 1);\n          hideTooltip();\n        });\n\n      // Sign symbols\n      const midAngle = (index * 30 + 15 - 90) * Math.PI / 180;\n      g.append('text')\n        .attr('x', Math.cos(midAngle) * (signBandRadius + 15))\n        .attr('y', Math.sin(midAngle) * (signBandRadius + 15))\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '24')\n        .attr('font-weight', 'bold')\n        .attr('fill', signColors[index])\n        .attr('stroke', '#ffffff')\n        .attr('stroke-width', 0.5)\n        .text(signSymbols[index])\n        .style('text-shadow', '1px 1px 2px rgba(0,0,0,0.3)');\n    });\n\n    // Draw house divisions and numbers\n    for (let i = 0; i < 12; i++) {\n      const angle = (i * 30 - 90) * Math.PI / 180;\n      \n      // House division lines\n      g.append('line')\n        .attr('x1', Math.cos(angle) * innerRadius)\n        .attr('y1', Math.sin(angle) * innerRadius)\n        .attr('x2', Math.cos(angle) * outerRadius)\n        .attr('y2', Math.sin(angle) * outerRadius)\n        .attr('stroke', '#333333')\n        .attr('stroke-width', i % 3 === 0 ? 3 : 1.5) // Emphasize angular houses\n        .attr('stroke-opacity', 0.7);\n\n      // House numbers\n      const midAngle = (i * 30 + 15 - 90) * Math.PI / 180;\n      const houseData = data.houses.find(h => h.number === i + 1);\n      \n      g.append('text')\n        .attr('x', Math.cos(midAngle) * houseNumberRadius)\n        .attr('y', Math.sin(midAngle) * houseNumberRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '18')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#2c3e50')\n        .text((i + 1).toString())\n        .style('cursor', 'pointer')\n        .on('mouseover', function(event: MouseEvent) {\n          showTooltip(`<strong>House ${i + 1}</strong><br/>Sign: ${houseData?.sign ?? 'Unknown'}<br/>Planets: ${houseData?.planets?.join(', ') ?? 'None'}`, { \n            pageX: event.pageX, \n            pageY: event.pageY \n          });\n        })\n        .on('mouseout', hideTooltip);\n    }\n\n    // Draw natal planets with enhanced interactivity\n    Object.entries(data.planets).forEach(([name, planet], index) => {\n      const angle = (planet.position - 90) * Math.PI / 180;\n      const isSelected = interactiveState.selectedPlanet === name;\n      const isHighlighted = interactiveState.highlightedAspects.some(aspectId => \n        aspectId.includes(name)\n      );\n\n      const planetGroup = g.append('g')\n        .attr('class', 'planet-group')\n        .style('cursor', 'pointer')\n        .on('click', () => handlePlanetClick(name))\n        .on('mouseover', function(event: MouseEvent) {\n          d3.select(this).select('circle').attr('r', 25);\n          const tooltipContent = `\n            <strong>${name.charAt(0).toUpperCase() + name.slice(1)}</strong><br/>\n            Position: ${formatDegree(planet.position)}<br/>\n            House: ${planet.house}<br/>\n            ${planet.retrograde ? '<span style=\"color: red;\">Retrograde ℞</span>' : 'Direct'}\n          `;\n          showTooltip(tooltipContent, { \n            pageX: event.pageX, \n            pageY: event.pageY \n          });\n        })\n        .on('mouseout', function() {\n          if (isSelected === false) {\n            d3.select(this).select('circle').attr('r', 20);\n          }\n          hideTooltip();\n        });\n\n      // Planet background circle\n      planetGroup.append('circle')\n        .attr('cx', Math.cos(angle) * planetRadius)\n        .attr('cy', Math.sin(angle) * planetRadius)\n        .attr('r', isSelected ? 25 : 20)\n        .attr('fill', isSelected ? planetColors[name] : '#ffffff')\n        .attr('stroke', planetColors[name] ?? '#333333')\n        .attr('stroke-width', isHighlighted ? 4 : 2)\n        .attr('fill-opacity', 0.9)\n        .style('filter', isSelected ? 'drop-shadow(0 0 10px rgba(0,0,0,0.5))' : 'none');\n\n      // Planet symbol\n      planetGroup.append('text')\n        .attr('x', Math.cos(angle) * planetRadius)\n        .attr('y', Math.sin(angle) * planetRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', isSelected ? '20' : '16')\n        .attr('font-weight', 'bold')\n        .attr('fill', isSelected ? '#ffffff' : (planetColors[name] ?? '#333333'))\n          .text(planetSymbols[name] ?? name.slice(0, 2).toUpperCase());      // Retrograde indicator\n      if (planet.retrograde) {\n        planetGroup.append('text')\n          .attr('x', Math.cos(angle) * planetRadius + 15)\n          .attr('y', Math.sin(angle) * planetRadius - 15)\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'middle')\n          .attr('font-size', '12')\n          .attr('font-weight', 'bold')\n          .attr('fill', '#FF0000')\n          .text('℞');\n      }\n\n      // Animation\n      if (showAnimation) {\n        planetGroup\n          .style('opacity', 0)\n          .transition()\n          .delay(index * 100)\n          .duration(600)\n          .style('opacity', 1);\n      }\n    });\n\n    // Draw transits if enabled\n    if (interactiveState.showTransits === true && transitData !== null && transitData !== undefined) {\n      Object.entries(transitData).forEach(([name, planet]) => {\n        const natalPlanet = data.planets[name];\n        if (natalPlanet === undefined || natalPlanet === null) return; // Only show transits for natal planets\n\n        const angle = (planet.position - 90) * Math.PI / 180;\n        \n        const transitGroup = g.append('g')\n          .attr('class', 'transit-group')\n          .style('cursor', 'pointer')\n          .on('mouseover', function(event: MouseEvent) {\n            const tooltipContent = `\n              <strong>Transit ${name.charAt(0).toUpperCase() + name.slice(1)}</strong><br/>\n              Current Position: ${formatDegree(planet.position)}<br/>\n              Natal Position: ${formatDegree(data.planets[name].position)}\n            `;\n            showTooltip(tooltipContent, { \n              pageX: event.pageX, \n              pageY: event.pageY \n            });\n          })\n          .on('mouseout', hideTooltip);\n\n        // Transit planet (hollow circle)\n        transitGroup.append('circle')\n          .attr('cx', Math.cos(angle) * transitRadius)\n          .attr('cy', Math.sin(angle) * transitRadius)\n          .attr('r', 15)\n          .attr('fill', 'none')\n          .attr('stroke', planetColors[name] ?? '#333333')\n          .attr('stroke-width', 2)\n          .attr('stroke-dasharray', '3,3');\n\n        // Transit symbol\n        transitGroup.append('text')\n          .attr('x', Math.cos(angle) * transitRadius)\n          .attr('y', Math.sin(angle) * transitRadius)\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'middle')\n          .attr('font-size', '12')\n          .attr('font-weight', 'bold')\n          .attr('fill', (typeof planetColors[name] === 'string' && planetColors[name].length > 0) ? planetColors[name] : '#333333')\n          .text((typeof planetSymbols[name] === 'string' && planetSymbols[name].length > 0) ? planetSymbols[name] : name.slice(0, 1).toUpperCase());\n\n        // Connect transit to natal position\n        const natalAngle = (data.planets[name].position - 90) * Math.PI / 180;\n        g.append('line')\n          .attr('x1', Math.cos(natalAngle) * planetRadius)\n          .attr('y1', Math.sin(natalAngle) * planetRadius)\n          .attr('x2', Math.cos(angle) * transitRadius)\n          .attr('y2', Math.sin(angle) * transitRadius)\n          .attr('stroke', typeof planetColors[name] === 'string' ? planetColors[name] : '#333333')\n          .attr('stroke-width', 1)\n          .attr('stroke-opacity', 0.3)\n          .attr('stroke-dasharray', '2,2');\n      });\n    }\n\n    // Draw aspects with enhanced interactivity\n    if (showAspects === true && Array.isArray(data.aspects) && data.aspects.length > 0) {\n      data.aspects.forEach((aspect, index) => {\n        if (\n          typeof aspect.planet1 !== 'string' || \n          typeof aspect.planet2 !== 'string' ||\n          !(aspect.planet1 in data.planets) ||\n          !(aspect.planet2 in data.planets)\n        ) {\n          return;\n        }\n\n        const planet1 = data.planets[aspect.planet1];\n        const planet2 = data.planets[aspect.planet2];\n        \n        if (\n          typeof planet1?.position !== 'number' || \n          typeof planet2?.position !== 'number'\n        ) {\n          return;\n        }\n\n        const angle1 = (planet1.position - 90) * Math.PI / 180;\n        const angle2 = (planet2.position - 90) * Math.PI / 180;\n        const aspectId = `${aspect.planet1}-${aspect.planet2}`;\n        const isHighlighted = Array.isArray(interactiveState.highlightedAspects) && \n          interactiveState.highlightedAspects.includes(aspectId);\n\n        const line = g.append('line')\n          .attr('class', 'aspect-line')\n          .attr('x1', Math.cos(angle1) * aspectRadius)\n          .attr('y1', Math.sin(angle1) * aspectRadius)\n          .attr('x2', Math.cos(angle2) * aspectRadius)\n          .attr('y2', Math.sin(angle2) * aspectRadius)\n          .attr('stroke', aspectColors[aspect.type] ?? '#666666')\n          .attr('stroke-width', isHighlighted ? 3 : (aspect.strength === 'strong' ? 2 : 1))\n          .attr('stroke-opacity', isHighlighted ? 0.8 : 0.4)\n          .attr('stroke-dasharray', getAspectDashArray(aspect.type))\n          .style('cursor', 'pointer')\n          .on('click', () => handleAspectClick(aspect))\n          .on('mouseover', function(event: MouseEvent) {\n            d3.select(this).attr('stroke-opacity', 0.8).attr('stroke-width', 3);\n            const tooltipContent = `\n              <strong>${aspect.type.charAt(0).toUpperCase() + aspect.type.slice(1)}</strong><br/>\n              ${aspect.planet1} - ${aspect.planet2}<br/>\n              Orb: ${aspect.orb.toFixed(1)}°<br/>\n              Strength: ${aspect.strength}\n            `;\n            showTooltip(tooltipContent, { \n              pageX: event.pageX, \n              pageY: event.pageY \n            });\n          })\n          .on('mouseout', function() {\n            if (!isHighlighted) {\n              d3.select(this).attr('stroke-opacity', 0.4).attr('stroke-width', aspect.strength === 'strong' ? 2 : 1);\n            }\n            hideTooltip();\n          });\n\n        // Animation for aspects\n        if (showAnimation) {\n          line\n            .attr('stroke-dashoffset', 100)\n            .transition()\n            .delay(1000 + index * 50)\n            .duration(800)\n            .attr('stroke-dashoffset', 0);\n        }\n      });\n    }\n\n    // Draw chart borders\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', outerRadius)\n      .attr('fill', 'none')\n      .attr('stroke', '#2c3e50')\n      .attr('stroke-width', 4);\n\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', innerRadius)\n      .attr('fill', '#ffffff')\n      .attr('fill-opacity', 0.8)\n      .attr('stroke', '#2c3e50')\n      .attr('stroke-width', 2);\n\n    // Center point\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', 5)\n      .attr('fill', '#2c3e50');\n\n  }, [data, showAspects, showAnimation, interactiveState, transitData, chartConstants, handlePlanetClick, handleAspectClick, showTooltip, hideTooltip]);\n\n  // Utility functions\n  const formatDegree = (degree: number): string => {\n    const signIndex = Math.floor(degree / 30);\n    const signs = ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n                   'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'];\n    const degreeInSign = Math.floor(degree % 30);\n    const minutes = Math.floor((degree % 1) * 60);\n    return `${degreeInSign}°${minutes.toString().padStart(2, '0')}' ${signs[signIndex]}`;\n  };\n\n  const getSignElement = (sign: string): string => {\n    const elements: Record<string, string> = {\n      Aries: 'Fire', Taurus: 'Earth', Gemini: 'Air', Cancer: 'Water',\n      Leo: 'Fire', Virgo: 'Earth', Libra: 'Air', Scorpio: 'Water',\n      Sagittarius: 'Fire', Capricorn: 'Earth', Aquarius: 'Air', Pisces: 'Water'\n    };\n    return elements[sign] ?? 'Unknown';\n  };\n\n  const getSignQuality = (sign: string): string => {\n    const qualities: Record<string, string> = {\n      Aries: 'Cardinal', Taurus: 'Fixed', Gemini: 'Mutable', Cancer: 'Cardinal',\n      Leo: 'Fixed', Virgo: 'Mutable', Libra: 'Cardinal', Scorpio: 'Fixed',\n      Sagittarius: 'Mutable', Capricorn: 'Cardinal', Aquarius: 'Fixed', Pisces: 'Mutable'\n    };\n    return qualities[sign] ?? 'Unknown';\n  };\n\n  const getAspectDashArray = (aspectType: string): string => {\n              if (typeof aspectType !== 'string' || aspectType.length === 0) return 'none';\n    switch (aspectType) {\n      case 'conjunction':\n      case 'opposition': return 'none';\n      case 'trine': return '8,2';\n      case 'square': return '4,4';\n      case 'sextile': return '6,3';\n      case 'quincunx': return '3,3';\n      default: return '2,2';\n    }\n  };\n\n  // Control handlers\n  const handleRefresh = () => {\n    setIsAnimating(true);\n    void refetch().finally(() => setIsAnimating(false));\n  };\n\n  const toggleTransits = () => {\n    setInteractiveState(prev => ({ \n      ...prev, \n      showTransits: !prev.showTransits \n    }));\n  };\n\n  const resetSelection = () => {\n    setInteractiveState(prev => ({\n      ...prev,\n      selectedPlanet: null,\n      highlightedAspects: [],\n      zoomLevel: 1,\n      rotationOffset: 0\n    }));\n  };\n\n  const handleZoom = (direction: 'in' | 'out') => {\n    setInteractiveState(prev => ({\n      ...prev,\n      zoomLevel: Math.max(0.5, Math.min(2, prev.zoomLevel + (direction === 'in' ? 0.1 : -0.1)))\n    }));\n  };\n\n  if (isLoading && preTransformedData === null) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-cosmic-gold\"></div>\n        <span className=\"ml-2 text-cosmic-silver\">Loading interactive chart...</span>\n      </div>\n    );\n  }\n\n  if (error !== null && error !== undefined) {\n    return (\n      <div className=\"text-center p-8\">\n        <div className=\"text-red-500 mb-4\">Error loading chart</div>\n        <Button onClick={handleRefresh} variant=\"secondary\">\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  if (data === null || data === undefined) {\n    return (\n      <div className=\"text-center p-8\">\n        <div className=\"text-cosmic-silver mb-4\">No chart data available</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto p-4\">\n      {/* Control Panel */}\n      <div className={styles.controlPanel}>\n        <div className=\"flex flex-wrap items-center justify-between gap-4\">\n          <h3 className=\"text-xl font-semibold text-cosmic-gold\">Interactive Natal Chart</h3>\n          \n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              onClick={toggleTransits} \n              variant={interactiveState.showTransits === true ? \"primary\" : \"secondary\"}\n              className=\"text-sm\"\n            >\n              {interactiveState.showTransits ? '🔄 Hide Transits' : '🔄 Show Transits'}\n            </Button>\n            \n            <Button onClick={() => handleZoom('in')} variant=\"secondary\" className=\"text-sm\">\n              🔍+\n            </Button>\n            \n            <Button onClick={() => handleZoom('out')} variant=\"secondary\" className=\"text-sm\">\n              🔍-\n            </Button>\n            \n            <Button onClick={resetSelection} variant=\"secondary\" className=\"text-sm\">\n              🔄 Reset\n            </Button>\n            \n            <Button onClick={handleRefresh} variant=\"secondary\" disabled={isAnimating} className=\"text-sm\">\n              {isAnimating ? 'Refreshing...' : '↻ Refresh'}\n            </Button>\n          </div>\n        </div>\n\n        {/* Selection Info */}\n        {interactiveState.selectedPlanet !== null && interactiveState.selectedPlanet !== undefined && (\n          <div className={styles.selectionInfo}>\n            <h4 className=\"text-cosmic-gold font-semibold mb-2\">\n              Selected: {interactiveState.selectedPlanet.charAt(0).toUpperCase() + interactiveState.selectedPlanet.slice(1)}\n            </h4>\n            <div className=\"text-cosmic-silver text-sm space-y-1\">\n              <div>Position: {formatDegree(data.planets[interactiveState.selectedPlanet]?.position ?? 0)}</div>\n              <div>House: {data.planets[interactiveState.selectedPlanet]?.house ?? 'Unknown'}</div>\n              {data.planets[interactiveState.selectedPlanet]?.retrograde === true && (\n                <div className=\"text-red-400\">Status: Retrograde ℞</div>\n              )}\n              {Array.isArray(interactiveState.highlightedAspects) && interactiveState.highlightedAspects.length > 0 && (\n                <div>Aspects: {interactiveState.highlightedAspects.length} highlighted</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Chart Container */}\n      <div className={styles.chartContainer}>\n        <svg \n          ref={svgRef} \n          className={styles.chartSvg}\n        />\n        \n        {/* Tooltip */}\n        <div\n          ref={tooltipRef}\n          className={styles.chartTooltip}\n        />\n\n        {/* Legend */}\n        {Array.isArray(data.aspects) && data.aspects.length > 0 && showAspects === true && (\n          <div className={styles.chartLegend}>\n            <div>\n              <h5 className=\"font-semibold text-gray-800 mb-2\">Major Aspects ({data.aspects.length})</h5>\n              <div className=\"space-y-1\">\n                {Object.entries(chartConstants.aspectColors).map(([type, color]) => (\n                  <div key={type} className=\"flex items-center gap-2\">\n                    <div \n                      className={`${styles.aspectLegendLine} aspect-color-${type}`}\n                      data-aspect-color={color}\n                    />\n                    <span className=\"capitalize text-gray-700\">{type}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {interactiveState.showTransits && (\n              <div>\n                <h5 className=\"font-semibold text-gray-800 mb-2\">Transits</h5>\n                <div className=\"text-gray-600 text-xs\">\n                  Hollow circles show current planetary positions\n                </div>\n              </div>\n            )}\n\n            <div>\n              <h5 className=\"font-semibold text-gray-800 mb-2\">Controls</h5>\n              <div className=\"text-gray-600 text-xs space-y-1\">\n                <div>• Click planets to highlight aspects</div>\n                <div>• Hover for detailed information</div>\n                <div>• Use zoom controls to explore</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ChartWheelInteractive);\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/frequency/AstroFrequencyGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/frequency/AstroInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/HealwavePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatTime' is assigned a value but never used.","line":18,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { useHealwave } from \"./hooks/useHealwave\";\nimport FrequencyControls from \"./components/FrequencyControls\";\nimport AudioPlayer from \"./components/AudioPlayer\";\nimport DurationTimer from \"./components/DurationTimer\";\n\nconst HealwavePage: React.FC = () => {\n  const {\n    currentFrequency,\n    isPlaying,\n    volume,\n    duration,\n    timeRemaining,\n    setFrequency,\n    setVolume,\n    setDuration,\n    togglePlayPause,\n    formatTime\n  } = useHealwave();\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4\">\n          Healwave Frequency Generator\n        </h1>\n        <p className=\"text-xl text-cosmic-silver\">\n          Experience personalized healing frequencies based on your astrological chart\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"space-y-6\">\n          <FrequencyControls\n            onFrequencyChange={setFrequency}\n            onDurationChange={setDuration}\n            onPlayPause={togglePlayPause}\n            isPlaying={isPlaying}\n            currentFrequency={currentFrequency}\n            duration={duration}\n          />\n        </div>\n\n        <div className=\"space-y-6\">\n          <AudioPlayer\n            frequency={currentFrequency}\n            isPlaying={isPlaying}\n            volume={volume}\n            onVolumeChange={setVolume}\n          />\n          \n          <DurationTimer\n            duration={timeRemaining}\n            isRunning={isPlaying}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HealwavePage;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/AudioPlayer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":37,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":50,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":50,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":63,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":63,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":83,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":95,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":95,"endColumn":24}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cleanup', 'initializeAudio', and 'startAudio'. Either include them or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [isPlaying, frequency, isInitialized, initializeAudio, startAudio, cleanup]","fix":{"range":[1008,1045],"text":"[isPlaying, frequency, isInitialized, initializeAudio, startAudio, cleanup]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from 'react';\nimport { devConsole } from '../../../config/environment';\nimport { Card } from '@cosmichub/ui';\nimport styles from './AudioPlayer.module.css';\n\ninterface AudioPlayerProps {\n  frequency: number;\n  isPlaying: boolean;\n  volume: number;\n  onVolumeChange: (volume: number) => void;\n}\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({\n  frequency,\n  isPlaying,\n  volume,\n  onVolumeChange\n}) => {\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const oscillatorRef = useRef<OscillatorNode | null>(null);\n  const gainNodeRef = useRef<GainNode | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    if (!isInitialized && isPlaying) {\n      initializeAudio();\n    }\n\n    if (isInitialized) {\n      if (isPlaying) {\n        startAudio();\n      } else {\n        stopAudio();\n      }\n    }\n\n    return () => {\n      cleanup();\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying, frequency, isInitialized]);\n\n  useEffect(() => {\n    if (gainNodeRef.current !== null && gainNodeRef.current !== undefined) {\n      const currentTime = audioContextRef.current?.currentTime ?? 0;\n      gainNodeRef.current.gain.setValueAtTime(volume / 100, currentTime);\n    }\n  }, [volume]);\n\n  const initializeAudio = () => {\n    try {\n      const AudioContextClass = window.AudioContext ?? (window as unknown as { webkitAudioContext: typeof AudioContext }).webkitAudioContext;\n      audioContextRef.current = new AudioContextClass();\n      gainNodeRef.current = audioContextRef.current.createGain();\n      gainNodeRef.current.connect(audioContextRef.current.destination);\n      gainNodeRef.current.gain.setValueAtTime(volume / 100, audioContextRef.current.currentTime);\n      setIsInitialized(true);\n    } catch (error) {\n      devConsole.error('❌ Failed to initialize audio context:', error);\n    }\n  };\n\n  const startAudio = () => {\n    if (audioContextRef.current === null || audioContextRef.current === undefined || \n        gainNodeRef.current === null || gainNodeRef.current === undefined) return;\n\n    try {\n      if (oscillatorRef.current !== null && oscillatorRef.current !== undefined) {\n        oscillatorRef.current.stop();\n        oscillatorRef.current.disconnect();\n      }\n\n      oscillatorRef.current = audioContextRef.current.createOscillator();\n      oscillatorRef.current.type = 'sine';\n      oscillatorRef.current.frequency.setValueAtTime(frequency, audioContextRef.current.currentTime);\n      oscillatorRef.current.connect(gainNodeRef.current);\n      oscillatorRef.current.start();\n    } catch (error) {\n      devConsole.error('❌ Failed to start audio:', error);\n    }\n  };\n\n  const stopAudio = () => {\n    if (oscillatorRef.current !== null && oscillatorRef.current !== undefined) {\n      try {\n        oscillatorRef.current.stop();\n        oscillatorRef.current.disconnect();\n        oscillatorRef.current = null;\n      } catch (error) {\n        devConsole.error('❌ Failed to stop audio:', error);\n      }\n    }\n  };\n\n  const cleanup = () => {\n    stopAudio();\n    if (audioContextRef.current !== null && audioContextRef.current !== undefined && \n        audioContextRef.current.state !== 'closed') {\n      void audioContextRef.current.close();\n    }\n    setIsInitialized(false);\n  };\n\n  return (\n    <Card title=\"Audio Player\" className=\"bg-cosmic-dark/50\">\n      <div className={styles['player-container']}>\n        <div className=\"text-center\">\n          <div className={`${styles['audio-circle']} ${\n            isPlaying \n              ? styles['audio-circle-playing'] \n              : styles['audio-circle-stopped']\n          }`}>\n            <div className={styles['circle-content']}>\n              {isPlaying ? (\n                <div className={styles['audio-bars']}>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-1']}`}></div>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-2']}`}></div>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-3']}`}></div>\n                </div>\n              ) : (\n                <div className={styles['play-button']}></div>\n              )}\n            </div>\n          </div>\n          \n          <p className={styles['status-text']}>\n            {isPlaying ? 'Playing' : 'Stopped'} - {frequency} Hz\n          </p>\n        </div>\n\n        <div className={styles['volume-section']}>\n          <label htmlFor=\"volume\" className={styles['volume-label']}>\n            Volume: {volume}%\n          </label>\n          <input\n            id=\"volume\"\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={volume}\n            onChange={(e) => onVolumeChange(Number(e.target.value))}\n            className={styles['volume-slider']}\n            aria-label=\"Volume control\"\n          />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default AudioPlayer;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/DurationTimer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":47,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":47,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":53,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":53,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * DurationTimer component for Healwave sessions\n * Displays and manages countdown timer for audio frequency sessions\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\n\ninterface DurationTimerProps {\n    duration: number; // in seconds\n    isRunning: boolean;\n    onComplete?: () => void;\n    onTick?: (remaining: number) => void;\n    className?: string;\n}\n\nexport const DurationTimer: React.FC<DurationTimerProps> = ({\n    duration,\n    isRunning,\n    onComplete,\n    onTick,\n    className = ''\n}) => {\n    const [remaining, setRemaining] = useState(duration);\n    const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);\n\n    useEffect(() => {\n        setRemaining(duration);\n    }, [duration]);\n\n    useEffect(() => {\n        if (isRunning && remaining > 0) {\n            intervalRef.current = setInterval(() => {\n                setRemaining(prev => {\n                    const next = prev - 1;\n                    if (onTick !== undefined) onTick(next);\n                    if (next <= 0) {\n                        if (intervalRef.current !== null) clearInterval(intervalRef.current);\n                        if (onComplete !== undefined) onComplete();\n                        return 0;\n                    }\n                    return next;\n                });\n            }, 1000);\n        } else if (!isRunning && intervalRef.current !== null) {\n            clearInterval(intervalRef.current);\n        }\n        return () => {\n            if (intervalRef.current !== null) clearInterval(intervalRef.current);\n        };\n    }, [isRunning, remaining, onComplete, onTick]);\n\n    // Format seconds to mm:ss\n    const formatTime = (secs: number) => {\n        const m = Math.floor(secs / 60).toString().padStart(2, '0');\n        const s = (secs % 60).toString().padStart(2, '0');\n        return `${m}:${s}`;\n    };\n\n    return (\n        <div className={`flex items-center space-x-2 ${className}`}>\n            <span className=\"font-mono text-lg\">{formatTime(remaining)}</span>\n            {isRunning && <span className=\"text-green-500 animate-pulse\">●</span>}\n        </div>\n    );\n};\n\nexport default DurationTimer;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/FrequencyControls.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":42,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":42,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback, useId } from 'react';\nimport { Button, Card } from '@cosmichub/ui';\n\ninterface FrequencyControlsProps {\n  onFrequencyChange: (frequency: number) => void;\n  onDurationChange: (duration: number) => void;\n  onPlayPause: () => void;\n  isPlaying: boolean;\n  currentFrequency: number;\n  duration: number;\n}\n\nconst FrequencyControls: React.FC<FrequencyControlsProps> = ({\n  onFrequencyChange,\n  onDurationChange,\n  onPlayPause,\n  isPlaying,\n  currentFrequency,\n  duration\n}) => {\n  const [customFrequency, setCustomFrequency] = useState<number>(currentFrequency);\n  const radioGroupRef = useRef<HTMLDivElement | null>(null);\n  const groupLabelId = useId();\n  const customFrequencyId = useId();\n  const durationId = useId();\n\n  const presetFrequencies = React.useMemo(() => [\n    { name: '396 Hz - Root Chakra', value: 396 },\n    { name: '417 Hz - Sacral Chakra', value: 417 },\n    { name: '528 Hz - Solar Plexus', value: 528 },\n    { name: '639 Hz - Heart Chakra', value: 639 },\n    { name: '741 Hz - Throat Chakra', value: 741 },\n    { name: '852 Hz - Third Eye', value: 852 },\n    { name: '963 Hz - Crown Chakra', value: 963 }\n  ], []);\n\n  const handlePresetSelect = useCallback((frequency: number) => {\n    setCustomFrequency(frequency);\n    onFrequencyChange(frequency);\n  }, [onFrequencyChange]);\n\n  const handleCustomFrequencySubmit = () => {\n    onFrequencyChange(customFrequency);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-cosmic-dark/50\">\n        <div className=\"space-y-4\">\n          <h3 className=\"mb-4 text-lg font-semibold text-cosmic-gold\">Frequency Selection</h3>\n          <div role=\"group\" aria-labelledby={groupLabelId}>\n            <div id={groupLabelId} className=\"block mb-2 text-cosmic-silver\">Preset Frequencies</div>\n            <div\n              className=\"grid grid-cols-1 gap-2 sm:grid-cols-2\"\n              role=\"radiogroup\"\n              aria-labelledby={groupLabelId}\n              ref={radioGroupRef}\n              tabIndex={0}\n              onKeyDown={useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n                const keys = ['ArrowRight','ArrowDown','ArrowLeft','ArrowUp','Home','End'];\n                if (!keys.includes(e.key)) return;\n                e.preventDefault();\n\n                if (radioGroupRef.current === null) return;\n                const buttons = radioGroupRef.current.querySelectorAll<HTMLButtonElement>('button[role=\"radio\"]');\n                if (buttons.length === 0) return;\n\n                const idx = presetFrequencies.findIndex(p => p.value === currentFrequency);\n                const currentIndex = idx >= 0 ? idx : 0;\n                let nextIndex = currentIndex;\n\n                switch (e.key) {\n                  case 'ArrowRight':\n                  case 'ArrowDown':\n                    nextIndex = (currentIndex + 1) % buttons.length;\n                    break;\n                  case 'ArrowLeft':\n                  case 'ArrowUp':\n                    nextIndex = (currentIndex - 1 + buttons.length) % buttons.length;\n                    break;\n                  case 'Home':\n                    nextIndex = 0;\n                    break;\n                  case 'End':\n                    nextIndex = buttons.length - 1;\n                    break;\n                }\n\n                const nextPreset = presetFrequencies[nextIndex];\n                if (nextPreset !== undefined) {\n                  handlePresetSelect(nextPreset.value);\n                  buttons[nextIndex].focus();\n                }\n              }, [currentFrequency, presetFrequencies, handlePresetSelect])}\n            >\n              {presetFrequencies.map((preset) => {\n                const selected = currentFrequency === preset.value;\n                return selected ? (\n                  <button\n                    key={preset.value}\n                    type=\"button\"\n                    onClick={() => handlePresetSelect(preset.value)}\n                    className=\"p-3 rounded text-left transition-colors bg-cosmic-purple text-white\"\n                    role=\"radio\"\n                    aria-checked=\"true\"\n                    tabIndex={0}\n                  >\n                    {preset.name}\n                  </button>\n                ) : (\n                  <button\n                    key={preset.value}\n                    type=\"button\"\n                    onClick={() => handlePresetSelect(preset.value)}\n                    className=\"p-3 rounded text-left transition-colors bg-cosmic-dark border border-cosmic-purple text-cosmic-silver hover:bg-cosmic-purple/20\"\n                    role=\"radio\"\n                    aria-checked=\"false\"\n                    tabIndex={-1}\n                  >\n                    {preset.name}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor={customFrequencyId} className=\"block mb-2 text-cosmic-silver\">\n              Custom Frequency (Hz)\n            </label>\n            <div className=\"flex gap-2\">\n              <input\n                id={customFrequencyId}\n                type=\"number\"\n                min=\"20\"\n                max=\"20000\"\n                value={customFrequency}\n                onChange={(e) => {\n                  const newValue = Number(e.target.value);\n                  if (!Number.isNaN(newValue)) {\n                    setCustomFrequency(newValue);\n                  }\n                }}\n                className=\"flex-1 p-3 border rounded bg-cosmic-dark border-cosmic-purple text-cosmic-silver\"\n                aria-describedby=\"frequency-help\"\n              />\n              <Button onClick={handleCustomFrequencySubmit}>\n                Apply\n              </Button>\n            </div>\n            <p id=\"frequency-help\" className=\"mt-1 text-sm text-cosmic-silver\">\n              Enter a frequency between 20 Hz and 20,000 Hz\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"bg-cosmic-dark/50\">\n        <div className=\"space-y-4\">\n          <h3 className=\"mb-4 text-lg font-semibold text-cosmic-gold\">Duration & Controls</h3>\n          <div>\n            <label htmlFor={durationId} className=\"block mb-2 text-cosmic-silver\">\n              Duration (minutes)\n            </label>\n            <input\n              id={durationId}\n              type=\"number\"\n              min=\"1\"\n              max=\"60\"\n              value={duration}\n              onChange={(e) => {\n                const newValue = Number(e.target.value);\n                if (!Number.isNaN(newValue)) {\n                  onDurationChange(newValue);\n                }\n              }}\n              className=\"w-full p-3 border rounded bg-cosmic-dark border-cosmic-purple text-cosmic-silver\"\n            />\n          </div>\n\n          <div className=\"text-center\">\n            <Button\n              onClick={onPlayPause}\n              variant={isPlaying ? \"secondary\" : \"primary\"}\n            >\n              {isPlaying ? 'Pause Session' : 'Start Session'}\n            </Button>\n          </div>\n\n          <div className=\"text-center text-cosmic-silver\">\n            <p>Current Frequency: <span className=\"text-cosmic-gold\">{currentFrequency} Hz</span></p>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default FrequencyControls;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/hooks/useHealwave.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":121,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":121,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\n\nexport interface HealwaveSession {\n  id: string;\n  frequency: number;\n  duration: number;\n  startTime: Date;\n  isActive: boolean;\n}\n\nexport interface HealwaveState {\n  currentFrequency: number;\n  isPlaying: boolean;\n  volume: number;\n  duration: number;\n  timeRemaining: number;\n  sessions: HealwaveSession[];\n}\n\nexport const useHealwave = () => {\n  const [state, setState] = useState<HealwaveState>({\n    currentFrequency: 528,\n    isPlaying: false,\n    volume: 50,\n    duration: 10,\n    timeRemaining: 0,\n    sessions: []\n  });\n\n  const [intervalId, setIntervalId] = useState<ReturnType<typeof setInterval> | null>(null);\n\n  const setFrequency = useCallback((frequency: number) => {\n    setState(prev => ({ ...prev, currentFrequency: frequency }));\n  }, []);\n\n  const setVolume = useCallback((volume: number) => {\n    setState(prev => ({ ...prev, volume }));\n  }, []);\n\n  const setDuration = useCallback((duration: number) => {\n    setState(prev => ({ ...prev, duration, timeRemaining: duration * 60 }));\n  }, []);\n\n  const startSession = useCallback(() => {\n    const sessionId = `session-${Date.now()}`;\n    const newSession: HealwaveSession = {\n      id: sessionId,\n      frequency: state.currentFrequency,\n      duration: state.duration,\n      startTime: new Date(),\n      isActive: true\n    };\n\n    setState(prev => ({\n      ...prev,\n      isPlaying: true,\n      timeRemaining: prev.duration * 60,\n      sessions: [newSession, ...prev.sessions]\n    }));\n\n    const timer = setInterval(() => {\n      setState(prev => {\n        if (prev.timeRemaining <= 1) {\n          return { ...prev, isPlaying: false, timeRemaining: 0 };\n        }\n        return { ...prev, timeRemaining: prev.timeRemaining - 1 };\n      });\n    }, 1000);\n\n    setIntervalId(timer);\n  }, [state.currentFrequency, state.duration]);\n\n  const stopSession = useCallback(() => {\n    setState(prev => ({ ...prev, isPlaying: false }));\n    if (intervalId !== null && intervalId !== undefined) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n  }, [intervalId]);\n\n  const togglePlayPause = useCallback(() => {\n    if (state.isPlaying) {\n      stopSession();\n    } else {\n      startSession();\n    }\n  }, [state.isPlaying, startSession, stopSession]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  const getPersonalizedFrequency = useCallback((chartData?: Record<string, unknown>): number => {\n    if (chartData === null || chartData === undefined || typeof chartData !== 'object') return 528; // Default to 528 Hz (Love frequency)\n    \n    // Simple personalization based on chart data\n    // In a real implementation, this would use complex astrological calculations\n    const sunData = chartData.sun as Record<string, unknown> | undefined;\n    const sunSign = (typeof sunData === 'object' && sunData !== null && typeof sunData.sign === 'string') ? sunData.sign : 'Leo';\n    const frequencyMap: Record<string, number> = {\n      'Aries': 741,     // Throat Chakra - Expression\n      'Taurus': 417,    // Sacral Chakra - Creativity\n      'Gemini': 852,    // Third Eye - Communication\n      'Cancer': 639,    // Heart Chakra - Emotions\n      'Leo': 528,       // Solar Plexus - Confidence\n      'Virgo': 396,     // Root Chakra - Grounding\n      'Libra': 639,     // Heart Chakra - Balance\n      'Scorpio': 741,   // Throat Chakra - Transformation\n      'Sagittarius': 963, // Crown Chakra - Wisdom\n      'Capricorn': 396, // Root Chakra - Structure\n      'Aquarius': 852,  // Third Eye - Innovation\n      'Pisces': 963     // Crown Chakra - Spirituality\n    };\n\n    return frequencyMap[sunSign] ?? 528;\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (intervalId !== null && intervalId !== undefined) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [intervalId]);\n\n  useEffect(() => {\n    if (state.timeRemaining === 0 && state.isPlaying) {\n      stopSession();\n    }\n  }, [state.timeRemaining, state.isPlaying, stopSession]);\n\n  return {\n    ...state,\n    setFrequency,\n    setVolume,\n    setDuration,\n    startSession,\n    stopSession,\n    togglePlayPause,\n    formatTime,\n    getPersonalizedFrequency\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/firebase.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":3,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":3,"endColumn":12,"suggestions":[{"fix":{"range":[88,166],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// firebase.ts - Consolidated Firebase configuration\nexport * from '@cosmichub/config';\nconsole.log('🔥 Using optimized Firebase configuration from packages/config');","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/usePerformance.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":49,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":123,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":123,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":219,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":219,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":272,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":272,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":275,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":275,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":302,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":302,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":325,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":325,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\n\ninterface PerformanceMemoryInfo {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n}\n\ninterface PerformanceWithOptionalMemory extends Performance {\n  memory?: PerformanceMemoryInfo;\n}\n\nconst perf: PerformanceWithOptionalMemory = (typeof performance !== 'undefined'\n  ? performance\n  : ({} as Performance)) as PerformanceWithOptionalMemory;\n\nexport interface PerformanceMetrics {\n  duration: number;\n  startTime: number;\n  endTime: number;\n  memory?: number;\n  paintTime?: number;\n  loadTime?: number;\n}\n\nexport interface OperationMetrics {\n  operationId: string;\n  operationName: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  status: 'pending' | 'completed' | 'error';\n  error?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface PagePerformanceMetrics {\n  pageLoadTime: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  firstInputDelay: number;\n  cumulativeLayoutShift: number;\n  navigationTiming: PerformanceTiming;\n}\n\n/**\n * Core performance measurement hook\n */\nexport function usePerformance() {\n  const [isTracking, setIsTracking] = useState(false);\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const startTimeRef = useRef<number>(0);\n\n  const start = useCallback((): void => {\n    startTimeRef.current = performance.now();\n    setIsTracking(true);\n    setMetrics(null);\n  }, []);\n\n  const end = useCallback((): PerformanceMetrics | null => {\n    if (!isTracking) return null;\n\n    const endTime = performance.now();\n    const duration = endTime - startTimeRef.current;\n    \n    const newMetrics: PerformanceMetrics = {\n      duration,\n      startTime: startTimeRef.current,\n      endTime,\n  memory: perf.memory?.usedJSHeapSize,\n    };\n\n    setMetrics(newMetrics);\n    setIsTracking(false);\n    \n    return newMetrics;\n  }, [isTracking]);\n\n  const measure = useCallback(async <T>(\n    _operationName: string,\n    operation: () => Promise<T> | T\n  ): Promise<{ result: T; metrics: PerformanceMetrics }> => {\n    const startTime = performance.now();\n    \n    try {\n      const result = await operation();\n      const endTime = performance.now();\n      \n      const metrics: PerformanceMetrics = {\n        duration: endTime - startTime,\n        startTime,\n        endTime,\n  memory: perf.memory?.usedJSHeapSize,\n      };\n\n      return { result, metrics };\n  } catch (error) {\n      const endTime = performance.now();\n      \n      const metrics: PerformanceMetrics = {\n        duration: endTime - startTime,\n        startTime,\n        endTime,\n  memory: perf.memory?.usedJSHeapSize,\n      };\n\n      throw new Error(JSON.stringify({ error, metrics }));\n    }\n  }, []);\n\n  return {\n    isTracking,\n    metrics,\n    start,\n    end,\n    measure,\n  };\n}\n\n/**\n * Hook for tracking multiple operations\n */\nexport function useOperationTracking() {\n  const [operations, setOperations] = useState<Map<string, OperationMetrics>>(new Map());\n\n  const startOperation = useCallback((operationName: string, metadata?: Record<string, unknown>) => {\n    const operationId = `${operationName}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const operation: OperationMetrics = {\n      operationId,\n      operationName,\n      startTime: performance.now(),\n      status: 'pending',\n      metadata,\n    };\n\n    setOperations(prev => new Map(prev).set(operationId, operation));\n    return operationId;\n  }, []);\n\n  const endOperation = useCallback((operationId: string, error?: string) => {\n    setOperations(prev => {\n      const newMap = new Map(prev);\n      const operation = newMap.get(operationId);\n      \n    if (operation !== null && operation !== undefined) {\n        const endTime = performance.now();\n        const updatedOperation: OperationMetrics = {\n          ...operation,\n          endTime,\n          duration: endTime - operation.startTime,\n      status: (error !== null && error !== undefined && error !== '') ? 'error' : 'completed',\n          error,\n        };\n        newMap.set(operationId, updatedOperation);\n      }\n      \n      return newMap;\n    });\n  }, []);\n\n  const trackOperation = useCallback(async <T>(\n    operationName: string,\n    operation: () => Promise<T> | T,\n    metadata?: Record<string, unknown>\n  ): Promise<T> => {\n    const operationId = startOperation(operationName, metadata);\n    \n    try {\n      const result = await operation();\n      endOperation(operationId);\n      return result;\n    } catch (error) {\n      endOperation(operationId, error instanceof Error ? error.message : 'Unknown error');\n      throw error;\n    }\n  }, [startOperation, endOperation]);\n\n  const clearOperations = useCallback(() => {\n    setOperations(new Map());\n  }, []);\n\n  const getOperationsByStatus = useCallback((status: OperationMetrics['status']) => {\n    return Array.from(operations.values()).filter(op => op.status === status);\n  }, [operations]);\n\n  const getOperationStats = useCallback(() => {\n    const ops = Array.from(operations.values());\n    const completed = ops.filter(op => op.status === 'completed');\n    const errors = ops.filter(op => op.status === 'error');\n    const pending = ops.filter(op => op.status === 'pending');\n\n      const avgDuration = completed.length > 0\n        ? completed.reduce((sum, op) => sum + (typeof op.duration === 'number' ? op.duration : 0), 0) / completed.length\n      : 0;\n\n    return {\n      total: ops.length,\n      completed: completed.length,\n      errors: errors.length,\n      pending: pending.length,\n      averageDuration: avgDuration,\n    };\n  }, [operations]);\n\n  return {\n    operations: Array.from(operations.values()),\n    startOperation,\n    endOperation,\n    trackOperation,\n    clearOperations,\n    getOperationsByStatus,\n    getOperationStats,\n  };\n}\n\n/**\n * Hook for page-level performance monitoring\n */\nexport function usePagePerformance() {\n  const [metrics, setMetrics] = useState<Partial<PagePerformanceMetrics>>({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n  const collectMetrics = (): void => {\n      try {\n        const navigationTiming = performance.timing;\n        const pageLoadTime = navigationTiming.loadEventEnd - navigationTiming.navigationStart;\n\n        // Collect paint metrics if available\n        const paintEntries = performance.getEntriesByType('paint') as PerformanceEntry[];\n          const fcpEntry = paintEntries.find(entry => entry.name === 'first-contentful-paint');\n          const firstContentfulPaint = (fcpEntry !== null && fcpEntry !== undefined && typeof fcpEntry.startTime === 'number') ? fcpEntry.startTime : 0;\n\n        // Collect LCP if available\n        let largestContentfulPaint = 0;\n        if ('PerformanceObserver' in window) {\n          try {\n            const lcpObserver = new PerformanceObserver((entryList) => {\n              const entries = entryList.getEntries();\n              const lastEntry = entries[entries.length - 1];\n              if (lastEntry !== null && lastEntry !== undefined) {\n                largestContentfulPaint = lastEntry.startTime;\n                setMetrics(prev => ({\n                  ...prev,\n                  largestContentfulPaint,\n                }));\n              }\n            });\n            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n          } catch {\n            // LCP not supported\n          }\n        }\n\n        const pageMetrics: Partial<PagePerformanceMetrics> = {\n          pageLoadTime,\n          firstContentfulPaint,\n          largestContentfulPaint,\n          navigationTiming,\n        };\n\n        setMetrics(pageMetrics);\n        setIsLoading(false);\n  } catch {\n        setIsLoading(false);\n      }\n    };\n\n    // Collect metrics after page load\n  if (document.readyState === 'complete') {\n      collectMetrics();\n      return () => {}; // Return empty cleanup function\n    } else {\n      window.addEventListener('load', collectMetrics);\n      return () => window.removeEventListener('load', collectMetrics);\n    }\n  }, []);\n\n  const refreshMetrics = useCallback((): void => {\n    setIsLoading(true);\n    // Re-collect metrics\n    const navigationTiming = performance.timing;\n    const pageLoadTime = navigationTiming.loadEventEnd - navigationTiming.navigationStart;\n    \n    setMetrics({\n      pageLoadTime,\n      navigationTiming,\n    });\n    setIsLoading(false);\n  }, []);\n\n  return {\n    metrics,\n    isLoading,\n    refreshMetrics,\n  };\n}\n\n/**\n * Hook for memory usage monitoring\n */\nexport function useMemoryMonitoring() {\n  const [memoryInfo, setMemoryInfo] = useState<{\n    used: number;\n    total: number;\n    limit: number;\n  } | null>(null);\n\n  const updateMemoryInfo = useCallback((): void => {\n  if (perf.memory !== null && perf.memory !== undefined) {\n      const memory = perf.memory;\n      setMemoryInfo({\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    updateMemoryInfo();\n    \n    // Update every 5 seconds\n    const interval = setInterval(updateMemoryInfo, 5000);\n    return () => clearInterval(interval);\n  }, [updateMemoryInfo]);\n\n  const getMemoryUsagePercentage = useCallback((): number => {\n  if (memoryInfo === null || memoryInfo === undefined) return 0;\n    return (memoryInfo.used / memoryInfo.limit) * 100;\n  }, [memoryInfo]);\n\n  const formatBytes = useCallback((bytes: number): string => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Bytes';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return `${Math.round(bytes / Math.pow(1024, i) * 100) / 100} ${sizes[i]}`;\n  }, []);\n\n  return {\n    memoryInfo,\n    updateMemoryInfo,\n    getMemoryUsagePercentage,\n    formatBytes,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useUpgradeModal.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StripeSession' is defined but never used.","line":3,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { useSubscription, useAuth } from '@cosmichub/auth';\nimport { stripeService, type StripeSession } from '@cosmichub/integrations';\n\nexport interface UseUpgradeModalReturn {\n  isUpgradeModalOpen: boolean;\n  requiredFeature: string | undefined;\n  openUpgradeModal: (feature?: string) => void;\n  closeUpgradeModal: () => void;\n  handleUpgrade: (tier: 'Basic' | 'Pro' | 'Enterprise') => Promise<void>;\n}\n\n/**\n * Hook for managing upgrade modal state and subscription upgrades\n */\ninterface UpgradeModalOptions {\n  onError?: (message: string, error?: unknown) => void;\n  onSuccess?: (tier: string) => void;\n}\n\nexport const useUpgradeModal = (options: UpgradeModalOptions = {}): UseUpgradeModalReturn => {\n  const [isUpgradeModalOpen, setIsUpgradeModalOpen] = useState(false);\n  const [requiredFeature, setRequiredFeature] = useState<string | undefined>();\n  const { userTier } = useSubscription();\n  const { user } = useAuth();\n\n  const openUpgradeModal = useCallback((feature?: string) => {\n    setRequiredFeature(feature);\n    setIsUpgradeModalOpen(true);\n  }, []);\n\n  const closeUpgradeModal = useCallback(() => {\n    setIsUpgradeModalOpen(false);\n    setRequiredFeature(undefined);\n  }, []);\n\n  const handleUpgrade = useCallback(async (tier: 'Basic' | 'Pro' | 'Enterprise') => {\n    if (!user) {\n      options.onError?.('User not authenticated');\n      closeUpgradeModal();\n      return;\n    }\n    if (!stripeService) {\n      options.onError?.('Stripe service not available');\n      closeUpgradeModal();\n      return;\n    }\n    try {\n      const stripeTier = tier === 'Basic' ? 'premium' : tier === 'Pro' ? 'premium' : 'elite';\n      const successUrl = `${window.location.origin}/pricing/success?tier=${stripeTier}`;\n      const cancelUrl = `${window.location.origin}/pricing/cancel`;\n      await stripeService.createCheckoutSession({\n        tier: stripeTier,\n        userId: user.uid,\n        isAnnual: true,\n        successUrl,\n        cancelUrl,\n        feature: requiredFeature,\n        metadata: { sourceComponent: 'useUpgradeModal', originalTier: userTier }\n      });\n      await stripeService.updateUserSubscription(user.uid, stripeTier, true);\n      options.onSuccess?.(stripeTier);\n    } catch (err) {\n      options.onError?.('Upgrade failed', err);\n      closeUpgradeModal();\n    }\n  }, [user, userTier, requiredFeature, closeUpgradeModal, options]);\n\n  return {\n    isUpgradeModalOpen,\n    requiredFeature,\n    openUpgradeModal,\n    closeUpgradeModal,\n    handleUpgrade\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useUsageTracking.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { isNonEmptyString, safeJsonParse } from '@/utils/typeGuards';\n\ninterface UsageData {\n  chartsThisMonth: number;\n  savedCharts: number;\n  lastReset: string;\n}\n\nexport const useUsageTracking = () => {\n  const { user } = useAuth();\n  const [usage, setUsage] = useState<UsageData>({\n    chartsThisMonth: 0,\n    savedCharts: 0,\n    lastReset: new Date().toISOString().slice(0, 7) // YYYY-MM format\n  });\n\n  // Load usage from localStorage on mount\n  useEffect(() => {\n    if (!user) return;\n\n    const key = `usage_${user.uid}`;\n    const stored = localStorage.getItem(key);\n    if (!isNonEmptyString(stored)) return;\n\n    const parsedUsage = safeJsonParse<Partial<UsageData>>(stored, {});\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const lastReset = isNonEmptyString(parsedUsage.lastReset) ? parsedUsage.lastReset : currentMonth;\n\n    // Build merged usage with sane defaults\n    const merged: UsageData = {\n      chartsThisMonth: typeof parsedUsage.chartsThisMonth === 'number' ? parsedUsage.chartsThisMonth : 0,\n      savedCharts: typeof parsedUsage.savedCharts === 'number' ? parsedUsage.savedCharts : 0,\n      lastReset\n    };\n\n    if (merged.lastReset !== currentMonth) {\n      const resetUsage: UsageData = { ...merged, chartsThisMonth: 0, lastReset: currentMonth };\n      setUsage(resetUsage);\n      localStorage.setItem(key, JSON.stringify(resetUsage));\n    } else {\n      setUsage(merged);\n    }\n  }, [user]);\n\n  // Save usage to localStorage whenever it changes\n  useEffect(() => {\n    if (!user) return;\n    localStorage.setItem(`usage_${user.uid}`, JSON.stringify(usage));\n  }, [usage, user]);\n\n  const incrementChartCalculation = useCallback(() => {\n    setUsage(prev => ({ ...prev, chartsThisMonth: prev.chartsThisMonth + 1 }));\n  }, []);\n\n  const incrementSavedChart = useCallback(() => {\n    setUsage(prev => ({ ...prev, savedCharts: prev.savedCharts + 1 }));\n  }, []);\n\n  const decrementSavedChart = useCallback(() => {\n    setUsage(prev => ({ ...prev, savedCharts: Math.max(0, prev.savedCharts - 1) }));\n  }, []);\n\n  return {\n    usage,\n    incrementChartCalculation,\n    incrementSavedChart,\n    decrementSavedChart\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StrictMode' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":14,"column":33,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":14,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[592,620],"text":"(Boolean(import.meta.env.VITE_API_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":14,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":14,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[621,623],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createRoot } from 'react-dom/client';\nimport { StrictMode } from 'react';\nimport './index.css';\nimport App from './App';\nimport './pwa';\nimport './pwa-performance';\nimport { initializeNotifications } from './services/notificationManager';\nimport { devConsole } from './config/environment';\n\n// Enhanced environment-aware logging (silenced in production if devConsole.log noop)\ndevConsole.log?.('🚀 CosmicHub Frontend Starting...');\ndevConsole.log?.('📍 Environment:', import.meta.env.MODE);\ndevConsole.log?.('🌐 Base URL:', import.meta.env.BASE_URL);\ndevConsole.log?.('⚙️ API URL:', import.meta.env.VITE_API_URL || 'http://localhost:8001');\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  devConsole.error('❌ Root element not found');\n  throw new Error('Root element not found');\n}\n\ndevConsole.log?.('✅ Root element found, mounting React app...');\n\nconst root = createRoot(rootElement);\nroot.render(\n  // <StrictMode> // Temporarily disabled to prevent infinite reloads\n    <App />\n  // </StrictMode>\n);\n\ndevConsole.log?.('🎉 React app mounted successfully!');\n\n// Initialize push notifications and background sync\ninitializeNotifications().then((success) => {\n  if (success) {\n    devConsole.log?.('🔔 Push notifications initialized');\n  } else {\n    devConsole.warn?.('📵 Push notifications not available');\n  }\n}).catch((error) => {\n  devConsole.warn?.('⚠️ Failed to initialize notifications:', error);\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/AIInterpretation.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'auth' is assigned a value but never used.","line":45,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Calculator.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { devConsole } from '../config/environment';\nimport { useNavigate } from 'react-router-dom';\nimport { Card } from '@cosmichub/ui';\nimport { SimpleBirthForm } from '../components/SimpleBirthForm';\nimport { useBirthData } from '../contexts/BirthDataContext';\n\nconst Calculator: React.FC = () => {\n  const navigate = useNavigate();\n  const { birthData } = useBirthData();\n\n  devConsole.log?.('🧮 Calculator page rendered with birth data:', birthData);\n\n\n  const navigateToSystem = (system: string) => {\n    if (birthData === null) {\n      alert('Please enter your birth data first to access chart systems.');\n      return;\n    }\n    navigate(system);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center py-16 bg-gradient-to-br from-cosmic-purple/20 via-cosmic-blue/20 to-cosmic-gold/10 rounded-2xl border border-cosmic-silver/10\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl font-bold text-cosmic-gold mb-6 font-cinzel\">\n            Cosmic Calculator\n          </h1>\n          <p className=\"text-xl text-cosmic-silver/90 mb-8 font-playfair leading-relaxed\">\n            Your gateway to understanding the cosmic forces that shaped your birth moment.<br />\n            <span className=\"text-cosmic-gold\">One form. Multiple astrological systems. Infinite insights.</span>\n          </p>\n          \n          {/* Feature Highlights */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-8\">\n            {[\n              { icon: '🎯', title: 'Western Charts', desc: 'Tropical zodiac & houses' },\n              { icon: '🕉️', title: 'Vedic Analysis', desc: 'Sidereal & traditional' },\n              { icon: '🌌', title: 'Multi-System', desc: 'Compare all traditions' },\n              { icon: '🤖', title: 'AI Insights', desc: 'Intelligent interpretations' }\n            ].map((feature, index) => (\n              <div key={index} className=\"bg-cosmic-dark/30 rounded-lg p-4 border border-cosmic-purple/20\">\n                <div className=\"text-2xl mb-2\">{feature.icon}</div>\n                <h3 className=\"text-cosmic-gold font-semibold text-sm\">{feature.title}</h3>\n                <p className=\"text-cosmic-silver/70 text-xs\">{feature.desc}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Simple Birth Form */}\n      <SimpleBirthForm\n        title=\"Universal Birth Data\"\n        submitButtonText=\"Calculate All Charts\"\n        showSampleButton={true}\n      />\n\n      {/* Quick Navigation - Only show when data exists */}\n      {birthData !== null && (\n        <Card title=\"🚀 Quick Access to Chart Systems\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[\n              {\n                id: \"chart\",\n                title: \"Natal Chart\",\n                description: \"Classic Western astrology wheel with planets and aspects\",\n                icon: \"⭐\",\n                color: \"cosmic-gold\",\n                available: true\n              },\n              {\n                id: \"multi-system\",\n                title: \"Multi-System\",\n                description: \"Compare Western, Vedic, Uranian systems side by side\",\n                icon: \"🌍\",\n                color: \"cosmic-purple\",\n                available: true\n              },\n              {\n                id: \"numerology\",\n                title: \"Numerology\",\n                description: \"Life path, destiny, and personality numbers\",\n                icon: \"🔢\",\n                color: \"cosmic-blue\",\n                available: true\n              },\n              {\n                id: \"human-design\",\n                title: \"Human Design\",\n                description: \"Your energetic blueprint and strategy\",\n                icon: \"🧬\",\n                color: \"cosmic-silver\",\n                available: true\n              }\n            ].map((system) => (\n              <button\n                key={system.id}\n                onClick={() => navigateToSystem(`/${system.id}`)}\n                disabled={!system.available}\n                className={`p-6 rounded-xl border transition-all duration-300 text-left hover:scale-105 ${\n                  system.available\n                    ? `border-${system.color}/30 hover:border-${system.color}/50 bg-${system.color}/5 hover:bg-${system.color}/10`\n                    : 'border-gray-600 bg-gray-800/20 cursor-not-allowed opacity-50'\n                }`}\n              >\n                <div className=\"text-3xl mb-3\">{system.icon}</div>\n                <h3 className={`font-semibold mb-2 ${\n                  system.available ? `text-${system.color}` : 'text-gray-500'\n                }`}>\n                  {system.title}\n                </h3>\n                <p className=\"text-cosmic-silver/70 text-sm leading-relaxed\">\n                  {system.description}\n                </p>\n                {system.available && (\n                  <div className=\"mt-3 text-xs text-cosmic-silver/50\">\n                    ✨ Ready to calculate\n                  </div>\n                )}\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"mt-6 p-4 bg-cosmic-gold/10 rounded-lg border border-cosmic-gold/20\">\n            <div className=\"flex items-center gap-3\">\n              <span className=\"text-2xl\">💡</span>\n              <div>\n                <h4 className=\"text-cosmic-gold font-semibold\">Pro Tip</h4>\n                <p className=\"text-cosmic-silver/80 text-sm\">\n                  Your birth data is automatically saved and shared across all chart systems.\n                  Edit anytime by clicking the &quot;Edit&quot; button on any page.\n                </p>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Information Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card title=\"🎯 Precise Calculations\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-gold mt-1\">✦</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Swiss Ephemeris</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Industry-standard astronomical calculations</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-gold mt-1\">✦</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Multiple House Systems</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Placidus, Koch, Equal, Whole Sign options</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-gold mt-1\">✦</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Advanced Aspects</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Major and minor aspects with precise orbs</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <Card title=\"🔮 Integrated Systems\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-purple mt-1\">◆</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Cross-Traditional</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Western, Vedic, and Uranian astrology</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-purple mt-1\">◆</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Synthesis Views</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Combined insights from multiple systems</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-purple mt-1\">◆</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Modern Integration</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Numerology and Human Design compatibility</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ChartResults.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":100,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":100,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":213,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":213,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":273,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":273,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, Suspense } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@cosmichub/auth';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { ChartDisplay } from '../components';\nimport { CosmicLoading } from '../components/CosmicLoading';\nimport { saveChart, fetchChartData } from '../services/api';\nimport type { SaveChartRequest, SaveChartResponse } from '../services/api.types';\nimport { devConsole } from '../config/environment';\n\ninterface StoredBirthData {\n  date: string;  // \"2023-06-15\" format\n  time: string;  // \"14:30\" format\n  location: string;\n}\n\ninterface BackendPlanet {\n  position: number;\n  house: number;\n  retrograde?: boolean;\n  speed?: number;\n}\n\ninterface BackendHouse {\n  house: number;\n  cusp: number;\n}\n\ninterface BackendAspect {\n  point1: string;\n  point2: string;\n  aspect: string;\n  orb: number;\n  exact: boolean;\n  point1_sign?: string;\n  point2_sign?: string;\n  point1_house?: number;\n  point2_house?: number;\n}\n\ninterface BackendChartResponse {\n  planets?: Record<string, BackendPlanet>;\n  houses?: Record<string, BackendHouse>;\n  aspects?: BackendAspect[];\n  latitude?: number;\n  longitude?: number;\n  timezone?: string;\n  julian_day?: number;\n  angles?: Record<string, number>;\n}\n\n// Type guard for BackendChartResponse\nfunction isBackendChartResponse(data: unknown): data is BackendChartResponse {\n  const response = data as BackendChartResponse;\n  return typeof response === 'object' && \n         response !== null &&\n         (!('planets' in response) || typeof response.planets === 'object') &&\n         (!('houses' in response) || typeof response.houses === 'object') &&\n         (!('aspects' in response) || Array.isArray(response.aspects)) &&\n         (!('latitude' in response) || typeof response.latitude === 'number') &&\n         (!('longitude' in response) || typeof response.longitude === 'number') &&\n         (!('timezone' in response) || typeof response.timezone === 'string') &&\n         (!('julian_day' in response) || typeof response.julian_day === 'number') &&\n         (!('angles' in response) || typeof response.angles === 'object');\n}\n\ninterface ExtendedChartData {\n  planets: Record<string, BackendPlanet>;\n  houses: Array<{ house: number; number: number; cusp: number; sign: string }>;\n  aspects: BackendAspect[];\n  latitude: number;\n  longitude: number;\n  timezone: string;\n  julian_day: number;\n  angles: Record<string, number>;\n}\n\nconst ChartResults: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [chartData, setChartData] = useState<ExtendedChartData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Save chart mutation\n  const saveMutation = useMutation<SaveChartResponse, unknown, SaveChartRequest>({\n    mutationFn: saveChart,\n    onSuccess: () => {\n      void queryClient.invalidateQueries({ queryKey: ['savedCharts'] });\n      void alert('Chart saved successfully!');\n    },\n    onError: (error: unknown) => {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      devConsole.error('❌ Error saving chart:', error);\n      void alert(`Failed to save chart: ${message}`);\n    }\n  });\n\n  const handleSaveChart = () => {\n    if (user === null) {\n      void alert('Please sign in to save your chart');\n      void navigate('/login');\n      return;\n    }\n\n    // Get the stored birth data that was used to calculate this chart\n    const storedBirthData = sessionStorage.getItem('birthData');\n    if (storedBirthData === null || chartData === null) {\n      void alert('No chart data found. Please generate a chart first.');\n      return;\n    }\n\n    function isStoredBirthData(data: unknown): data is StoredBirthData {\n      const parsed = data as StoredBirthData;\n      return (\n        typeof parsed === 'object' &&\n        parsed !== null &&\n        typeof parsed.date === 'string' &&\n        typeof parsed.time === 'string' &&\n        typeof parsed.location === 'string'\n      );\n    }\n\n    let birthData: StoredBirthData;\n    try {\n      const parsed: unknown = JSON.parse(storedBirthData);\n      if (!isStoredBirthData(parsed)) {\n        throw new Error('Invalid birth data format');\n      }\n      birthData = parsed;\n    } catch {\n      void alert('Invalid birth data format');\n      return;\n    }\n    \n    // Convert stored data to the format expected by the backend\n    const dateParts = birthData.date.split('-').map(Number);\n    const timeParts = birthData.time.split(':').map(Number);\n    const [year = 0, month = 1, day = 1] = dateParts;\n    const [hour = 0, minute = 0] = timeParts;\n    \n    const saveData: SaveChartRequest = {\n      year,\n      month,\n      day,\n      hour,\n      minute,\n      city: birthData.location,\n      house_system: 'P', // Default to Placidus\n      chart_name: `${birthData.location} ${birthData.date}`,\n      lat: chartData.latitude,\n      lon: chartData.longitude,\n      timezone: chartData.timezone\n    };\n\n    void saveMutation.mutate(saveData);\n  };\n\n  // Utility function to get zodiac sign from position\n  const getZodiacSignName = (position: number): string => {\n    const zodiacSigns = [\n      \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\",\n      \"Libra\", \"Scorpio\", \"Sagittarius\", \"Capricorn\", \"Aquarius\", \"Pisces\"\n    ];\n    if (typeof position !== 'number' || Number.isNaN(position) || position < 0) return 'Unknown';\n    const signIndex = Math.floor(position / 30) % 12;\n    return signIndex >= 0 && signIndex < zodiacSigns.length ? zodiacSigns[signIndex] : 'Unknown';\n  };\n\n  useEffect(() => {\n    const transformChartData = (backendData: BackendChartResponse): ExtendedChartData => {\n      // Convert houses object to array format (defensive for missing data)\n      const housesSource: Record<string, BackendHouse> = typeof backendData.houses === 'object' && backendData.houses !== null ? backendData.houses : {};\n      const housesArray = Object.entries(housesSource)\n        .sort(([a], [b]) => {\n          const numA = Number(a.replace('house_', ''));\n          const numB = Number(b.replace('house_', ''));\n          if (Number.isNaN(numA)) return -1;\n          if (Number.isNaN(numB)) return 1;\n          return numA - numB;\n        })\n        .map(([key, houseData]) => {\n          const numStr = key.replace('house_', '');\n          const houseNumber = Number.isNaN(Number(numStr)) ? 0 : Number(numStr);\n          const house = typeof houseData.house === 'number' ? houseData.house : houseNumber;\n          return {\n            house,\n            number: house,\n            cusp: houseData.cusp,\n            sign: getZodiacSignName(houseData.cusp)\n          };\n        });\n\n      const latitude = backendData.latitude ?? 0;\n      const longitude = backendData.longitude ?? 0;\n      const timezone = backendData.timezone ?? 'Unknown';\n      const julian_day = backendData.julian_day ?? 0;\n      const angles = backendData.angles ?? {};\n\n      return {\n        planets: backendData.planets ?? {},\n        houses: housesArray,\n        aspects: backendData.aspects ?? [],\n        latitude,\n        longitude,\n        timezone,\n        julian_day,\n        angles\n      };\n    };\n\n    const calculateChart = async () => {\n      try {\n        // Get birth data from session storage\n        const storedBirthData = sessionStorage.getItem('birthData');\n        if (storedBirthData === null || storedBirthData === '') {\n          setError('No birth data found. Please go back and enter your birth information.');\n          setLoading(false);\n          return;\n        }\n\n        function isStoredBirthData(data: unknown): data is StoredBirthData {\n          const parsed = data as StoredBirthData;\n          return (\n            typeof parsed === 'object' &&\n            parsed !== null &&\n            typeof parsed.date === 'string' &&\n            typeof parsed.time === 'string' &&\n            typeof parsed.location === 'string'\n          );\n        }\n\n        // Parse stored data and transform to backend format\n        let parsedData: StoredBirthData;\n        try {\n          const parsed: unknown = JSON.parse(storedBirthData);\n          if (!isStoredBirthData(parsed)) {\n            throw new Error('Invalid birth data format');\n          }\n          parsedData = parsed;\n        } catch {\n          throw new Error('Invalid birth data format');\n        }\n        \n        // Use the API service instead of direct fetch\n        const rawChart = await fetchChartData({\n          year: (Number.isNaN(Number(parsedData.date.split('-')[0])) ? 0 : Number(parsedData.date.split('-')[0])),\n          month: (Number.isNaN(Number(parsedData.date.split('-')[1])) ? 1 : Number(parsedData.date.split('-')[1])),\n          day: (Number.isNaN(Number(parsedData.date.split('-')[2])) ? 1 : Number(parsedData.date.split('-')[2])),\n          hour: (Number.isNaN(Number(parsedData.time.split(':')[0])) ? 0 : Number(parsedData.time.split(':')[0])),\n          minute: (Number.isNaN(Number(parsedData.time.split(':')[1])) ? 0 : Number(parsedData.time.split(':')[1])),\n          city: parsedData.location\n        });\n\n        if (!isBackendChartResponse(rawChart)) {\n          throw new Error('Invalid chart data received from server');\n        }\n\n        // Transform the backend data to frontend format  \n        const transformedChart = transformChartData(rawChart);\n        setChartData(transformedChart);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An error occurred while calculating the chart');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    void calculateChart();\n  }, []);\n\n  const handleBackToCalculator = () => {\n    void navigate('/calculator');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n        <CosmicLoading size=\"lg\" message=\"Calculating your birth chart...\" />\n        <p className=\"text-cosmic-silver mt-4 text-center\">\n          Analyzing planetary positions and aspects...\n        </p>\n      </div>\n    );\n  }\n\n  if (error !== null && error !== '') {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center\">\n        <div className=\"bg-red-900/20 border border-red-500/50 rounded-lg p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold text-red-400 mb-2\">\n            Chart Calculation Error\n          </h2>\n          <p className=\"text-cosmic-silver mb-4\">{error}</p>\n          <button\n            onClick={handleBackToCalculator}\n            className=\"bg-cosmic-purple hover:bg-cosmic-purple/80 text-white px-6 py-2 rounded-lg transition-colors\"\n          >\n            Back to Calculator\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Your Birth Chart\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80 font-playfair\">\n          Explore your cosmic blueprint\n        </p>\n      </div>\n\n      {chartData !== null && (\n        <>\n          <div className=\"flex justify-center mb-6\">\n            <button\n              onClick={handleBackToCalculator}\n              className=\"bg-cosmic-purple/20 hover:bg-cosmic-purple/30 text-cosmic-silver border border-cosmic-purple/50 px-4 py-2 rounded-lg transition-colors mr-4\"\n            >\n              ← New Chart\n            </button>\n            <button\n              onClick={handleSaveChart}\n              className=\"bg-cosmic-gold hover:bg-cosmic-gold/80 text-cosmic-dark px-4 py-2 rounded-lg transition-colors\"\n            >\n              💾 Save Chart\n            </button>\n          </div>\n          \n          <Suspense fallback={<CosmicLoading />}>\n            <ChartDisplay\n              chart={chartData}\n              onSaveChart={handleSaveChart}\n            />\n          </Suspense>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ChartResults;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ChartWheel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/GeneKeys.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/HumanDesign.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":110,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":110,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { devConsole } from '../config/environment';\nimport { Card } from '@cosmichub/ui';\nimport { useBirthData } from '../contexts/BirthDataContext';\nimport { SimpleBirthForm } from '../components/SimpleBirthForm';\nimport HumanDesignChart from '../components/HumanDesignChart/HumanDesignChart';\nimport type { HumanDesignData } from '../components/HumanDesignChart/types';\nimport type { ChartBirthData } from '@cosmichub/types';\n\nconst HumanDesign: React.FC = () => {\n  const { birthData, isDataValid, setBirthData } = useBirthData();\n  const [humanDesignData, setHumanDesignData] = useState<HumanDesignData | null>(null);\n\n  const handleBirthDataSubmit = (data: ChartBirthData): void => {\n    // Birth data is already set in context by SimpleBirthForm\n    // No navigation needed - stay on this page and show the human design chart\n    // Helper type for the logger\n    interface Logger {\n      log?: (msg: string, data: unknown) => void;\n    }\n\n    // Type-safe logging helper\n    const log = (msg: string, data: unknown): void => {\n      const logger = devConsole as Logger | null | undefined;\n      const logFn = logger?.log;\n      if (typeof logFn === 'function') {\n        logFn(msg, data);\n      }\n    };\n\n    log('🧬 Human Design birth data submitted', data);\n  };\n\n  // Helper function to format birth info from calculation result\n  const formatBirthInfo = (birthInfo: HumanDesignData['birth_info']): { date: string; time: string; coordinates: string; timezone: string; } | null => {\n    if (birthInfo === null || birthInfo === undefined) return null;\n\n    // Parse the ISO string more carefully to preserve the original date\n    const consciousTime = birthInfo.conscious_time;\n    const [datePart, timePart] = consciousTime.split('T');\n    const [year, month, day] = datePart.split('-').map(Number);\n    const [hour, minute] = timePart.split(':').map(Number);\n    \n    // Use the original input values to avoid timezone conversion issues\n    return {\n      date: `${month}/${day}/${year}`,\n      time: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,\n      coordinates: `${birthInfo.location.latitude.toFixed(2)}°, ${birthInfo.location.longitude.toFixed(2)}°`,\n      timezone: birthInfo.location.timezone\n    };\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Human Design Chart\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80\">\n          Discover your unique energy type, strategy, and life purpose through the Human Design system\n        </p>\n      </div>\n\n  {/* Birth Data Input - Only show if no data */}\n  {(birthData === null || birthData === undefined) && (\n        <SimpleBirthForm\n          title=\"Enter Birth Data for Human Design\"\n          submitButtonText=\"Generate Human Design Chart\"\n          showSampleButton={true}\n          onSubmit={handleBirthDataSubmit}\n        />\n      )}\n\n      {/* Human Design Chart Display */}\n      {birthData !== null && birthData !== undefined && isDataValid === true && (\n        <div className=\"space-y-6\">\n          {/* Control Panel */}\n          <Card title=\"Chart Controls\">\n            <div className=\"flex flex-wrap gap-6 items-center justify-between\">\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"text-cosmic-silver\">\n                  <span className=\"text-cosmic-gold font-semibold\">Your Chart Type:</span> Human Design\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={() => setBirthData(null)}\n                  className=\"px-4 py-2 bg-cosmic-purple/20 border border-cosmic-purple/30 rounded-lg hover:bg-cosmic-purple/30 transition-colors text-cosmic-silver\"\n                >\n                  📝 Edit Birth Data\n                </button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Human Design Chart Component */}\n          <HumanDesignChart \n            birthData={birthData ?? undefined}\n            onCalculate={(data: ChartBirthData) => setBirthData(data)}\n            onHumanDesignCalculated={(hdData: HumanDesignData) => setHumanDesignData(hdData)}\n          />\n\n          {/* Birth Information */}\n          <Card title=\"Birth Information\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {humanDesignData?.birth_info !== undefined && humanDesignData.birth_info !== null ? (\n                // Show birth info from Human Design calculation result\n                (() => {\n                  const birthInfo = formatBirthInfo(humanDesignData.birth_info);\n                  return (\n                    <>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Date</div>\n                        <div className=\"text-cosmic-silver\">{birthInfo?.date}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Time</div>\n                        <div className=\"text-cosmic-silver\">{birthInfo?.time}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Location</div>\n                        <div className=\"text-cosmic-silver\">{humanDesignData.birth_info.location.timezone}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Coordinates</div>\n                        <div className=\"text-cosmic-silver text-sm\">{birthInfo?.coordinates}</div>\n                      </div>\n                    </>\n                  );\n                })()\n              ) : (\n                // Fallback to context birth data (shown before calculation)\n                <>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Date</div>\n                    <div className=\"text-cosmic-silver\">\n                      {birthData !== null && birthData !== undefined && `${birthData.month}/${birthData.day}/${birthData.year}`}\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Time</div>\n                    <div className=\"text-cosmic-silver\">\n                      {birthData !== null && birthData !== undefined && `${String(birthData.hour).padStart(2, '0')}:${String(birthData.minute).padStart(2, '0')}`}\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Location</div>\n                    <div className=\"text-cosmic-silver\">\n                      {birthData?.city ?? 'Not specified'}\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Coordinates</div>\n                    <div className=\"text-cosmic-silver text-sm\">\n                      {birthData !== null && birthData !== undefined && \n                       typeof birthData.lat === 'number' && typeof birthData.lon === 'number'\n                        ? `${birthData.lat.toFixed(2)}°, ${birthData.lon.toFixed(2)}°`\n                        : 'Auto-detected'\n                      }\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </Card>\n\n          {/* Educational Information */}\n          <Card title=\"About Human Design\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-cosmic-gold\">The 5 Energy Types</h3>\n                <div className=\"space-y-2 text-sm text-cosmic-silver\">\n                  <div className=\"flex justify-between\">\n                    <span>• Manifestor (9%)</span>\n                    <span className=\"text-cosmic-gold\">Initiators</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Generator (37%)</span>\n                    <span className=\"text-cosmic-gold\">Builders</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Manifesting Generator (33%)</span>\n                    <span className=\"text-cosmic-gold\">Multi-passionate</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Projector (20%)</span>\n                    <span className=\"text-cosmic-gold\">Guides</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Reflector (1%)</span>\n                    <span className=\"text-cosmic-gold\">Evaluators</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-cosmic-gold\">Key Components</h3>\n                <div className=\"space-y-2 text-sm text-cosmic-silver\">\n                  <div><span className=\"text-cosmic-gold\">Strategy:</span> Your decision-making approach</div>\n                  <div><span className=\"text-cosmic-gold\">Authority:</span> Your inner guidance system</div>\n                  <div><span className=\"text-cosmic-gold\">Profile:</span> Your personality theme</div>\n                  <div><span className=\"text-cosmic-gold\">Centers:</span> Energy hubs in your body</div>\n                  <div><span className=\"text-cosmic-gold\">Gates:</span> Specific traits and gifts</div>\n                  <div><span className=\"text-cosmic-gold\">Channels:</span> Consistent life forces</div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HumanDesign;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/MultiSystemChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Numerology.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/PerformanceMonitoring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ProfileSimple.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":6,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useAuth } from '@cosmichub/auth';\nimport { useNavigate } from 'react-router-dom';\n\nconst ProfileSimple: React.FC = (): JSX.Element => {\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n\n  if (user === null || user === undefined) {\n    return <div>Loading...</div>;\n  }\n\n  const handleSignOut = (): void => {\n    void (async () => {\n      await signOut();\n      navigate('/login');\n    })();\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl space-y-6\">\n      <h1 className=\"text-3xl font-bold text-cosmic-gold\">Profile</h1>\n      \n      <Card title=\"Account Overview\">\n        <div className=\"space-y-4\" role=\"list\" aria-label=\"Account details\">\n          <div className=\"flex justify-between\" role=\"listitem\" aria-labelledby=\"email-label\">\n            <span id=\"email-label\" className=\"text-cosmic-silver\">Email</span>\n            <span className=\"text-cosmic-gold\" aria-label={`User email address: ${user.email}`}>{user.email}</span>\n          </div>\n          <div className=\"flex justify-between\" role=\"listitem\" aria-labelledby=\"account-id-label\">\n            <span id=\"account-id-label\" className=\"text-cosmic-silver\">Account ID</span>\n            <span className=\"text-cosmic-gold font-mono text-sm\" aria-label={`User account ID: ${user.uid.slice(0, 8)}...`}>\n              {user.uid.slice(0, 8)}...\n            </span>\n          </div>\n        </div>\n      </Card>\n\n      <Card title=\"Subscription\">\n        <div className=\"text-center space-y-4\" role=\"status\" aria-label=\"Subscription status\">\n          <p className=\"text-cosmic-silver\">Free Tier</p>\n          <Button \n            onClick={() => navigate('/upgrade')} \n            variant=\"primary\"\n            aria-label=\"Upgrade to Premium subscription for additional features.\"\n          >\n            Upgrade to Premium\n          </Button>\n        </div>\n      </Card>\n      \n      <div className=\"text-center mt-6\">\n        <Button \n          onClick={handleSignOut} \n          variant=\"secondary\"\n          aria-label=\"Sign out of your account and return to the login page.\"\n        >\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileSimple;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SavedCharts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":28,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":28,"endColumn":68,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1005,1005],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1005,1005],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":36,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":68},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":42,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":42,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":45},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":102,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":102,"endColumn":97}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { fetchSavedCharts, deleteChart, type SavedChart } from '../services/api';\nimport type { ChartId } from '../services/api.types';\nimport { CosmicLoading } from '../components/CosmicLoading';\nimport { devConsole } from '../config/environment';\n\nconst SavedCharts: React.FC = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  // Fetch saved charts\n  const { data: charts = [], isLoading, error } = useQuery({\n    queryKey: ['savedCharts'],\n    queryFn: fetchSavedCharts,\n  enabled: user !== null,\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  // Delete chart mutation\n  const deleteMutation = useMutation({\n    mutationFn: deleteChart,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['savedCharts'] });\n    },\n    onError: (error) => {\n      devConsole.error('❌ Error deleting chart:', error);\n      alert('Failed to delete chart. Please try again.');\n    },\n  });\n\n  const handleDeleteChart = (chartId: string, chartName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${chartName}\"? This action cannot be undone.`)) {\n      deleteMutation.mutate(chartId as ChartId);\n    }\n  };\n\n  const handleViewChart = (chart: SavedChart) => {\n    // Store chart data and navigate to chart view\n    // You could store in context or session storage\n    sessionStorage.setItem('selectedChart', JSON.stringify(chart));\n    navigate('/chart');\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  if (user === null) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-blue/20 to-cosmic-purple/20 rounded-2xl border border-cosmic-silver/10\">\n          <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n            Saved Charts\n          </h1>\n          <p className=\"text-xl text-cosmic-silver/80 font-playfair mb-8\">\n            Please sign in to view your saved charts\n          </p>\n          <Button onClick={() => navigate('/login')} className=\"bg-cosmic-purple hover:bg-cosmic-purple/80\">\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-blue/20 to-cosmic-purple/20 rounded-2xl border border-cosmic-silver/10\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Saved Charts\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80 font-playfair\">\n          Access your personal collection of astrological charts\n        </p>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"flex justify-center py-16\">\n          <CosmicLoading size=\"lg\" message=\"Loading your saved charts...\" />\n        </div>\n      )}\n\n      {/* Error State */}\n  {error !== null && (\n        <Card title=\"Error Loading Charts\">\n          <div className=\"text-center py-8\">\n            <div className=\"text-red-400 mb-4\">Failed to load saved charts</div>\n            <p className=\"text-cosmic-silver/70 mb-4\">\n              {error instanceof Error ? error.message : 'An unknown error occurred'}\n            </p>\n            <Button onClick={() => queryClient.invalidateQueries({ queryKey: ['savedCharts'] })}>\n              Retry\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Charts Grid */}\n  {isLoading === false && error === null && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {charts.length === 0 ? (\n            /* Empty State */\n            <div className=\"md:col-span-2 lg:col-span-3 text-center py-16\">\n              <div className=\"w-24 h-24 bg-cosmic-purple/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-4xl\">📊</span>\n              </div>\n              <h3 className=\"text-2xl font-semibold text-cosmic-gold mb-4 font-playfair\">\n                No Saved Charts Yet\n              </h3>\n              <p className=\"text-cosmic-silver/80 mb-8 max-w-md mx-auto\">\n                Start creating charts to build your personal cosmic library. \n                All your charts will be saved here for easy access.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <button \n                  onClick={() => navigate('/calculator')}\n                  className=\"px-8 py-3 bg-gradient-to-r from-cosmic-purple to-cosmic-blue hover:from-cosmic-purple/80 hover:to-cosmic-blue/80 text-white rounded-lg transition-all duration-300 font-semibold\"\n                >\n                  Create Birth Chart\n                </button>\n                <button \n                  onClick={() => navigate('/numerology')}\n                  className=\"px-8 py-3 border border-cosmic-silver/30 hover:border-cosmic-silver/50 text-cosmic-silver hover:bg-cosmic-silver/10 rounded-lg transition-all duration-300 font-semibold\"\n                >\n                  Calculate Numerology\n                </button>\n              </div>\n            </div>\n          ) : (\n            /* Charts Display */\n            charts.map((chart) => (\n              <Card key={chart.id} title=\"\">\n                <div className=\"space-y-4\">\n                  {/* Chart Header */}\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-cosmic-gold mb-1\">\n                        {chart.name !== null && chart.name !== ''\n                          ? chart.name\n                          : `${chart.birth_location !== null && chart.birth_location !== '' ? chart.birth_location : 'Unknown'} Chart`}\n                      </h3>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs bg-cosmic-purple/20 text-cosmic-purple rounded\">\n                          {chart.chart_type !== null && chart.chart_type !== '' ? chart.chart_type : 'Natal'}\n                        </span>\n                        <span className=\"text-cosmic-silver/70 text-sm\">\n                          {formatDate(chart.created_at)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Chart Details */}\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-cosmic-silver/70\">Birth Date:</span>\n                      <span className=\"text-cosmic-silver\">{chart.birth_date}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-cosmic-silver/70\">Birth Time:</span>\n                      <span className=\"text-cosmic-silver\">{chart.birth_time}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-cosmic-silver/70\">Location:</span>\n                      <span className=\"text-cosmic-silver\">{chart.birth_location}</span>\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2 pt-4 border-t border-cosmic-silver/10\">\n                    <Button\n                      onClick={() => handleViewChart(chart)}\n                      className=\"flex-1 bg-cosmic-gold hover:bg-cosmic-gold/80 text-cosmic-dark\"\n                    >\n                      View Chart\n                    </Button>\n                    <Button\n                      onClick={() => handleDeleteChart(chart.id, chart.name)}\n                      variant=\"secondary\"\n                      className=\"text-red-400 hover:text-red-300 hover:bg-red-500/10\"\n                      disabled={deleteMutation.isPending}\n                    >\n                      {deleteMutation.isPending ? '...' : 'Delete'}\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n        <h3 className=\"text-xl font-semibold text-cosmic-gold mb-6 font-playfair flex items-center\">\n          <span className=\"w-8 h-8 bg-cosmic-gold/20 rounded-lg flex items-center justify-center mr-3\">\n            ⚡\n          </span>\n          Quick Actions\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button \n            onClick={() => navigate('/calculator')}\n            className=\"flex items-center p-4 bg-cosmic-dark/30 rounded-lg border border-cosmic-silver/10 hover:border-cosmic-purple/30 transition-colors duration-300 group\"\n          >\n            <div className=\"w-12 h-12 bg-cosmic-purple/20 rounded-lg flex items-center justify-center mr-4 group-hover:bg-cosmic-purple/30 transition-colors duration-300\">\n              <span className=\"text-xl\">🔮</span>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold text-cosmic-gold\">Birth Chart</h4>\n              <p className=\"text-cosmic-silver/70 text-sm\">Create natal chart</p>\n            </div>\n          </button>\n\n          <button \n            onClick={() => navigate('/numerology')}\n            className=\"flex items-center p-4 bg-cosmic-dark/30 rounded-lg border border-cosmic-silver/10 hover:border-cosmic-gold/30 transition-colors duration-300 group\"\n          >\n            <div className=\"w-12 h-12 bg-cosmic-gold/20 rounded-lg flex items-center justify-center mr-4 group-hover:bg-cosmic-gold/30 transition-colors duration-300\">\n              <span className=\"text-xl\">📊</span>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold text-cosmic-gold\">Numerology</h4>\n              <p className=\"text-cosmic-silver/70 text-sm\">Calculate numbers</p>\n            </div>\n          </button>\n\n          <button \n            onClick={() => navigate('/human-design')}\n            className=\"flex items-center p-4 bg-cosmic-dark/30 rounded-lg border border-cosmic-silver/10 hover:border-cosmic-silver/30 transition-colors duration-300 group\"\n          >\n            <div className=\"w-12 h-12 bg-cosmic-silver/20 rounded-lg flex items-center justify-center mr-4 group-hover:bg-cosmic-silver/30 transition-colors duration-300\">\n              <span className=\"text-xl\">🧬</span>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold text-cosmic-gold\">Human Design</h4>\n              <p className=\"text-cosmic-silver/70 text-sm\">Energy blueprint</p>\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SavedCharts;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SignUp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionCancel.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":16,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[622,629],"text":"feature != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[622,629],"text":"feature ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[622,629],"text":"Boolean(feature)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1451,1458],"text":"(feature != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1451,1458],"text":"(feature ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1451,1458],"text":"(Boolean(feature))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { FaTimesCircle, FaArrowLeft, FaCreditCard } from 'react-icons/fa';\n\nconst SubscriptionCancel: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  \n  const tier = searchParams.get('tier') ?? 'premium';\n  const feature = searchParams.get('feature');\n\n  const handleRetryCheckout = () => {\n    // Redirect back to pricing page with the same tier pre-selected\n    const url = new URL('/pricing', window.location.origin);\n    if (tier) url.searchParams.set('tier', tier);\n    if (feature) url.searchParams.set('feature', feature);\n    navigate(`/pricing?${url.searchParams.toString()}`);\n  };\n\n  const handleReturnToDashboard = () => {\n    navigate('/', { replace: true });\n  };\n\n  const handleBrowseFeatures = () => {\n    navigate('/upgrade-demo');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\">\n        <FaTimesCircle className=\"w-16 h-16 text-orange-500 mx-auto mb-4\" />\n        \n        <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">\n          Subscription Cancelled\n        </h1>\n        \n        <p className=\"text-cosmic-silver mb-6\">\n          No worries! Your checkout was cancelled and no charges were made to your account.\n        </p>\n\n        {feature && (\n          <div className=\"bg-blue-50 rounded-lg p-4 mb-6\">\n            <p className=\"text-sm text-blue-700\">\n              <span className=\"font-semibold\">{feature}</span> is still waiting for you! \n              You can try upgrading again anytime.\n            </p>\n          </div>\n        )}\n\n        <div className=\"space-y-4\">\n          <button\n            onClick={handleRetryCheckout}\n            className=\"w-full cosmic-button flex items-center justify-center space-x-2\"\n          >\n            <FaCreditCard className=\"w-4 h-4\" />\n            <span>Try Again</span>\n          </button>\n\n          <button\n            onClick={handleBrowseFeatures}\n            className=\"w-full bg-cosmic-purple/10 hover:bg-cosmic-purple/20 text-cosmic-purple py-3 px-4 rounded-lg font-semibold transition-colors\"\n          >\n            Browse Premium Features\n          </button>\n\n          <button\n            onClick={handleReturnToDashboard}\n            className=\"w-full bg-gray-200 hover:bg-gray-300 text-cosmic-dark py-3 px-4 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2\"\n          >\n            <FaArrowLeft className=\"w-4 h-4\" />\n            <span>Return to Dashboard</span>\n          </button>\n        </div>\n\n        <div className=\"mt-8 pt-6 border-t border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-cosmic-dark mb-3\">\n            Why Upgrade to CosmicHub {tier === 'elite' ? 'Elite' : 'Premium'}?\n          </h3>\n          \n          <ul className=\"text-sm text-cosmic-silver space-y-2 text-left\">\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-green-500 mt-0.5\">•</span>\n              <span>Unlimited chart calculations</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-green-500 mt-0.5\">•</span>\n              <span>Advanced AI interpretations</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-green-500 mt-0.5\">•</span>\n              <span>Priority customer support</span>\n            </li>\n            {tier === 'elite' && (\n              <>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500 mt-0.5\">•</span>\n                  <span>Multi-system astrology analysis</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500 mt-0.5\">•</span>\n                  <span>Synastry compatibility reports</span>\n                </li>\n              </>\n            )}\n          </ul>\n        </div>\n\n        <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n          <p className=\"text-xs text-gray-600\">\n            Questions about our plans? Contact us at{' '}\n            <a \n              href=\"mailto:support@cosmichub.app\"\n              className=\"text-cosmic-purple hover:text-cosmic-purple-dark underline\"\n            >\n              support@cosmichub.app\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionCancel;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionCancelledPage.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/ui' import is duplicated.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":5,"endColumn":38},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":50,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2440,2665],"text":" You&apos;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2440,2665],"text":" You&lsquo;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2440,2665],"text":" You&#39;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2440,2665],"text":" You&rsquo;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":95,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4477,4594],"text":"\n                We&apos;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4477,4594],"text":"\n                We&lsquo;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4477,4594],"text":"\n                We&#39;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4477,4594],"text":"\n                We&rsquo;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaTimesCircle, FaArrowLeft, FaCreditCard, FaCommentDots, FaSyncAlt } from 'react-icons/fa';\nimport { Button } from '@cosmichub/ui';\nimport { Card } from '@cosmichub/ui';\n\nexport const SubscriptionCancelledPage: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Cancellation Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 bg-orange-100 rounded-full mb-4\">\n              <FaTimesCircle className=\"w-10 h-10 text-orange-600\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">\n              Subscription Cancelled\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Your subscription has been successfully cancelled\n            </p>\n          </div>\n\n          {/* Cancellation Confirmation */}\n          <Card className=\"mb-8\">\n            <div className=\"bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-t-lg p-6\">\n              <h2 className=\"text-xl text-center\">\n                Your cancellation is now active\n              </h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center py-3 border-b border-gray-100\">\n                  <span className=\"font-medium text-gray-700\">Status:</span>\n                  <span className=\"text-red-600 font-semibold\">Cancelled</span>\n                </div>\n                <div className=\"flex justify-between items-center py-3 border-b border-gray-100\">\n                  <span className=\"font-medium text-gray-700\">Access until:</span>\n                  <span className=\"text-gray-600\">End of billing period</span>\n                </div>\n                <div className=\"flex justify-between items-center py-3\">\n                  <span className=\"font-medium text-gray-700\">Next billing:</span>\n                  <span className=\"text-gray-500\">None</span>\n                </div>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>Good news!</strong> You'll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Next Steps */}\n          <Card className=\"mb-8\">\n            <div className=\"p-6\">\n              <h2 className=\"flex items-center gap-2 text-xl font-bold text-gray-800 mb-4\">\n                <FaSyncAlt className=\"w-5 h-5 text-blue-500\" />\n                What happens next?\n              </h2>\n              <div className=\"space-y-4\">\n                <Button className=\"w-full h-auto p-6 bg-blue-600 hover:bg-blue-700\">\n                  <Link to=\"/pricing\" className=\"flex items-center gap-3 text-white no-underline\">\n                    <FaCreditCard className=\"w-6 h-6\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">Reactivate Subscription</div>\n                      <div className=\"text-sm opacity-90\">Resume your premium features anytime</div>\n                    </div>\n                  </Link>\n                </Button>\n                <Button variant=\"secondary\" className=\"w-full h-auto p-6\">\n                  <Link to=\"/\" className=\"flex items-center gap-3 text-gray-700 no-underline\">\n                    <FaArrowLeft className=\"w-6 h-6\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">Continue with Free Plan</div>\n                      <div className=\"text-sm opacity-75\">Access basic features for free</div>\n                    </div>\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Feedback Section */}\n          <Card>\n            <div className=\"p-6\">\n              <h3 className=\"text-green-800 text-lg font-bold mb-4\">\n                Help us improve\n              </h3>\n              <p className=\"text-green-700 mb-6\">\n                We're sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              </p>\n              \n              <div className=\"space-y-3\">\n                <Button variant=\"secondary\" className=\"w-full\">\n                  <FaCommentDots className=\"w-4 h-4 mr-2\" />\n                  Share feedback\n                </Button>\n                <p className=\"text-xs text-gray-500 text-center\">\n                  Takes less than 2 minutes • Completely optional\n                </p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionCancelledPage;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":17,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[828,852],"text":"(searchParams.get('tier') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[828,852],"text":"(searchParams.get('tier') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[828,852],"text":"(Boolean(searchParams.get('tier')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[853,855],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":21,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[943,953],"text":"sessionId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[944,953],"text":"(sessionId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[943,953],"text":"!Boolean(sessionId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":59,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":59,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2252,2252],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2252,2252],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":62,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":62,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":66,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":37},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":92,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3862,3874],"text":"What&apos;s Next?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3862,3874],"text":"What&lsquo;s Next?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3862,3874],"text":"What&#39;s Next?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3862,3874],"text":"What&rsquo;s Next?"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":129,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5274,5483],"text":"\n                Don&apos;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don&lsquo;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5274,5483],"text":"\n                Don&#39;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don&rsquo;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":129,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&apos;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&lsquo;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&#39;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&rsquo;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { useAuth, useSubscription } from '@cosmichub/auth';\nimport { stripeService } from '@cosmichub/integrations';\nimport { FaCheckCircle, FaSpinner, FaExclamationTriangle } from 'react-icons/fa';\nimport { devConsole } from '../config/environment';\n\nconst SubscriptionSuccess: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const { refreshSubscription } = useSubscription();\n  const [verificationStatus, setVerificationStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('Verifying your subscription...');\n\n  const sessionId = searchParams.get('session_id');\n  const tier = searchParams.get('tier') || 'premium';\n\n  useEffect(() => {\n    const verifySubscription = async () => {\n      if (!sessionId) {\n        setVerificationStatus('error');\n        setMessage('Missing session information. Please contact support if you were charged.');\n        return;\n      }\n\n      if (!user) {\n        setVerificationStatus('error');\n        setMessage('Please sign in to complete your subscription setup.');\n        return;\n      }\n\n      try {\n        // Verify the checkout session\n        const success = stripeService ? await stripeService.handleCheckoutSuccess(sessionId) : false;\n        \n        if (success) {\n          // Refresh subscription data\n          await refreshSubscription();\n          \n          setVerificationStatus('success');\n          setMessage('Your subscription has been activated successfully!');\n          \n          // Redirect to dashboard after 3 seconds\n          setTimeout(() => {\n            navigate('/', { replace: true });\n          }, 3000);\n        } else {\n          setVerificationStatus('error');\n          setMessage('There was an issue verifying your subscription. Please contact support.');\n        }\n      } catch (error) {\n        devConsole.error('❌ Subscription verification error:', error);\n        setVerificationStatus('error');\n        setMessage('Failed to verify your subscription. Please contact support if you were charged.');\n      }\n    };\n\n    verifySubscription();\n  }, [sessionId, user, refreshSubscription, navigate]);\n\n  const handleReturnToDashboard = () => {\n    navigate('/', { replace: true });\n  };\n\n  const handleContactSupport = () => {\n    // You can implement a support contact method here\n    window.open('mailto:support@cosmichub.app?subject=Subscription Issue&body=I need help with my subscription verification.', '_blank');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\">\n        {verificationStatus === 'loading' && (\n          <>\n            <FaSpinner className=\"w-16 h-16 text-cosmic-purple mx-auto mb-4 animate-spin\" />\n            <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">Processing Your Subscription</h1>\n            <p className=\"text-cosmic-silver mb-6\">{message}</p>\n            <div className=\"bg-cosmic-purple/10 rounded-lg p-4\">\n              <p className=\"text-sm text-cosmic-purple\">Please wait while we confirm your payment...</p>\n            </div>\n          </>\n        )}\n\n        {verificationStatus === 'success' && (\n          <>\n            <FaCheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">Welcome to CosmicHub {tier === 'elite' ? 'Elite' : 'Premium'}!</h1>\n            <p className=\"text-cosmic-silver mb-6\">{message}</p>\n            \n            <div className=\"bg-green-50 rounded-lg p-4 mb-6\">\n              <h3 className=\"text-lg font-semibold text-green-800 mb-2\">What's Next?</h3>\n              <ul className=\"text-sm text-green-700 space-y-1 text-left\">\n                <li>• Access to all premium features</li>\n                <li>• Unlimited chart calculations</li>\n                <li>• Advanced AI interpretations</li>\n                <li>• Priority customer support</li>\n                {tier === 'elite' && (\n                  <>\n                    <li>• Multi-system astrology</li>\n                    <li>• Synastry compatibility</li>\n                    <li>• Transit analysis</li>\n                  </>\n                )}\n              </ul>\n            </div>\n\n            <button\n              onClick={handleReturnToDashboard}\n              className=\"w-full cosmic-button mb-4\"\n            >\n              Continue to Dashboard\n            </button>\n            \n            <p className=\"text-xs text-cosmic-silver\">\n              Redirecting automatically in a few seconds...\n            </p>\n          </>\n        )}\n\n        {verificationStatus === 'error' && (\n          <>\n            <FaExclamationTriangle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">Subscription Verification Issue</h1>\n            <p className=\"text-cosmic-silver mb-6\">{message}</p>\n            \n            <div className=\"bg-red-50 rounded-lg p-4 mb-6\">\n              <p className=\"text-sm text-red-700\">\n                Don't worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <button\n                onClick={handleContactSupport}\n                className=\"w-full bg-cosmic-purple hover:bg-cosmic-purple-dark text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n              >\n                Contact Support\n              </button>\n              \n              <button\n                onClick={handleReturnToDashboard}\n                className=\"w-full bg-gray-200 hover:bg-gray-300 text-cosmic-dark py-3 px-4 rounded-lg font-semibold transition-colors\"\n              >\n                Return to Dashboard\n              </button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionSuccess;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionSuccessPage.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":15,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useMemo } from 'react';\n\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { FaCheckCircle, FaCrown, FaArrowRight, FaHome, FaCreditCard, FaSpinner } from 'react-icons/fa';\nimport { useAuth, useSubscription } from '@cosmichub/auth';\nimport { useToast } from '../components/ToastProvider';\n\ninterface SubscriptionDetails {\n  tier: string;\n  status: string;\n  features: string[];\n  expires_at: string;\n}\n\nexport const SubscriptionSuccessPage: React.FC = (): JSX.Element => {\n  const [searchParams] = useSearchParams();\n  const { user } = useAuth();\n  const subscriptionData = useSubscription();\n  const { toast } = useToast();\n  const [subscriptionDetails, setSubscriptionDetails] = useState<SubscriptionDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const sessionId = searchParams.get('session_id');\n  const refreshSubscription: () => Promise<unknown> = useMemo((): (() => Promise<unknown>) => {\n    return typeof subscriptionData?.refreshSubscription === 'function'\n  ? subscriptionData.refreshSubscription\n      : () => Promise.resolve();\n  }, [subscriptionData]);\n\n  useEffect((): void => {\n    const hasSession = typeof sessionId === 'string' && sessionId.length > 0;\n    if (!(user !== null && user !== undefined && hasSession)) {\n      if (!hasSession) setLoading(false);\n      return;\n    }\n  void (async (): Promise<void> => {\n      try {\n        const token = await user.getIdToken();\n        const response = await fetch('/api/stripe/subscription-status', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n  if (response.ok) {\n          const details = (await response.json()) as SubscriptionDetails;\n          setSubscriptionDetails(details);\n          await refreshSubscription();\n          toast({\n            title: 'Success',\n            description: 'Subscription activated successfully!',\n            status: 'success',\n            duration: 3000,\n            isClosable: true\n          });\n        } else {\n          throw new Error('Failed to verify subscription');\n        }\n      } catch {\n        toast({\n          title: 'Error',\n            description: 'Unable to verify subscription. Please contact support if issues persist.',\n          status: 'error',\n          duration: 5000,\n          isClosable: true\n        });\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [user, sessionId, refreshSubscription, toast]);\n\n  const getTierDisplayName = (tier: string): string => {\n    const tierNames: Record<string, string> = {\n      'healwave_pro': 'HealWave Pro',\n      'astro_premium': 'Astrology Premium',\n      'cosmic_master': 'Cosmic Master'\n    };\n    return tierNames[tier] || tier;\n  };\n\n  const getTierColor = (tier: string): string => {\n    const colors: Record<string, string> = {\n      'healwave_pro': 'bg-blue-500',\n      'astro_premium': 'bg-purple-500',\n      'cosmic_master': 'bg-gold-500'\n    };\n    return colors[tier] || 'bg-gray-500';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n        <div className=\"text-center\">\n          <FaSpinner className=\"w-12 h-12 mx-auto mb-4 text-green-500 animate-spin\" />\n          <p className=\"text-gray-600\">Verifying your subscription...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!(typeof sessionId === 'string' && sessionId.length > 0)) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-red-50 to-orange-50\">\n        <div className=\"w-full max-w-md p-6 mx-4 bg-white rounded-lg shadow-lg\">\n          <div className=\"text-center\">\n            <h2 className=\"mb-4 text-xl font-bold text-red-600\">Invalid Access</h2>\n          </div>\n          <div className=\"space-y-4 text-center\">\n            <p className=\"text-gray-600\">\n              This page can only be accessed after a successful subscription purchase.\n            </p>\n            <Link\n              to=\"/pricing\"\n              className=\"inline-flex items-center justify-center w-full px-4 py-3 font-semibold text-white transition-colors bg-blue-600 rounded-lg hover:bg-blue-700\"\n            >\n              <FaCreditCard className=\"w-4 h-4 mr-2\" />\n              View Pricing Plans\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50\">\n      <div className=\"container px-4 py-12 mx-auto\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Success Header */}\n          <div className=\"mb-8 text-center\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 mb-4 bg-green-100 rounded-full\">\n              <FaCheckCircle className=\"w-10 h-10 text-green-600\" />\n            </div>\n            <h1 className=\"mb-2 text-3xl font-bold text-gray-900\">\n              Welcome to the Cosmic Family! 🌟\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Your subscription has been activated successfully\n            </p>\n          </div>\n\n          {/* Subscription Details Card */}\n          {subscriptionDetails && (\n            <div className=\"mb-8 bg-white border-2 border-green-200 rounded-lg shadow-lg\">\n              <div className=\"p-6 text-white rounded-t-lg bg-gradient-to-r from-green-500 to-blue-500\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <FaCrown className=\"w-6 h-6\" />\n                    <h2 className=\"text-xl font-bold\">\n                      {getTierDisplayName(subscriptionDetails.tier)}\n                    </h2>\n                  </div>\n                  <span className={`px-3 py-1 rounded-full text-sm font-bold ${getTierColor(subscriptionDetails.tier)} text-white`}>\n                    Active\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"p-6 pt-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"mb-3 font-semibold text-gray-900\">\n                      Your Premium Features:\n                    </h3>\n                    <ul className=\"grid gap-2 sm:grid-cols-2\">\n                      {subscriptionDetails.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center gap-2\">\n                          <FaCheckCircle className=\"flex-shrink-0 w-4 h-4 text-green-500\" />\n                          <span className=\"text-sm text-gray-700\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  {subscriptionDetails.expires_at && (\n                    <div className=\"pt-4 border-t border-gray-200\">\n                      <p className=\"text-sm text-gray-600\">\n                        <strong>Next billing date:</strong>{' '}\n                        {new Date(subscriptionDetails.expires_at).toLocaleDateString('en-US', {\n                          year: 'numeric',\n                          month: 'long', \n                          day: 'numeric'\n                        })}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Next Steps */}\n          <div className=\"p-6 mb-8 bg-white rounded-lg shadow-lg\">\n            <div className=\"mb-4\">\n              <h2 className=\"flex items-center gap-2 text-xl font-bold\">\n                <FaArrowRight className=\"w-5 h-5 text-blue-500\" />\n                What&apos;s Next?\n              </h2>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                <Link\n                  to=\"/\"\n                  className=\"flex flex-col items-center h-auto gap-2 p-4 font-semibold text-white transition-colors bg-blue-600 rounded-lg hover:bg-blue-700\"\n                >\n                  <FaHome className=\"w-6 h-6\" />\n                  <span className=\"font-semibold\">Explore Your Dashboard</span>\n                  <span className=\"text-xs opacity-80\">Start using your premium features</span>\n                </Link>\n                \n                <Link\n                  to=\"/account/subscription\"\n                  className=\"flex flex-col items-center h-auto gap-2 p-4 font-semibold text-gray-900 transition-colors border border-gray-300 rounded-lg hover:bg-gray-50\"\n                >\n                  <FaCreditCard className=\"w-6 h-6\" />\n                  <span className=\"font-semibold\">Manage Subscription</span>\n                  <span className=\"text-xs opacity-80\">Update billing & preferences</span>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          {/* Support Information */}\n          <div className=\"p-6 text-center bg-white border rounded-lg shadow-sm\">\n            <h3 className=\"mb-2 font-semibold text-gray-900\">\n              Need Help Getting Started?\n            </h3>\n            <p className=\"mb-4 text-gray-600\">\n              Our support team is here to help you make the most of your subscription.\n            </p>\n            <div className=\"flex flex-col justify-center gap-3 sm:flex-row\">\n              <Link\n                to=\"/help\"\n                className=\"px-4 py-2 font-medium text-gray-700 transition-colors border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                View Help Center\n              </Link>\n              <a\n                href=\"mailto:support@cosmichub.app\"\n                className=\"px-4 py-2 font-medium text-gray-700 transition-colors border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                Contact Support\n              </a>\n            </div>\n          </div>\n\n          {/* Footer Note */}\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500\">\n              You will receive a confirmation email with your subscription details shortly.\n              <br />\n              Thank you for choosing CosmicHub! ✨\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionSuccessPage;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Synastry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pwa-performance.ts","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":235,"column":25,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":235,"endColumn":52},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":246,"column":25,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":246,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced PWA Performance Enhancements\n * Builds on existing CosmicHub performance optimizations\n */\n\n// Type definition for devConsole to fix unsafe access issues\ninterface DevConsole {\n  log?: (message?: unknown, ...optionalParams: unknown[]) => void;\n  warn?: (message?: unknown, ...optionalParams: unknown[]) => void;\n  error?: (message?: unknown, ...optionalParams: unknown[]) => void;\n}\n\n// Safe logging helper to avoid require() and unsafe assignments\nfunction safeLog(message: string): void {\n  try {\n    // Use dynamic import instead of require for ES modules\n    void import('./config/environment').then(({ devConsole }: { devConsole: DevConsole }) => {\n      devConsole.log?.(message);\n    }).catch(() => {\n      // Fallback - no logging in production\n    });\n  } catch {\n    // Silent fallback for production\n  }\n}\n\nfunction safeWarn(message: string, ...args: unknown[]): void {\n  try {\n    void import('./config/environment').then(({ devConsole }: { devConsole: DevConsole }) => {\n      devConsole.warn?.(message, ...args);\n    }).catch(() => {\n      // Fallback - no logging in production\n    });\n  } catch {\n    // Silent fallback for production\n  }\n}\n\nfunction safeError(message: string, ...args: unknown[]): void {\n  try {\n    void import('./config/environment').then(({ devConsole }: { devConsole: DevConsole }) => {\n      devConsole.error?.(message, ...args);\n    }).catch(() => {\n      // Silent fallback - errors logged through devConsole only\n    });\n  } catch {\n    // Silent fallback - errors logged through devConsole only\n  }\n}\n\n// Critical Resource Prioritization\nexport class CriticalResourceManager {\n  private static readonly CRITICAL_RESOURCES = [\n    // Removed CSS preloading since Vite handles this automatically\n    // '/src/styles/index.css' - This causes the preload warning\n  ];\n\n  private static readonly FONT_RESOURCES = [\n    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',\n    'https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap'\n  ];\n\n  static preloadCriticalResources(): void {\n    safeLog('⚡ Preloading critical resources...');\n\n    // Skip critical resource preloading since Vite handles this efficiently\n    // Removed manual CSS preloading to fix the preload warning\n    safeLog('🎯 Critical resource preloading complete (handled by Vite)');\n    return;\n  }\n\n  static optimizeFontLoading(): void {\n    safeLog('🔤 Optimizing font loading...');\n\n    // Add font-display: swap to improve loading performance\n    const fontLinks = document.querySelectorAll('link[href*=\"fonts.googleapis.com\"]');\n    fontLinks.forEach(link => {\n      const href = link.getAttribute('href');\n      const hrefAttr = href ?? '';\n      if (typeof hrefAttr === 'string' && !hrefAttr.includes('display=swap')) {\n        try {\n          const url = new URL(hrefAttr);\n          url.searchParams.set('display', 'swap');\n          link.setAttribute('href', url.toString());\n        } catch {\n          safeWarn('🔤 Invalid font URL, skipping:', hrefAttr);\n        }\n      }\n    });\n\n    // Note: Removed aggressive font preloading to reduce unused resource warnings\n    // Font files will load naturally through the Google Fonts CSS\n  }\n\n  static enableResourceHints(): void {\n    safeLog('🔗 Setting up resource hints...');\n\n    // DNS prefetch for external domains\n    const dnsPrefetchDomains = [\n      'fonts.googleapis.com',\n      'fonts.gstatic.com',\n      'api.cosmichub.com', // Future API domain\n      'cdn.cosmichub.com'  // Future CDN domain\n    ];\n\n    dnsPrefetchDomains.forEach(domain => {\n      const link = document.createElement('link');\n      link.rel = 'dns-prefetch';\n      link.href = `https://${domain}`;\n      document.head.appendChild(link);\n    });\n\n    // Preconnect to critical third-party origins\n    const preconnectDomains = [\n      { href: 'https://fonts.googleapis.com', crossorigin: false },\n      { href: 'https://fonts.gstatic.com', crossorigin: true }\n    ];\n\n    preconnectDomains.forEach(({ href, crossorigin }) => {\n      const link = document.createElement('link');\n      link.rel = 'preconnect';\n      link.href = href;\n      if (crossorigin) {\n        link.crossOrigin = 'anonymous';\n      }\n      document.head.appendChild(link);\n    });\n  }\n\n  static optimizeScriptLoading(): void {\n    safeLog('📜 Optimizing script loading...');\n\n    // Defer non-critical scripts\n    const scripts = document.querySelectorAll('script[src]');\n    scripts.forEach(script => {\n      const scriptElement = script as HTMLScriptElement;\n      const src = scriptElement.src ?? '';\n      if (src && !scriptElement.defer && !scriptElement.async) {\n        scriptElement.defer = true;\n      }\n    });\n  }\n}\n\n// Connection-aware loading (builds on existing lazy loading)\nexport class ConnectionAwareLoader {\n  private static getConnection(): NetworkInformation | null {\n    if (globalThis?.navigator === null) return null;\n    const nav = navigator as unknown as { connection?: NetworkInformation; mozConnection?: NetworkInformation; webkitConnection?: NetworkInformation };\n    return nav.connection ?? nav.mozConnection ?? nav.webkitConnection ?? null;\n  }\n\n  static getConnectionInfo(): { effectiveType: string; downlink: number; saveData: boolean } {\n    const connection = this.getConnection();\n    if (connection === null) {\n      return { effectiveType: '4g', downlink: 10, saveData: false };\n    }\n\n    return {\n      effectiveType: connection.effectiveType ?? '4g',\n      downlink: connection.downlink ?? 10,\n      saveData: connection.saveData ?? false,\n    };\n  }\n\n  static shouldOptimizeForSlowConnection(): boolean {\n    const info = this.getConnectionInfo();\n    return ['slow-2g', '2g'].includes(info.effectiveType) || \n           info.downlink < 1.5 || \n           info.saveData;\n  }\n\n  static adaptResourceLoading(): void {\n    const shouldOptimize = this.shouldOptimizeForSlowConnection();\n    \n    if (shouldOptimize) {\n      safeLog('🐌 Slow connection detected, optimizing resource loading...');\n      \n      // Reduce image quality\n      document.documentElement.style.setProperty('--image-quality', '0.7');\n      \n      // Disable non-critical animations\n      document.documentElement.style.setProperty('--reduce-motion', '1');\n      \n      // Prioritize critical resources only\n      this.prioritizeCriticalOnly();\n    } else {\n      safeLog('🚀 Fast connection detected, enabling full features...');\n    }\n  }\n\n  private static prioritizeCriticalOnly(): void {\n    // Cancel non-critical preloads\n    const nonCriticalPreloads = document.querySelectorAll('link[rel=\"preload\"]:not([data-critical])');\n    nonCriticalPreloads.forEach(link => link.remove());\n    \n    // Defer non-critical scripts\n    const scripts = document.querySelectorAll('script:not([data-critical])');\n    scripts.forEach(script => {\n      const scriptElement = script as HTMLScriptElement;\n      const src = scriptElement.src ?? '';\n      if (src && !scriptElement.defer && !scriptElement.async) {\n        scriptElement.defer = true;\n      }\n    });\n  }\n}\n\n// Performance monitoring for PWA\nexport class PWAPerformanceMonitor {\n  private static metrics: Map<string, number> = new Map();\n\n  static startTiming(label: string): void {\n    this.metrics.set(`${label}_start`, performance.now());\n  }\n\n  static endTiming(label: string): number {\n    const startTime = this.metrics.get(`${label}_start`);\n    if (startTime === null) {\n      safeWarn(`No start time found for ${label}`);\n      return 0;\n    }\n    \n    const duration = performance.now() - startTime;\n    this.metrics.set(label, duration);\n    safeLog(`⏱️ ${label}: ${duration.toFixed(2)}ms`);\n    return duration;\n  }\n\n  static measurePWAMetrics(): void {\n    // Measure PWA-specific metrics\n\n    if (globalThis.navigator?.serviceWorker !== null) {\n      void navigator.serviceWorker.ready.then(() => {\n        const perfNow = globalThis.performance?.now;\n      if (perfNow !== null) {\n          const swReadyTime = perfNow();\n          safeLog(`🔧 Service Worker ready: ${swReadyTime.toFixed(2)}ms`);\n        }\n      });\n    }\n\n    // Measure app shell loading\n    if (globalThis.window !== null) {\n      window.addEventListener('DOMContentLoaded', () => {\n        const perfNow = globalThis.performance?.now;\n        if (perfNow !== null) {\n          const domReady = perfNow();\n          safeLog(`📄 DOM ready: ${domReady.toFixed(2)}ms`);\n        }\n      });\n    }\n\n    // Measure Core Web Vitals\n    this.observeWebVitals();\n  }\n\n  private static observeWebVitals(): void {\n    // Largest Contentful Paint\n    if (globalThis.PerformanceObserver !== null) {\n      try {\n        const lcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1] as PerformanceEntry & { startTime: number };\n          const startTime = lastEntry?.startTime;\n          if (startTime !== null) {\n            safeLog(`📊 LCP: ${lastEntry.startTime.toFixed(2)}ms`);\n          }\n        });\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n\n        // First Input Delay\n        const fidObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            const e = entry as PerformanceEntry & Record<string, unknown>;\n            const processingStart = e['processingStart'];\n            const startTime = e['startTime'];\n            if (typeof processingStart === 'number' && typeof startTime === 'number') {\n              safeLog(`⚡ FID: ${processingStart - startTime}ms`);\n            }\n          });\n        });\n        fidObserver.observe({ entryTypes: ['first-input'] });\n\n        // Cumulative Layout Shift\n        const clsObserver = new PerformanceObserver((list) => {\n          let clsValue = 0;\n          list.getEntries().forEach((entry) => {\n            const e = entry as PerformanceEntry & { hadRecentInput: boolean; value: number };\n            const { hadRecentInput, value } = e;\n            if (!hadRecentInput) {\n              clsValue += value;\n            }\n          });\n          safeLog(`📐 CLS: ${clsValue.toFixed(4)}`);\n        });\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\n      } catch (err) {\n        // PerformanceObserver may not be supported in some environments\n        safeWarn('PerformanceObserver not available', err);\n      }\n    }\n  }\n\n  static getMetrics(): Record<string, number> {\n    return Object.fromEntries(this.metrics);\n  }\n}\n\n// Initialize enhanced PWA performance\nexport function initializePWAPerformance(): void {\n  safeLog('🚀 Initializing PWA performance enhancements...');\n\n  // Start overall timing\n  PWAPerformanceMonitor.startTiming('pwa_initialization');\n\n  try {\n    // Set up connection-aware loading\n    ConnectionAwareLoader.adaptResourceLoading();\n\n    // Enable resource hints\n    CriticalResourceManager.enableResourceHints();\n\n    // Optimize font loading\n    CriticalResourceManager.optimizeFontLoading();\n\n    // Preload critical resources\n    CriticalResourceManager.preloadCriticalResources();\n\n    // Start performance monitoring\n    PWAPerformanceMonitor.measurePWAMetrics();\n\n    // End timing\n    PWAPerformanceMonitor.endTiming('pwa_initialization');\n\n    safeLog('✅ PWA performance enhancements initialized');\n\n  } catch (error) {\n    safeError('❌ Failed to initialize PWA performance enhancements:', error);\n  }\n}\n\n// Auto-initialize when imported\nconst doc = typeof document !== 'undefined' ? document : null;\nif (doc !== null) {\n  if (doc.readyState === 'loading') {\n    doc.addEventListener('DOMContentLoaded', () => {\n      initializePWAPerformance();\n    });\n  } else {\n    initializePWAPerformance();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pwa.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":6,"column":1,"severity":1,"nodeType":null,"fix":{"range":[117,148],"text":" "}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":83,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":251,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":251,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Service Worker Registration for CosmicHub Astro App\n * Registers the comprehensive service worker system\n */\n\n/* eslint-disable no-console */ // We wrap console usage through devConsole fallback below\nimport { devConsole, isDevelopment } from './config/environment';\n\n// PWA Service Worker Registration\nfunction registerServiceWorker(): void {\n  // Only register the service worker in production. Vite HMR + SW in dev can cause reload loops.\n  if (!import.meta.env.PROD) {\n    devConsole.warn?.('⚠️ Skipping Service Worker registration in development to avoid HMR reload loops');\n    return;\n  }\n\n  if (typeof navigator !== 'undefined' && 'serviceWorker' in navigator) {\n    try {\n      devConsole.log?.('🔧 Registering Service Worker...');\n\n      void navigator.serviceWorker.register('/sw.js', { scope: '/' })\n        .then((registration) => {\n          // Handle updates\n          registration.addEventListener('updatefound', () => {\n            const newWorker = registration.installing;\n            if (newWorker) {\n              newWorker.addEventListener('statechange', () => {\n                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                  // New content is available, show update notification\n                  showUpdateNotification();\n                }\n              });\n            }\n          });\n          // Check for updates periodically (production only)\n          if (typeof globalThis !== 'undefined' && typeof globalThis.setInterval === 'function') {\n            globalThis.setInterval(() => { void registration.update(); }, 60000); // Check every minute\n          }\n          devConsole.log?.('✅ Service Worker registered successfully');\n          initializePWAFeatures();\n        })\n        .catch((error) => {\n          devConsole.error('❌ Service Worker registration failed:', error);\n        });\n    } catch (error) {\n      devConsole.error('❌ Service Worker registration failed (outer try/catch):', error);\n    }\n  } else {\n    devConsole.warn?.('⚠️ Service Worker not supported');\n  }\n}\n\n// Initialize PWA features\ninterface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed'; platform?: string }>;\n}\n\nfunction initializePWAFeatures(): void {\n  // Install prompt handling\n  let deferredPrompt: BeforeInstallPromptEvent | null = null;\n  \n  if (typeof window !== 'undefined') {\n    window.addEventListener('beforeinstallprompt', (e: Event) => {\n      e.preventDefault();\n      deferredPrompt = e as BeforeInstallPromptEvent;\n      showInstallPrompt();\n    });\n  }\n  \n  // App installed handler\n  if (typeof window !== 'undefined') {\n    window.addEventListener('appinstalled', () => {\n      devConsole.log?.('🎉 CosmicHub PWA installed successfully');\n      hideInstallPrompt();\n      deferredPrompt = null;\n    });\n  }\n  \n  // Handle install button click\n  if (typeof window !== 'undefined') {\n    window.addEventListener('install-app', () => {\n      void (async () => {\n        if (!deferredPrompt) return;\n        await deferredPrompt.prompt();\n        const choiceResult = await deferredPrompt.userChoice;\n        if (choiceResult.outcome === 'accepted') {\n          devConsole.log?.('✅ User accepted the install prompt');\n        } else {\n          devConsole.log?.('❌ User dismissed the install prompt');\n        }\n        deferredPrompt = null;\n      })();\n    });\n  }\n}\n\n// Show update notification\nfunction showUpdateNotification(): void {\n  // Create update notification\n  const updateBanner = document.createElement('div');\n  updateBanner.id = 'pwa-update-banner';\n  updateBanner.innerHTML = `\n    <div style=\"\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: linear-gradient(135deg, #553c9a, #f6ad55);\n      color: white;\n      padding: 12px 20px;\n      text-align: center;\n      z-index: 10000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n      font-family: system-ui, -apple-system, sans-serif;\n    \">\n      <span style=\"margin-right: 15px;\">🌟 New cosmic features available!</span>\n      <button id=\"update-app-btn\" style=\"\n        background: rgba(255,255,255,0.2);\n        border: 1px solid rgba(255,255,255,0.3);\n        color: white;\n        padding: 6px 16px;\n        border-radius: 6px;\n        cursor: pointer;\n        margin-right: 10px;\n        font-weight: 500;\n      \">Update Now</button>\n      <button id=\"dismiss-update-btn\" style=\"\n        background: transparent;\n        border: none;\n        color: white;\n        cursor: pointer;\n        opacity: 0.8;\n      \">✕</button>\n    </div>\n  `;\n  \n  document.body.appendChild(updateBanner);\n  \n  // Handle update button\n  document.getElementById('update-app-btn')?.addEventListener('click', () => {\n    window.location.reload();\n  });\n  \n  // Handle dismiss button\n  document.getElementById('dismiss-update-btn')?.addEventListener('click', () => {\n    updateBanner.remove();\n  });\n}\n\n// Show install prompt\nfunction showInstallPrompt(): void {\n  // Check if already installed\n  if (window.matchMedia('(display-mode: standalone)').matches) {\n    return;\n  }\n  \n  // Create install prompt\n  const installBanner = document.createElement('div');\n  installBanner.id = 'pwa-install-banner';\n  installBanner.innerHTML = `\n    <div style=\"\n      position: fixed;\n      bottom: 20px;\n      left: 20px;\n      right: 20px;\n      background: rgba(26, 26, 46, 0.95);\n      backdrop-filter: blur(10px);\n      -webkit-backdrop-filter: blur(10px);\n      border: 1px solid rgba(85, 60, 154, 0.3);\n      border-radius: 16px;\n      padding: 20px;\n      z-index: 10000;\n      box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n      font-family: system-ui, -apple-system, sans-serif;\n      color: #e2e8f0;\n      max-width: 400px;\n      margin: 0 auto;\n    \">\n      <div style=\"display: flex; align-items: center; gap: 15px;\">\n        <div style=\"\n          width: 48px;\n          height: 48px;\n          background: linear-gradient(135deg, #553c9a, #f6ad55);\n          border-radius: 12px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n        \">🌟</div>\n        <div style=\"flex: 1;\">\n          <h3 style=\"margin: 0 0 5px 0; font-size: 16px; font-weight: 600;\">Install CosmicHub</h3>\n          <p style=\"margin: 0; font-size: 14px; color: #cbd5e1; line-height: 1.4;\">Get the full cosmic experience with faster loading and offline access.</p>\n        </div>\n      </div>\n      <div style=\"display: flex; gap: 10px; margin-top: 15px;\">\n        <button id=\"install-app-btn\" style=\"\n          flex: 1;\n          background: linear-gradient(135deg, #553c9a, #f6ad55);\n          border: none;\n          color: white;\n          padding: 12px 20px;\n          border-radius: 8px;\n          cursor: pointer;\n          font-weight: 600;\n          font-size: 14px;\n        \">Install App</button>\n        <button id=\"dismiss-install-btn\" style=\"\n          background: transparent;\n          border: 1px solid rgba(255,255,255,0.2);\n          color: #cbd5e1;\n          padding: 12px 16px;\n          border-radius: 8px;\n          cursor: pointer;\n          font-size: 14px;\n        \">Not Now</button>\n      </div>\n    </div>\n  `;\n  \n  document.body.appendChild(installBanner);\n  \n  // Handle install button\n  document.getElementById('install-app-btn')?.addEventListener('click', () => {\n    window.dispatchEvent(new CustomEvent('install-app'));\n    installBanner.remove();\n  });\n  \n  // Handle dismiss button\n  document.getElementById('dismiss-install-btn')?.addEventListener('click', () => {\n    installBanner.remove();\n  });\n}\n\n// Hide install prompt\nfunction hideInstallPrompt(): void {\n  const installBanner = document.getElementById('pwa-install-banner');\n  if (installBanner) {\n    installBanner.remove();\n  }\n}\n\n// Register when DOM is loaded (prod) or unregister SW in dev to ensure no stale SW controls the page\nif (import.meta.env.PROD) {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', registerServiceWorker);\n  } else {\n    registerServiceWorker();\n  }\n} else {\n  const unregisterInDev = () => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.getRegistrations()\n        .then((regs) => {\n          if (regs.length > 0) {\n            devConsole.warn?.(`🧹 Unregistering ${regs.length} service worker(s) in development`);\n          }\n          // Unregister all registrations in parallel\n          void Promise.all(regs.map(r => r.unregister().catch(() => false)));\n        })\n        .catch((error) => {\n          if (isDevelopment()) {\n            devConsole.error('Failed to fetch service worker registrations for unregister', error);\n          }\n        });\n    }\n  };\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', unregisterInDev);\n  } else {\n    unregisterInDev();\n  }\n}\n\nexport { registerServiceWorker };\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/routes/lazy-routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/__tests__/notificationManager.unified.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/services/__tests__/notificationManager.unified.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { getNotificationManager } from '../notificationManager.unified';\n\n// Minimal mock for push manager creation coming from @cosmichub/config when running unit tests.\n// If the real module exists, these spies will attach to queueNotification method call.\n\nvi.mock('@cosmichub/config', () => {\n  const queueNotification = vi.fn().mockResolvedValue(undefined);\n  return {\n    createPushNotificationManager: () => ({\n      initialize: vi.fn().mockResolvedValue(true),\n      queueNotification,\n      getNotificationStats: () => ({ queued: 0 }),\n      subscribeUser: vi.fn().mockResolvedValue(true)\n    }),\n    AstrologyNotificationScheduler: class { \n      scheduleDailyHoroscope() {}\n      scheduleTransitAlerts() {}\n      scheduleMoonPhases() {}\n    },\n    getBackgroundSyncManager: () => ({\n      setPushNotificationManager() {},\n      getSyncStatus: () => ({ idle: true })\n    })\n  };\n});\n\ndescribe('UnifiedNotificationManager', () => {\n  beforeEach(() => {\n    // clear localStorage mock between tests\n    (global as any).localStorage = {\n      store: {} as Record<string,string>,\n      getItem(key: string) { return this.store[key] ?? null; },\n      setItem(key: string, val: string) { this.store[key] = val; },\n      removeItem(key: string) { delete this.store[key]; }\n    };\n  });\n\n  it('initializes without user id', async () => {\n    const mgr = getNotificationManager();\n    const ok = await mgr.initialize();\n    expect(ok).toBe(true);\n  });\n\n  it('subscribes user with default prefs when invalid prefs passed', async () => {\n    const mgr = getNotificationManager();\n    await mgr.initialize();\n    const ok = await mgr.subscribe('user-1', { not: 'valid' });\n    expect(ok).toBe(true);\n  });\n\n  it('ignores notifyChartReady when chart missing id', async () => {\n    const mgr = getNotificationManager();\n    await mgr.initialize();\n    // @ts-expect-error intentionally missing id\n    await mgr.notifyChartReady({ planets: {} });\n    // no throw expected\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/api.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":502,"column":28,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":502,"endColumn":46,"fix":{"range":[19815,19829],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { devConsole } from '../config/environment';\nimport { toUnifiedBirthData, type AnyBirthInput, type ChartBirthData } from '@cosmichub/types';\nimport { auth } from '@cosmichub/config/firebase';\nimport type { GeneKeysData } from '../components/GeneKeysChart/types';\nimport type { HumanDesignData } from '../components/HumanDesignChart/types';\nimport {\n  type Planet,\n  type House,\n  type PlanetName,\n  type ZodiacSign,\n  type ChartData,\n  type UserId,\n  type ChartId,\n  type InterpretationId,\n  type SavedChart,\n  type SavedChartsResponse,\n  type SaveChartRequest,\n  type SaveChartResponse,\n  type Interpretation,\n  type InterpretationRequest,\n  type InterpretationResponse,\n  type Aspect,\n  AuthenticationError,\n  NotFoundError,\n  ValidationError\n} from './api.types';\n\n// Backend response transformation types and helpers\ninterface BackendChartPlanet {\n  position?: number;\n  longitude?: number;\n  retrograde?: boolean;\n  speed?: number;\n  sign?: ZodiacSign;\n  house?: number;\n  dignity?: 'domicile' | 'exaltation' | 'fall' | 'detriment';\n  essential_dignity?: number;\n}\n\ntype BackendChartPlanets = Record<PlanetName, BackendChartPlanet>;\n\ntype BackendChartHouses = Record<string, { cusp?: number; sign?: ZodiacSign }> | number[];\n\nconst isChartObject = (v: unknown): v is Record<string, unknown> => typeof v === 'object' && v !== null;\n\nconst coerceChartNumber = (v: unknown, fallback = 0): number => (typeof v === 'number' && Number.isFinite(v) ? v : fallback);\n\nconst ZODIAC_SIGNS: readonly ZodiacSign[] = [\n  'aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo',\n  'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'\n];\n\nconst isZodiacSign = (v: unknown): v is ZodiacSign => \n  typeof v === 'string' && ZODIAC_SIGNS.includes(v as ZodiacSign);\n\nconst PLANET_NAMES: readonly PlanetName[] = [\n  'sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn',\n  'uranus', 'neptune', 'pluto', 'chiron', 'north_node', 'south_node'\n];\n\nconst isPlanetName = (v: unknown): v is PlanetName =>\n  typeof v === 'string' && PLANET_NAMES.includes(v as PlanetName);\n\n// Re-export types from api.types\nexport * from './api.types';\n\nconst getDefaultPlanets = (): Record<PlanetName, Planet> => ({\n  sun: { name: 'sun', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  moon: { name: 'moon', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  mercury: { name: 'mercury', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  venus: { name: 'venus', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  mars: { name: 'mars', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  jupiter: { name: 'jupiter', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  saturn: { name: 'saturn', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  uranus: { name: 'uranus', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  neptune: { name: 'neptune', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  pluto: { name: 'pluto', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  chiron: { name: 'chiron', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  north_node: { name: 'north_node', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 },\n  south_node: { name: 'south_node', position: 0, retrograde: false, speed: 0, sign: 'aries', house: 1 }\n});\n\n// Narrow import.meta.env access to avoid implicit any\nconst rawApiUrl: string | undefined =\n  typeof import.meta.env?.VITE_API_URL === 'string'\n    ? import.meta.env.VITE_API_URL\n    : undefined;\nlet resolvedApi = '';\nif (typeof rawApiUrl === 'string') {\n  const trimmed = rawApiUrl.trim();\n  if (trimmed.length > 0) {\n    resolvedApi = trimmed;\n  }\n}\nconst BACKEND_URL: string = resolvedApi !== '' ? resolvedApi : 'http://localhost:8000';\n\ndevConsole.log?.('🔗 API Service initializing...');\ndevConsole.log?.('🌐 Backend URL:', BACKEND_URL);\n\n// Helper function to get current auth token\n// Lightweight auth shape to avoid relying on any typed firebase re-export\n// Firebase user surface we rely on (declared for documentation; value via import)\n// interface AuthLikeUser { getIdToken(forceRefresh?: boolean): Promise<string>; }\n\nexport const getAuthToken = async (): Promise<string | null> => {\n  devConsole.log?.('🔑 Getting auth token...');\n  const user = auth.currentUser;\n  \n  // In development, allow mock authentication\n  if (import.meta.env.DEV === true && (user === null || user === undefined)) {\n    devConsole.log?.('🧪 Using development mock token');\n    return 'mock-dev-token';\n  }\n  \n  if (user === null) {\n    devConsole.warn?.('⚠️ No authenticated user found');\n    return null;\n  }\n  \n  try {\n  devConsole.log?.('🔄 Refreshing auth token...');\n    // Force refresh token to ensure it's valid\n    const token = await user.getIdToken(true);\n  devConsole.log?.('✅ Auth token obtained successfully');\n    return token;\n  } catch (error) {\n  devConsole.error('❌ Error getting auth token:', error);\n    return null;\n  }\n};\n\n// Helper function to create authorized headers\ntype AuthHeaders = Record<string, string>;\nconst getAuthHeaders = async (): Promise<AuthHeaders> => {\n  devConsole.log?.('📝 Creating auth headers...');\n  const token = await getAuthToken();\n  if (token === null || token === undefined) {\n  devConsole.error('❌ Authentication required but no token available');\n    throw new AuthenticationError('Authentication required');\n  }\n  devConsole.log?.('✅ Auth headers created');\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n};\n\n// API Functions for Saved Charts\nexport const fetchSavedCharts = async (): Promise<SavedChart[]> => {\n  devConsole.log?.('📊 Fetching saved charts...');\n  \n  try {\n    const headers = await getAuthHeaders();\n    const { data } = await axios.get<SavedChartsResponse>(`${BACKEND_URL}/api/charts/`, { headers });\n  devConsole.log?.('✅ Saved charts fetched successfully:', data);\n    return Array.isArray(data.charts) ? data.charts : [];\n  } catch (error) {\n  devConsole.error('❌ Error fetching saved charts:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to view saved charts');\n    }\n    throw new Error('Failed to fetch saved charts');\n  }\n};\n\nexport const saveChart = async (chartData: SaveChartRequest): Promise<SaveChartResponse> => {\n  devConsole.log?.('💾 Saving chart...', chartData);\n  \n  try {\n    const headers = await getAuthHeaders();\n    const { data } = await axios.post<SaveChartResponse>(`${BACKEND_URL}/api/charts/save-chart`, chartData, { headers });\n  devConsole.log?.('✅ Chart saved successfully:', data);\n    return data;\n  } catch (error) {\n  devConsole.error('❌ Error saving chart:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to save charts');\n    }\n    throw new Error('Failed to save chart');\n  }\n};\n\nexport const deleteChart = async (chartId: ChartId): Promise<void> => {\n  devConsole.log?.(`🗑️ Deleting chart: ${chartId}`);\n  \n  try {\n    const headers = await getAuthHeaders();\n    await axios.delete(`${BACKEND_URL}/api/charts/${chartId}`, {\n      headers\n    });\n    \n  devConsole.log?.('✅ Chart deleted successfully');\n  } catch (error) {\n  devConsole.error('❌ Error deleting chart:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to delete charts');\n    }\n    throw new Error('Failed to delete chart');\n  }\n};\n\nexport const apiClient = {\n  get: async <T = unknown>(endpoint: string): Promise<T> => {\n  devConsole.log?.('📡 API GET request:', endpoint);\n    const url = `${BACKEND_URL}${endpoint}`;\n  devConsole.log?.('🌐 Full URL:', url);\n    \n    try {\n      const response = await fetch(url);\n  devConsole.log?.('📥 Response status:', response.status);\n      \n      if (response.ok === false) {\n  devConsole.error('❌ HTTP error:', response.status, response.statusText);\n        \n        // Map HTTP status code to appropriate error\n        if (response.status === 401) {\n          throw new AuthenticationError();\n        } else if (response.status === 404) {\n          throw new NotFoundError('Resource', endpoint);\n        } else {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n      \n      const data: unknown = await response.json();\n  devConsole.log?.('✅ GET response data:', data);\n      return data as T;\n    } catch (error) {\n  devConsole.error('❌ GET request failed:', error);\n      throw error;\n    }\n  },\n  \n  post: async <T = unknown>(endpoint: string, body: unknown): Promise<T> => {\n  devConsole.log?.('📡 API POST request:', endpoint);\n  devConsole.log?.('📤 Request data:', body);\n    const url = `${BACKEND_URL}${endpoint}`;\n  devConsole.log?.('🌐 Full URL:', url);\n    \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n      \n  devConsole.log?.('📥 Response status:', response.status);\n      \n      if (response.ok !== true) {\n  devConsole.error('❌ HTTP error:', response.status, response.statusText);\n        \n        // Map HTTP status code to appropriate error\n        if (response.status === 401) {\n          throw new AuthenticationError();\n        } else if (response.status === 404) {\n          throw new NotFoundError('Resource', endpoint);\n        } else if (response.status === 400) {\n          throw new ValidationError('Invalid request data', {});\n        } else {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n      \n      const responseData: unknown = await response.json();\n  devConsole.log?.('✅ POST response data:', responseData);\n      return responseData as T;\n    } catch (error) {\n  devConsole.error('❌ POST request failed:', error);\n      throw error;\n    }\n  }\n};\n\nexport interface MultiSystemResponse {\n  astrology?: ChartData;\n  numerology?: unknown;\n  human_design?: HumanDesignData;\n  gene_keys?: GeneKeysData;\n}\n\nexport const fetchChart = async (data: ChartBirthData): Promise<MultiSystemResponse> => {\n  devConsole.log?.('🔮 Fetching chart data...');\n  devConsole.log?.('📊 Chart data input:', data);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making chart request to /calculate-multi-system');\n    const { data: responseData } = await axios.post<MultiSystemResponse>(\n      `${BACKEND_URL}/calculate-multi-system`, \n      data, \n      { headers }\n    );\n  devConsole.log?.('✅ Chart response received:', responseData);\n    return responseData;\n  } catch (error) {\n  devConsole.error('❌ Error fetching chart:', error);\n    throw error;\n  }\n};\n\nexport const fetchPersonalityAnalysis = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('🧠 Fetching personality analysis for user:', userId);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making personality analysis request to /api/analyze/personality/');\n    const response = await axios.get(`${BACKEND_URL}/api/analyze/personality/${userId}`, { headers });\n  devConsole.log?.('✅ Personality analysis response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching personality analysis:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access personality analysis');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('PersonalityAnalysis', String(userId));\n    }\n    throw new Error('Failed to fetch personality analysis');\n  }\n};\n\nexport const fetchNumerology = async (data: Record<string, unknown>): Promise<unknown> => {\n  devConsole.log?.('🔢 Fetching numerology data...');\n  devConsole.log?.('📊 Numerology data input:', data);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making numerology request to /calculate-numerology');\n    const response = await axios.post(`${BACKEND_URL}/calculate-numerology`, data, { headers });\n  devConsole.log?.('✅ Numerology response received:', response.data);\n    return response;\n  } catch (error) {\n  devConsole.error('❌ Error fetching numerology:', error);\n    throw error;\n  }\n};\n\nexport const calculateHumanDesign = async (data: AnyBirthInput): Promise<{ human_design: HumanDesignData }> => {\n  devConsole.log?.('🧬 Calculating Human Design chart...');\n  devConsole.log?.('📊 Human Design input:', data);\n\n  try {\n    const unifiedData = toUnifiedBirthData(data);\n    const headers = await getAuthHeaders();\n    const response = await axios.post<{ human_design: HumanDesignData }>(\n      `${BACKEND_URL}/api/human-design/calculate`, \n      unifiedData, \n      { headers }\n    );\n    \n  devConsole.log?.('✅ Human Design calculation successful:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error calculating Human Design chart:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to calculate Human Design chart');\n    } else if (axios.isAxiosError(error) && error.response?.status === 400) {\n  throw new ValidationError('Invalid birth data for Human Design calculation', {});\n    }\n    throw new Error('Failed to calculate Human Design chart');\n  }\n};\n\nexport const getHumanDesignProfile = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('🧬 Fetching Human Design profile for user:', userId);\n\n  try {\n    const headers = await getAuthHeaders();\n    const response = await axios.get(`${BACKEND_URL}/api/human-design/profile/${userId}`, { headers });\n    \n  devConsole.log?.('✅ Human Design profile retrieved:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching Human Design profile:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access Human Design profile');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('HumanDesignProfile', String(userId));\n    }\n    throw new Error('Failed to fetch Human Design profile');\n  }\n};\n\nexport const calculateGeneKeys = async (data: AnyBirthInput): Promise<GeneKeysData> => {\n  devConsole.log?.('🧬 Calculating Gene Keys...');\n  try {\n    const unifiedData = toUnifiedBirthData(data);\n  devConsole.log?.('📊 Gene Keys input:', unifiedData);\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making Gene Keys request to /gene-keys/calculate');\n    const response = await axios.post<GeneKeysData>(`${BACKEND_URL}/api/gene-keys/calculate`, unifiedData, { headers });\n  devConsole.log?.('✅ Gene Keys response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error calculating Gene Keys:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to calculate Gene Keys');\n    } else if (axios.isAxiosError(error) && error.response?.status === 400) {\n  throw new ValidationError('Invalid birth data for Gene Keys calculation', {});\n    }\n    throw new Error('Failed to calculate Gene Keys');\n  }\n};\n\nexport const getGeneKeysProfile = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('�️ Getting Gene Keys profile for user:', userId);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making Gene Keys profile request to /gene-keys/profile/');\n    const response = await axios.get(`${BACKEND_URL}/api/gene-keys/profile/${userId}`, { headers });\n  devConsole.log?.('✅ Gene Keys profile response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching Gene Keys profile:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access Gene Keys profile');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('GeneKeysProfile', String(userId));\n    }\n    throw new Error('Failed to fetch Gene Keys profile');\n  }\n};\n\nexport const getContemplationProgress = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('🧘 Getting contemplation progress for user:', userId);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making contemplation progress request to /gene-keys/contemplation/');\n    const response = await axios.get(`${BACKEND_URL}/api/gene-keys/contemplation/${userId}`, { headers });\n  devConsole.log?.('✅ Contemplation progress response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching contemplation progress:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access contemplation progress');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('ContemplationProgress', String(userId));\n    }\n    throw new Error('Failed to fetch contemplation progress');\n  }\n};\n\n// Chart data interfaces for type safety\n// ChartBirthData now sourced from shared UnifiedBirthData (re-exported as ChartBirthData)\n\n// Types moved to api.types.ts\nexport type { Planet, House } from './api.types';\n\n// Re-export ChartData from api.types\n\n// Enhanced chart fetching function that hits the /calculate endpoint\nexport const fetchChartData = async (birthData: ChartBirthData): Promise<ChartData> => {\n  devConsole.log?.('🔮 Fetching chart data from /calculate endpoint...');\n  devConsole.log?.('📊 Chart data input:', birthData);\n  \n  try {\n    const response = await apiClient.post('/calculate', birthData);\n  devConsole.log?.('✅ Chart response received:', response);\n    \n    // Transform backend response to frontend format\n    const transformedData = transformBackendResponse(response);\n  devConsole.log?.('🔄 Transformed chart data:', transformedData);\n    \n    return transformedData;\n  } catch (error) {\n  devConsole.error('❌ Error fetching chart data:', error);\n    throw error;\n  }\n};\n\n// Re-export core types for backward compatibility\nexport type { ChartBirthData };\n\n// Transform backend response to match ChartData interface safely\nconst transformBackendResponse = (backendResponse: unknown): ChartData => {\n  if (!isChartObject(backendResponse)) {\n    // Return a default chart with all required planets\n    return {\n      planets: getDefaultPlanets(),\n      houses: [],\n      aspects: [],\n      angles: { ascendant: 0, midheaven: 0, descendant: 180, imumcoeli: 180 },\n      latitude: 0,\n      longitude: 0,\n      timezone: 'UTC',\n      julian_day: 0,\n      house_system: 'placidus'\n    };\n  }\n\n  const raw = backendResponse;\n\n  // Planets\n  const planets: Record<PlanetName, Planet> = getDefaultPlanets();\n  const rawPlanets: BackendChartPlanets | undefined = isChartObject(raw.planets) ? raw.planets as BackendChartPlanets : undefined;\n  if (rawPlanets) {\n    for (const [name, value] of Object.entries(rawPlanets)) {\n      if (isChartObject(value) && isPlanetName(name)) {\n        const p = value as BackendChartPlanet;\n        const position = typeof p.position === 'number'\n          ? p.position\n          : (typeof p.longitude === 'number' ? p.longitude : 0);\n        const planetName = name as PlanetName;\n        planets[planetName] = {\n          name: planetName,\n          position,\n          retrograde: Boolean(p.retrograde),\n          speed: typeof p.speed === 'number' ? p.speed : 0,\n          sign: p.sign ?? 'aries',\n          house: typeof p.house === 'number' ? p.house : 1,\n          dignity: p.dignity,\n          essential_dignity: p.essential_dignity\n        };\n      }\n    }\n  }\n\n  // Houses\n  const houses: House[] = [];\n  const rawHouses: BackendChartHouses = raw.houses as BackendChartHouses;\n  if (isChartObject(rawHouses)) {\n    for (const [houseKey, houseValue] of Object.entries(rawHouses)) {\n      const houseNumber = houseKey.includes('house_') ? parseInt(houseKey.replace('house_', '')) : parseInt(houseKey, 10);\n      if (Number.isNaN(houseNumber) || houseNumber < 1 || houseNumber > 12) continue;\n      let cusp = 0;\n      let sign: ZodiacSign = 'aries'; // Default sign\n      if (typeof houseValue === 'number') {\n        cusp = houseValue;\n      } else if (isChartObject(houseValue)) {\n        cusp = coerceChartNumber((houseValue).cusp, 0);\n        const signVal = (houseValue).sign;\n        if (typeof signVal === 'string' && isZodiacSign(signVal)) {\n          sign = signVal;\n        }\n      }\n      houses.push({ number: houseNumber as 1|2|3|4|5|6|7|8|9|10|11|12, cusp, sign });\n    }\n  } else if (Array.isArray(rawHouses)) {\n    // If backend returns array of numbers\n    rawHouses.forEach((hv, idx) => {\n      const houseNumber = idx + 1;\n      if (houseNumber < 1 || houseNumber > 12) return;\n      const cusp = coerceChartNumber(hv, 0);\n      houses.push({ number: houseNumber as 1|2|3|4|5|6|7|8|9|10|11|12, cusp, sign: 'aries' });\n    });\n  }\n\n  // Aspects\n  const aspects: Aspect[] = [];\n  const rawAspects = Array.isArray(raw.aspects) ? raw.aspects : [];\n  for (const aspect of rawAspects) {\n    if (isChartObject(aspect)) {\n      const {\n        aspect_type,\n        planet1,\n        planet2,\n        orb,\n        applying,\n        exact,\n        power\n      } = aspect as unknown as Aspect;\n\n      if (\n        isZodiacSign(planet1) &&\n        isZodiacSign(planet2) &&\n        typeof orb === 'number' &&\n        typeof applying === 'boolean'\n      ) {\n        aspects.push({\n          aspect_type,\n          planet1,\n          planet2,\n          orb,\n          applying,\n          exact: exact ?? false,\n          power: typeof power === 'number' ? power : undefined\n        });\n      }\n    }\n  }\n\n  const defaultAsc = houses[0]?.cusp ?? 0;\n  const defaultMc = houses[9]?.cusp ?? 0;\n  const anglesRaw = isChartObject(raw.angles) ? raw.angles : undefined;\n  const angles = anglesRaw &&\n    typeof anglesRaw.ascendant === 'number' &&\n    typeof anglesRaw.midheaven === 'number' &&\n    typeof anglesRaw.descendant === 'number' &&\n    typeof anglesRaw.imumcoeli === 'number'\n    ? anglesRaw as { ascendant: number; midheaven: number; descendant: number; imumcoeli: number }\n    : {\n        ascendant: defaultAsc,\n        midheaven: defaultMc,\n        descendant: defaultAsc + 180,\n        imumcoeli: defaultMc + 180\n      };\n\n  // Handle required fields with defaults\n  const latitude = typeof raw.latitude === 'number' ? raw.latitude : 0;\n  const longitude = typeof raw.longitude === 'number' ? raw.longitude : 0;\n  const timezone = typeof raw.timezone === 'string' ? raw.timezone : 'UTC';\n  const julian_day = typeof raw.julian_day === 'number' ? raw.julian_day : 0;\n  const house_system = typeof raw.house_system === 'string' ? raw.house_system as 'placidus' : 'placidus';\n\n  return {\n    planets,\n    houses: houses.sort((a, b) => a.number - b.number),\n    aspects,\n    angles,\n    latitude,\n    longitude,\n    timezone,\n    julian_day,\n    house_system\n  };\n};\n\nexport const fetchNatalChart = async (birthData: Record<string, unknown>): Promise<unknown> => {\n  devConsole.log?.('🌟 Fetching natal chart...');\n  devConsole.log?.('📊 Natal chart data input:', birthData);\n  const response = await apiClient.post('/natal-chart', birthData);\n  devConsole.log?.('✅ Natal chart response received:', response);\n  return response;\n};\n\nexport const fetchSynastryAnalysis = async (person1: Record<string, unknown>, person2: Record<string, unknown>): Promise<unknown> => {\n  devConsole.log?.('💑 Fetching synastry analysis...');\n  devConsole.log?.('📊 Person 1 data:', person1);\n  devConsole.log?.('📊 Person 2 data:', person2);\n  // Unified backend route: /api/synastry/calculate-synastry (router mounted at /api)\n  const response = await apiClient.post('/synastry/calculate-synastry', { person1, person2 });\n  devConsole.log?.('✅ Synastry analysis response received:', response);\n  return response;\n};\n\n// AI Interpretation API Functions\nexport const fetchAIInterpretations = async (chartId: ChartId, userId: UserId): Promise<InterpretationResponse> => {\n  devConsole.log?.('🤖 Fetching AI interpretations...');\n  devConsole.log?.('📊 Chart ID:', chartId, 'User ID:', userId);\n  \n  try {\n    const headers = await getAuthHeaders();\n    const response = await axios.post<InterpretationResponse>(`${BACKEND_URL}/api/interpretations`, {\n      chartId,\n      userId\n    }, { headers });\n    \n  devConsole.log?.('✅ AI interpretations response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching AI interpretations:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to view interpretations');\n    }\n    throw new Error('Failed to fetch AI interpretations');\n  }\n};\n\nexport const generateAIInterpretation = async (request: InterpretationRequest): Promise<InterpretationResponse> => {\n  devConsole.log?.('🔮 Generating AI interpretation...');\n  devConsole.log?.('📊 Request data:', request);\n  \n  try {\n    const headers = await getAuthHeaders();\n    const response = await axios.post<InterpretationResponse>(`${BACKEND_URL}/api/interpretations/generate`, request, { headers });\n    \n  devConsole.log?.('✅ AI interpretation generated:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error generating AI interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to generate interpretations');\n    }\n    throw new Error('Failed to generate AI interpretation');\n  }\n};\n\nexport const fetchInterpretationById = async (interpretationId: InterpretationId): Promise<Interpretation> => {\n  devConsole.log?.('🔍 Fetching interpretation by ID:', interpretationId);\n  \n  try {\n    const headers = await getAuthHeaders();\n    interface InterpretationByIdResponse { data: Interpretation; success?: boolean }\n    const response = await axios.get<InterpretationByIdResponse>(`${BACKEND_URL}/api/interpretations/${interpretationId}`, { headers });\n    \n  devConsole.log?.('✅ Interpretation fetched:', response.data);\n    return response.data.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to view interpretation');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('Interpretation', String(interpretationId));\n    }\n    throw new Error('Failed to fetch interpretation');\n  }\n};\n\nexport const deleteInterpretation = async (interpretationId: InterpretationId): Promise<void> => {\n  devConsole.log?.('🗑️ Deleting interpretation:', interpretationId);\n  \n  try {\n    const headers = await getAuthHeaders();\n    await axios.delete(`${BACKEND_URL}/api/interpretations/${interpretationId}`, { headers });\n    \n  devConsole.log?.('✅ Interpretation deleted successfully');\n  } catch (error) {\n  devConsole.error('❌ Error deleting interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to delete interpretation');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('Interpretation', String(interpretationId));\n    }\n    throw new Error('Failed to delete interpretation');\n  }\n};\n\nexport const updateInterpretation = async (\n  interpretationId: InterpretationId, \n  updates: Partial<Interpretation>\n): Promise<Interpretation> => {\n  devConsole.log?.('📝 Updating interpretation:', interpretationId, updates);\n  \n  try {\n    const headers = await getAuthHeaders();\n    interface InterpretationByIdResponse { data: Interpretation; success?: boolean }\n    const response = await axios.patch<InterpretationByIdResponse>(\n      `${BACKEND_URL}/api/interpretations/${interpretationId}`, \n      updates, \n      { headers }\n    );\n    \n  devConsole.log?.('✅ Interpretation updated:', response.data);\n    return response.data.data;\n  } catch (error) {\n  devConsole.error('❌ Error updating interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to update interpretation');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('Interpretation', String(interpretationId));\n    } else if (axios.isAxiosError(error) && error.response?.status === 400) {\n  throw new ValidationError('Invalid interpretation update data', {});\n    }\n    throw new Error('Failed to update interpretation');\n  }\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/astrologyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/chartAnalyticsService.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":495,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":495,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":505,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":505,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":598,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":598,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":604,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":604,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":610,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":610,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_natalChart' is assigned a value but never used.","line":616,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":616,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transits' is assigned a value but never used.","line":618,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":618,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":624,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":624,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transitData' is assigned a value but never used.","line":626,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":626,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":632,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":632,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transitData' is assigned a value but never used.","line":634,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":634,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":640,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":640,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transitData' is assigned a value but never used.","line":642,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":642,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":652,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":652,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":668,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":668,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":674,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":674,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":680,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":680,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":686,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":686,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":692,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":692,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/chartSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ZodiacSign' is defined but never used.","line":13,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"@typescript-eslint/consistent-type-definitions","severity":2,"message":"Use an `interface` instead of a `type`.","line":79,"column":13,"nodeType":"Identifier","messageId":"interfaceOverType","endLine":79,"endColumn":21,"fix":{"range":[1959,2505],"text":"interface EventMap {\n  'chart-update': ChartUpdateEvent;\n  'sync-error': ChartSyncError;\n  'aspect-alert': AspectEvent;\n  'connection-lost': undefined;\n  'connection-restored': undefined;\n  'chart-registered': { chartId: ChartId; chartSync: ChartDataSync };\n  'chart-synced': { chartId: ChartId; chartData: ChartDataSync };\n  'chart-unregistered': { chartId: ChartId };\n  'all-charts-refreshed': undefined;\n  'transit-update': { chartId: ChartId; transits: Record<PlanetName, Planet> };\n  'aspect-event': { chartId: ChartId; event: AspectEvent };\n}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2646,2649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2646,2649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":99,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":101,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[2753,2829],"text":"this.listeners[event] ??= [];"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":99,"column":31,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":99,"endColumn":33,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[2779,2781],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":133,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":133,"endColumn":31},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":137,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":137,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3947,3947],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3947,3947],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":146,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":146,"endColumn":36},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":148,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":159,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":208,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":214,"endColumn":10},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":208,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":208,"endColumn":49,"suggestions":[{"messageId":"removeAsync","fix":{"range":[6154,6160],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":249,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":249,"endColumn":39,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7360,7388],"text":"options.enableTransitUpdates ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7360,7388],"text":"options.enableTransitUpdates === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":259,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":259,"endColumn":33,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7682,7702],"text":"(options.aspectAlerts ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7682,7702],"text":"(options.aspectAlerts === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":267,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":267,"endColumn":37,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7923,7949],"text":"options.enableProgressions ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7923,7949],"text":"options.enableProgressions === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":313,"column":19,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":313,"endColumn":21,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[9411,9413],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":511,"column":20,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":511,"endColumn":22,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[16471,16473],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is defined but never used.","line":563,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":563,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":582,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":582,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pendingDate' is assigned a value but never used.","line":585,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":585,"endColumn":37},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'syncChart' has no 'await' expression.","line":610,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":610,"endColumn":18,"suggestions":[{"messageId":"removeAsync","fix":{"range":[18891,18946],"text":"syncChart(chartData: ChartData): ChartId"},"desc":"Remove 'async'."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":673,"column":18,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":673,"endColumn":20,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[20684,20686],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'daysAhead' is assigned a value but never used.","line":702,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":702,"endColumn":51},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":705,"column":19,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":705,"endColumn":21,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[21540,21542],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":715,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":715,"endColumn":10},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":732,"column":3,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":734,"endColumn":4,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[22277,22394],"text":"chartSyncService ??= new ChartSyncService();"},"desc":"Fix to nullish coalescing operator (`??=`)."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Real-Time Chart Synchronization Service\n * Manages live updates, transit tracking, and cross-app chart sharing\n */\nimport { Logger } from '../utils/logger';\nimport { \n  type ChartData, \n  type Planet, \n  type House,\n  type PlanetName,\n  type Aspect,\n  type ChartId,\n  type ZodiacSign,\n  type AspectType\n} from './api.types';\nimport { isValidChartData, hasRequiredPlanets } from './validation';\nimport { fetchChartData, type ChartBirthData } from './api';\n\n// Utility function to convert string to ChartId\nfunction toChartId(id: string): ChartId {\n  // This cast is safe because ChartId is a branded type of string\n  return id as unknown as ChartId;\n}\n\n// Event payload types for strong typing\nexport interface ChartUpdateEvent {\n  chartId: ChartId;\n  timestamp: string;\n  changes: {\n    planets?: Partial<Record<PlanetName, Planet>>;\n    houses?: House[];\n    aspects?: Aspect[];\n    angles?: Partial<ChartData['angles']>;\n  };\n}\n\nexport interface ChartSyncError {\n  chartId: ChartId;\n  errorCode: string;\n  message: string;\n  timestamp: string;\n  retryCount: number;\n}\n\nexport interface AspectEvent {\n  type: 'aspect-forming' | 'aspect-separating';\n  transitPlanet: PlanetName;\n  natalPlanet: PlanetName;\n  aspectType: AspectType;\n  orb: number;\n  exactDate: Date;\n  strength: 'strong' | 'medium' | 'weak';\n}\n\nexport interface ChartDataSync {\n  birthData: ChartBirthData;\n  currentData: ChartData;\n  lastUpdate: Date;\n  pendingUpdates: ChartUpdateEvent[];\n  transitData: Record<PlanetName, Planet>;\n  settings: {\n    updateInterval: number;\n    transitTracking: boolean;\n    aspectAlerts: boolean;\n    progressionTracking: boolean;\n  };\n  progressionData?: Record<PlanetName, Planet>;\n}\n\n// Typed event emitter\nexport interface ChartSyncOptions {\n  enableTransitUpdates?: boolean;\n  enableProgressions?: boolean;\n  aspectAlerts?: boolean;\n  updateInterval?: number; // minutes\n}\n\n// Public event map (exported for external subscription typing)\nexport type EventMap = {\n  'chart-update': ChartUpdateEvent;\n  'sync-error': ChartSyncError;\n  'aspect-alert': AspectEvent;\n  'connection-lost': undefined;\n  'connection-restored': undefined;\n  'chart-registered': { chartId: ChartId; chartSync: ChartDataSync };\n  'chart-synced': { chartId: ChartId; chartData: ChartDataSync };\n  'chart-unregistered': { chartId: ChartId };\n  'all-charts-refreshed': undefined;\n  'transit-update': { chartId: ChartId; transits: Record<PlanetName, Planet> };\n  'aspect-event': { chartId: ChartId; event: AspectEvent };\n};\n\ntype EventCallback<T> = (payload: T) => void;\n\nclass TypedEventEmitter {\n  private listeners: Partial<Record<keyof EventMap, EventCallback<any>[]>> = {};\n\n  on<K extends keyof EventMap>(event: K, callback: EventCallback<EventMap[K]>): void {\n    if (this.listeners[event] == null) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event]?.push(callback);\n  }\n\n  off<K extends keyof EventMap>(event: K, callback: EventCallback<EventMap[K]>): void {\n    this.listeners[event] = this.listeners[event]?.filter(cb => cb !== callback);\n  }\n\n  emit<K extends keyof EventMap>(event: K, payload: EventMap[K]): void {\n    this.listeners[event]?.forEach(callback => callback(payload));\n  }\n\n  removeAllListeners(): void {\n    this.listeners = {};\n  }\n}\n\n// Using imported types from api.types.ts\n\nclass ChartSyncService extends TypedEventEmitter {\n  private charts: Map<ChartId, ChartDataSync> = new Map();\n  private syncIntervals: Map<ChartId, ReturnType<typeof setInterval>> = new Map();\n  private transitUpdateInterval: ReturnType<typeof setInterval> | null = null;\n  private isOnline = navigator.onLine;\n  private pendingUpdates: Map<ChartId, Date> = new Map();\n\n  constructor() {\n    super();\n    this.setupNetworkHandlers();\n    this.startGlobalTransitUpdates();\n  }\n\n  private setupNetworkHandlers() {\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.emit('connection-restored', undefined);\n      this.processPendingUpdates();\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.emit('connection-lost', undefined);\n    });\n  }\n\n  private startGlobalTransitUpdates() {\n    // Update transits every minute\n    this.transitUpdateInterval = setInterval(async () => {\n      if (!this.isOnline) return;\n      \n      try {\n        const currentTransits = await this.fetchCurrentTransits();\n        this.charts.forEach((chartData, chartId) => {\n          void this.updateTransits(chartId, currentTransits);\n        });\n      } catch (error) {\n        Logger.error('Failed to update global transits', error);\n      }\n    }, 60000); // 1 minute\n  }\n\n  /**\n   * Register a chart for real-time synchronization\n   */\n  async registerChart(rawChartId: string, birthData: ChartBirthData, options: ChartSyncOptions = {}): Promise<ChartDataSync> {\n    try {\n      const chartId = toChartId(rawChartId);\n      const {\n        enableTransitUpdates = true,\n        enableProgressions = false,\n        aspectAlerts = true,\n        updateInterval = 5\n      } = options;\n\n      // Fetch initial chart data\n      const chartData = await fetchChartData(birthData);\n      \n      if (!isValidChartData(chartData)) {\n        throw new Error('Invalid chart data received');\n      }\n\n      if (!hasRequiredPlanets(chartData.planets)) {\n        throw new Error('Missing required planets in chart data');\n      }\n\n      const transitData = enableTransitUpdates ? await this.fetchCurrentTransits() : this.createEmptyTransitData();\n      const progressionData = enableProgressions ? await this.fetchProgressions(birthData) : undefined;\n\n      const chartSync: ChartDataSync = {\n        birthData,\n        currentData: chartData,\n        lastUpdate: new Date(),\n        pendingUpdates: [],\n        transitData,\n        settings: {\n          updateInterval,\n          transitTracking: enableTransitUpdates,\n          aspectAlerts,\n          progressionTracking: enableProgressions\n        },\n        progressionData\n      };\n\n      this.charts.set(chartId, chartSync);\n\n      // Set up periodic updates\n      if (enableTransitUpdates || enableProgressions) {\n        const interval = setInterval(async () => {\n          void this.updateChart(chartId, { \n            enableTransitUpdates, \n            enableProgressions, \n            aspectAlerts \n          });\n        }, updateInterval * 60000);\n        \n        this.syncIntervals.set(chartId, interval);\n      }\n\n      this.emit('chart-registered', { chartId, chartSync });\n      return chartSync;\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      Logger.error('Failed to register chart', error);\n      throw new Error(`Failed to register chart: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Update a specific chart\n   */\n  private async updateChart(rawChartId: string, options: Pick<ChartSyncOptions, 'enableTransitUpdates' | 'enableProgressions' | 'aspectAlerts'>): Promise<void> {\n    const chartId = toChartId(rawChartId);\n    \n    if (this.isOnline === false) {\n      this.pendingUpdates.set(chartId, new Date());\n      return;\n    }\n\n    const chartData = this.charts.get(chartId);\n    if (chartData === null || chartData === undefined) return;\n\n    try {\n      const updates: Partial<ChartDataSync> = {\n        lastUpdate: new Date(),\n        pendingUpdates: []\n      };\n\n      if (options.enableTransitUpdates) {\n        const newTransits = await this.fetchCurrentTransits();\n        const aspectEvents = this.detectAspectChanges(\n          chartData.currentData,\n          chartData.transitData,\n          newTransits\n        );\n        \n        updates.transitData = newTransits;\n        \n        if (options.aspectAlerts && aspectEvents.length > 0) {\n          aspectEvents.forEach(event => {\n            this.emit('aspect-alert', event);\n            this.emit('aspect-event', { chartId, event });\n          });\n        }\n      }\n\n      if (options.enableProgressions) {\n        // Update progressions (slower moving, update less frequently)\n        const now = new Date();\n        const hoursSinceLastUpdate = (now.getTime() - chartData.lastUpdate.getTime()) / (1000 * 60 * 60);\n        \n        if (hoursSinceLastUpdate >= 24) { // Update progressions daily\n          updates.progressionData = await this.fetchProgressions(chartData.birthData);\n        }\n      }\n\n      // Create new chart data with updates\n      const updatedChartData: ChartDataSync = {\n        ...chartData,\n        ...updates\n      };\n\n      this.charts.set(chartId, updatedChartData);\n\n      this.emit('chart-update', {\n        chartId,\n        timestamp: new Date().toISOString(),\n        changes: {\n          planets: updates.transitData,\n          aspects: []  // Add aspects if needed\n        }\n      });\n\n    } catch (error) {\n      const syncError: ChartSyncError = {\n        chartId,\n        errorCode: 'UPDATE_FAILED',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        retryCount: 0\n      };\n      this.emit('sync-error', syncError);\n      Logger.error(`Failed to update chart ${rawChartId}`, error);\n    }\n  }\n\n  /**\n   * Update transits for a specific chart\n   */\n  private updateTransits(rawChartId: string, newTransits: Record<PlanetName, Planet>): void {\n    const chartId = toChartId(rawChartId);\n    const chartData = this.charts.get(chartId);\n    if (chartData == null) return;\n\n    const aspectEvents = this.detectAspectChanges(\n      chartData.currentData,\n      chartData.transitData,\n      newTransits\n    );\n    \n    // Create updated chart data\n    const updatedChartData: ChartDataSync = {\n      ...chartData,\n      transitData: newTransits,\n      lastUpdate: new Date()\n    };\n    \n    this.charts.set(chartId, updatedChartData);\n    \n    this.emit('transit-update', { chartId, transits: newTransits });\n    \n    if (aspectEvents.length > 0) {\n      aspectEvents.forEach(event => {\n        this.emit('aspect-alert', event);\n      });\n    }\n  }\n\n  /**\n   * Fetch current planetary positions for transits\n   */\n  private async fetchCurrentTransits(): Promise<Record<PlanetName, Planet>> {\n    const now = new Date();\n    const transitBirthData: ChartBirthData = {\n      year: now.getFullYear(),\n      month: now.getMonth() + 1,\n      day: now.getDate(),\n      hour: now.getHours(),\n      minute: now.getMinutes(),\n      lat: 0, // Greenwich\n      lon: 0,\n      timezone: 'UTC',\n      city: 'Greenwich'\n    };\n\n    const response = await fetchChartData(transitBirthData);\n  const planets = response.planets ?? {};\n  // Narrow keys to PlanetName when possible\n  const narrowed: Record<PlanetName, Planet> = {} as Record<PlanetName, Planet>;\n  (Object.keys(planets) as PlanetName[]).forEach(k => { narrowed[k] = planets[k]; });\n  return narrowed;\n  }\n\n  /**\n   * Fetch progressed chart positions\n   */\n  private async fetchProgressions(birthData: ChartBirthData): Promise<Record<PlanetName, Planet>> {\n    // Calculate progressed positions (1 day = 1 year progression)\n    const birthDate = new Date(birthData.year, birthData.month - 1, birthData.day);\n    const now = new Date();\n    const ageInYears = (now.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24 * 365.25);\n    \n    const progressedDate = new Date(birthDate);\n    progressedDate.setDate(progressedDate.getDate() + Math.floor(ageInYears));\n\n    const progressedBirthData: ChartBirthData = {\n      ...birthData,\n      year: progressedDate.getFullYear(),\n      month: progressedDate.getMonth() + 1,\n      day: progressedDate.getDate()\n    };\n\n    const response = await fetchChartData(progressedBirthData);\n  const planets = response.planets ?? {};\n  const narrowed: Record<PlanetName, Planet> = {} as Record<PlanetName, Planet>;\n  (Object.keys(planets) as PlanetName[]).forEach(k => { narrowed[k] = planets[k]; });\n  return narrowed;\n  }\n\n  /**\n   * Detect forming and separating aspects\n   */\n  private detectAspectChanges(\n    natal: ChartData,\n    oldTransits: Record<PlanetName, Planet>,\n    newTransits: Record<PlanetName, Planet>\n  ): AspectEvent[] {\n    const events: AspectEvent[] = [];\n    const aspectAngles = [0, 60, 90, 120, 150, 180]; // Major aspects\n    const maxOrb = 8; // Maximum orb to consider\n\n    const transitPlanetNames = Object.keys(newTransits) as PlanetName[];\n    const natalPlanetNames = Object.keys(natal.planets) as PlanetName[];\n\n    transitPlanetNames.forEach(transitPlanet => {\n      const transitData = newTransits[transitPlanet];\n      natalPlanetNames.forEach(natalPlanet => {\n        const natalData = natal.planets[natalPlanet];\n        aspectAngles.forEach(aspectAngle => {\n          const currentAngle = Math.abs(transitData.position - natalData.position) % 360;\n          const currentOrb = Math.min(\n            Math.abs(currentAngle - aspectAngle),\n            Math.abs(currentAngle - (aspectAngle + 360)),\n            Math.abs((currentAngle + 360) - aspectAngle)\n          );\n\n          if (currentOrb <= maxOrb) {\n            const oldTransitData = oldTransits[transitPlanet];\n            if (oldTransitData !== null && oldTransitData !== undefined) {\n              const oldAngle = Math.abs(oldTransitData.position - natalData.position) % 360;\n              const oldOrb = Math.min(\n                Math.abs(oldAngle - aspectAngle),\n                Math.abs(oldAngle - (aspectAngle + 360)),\n                Math.abs((oldAngle + 360) - aspectAngle)\n              );\n\n              try {\n                // Detect if aspect is forming (orb decreasing) or separating (orb increasing)\n                if (currentOrb < oldOrb && currentOrb <= 1) {\n                  events.push({\n                    type: 'aspect-forming',\n                    transitPlanet,\n                    natalPlanet,\n                    aspectType: this.getAspectType(aspectAngle),\n                    orb: currentOrb,\n                    exactDate: this.calculateExactAspectDate(transitData, natalData, aspectAngle),\n                    strength: this.getAspectStrengthFromOrb(currentOrb)\n                  });\n                } else if (currentOrb > oldOrb && oldOrb <= 1) {\n                  events.push({\n                    type: 'aspect-separating',\n                    transitPlanet,\n                    natalPlanet,\n                    aspectType: this.getAspectType(aspectAngle),\n                    orb: currentOrb,\n                    exactDate: new Date(), // Just passed\n                    strength: this.getAspectStrengthFromOrb(currentOrb)\n                  });\n                }\n              } catch (error) {\n                Logger.error(`Failed to process aspect: ${transitPlanet} to ${natalPlanet} at ${aspectAngle}°`, error);\n                return; // Skip this aspect calculation \n              }\n            }\n          }\n        });\n      });\n    });\n    return events;\n  }\n\n  private getAspectStrength(\n    transitPlanet: PlanetName,\n    natalPlanet: PlanetName,\n    aspectAngle: number\n  ): 'major' | 'minor' {\n    // Major aspects involving luminaries or personal planets are considered major\n    const majorPlanets: PlanetName[] = ['sun', 'moon', 'mercury', 'venus', 'mars'];\n    const majorAspects = [0, 90, 120, 180]; // conjunction, square, trine, opposition\n\n    if (\n      majorAspects.includes(aspectAngle) &&\n      (majorPlanets.includes(transitPlanet) || majorPlanets.includes(natalPlanet))\n    ) {\n      return 'major';\n    }\n    return 'minor';\n  }\n\n  /**\n   * Calculate when an aspect will be exact\n   */\n  private calculateExactAspectDate(transit: Planet, natal: Planet, aspectAngle: number): Date {\n    // Simplified calculation - in production, use more accurate ephemeris math\n    const speed = typeof transit.speed === 'number' ? transit.speed : 1; // degrees per day\n    const currentAngle = Math.abs(transit.position - natal.position) % 360;\n    const targetAngle = aspectAngle;\n    const angleDifference = Math.abs(currentAngle - targetAngle);\n    \n    const daysToExact = angleDifference / Math.abs(speed);\n    const exactDate = new Date();\n    exactDate.setDate(exactDate.getDate() + daysToExact);\n    \n    return exactDate;\n  }\n\n  /**\n   * Get aspect type from angle\n   */\n  private getAspectType(angle: number): AspectType {\n    const aspectMap: Record<number, AspectType> = {\n      0: 'conjunction',\n      60: 'sextile',\n      90: 'square',\n      120: 'trine',\n      150: 'quincunx',\n      180: 'opposition'\n    };\n    \n    const aspectType = aspectMap[angle];\n    if (aspectType == null) {\n      throw new Error(`Invalid aspect angle: ${angle}`);\n    }\n    return aspectType;\n  }\n\n  /**\n   * Get aspect strength from orb\n   */\n  private getAspectStrengthFromOrb(orb: number): 'strong' | 'medium' | 'weak' {\n    if (orb <= 1) return 'strong';\n    if (orb <= 3) return 'medium';\n    return 'weak';\n  }\n\n  /**\n   * Transform unknown data to ChartData format with validation\n   */\n  private transformChartData(data: unknown): ChartData {\n    if (isValidChartData(data)) {\n      return data;\n    }\n    \n    throw new Error('Invalid chart data format');\n  }\n\n  /**\n   * Create empty transit data\n   */\n  private createEmptyTransitData(): Record<PlanetName, Planet> {\n    const planetNames: PlanetName[] = [\n      'sun', 'moon', 'mercury', 'venus', 'mars',\n      'jupiter', 'saturn', 'uranus', 'neptune',\n      'pluto', 'chiron', 'north_node', 'south_node'\n    ];\n\n    return planetNames.reduce((acc, name) => {\n      acc[name] = {\n        name,\n        position: 0,\n        sign: 'aries', // Default\n        house: 1,\n        retrograde: false,\n        speed: 0\n      };\n      return acc;\n    }, {} as Record<PlanetName, Planet>);\n  }\n\n  /**\n   * Extract birth data from chart (reverse transformation)\n   */\n  private getBirthDataFromChart(_chartData: ChartData): ChartBirthData { // TODO: derive from metadata when available\n    // This would extract birth data from chart metadata\n    // For now, return a placeholder\n    return {\n      year: 1990,\n      month: 1,\n      day: 1,\n      hour: 12,\n      minute: 0,\n      lat: 0,\n      lon: 0,\n      timezone: 'UTC',\n      city: 'Unknown'\n    };\n  }\n\n  /**\n   * Process pending updates when connection is restored\n   */\n  private async processPendingUpdates() {\n    if (!this.isOnline) return;\n\n    for (const [chartId, pendingDate] of this.pendingUpdates.entries()) {\n      try {\n        await this.updateChart(chartId, {\n          enableTransitUpdates: true,\n          enableProgressions: true,\n          aspectAlerts: true\n        });\n        this.pendingUpdates.delete(chartId);\n      } catch (error) {\n        Logger.error(`Failed to process pending update for chart ${chartId}`, error);\n      }\n    }\n  }\n\n  /**\n   * Get chart data\n   */\n  getChart(rawChartId: string): ChartDataSync | undefined {\n    const chartId = toChartId(rawChartId);\n    return this.charts.get(chartId);\n  }\n\n  /**\n   * Sync chart data to Firestore (for one-off saves)\n   */\n  async syncChart(chartData: ChartData): Promise<ChartId> {\n    try {\n      // Generate a unique chart ID\n      const chartId = toChartId(\n        `chart_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      );\n      \n      if (!isValidChartData(chartData)) {\n        throw new Error('Invalid chart data');\n      }\n      \n      // Create a ChartDataSync object\n      const chartSync: ChartDataSync = {\n        birthData: {\n          year: new Date().getFullYear(),\n          month: new Date().getMonth() + 1,\n          day: new Date().getDate(),\n          hour: new Date().getHours(),\n          minute: new Date().getMinutes(),\n          lat: chartData.latitude || 0,\n          lon: chartData.longitude || 0,\n          timezone: chartData.timezone || 'UTC',\n          city: 'Unknown'\n        },\n        currentData: chartData,\n        lastUpdate: new Date(),\n        pendingUpdates: [],\n        transitData: this.createEmptyTransitData(),\n        settings: {\n          updateInterval: 5,\n          transitTracking: false,\n          aspectAlerts: false,\n          progressionTracking: false\n        }\n      };\n\n      // Store in memory\n      this.charts.set(chartId, chartSync);\n      \n      this.emit('chart-synced', { chartId, chartData: chartSync });\n      \n      Logger.info(`Chart synced successfully with ID: ${chartId}`);\n      return chartId;\n      \n    } catch (error) {\n      Logger.error('Failed to sync chart', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all registered charts\n   */\n  getAllCharts(): Map<ChartId, ChartDataSync> {\n    return new Map(this.charts);\n  }\n\n  /**\n   * Unregister a chart\n   */\n  unregisterChart(rawChartId: string): void {\n    const chartId = toChartId(rawChartId);\n    const interval = this.syncIntervals.get(chartId);\n    if (interval != null) {\n      clearInterval(interval);\n      this.syncIntervals.delete(chartId);\n    }\n    \n    this.charts.delete(chartId);\n    this.pendingUpdates.delete(chartId);\n    this.emit('chart-unregistered', { chartId });\n  }\n\n  /**\n   * Force refresh all charts\n   */\n  async refreshAllCharts(): Promise<void> {\n    const promises = Array.from(this.charts.keys()).map(chartId =>\n      this.updateChart(chartId, {\n        enableTransitUpdates: true,\n        enableProgressions: true,\n        aspectAlerts: true\n      })\n    );\n    \n    await Promise.allSettled(promises);\n    this.emit('all-charts-refreshed', undefined);\n  }\n\n  /**\n   * Get upcoming aspects for a chart\n   */\n  getUpcomingAspects(rawChartId: string, daysAhead = 7): AspectEvent[] {\n    const chartId = toChartId(rawChartId);\n    const chartData = this.charts.get(chartId);\n    if (chartData == null) return [];\n\n    // This would calculate upcoming aspects within the specified timeframe\n    // For now, return empty array - would implement full calculation in production\n    return [];\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    if (this.transitUpdateInterval !== null && this.transitUpdateInterval !== undefined) {\n      clearInterval(this.transitUpdateInterval);\n    }\n    \n    this.syncIntervals.forEach(interval => clearInterval(interval));\n    this.syncIntervals.clear();\n    this.charts.clear();\n    this.pendingUpdates.clear();\n  this.removeAllListeners();\n  }\n}\n\n// Singleton instance\nlet chartSyncService: ChartSyncService | null = null;\n\nexport const getChartSyncService = (): ChartSyncService => {\n  if (chartSyncService === null || chartSyncService === undefined) {\n    chartSyncService = new ChartSyncService();\n  }\n  return chartSyncService;\n};\n\nexport default ChartSyncService;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/ephemeris-performance.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":170,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":170,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":176,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":176,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":183,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":183,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance monitoring for ephemeris operations.\n * \n * This module provides utilities to monitor cache hit rates, latency,\n * and other performance metrics for the ephemeris service.\n */\n\nimport * as React from 'react';\nimport { devConsole, loggingConfig } from '../config/environment';\n\ninterface PerformanceMetrics {\n  cacheHitRate: number;\n  averageLatency: number;\n  totalRequests: number;\n  cacheHits: number;\n  cacheMisses: number;\n  errors: number;\n  lastUpdated: Date;\n}\n\ninterface PerformanceEntry {\n  timestamp: Date;\n  operation: string;\n  latency: number;\n  cacheHit: boolean;\n  success: boolean;\n  error?: string;\n}\n\nclass EphemerisPerformanceMonitor {\n  private entries: PerformanceEntry[] = [];\n  private maxEntries = 1000; // Keep last 1000 entries\n\n  /**\n   * Record a performance entry for an ephemeris operation.\n   */\n  recordOperation(\n    operation: string,\n    latency: number,\n    cacheHit: boolean,\n    success: boolean,\n    error?: string\n  ): void {\n    const entry: PerformanceEntry = {\n      timestamp: new Date(),\n      operation,\n      latency,\n      cacheHit,\n      success,\n      error,\n    };\n\n    this.entries.push(entry);\n\n    // Keep only the most recent entries\n    if (this.entries.length > this.maxEntries) {\n      this.entries = this.entries.slice(-this.maxEntries);\n    }\n\n    // Development logging routed through devConsole to respect global logging policy\n    if (loggingConfig.enableConsole === true && loggingConfig.level === 'debug') {\n      devConsole.log?.(`[Ephemeris] ${operation}: ${latency}ms (cache: ${cacheHit ? 'hit' : 'miss'})`);\n    }\n  }\n\n  /**\n   * Get current performance metrics.\n   */\n  getMetrics(): PerformanceMetrics {\n    const now = new Date();\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n    \n    // Filter to last hour for more relevant metrics\n    const recentEntries = this.entries.filter(\n      entry => entry.timestamp >= oneHourAgo\n    );\n\n    const totalRequests = recentEntries.length;\n    const cacheHits = recentEntries.filter(entry => entry.cacheHit).length;\n    const cacheMisses = totalRequests - cacheHits;\n    const errors = recentEntries.filter(entry => entry.success === false).length;\n    \n    const totalLatency = recentEntries.reduce((sum, entry) => sum + entry.latency, 0);\n    const averageLatency = totalRequests > 0 ? totalLatency / totalRequests : 0;\n    \n    const cacheHitRate = totalRequests > 0 ? (cacheHits / totalRequests) * 100 : 0;\n\n    return {\n      cacheHitRate,\n      averageLatency,\n      totalRequests,\n      cacheHits,\n      cacheMisses,\n      errors,\n      lastUpdated: now,\n    };\n  }\n\n  /**\n   * Get entries for a specific operation.\n   */\n  getOperationEntries(operation: string): PerformanceEntry[] {\n    return this.entries.filter(entry => entry.operation === operation);\n  }\n\n  /**\n   * Clear all performance data.\n   */\n  clear(): void {\n    this.entries = [];\n  }\n\n  /**\n   * Get performance summary as a formatted string.\n   */\n  getSummary(): string {\n    const metrics = this.getMetrics();\n    \n    return [\n      `Ephemeris Performance Summary:`,\n      `  Total requests: ${metrics.totalRequests}`,\n      `  Cache hit rate: ${metrics.cacheHitRate.toFixed(1)}%`,\n      `  Average latency: ${metrics.averageLatency.toFixed(0)}ms`,\n      `  Errors: ${metrics.errors}`,\n      `  Last updated: ${metrics.lastUpdated.toISOString()}`,\n    ].join('\\n');\n  }\n\n  /**\n   * Log current performance summary to console.\n   */\n  logSummary(): void {\n    devConsole.log?.(this.getSummary());\n  }\n}\n\n// Global performance monitor instance\nexport const ephemerisMonitor = new EphemerisPerformanceMonitor();\n\n/**\n * Higher-order function to wrap ephemeris operations with performance monitoring.\n */\nexport function withPerformanceMonitoring<TArgs extends unknown[], TResult>(\n  operation: string,\n  fn: (...args: TArgs) => Promise<TResult>,\n  checkCache?: (...args: TArgs) => boolean\n): (...args: TArgs) => Promise<TResult> {\n  return async (...args: TArgs): Promise<TResult> => {\n    const startTime = performance.now();\n    const cacheHit = checkCache ? checkCache(...args) : false;\n    try {\n      const result = await fn(...args);\n      const endTime = performance.now();\n      const latency = endTime - startTime;\n      ephemerisMonitor.recordOperation(operation, latency, cacheHit, true);\n      return result;\n    } catch (error) {\n      const endTime = performance.now();\n      const latency = endTime - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      ephemerisMonitor.recordOperation(operation, latency, cacheHit, false, errorMessage);\n      throw error;\n    }\n  };\n}\n\n/**\n * React hook to get real-time performance metrics.\n */\nexport function useEphemerisPerformanceMetrics() {\n  const [metrics, setMetrics] = React.useState<PerformanceMetrics>(() => \n    ephemerisMonitor.getMetrics()\n  );\n\n  React.useEffect(() => {\n    const updateMetrics = () => {\n      setMetrics(ephemerisMonitor.getMetrics());\n    };\n\n    // Update metrics every 30 seconds\n    const interval = setInterval(updateMetrics, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const refreshMetrics = React.useCallback(() => {\n    setMetrics(ephemerisMonitor.getMetrics());\n  }, []);\n\n  return {\n    metrics,\n    refreshMetrics,\n    logSummary: ephemerisMonitor.logSummary.bind(ephemerisMonitor),\n  };\n}\n\n// Export performance monitor for external use\nexport { ephemerisMonitor as default };\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/ephemeris.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/integrations' import is duplicated.","line":18,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":22,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":70},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":88,"column":23,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":88,"endColumn":25,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[3052,3054],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":90,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":90,"endColumn":23,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[3154,3156],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":107,"column":26,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":107,"endColumn":28,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[3680,3682],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since the receiver accepts the original type of the expression.","line":110,"column":19,"nodeType":"TSNonNullExpression","messageId":"contextuallyUnnecessary","endLine":110,"endColumn":36,"fix":{"range":[3938,3939],"text":""}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":110,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":110,"endColumn":36},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":110,"column":19,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":110,"endColumn":27,"fix":{"range":[3929,3930],"text":""}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":110,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":110,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3929,3930],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":112,"column":61,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":112,"endColumn":63,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4097,4099],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":114,"column":23,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":114,"endColumn":25,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[4191,4193],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":116,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":116,"endColumn":23,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[4292,4294],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'uniquePlanets' is assigned a value but never used.","line":187,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":24}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * Ephemeris service for the astro frontend application.\n * \n * This service provides lazy-loaded, cached access to ephemeris data\n * via the backend API, which proxies to the dedicated ephemeris server.\n */\n\nimport { useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient, type UseQueryResult, type UseMutationResult } from '@tanstack/react-query';\nimport {\n  createEphemerisClient,\n  type EphemerisConfig,\n  type PlanetPosition,\n  type PlanetName,\n  dateToJulianDay,\n  SUPPORTED_PLANETS\n} from '@cosmichub/integrations';\nimport type {\n  CalculationResponse,\n  BatchCalculationResponse,\n  EphemerisHealthResponse\n} from '@cosmichub/integrations';\n\n// Configuration for the ephemeris client\nconst getEphemerisConfig = (): EphemerisConfig => ({\n  // Use the backend API base (frontend talks to backend, which proxies ephemeris)\n  apiBaseUrl: import.meta.env.VITE_API_URL ?? 'http://localhost:8000',\n  timeout: 30000,\n  // API key handled by backend authentication, not needed here\n});\n\n// Query keys for React Query\nexport const ephemerisKeys = {\n  all: ['ephemeris'] as const,\n  health: () => [...ephemerisKeys.all, 'health'] as const,\n  planets: () => [...ephemerisKeys.all, 'planets'] as const,\n  calculation: (julianDay: number, planet: string) => \n    [...ephemerisKeys.all, 'calculation', julianDay, planet] as const,\n  allPositions: (julianDay: number) => \n    [...ephemerisKeys.all, 'positions', julianDay] as const,\n};\n\n/**\n * Hook to get a configured ephemeris client instance\n */\nexport const useEphemerisClient = (): ReturnType<typeof createEphemerisClient> =>\n  useMemo(() => createEphemerisClient(getEphemerisConfig()), []);\n\n/**\n * Hook to check ephemeris service health\n */\nexport const useEphemerisHealth = (): UseQueryResult<EphemerisHealthResponse, Error> => {\n  const client = useEphemerisClient();\n  return useQuery<EphemerisHealthResponse, Error>({\n    queryKey: ephemerisKeys.health(),\n    queryFn: () => client.healthCheck(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 3,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000)\n  });\n};\n\n/**\n * Hook to get supported planets list\n */\nexport const useSupportedPlanets = (): UseQueryResult<PlanetName[], Error> => {\n  const client = useEphemerisClient();\n  return useQuery<PlanetName[], Error>({\n    queryKey: ephemerisKeys.planets(),\n    queryFn: () => client.getSupportedPlanets(),\n    staleTime: 24 * 60 * 60 * 1000, // 24 hours - rarely changes\n    gcTime: 24 * 60 * 60 * 1000\n  });\n};\n\n/**\n * Hook to calculate planetary position for a specific date and planet\n */\nexport const usePlanetaryPosition = (\n  date: Date | null,\n  planet: PlanetName,\n  options?: { enabled?: boolean }\n): UseQueryResult<CalculationResponse, Error> => {\n  const client = useEphemerisClient();\n  const julianDay = date !== null && date !== undefined ? dateToJulianDay(date) : null;\n  const isEnabled = options?.enabled !== false && julianDay !== null && julianDay !== undefined;\n  return useQuery<CalculationResponse, Error>({\n  queryKey: julianDay != null ? ephemerisKeys.calculation(julianDay, planet) : [],\n    queryFn: () => {\n      if (julianDay == null) throw new Error('Date is required');\n      return client.calculatePosition(julianDay, planet);\n    },\n    enabled: isEnabled,\n    staleTime: 60 * 60 * 1000,\n    gcTime: 24 * 60 * 60 * 1000\n  });\n};\n\n/**\n * Hook to get all planetary positions for a specific date\n */\nexport const useAllPlanetaryPositions = (\n  date: Date | null,\n  options?: { enabled?: boolean; planets?: PlanetName[] }\n): UseQueryResult<Record<PlanetName, PlanetPosition>, Error> => {\n  const client = useEphemerisClient();\n  const julianDay = date != null ? dateToJulianDay(date) : null;\n  const hasCustomPlanets = Array.isArray(options?.planets) && options?.planets !== undefined && options.planets.length > 0;\n  const planetsToCalculate: PlanetName[] = hasCustomPlanets\n    ? [...new Set(options!.planets!)] // dedupe if caller passes duplicates\n    : [...SUPPORTED_PLANETS]; // spread to mutable array\n  const isEnabled = options?.enabled !== false && julianDay != null;\n  return useQuery<Record<PlanetName, PlanetPosition>, Error>({\n  queryKey: julianDay != null ? ephemerisKeys.allPositions(julianDay) : [],\n    queryFn: async () => {\n      if (julianDay == null) throw new Error('Date is required');\n      const calculations = planetsToCalculate.map((planet) => ({\n        julian_day: julianDay,\n        planet\n      }));\n      const response = await client.calculateBatchPositions(calculations);\n      const positions: Partial<Record<PlanetName, PlanetPosition>> = {};\n      for (const result of response.results) {\n        const planetName = result.planet as PlanetName;\n        positions[planetName] = result.position;\n      }\n      return positions as Record<PlanetName, PlanetPosition>;\n    },\n    enabled: isEnabled,\n    staleTime: 60 * 60 * 1000,\n    gcTime: 24 * 60 * 60 * 1000\n  });\n};\n\n/**\n * Hook to batch calculate multiple planetary positions\n */\nexport const useBatchPlanetaryCalculation = (): UseMutationResult<\n  BatchCalculationResponse,\n  Error,\n  Array<{ date: Date; planet: PlanetName }>,\n  unknown\n> => {\n  const client = useEphemerisClient();\n  const queryClient = useQueryClient();\n  return useMutation<BatchCalculationResponse, Error, Array<{ date: Date; planet: PlanetName }>>({\n    mutationFn: async (requests) => {\n      const calculations = requests.map((req) => ({\n        julian_day: dateToJulianDay(req.date),\n        planet: req.planet\n      }));\n      return client.calculateBatchPositions(calculations);\n    },\n    onSuccess: (data, variables) => {\n      data.results.forEach((result, index) => {\n  const request = variables[index];\n  if (request !== null && request !== undefined) {\n          const julianDay = dateToJulianDay(request.date);\n          // Cache the full calculation response for the single planet/date\n          queryClient.setQueryData(\n            ephemerisKeys.calculation(julianDay, request.planet),\n            result\n          );\n        }\n      });\n    }\n  });\n};\n\n/**\n * Utility hook to preload planetary positions for a date range\n */\nexport const usePrefetchPlanetaryPositions = (): { prefetchPositions: (\n  startDate: Date,\n  endDate: Date,\n  planets?: PlanetName[]\n) => Promise<void> } => {\n  const queryClient = useQueryClient();\n  const client = useEphemerisClient();\n\n  const prefetchPositions = async (\n    startDate: Date,\n    endDate: Date,\n    planets: PlanetName[] = [...SUPPORTED_PLANETS]\n  ): Promise<void> => {\n    if (endDate < startDate) return; // no-op on invalid range\n    const uniquePlanets = [...new Set(planets)];\n    const dates: Date[] = [];\n    const currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n      dates.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    const batchSize = 10;\n    for (let i = 0; i < dates.length; i += batchSize) {\n      const batch = dates.slice(i, i + batchSize);\n      await Promise.all(\n        batch.map((date) => {\n          const julianDay = dateToJulianDay(date);\n          return queryClient.prefetchQuery({\n            queryKey: ephemerisKeys.allPositions(julianDay),\n            queryFn: () => client.getAllPlanetaryPositions(julianDay),\n            staleTime: 60 * 60 * 1000\n          });\n        })\n      );\n    }\n  };\n\n  return { prefetchPositions };\n};\n\n/**\n * Hook to invalidate ephemeris cache (useful for forcing refresh)\n */\nexport const useInvalidateEphemerisCache = (): {\n  invalidateAll: () => void;\n  invalidateCalculation: (julianDay: number, planet: PlanetName) => void;\n  invalidateAllPositions: (julianDay: number) => void;\n} => {\n  const queryClient = useQueryClient();\n  const invalidateAll = (): void => {\n    void queryClient.invalidateQueries({ queryKey: ephemerisKeys.all });\n  };\n  const invalidateCalculation = (julianDay: number, planet: PlanetName): void => {\n    void queryClient.invalidateQueries({\n      queryKey: ephemerisKeys.calculation(julianDay, planet)\n    });\n  };\n  const invalidateAllPositions = (julianDay: number): void => {\n    void queryClient.invalidateQueries({\n      queryKey: ephemerisKeys.allPositions(julianDay)\n    });\n  };\n  return { invalidateAll, invalidateCalculation, invalidateAllPositions };\n};\n\n// Export utility functions for direct use\nexport {\n  dateToJulianDay,\n  julianDayToDate,\n  formatPlanetPosition,\n  getAstrologicalSign,\n  SUPPORTED_PLANETS,\n} from '@cosmichub/integrations';\n\n// Export types for convenience\nexport type {\n  PlanetPosition,\n  PlanetName,\n  CalculationResponse,\n  BatchCalculationResponse,\n  EphemerisHealthResponse,\n} from '@cosmichub/integrations';\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.new.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.unified.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":41,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":41,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .devConsole on an `any` value.","line":41,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .devConsole on an `any` value.","line":41,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .devConsole on an `any` value.","line":41,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":82},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":116,"column":16,"nodeType":"AwaitExpression","messageId":"await","endLine":116,"endColumn":44,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4015,4020],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":180,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":180,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":182,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":182,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":192,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":192,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":235,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":235,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":245,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":245,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":273,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":273,"endColumn":60}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1256,1259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1256,1259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Notification Manager (consolidated from notificationManager.ts & notificationManager.new.ts)\n * Goal: single source of truth with strong runtime guards and a minimal public API.\n */\n\ndeclare const process: { env: { NODE_ENV?: string } };\nimport {\n  PushNotificationManager,\n  createPushNotificationManager,\n  VAPIDKeys,\n  AstrologyNotificationScheduler,\n  getBackgroundSyncManager\n} from '@cosmichub/config';\n\nimport type {\n  NotificationPreferences,\n  NotificationFrequency,\n  QuietHours,\n  SyncMessageData,\n  ChartData\n} from '../types/notifications';\n\nconst envGet = (k: string): string | undefined => {\n  const env = import.meta?.env;\n  return typeof env === 'object' && env !== null && k in env ? String(env[k]) : undefined;\n};\n\nconst VAPID_KEYS: VAPIDKeys = {\n  publicKey: envGet('VITE_VAPID_PUBLIC_KEY') ?? 'BExample-VAPID-Key-For-Development-Only',\n  privateKey: '',\n  subject: 'mailto:notifications@cosmichub.com'\n};\n\nconst dev = (): boolean => process?.env?.NODE_ENV === 'development';\n// Use global devConsole if present to align with no-console policy elsewhere.\n// Fallback to silent no-op to avoid raw console usage in production bundle.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const globalThis: any;\nconst devConsole = ((): { debug?: (...a: unknown[])=>void; warn?: (...a: unknown[])=>void } => {\n  const g = typeof globalThis === 'object' && globalThis !== null ? globalThis : {};\n  return typeof g.devConsole === 'object' && g.devConsole !== null ? g.devConsole : {};\n})();\nconst debug = (...a: unknown[]): void => { if (dev() && typeof devConsole.debug === 'function') devConsole.debug('[Notify]', ...a); };\nconst warn = (...a: unknown[]): void => { if (typeof devConsole.warn === 'function') devConsole.warn('[Notify]', ...a); };\n\n// Type guards\nconst isRecord = (v: unknown): v is Record<string, unknown> => {\n  return typeof v === 'object' && v !== null;\n};\n\nconst hasStringId = (v: unknown): v is { id: string } => {\n  if (!isRecord(v)) return false;\n  return typeof v.id === 'string';\n};\n\nconst isQuietHours = (v: unknown): v is QuietHours => {\n  if (!isRecord(v)) return false;\n  return typeof v.enabled === 'boolean' && \n         typeof v.start === 'string' && \n         typeof v.end === 'string';\n};\n\nconst isValidFrequency = (v: unknown): v is NotificationFrequency => {\n  return typeof v === 'string' && \n         ['daily', 'instant', 'hourly', 'weekly'].includes(v);\n};\n\nconst isNotificationPreferences = (v: unknown): v is NotificationPreferences => {\n  if (!isRecord(v)) return false;\n  const {\n    dailyHoroscope,\n    transitAlerts,\n    frequencyReminders,\n    appUpdates,\n    frequency,\n    quietHours\n  } = v;\n  \n  return typeof dailyHoroscope === 'boolean' &&\n         typeof transitAlerts === 'boolean' &&\n         typeof frequencyReminders === 'boolean' &&\n         typeof appUpdates === 'boolean' &&\n         isValidFrequency(frequency) &&\n         isQuietHours(quietHours);\n};\n\nconst isSyncMessageData = (v: unknown): v is SyncMessageData => {\n  if (!isRecord(v)) return false;\n  const { type } = v;\n  return typeof type === 'string' &&\n         ['cosmichub-sync-chart_synced', 'cosmichub-sync-user_data_synced'].includes(type);\n};\n\n// Public event naming schema (future expansion placeholder)\nexport interface NotificationEventMap {\n  'notification-click': { action?: string; chartId?: string };\n  'sync-message': SyncMessageData;\n}\n\nexport class UnifiedNotificationManager {\n  private push: PushNotificationManager;\n  private scheduler: AstrologyNotificationScheduler;\n  private background = getBackgroundSyncManager();\n  private userId: string | null = null;\n\n  constructor() {\n    this.push = createPushNotificationManager(VAPID_KEYS);\n    this.scheduler = new AstrologyNotificationScheduler(this.push);\n    this.background.setPushNotificationManager(this.push);\n  }\n\n  async initialize(userId?: string): Promise<boolean> {\n    if (userId !== undefined && userId.length > 0) {\n      this.userId = userId;\n    }\n    const ok = await this.push.initialize();\n    if (ok !== true) { \n      warn('Push initialization failed'); \n      return false; \n    }\n    this.attachListeners();\n    if (this.userId !== null && this.userId !== undefined && this.userId.length > 0) {\n      this.setupAstrologyNotifications();\n    }\n    debug('Initialized');\n    return true;\n  }\n\n  async subscribe(userId: string, prefs?: unknown): Promise<boolean> {\n    const defaults: NotificationPreferences = {\n      dailyHoroscope: false,\n      transitAlerts: true,\n      frequencyReminders: false,\n      appUpdates: true,\n      quietHours: { enabled: true, start: '22:00', end: '08:00' },\n      frequency: 'daily'\n    };\n    const finalPrefs = isNotificationPreferences(prefs) ? { ...defaults, ...prefs } : defaults;\n    try {\n      // Prefer subscribeUser, fallback to subscribe\n  const anyPush = this.push as { subscribeUser?: (id: string, p: NotificationPreferences)=>Promise<unknown>; subscribe?: (id: string, p: NotificationPreferences)=>Promise<unknown> };\n      if (typeof anyPush.subscribeUser === 'function') {\n        await anyPush.subscribeUser(userId, finalPrefs);\n      } else if (typeof anyPush.subscribe === 'function') {\n        await anyPush.subscribe(userId, finalPrefs);\n      } else {\n        throw new Error('No subscribe API');\n      }\n      this.userId = userId;\n      this.setupAstrologyNotifications();\n      return true;\n    } catch (e) {\n      warn('Subscription failed', e);\n      return false;\n    }\n  }\n\n  async notifyChartReady(chart: ChartData): Promise<void> {\n    if (hasStringId(chart) === false) return;\n    await this.push.queueNotification({\n      title: '✨ Your Chart is Ready!',\n      body: 'Tap to explore your cosmic blueprint.',\n      tag: 'chart-complete',\n      urgency: 'normal',\n      data: { type: 'chart_complete', chartId: chart.id },\n      actions: [\n        { action: 'view_chart', title: 'View Chart', icon: '/icons/chart.png' },\n        { action: 'share', title: 'Share', icon: '/icons/share.png' }\n      ]\n    });\n  }\n\n  async sendTest(): Promise<boolean> {\n    try {\n      await this.push.queueNotification({ title: '🧪 Test', body: 'Notification pipeline OK', tag: 'test', urgency: 'low' });\n      return true;\n    } catch { return false; }\n  }\n\n  status() { return { push: this.push.getNotificationStats(), background: this.background.getSyncStatus(), userId: this.userId }; }\n\n  private setupAstrologyNotifications() {\n    if (this.userId === null || this.userId === undefined || this.userId.length === 0) return;\n    const birth = this.getUserBirthData();\n    if (birth === null || birth === undefined) return;\n    const sun = birth.sunSign !== undefined && birth.sunSign.length > 0 ? birth.sunSign : 'Aries';\n    this.scheduler.scheduleDailyHoroscope(this.userId, sun, '09:00');\n    this.scheduler.scheduleTransitAlerts(this.userId, birth);\n    this.scheduler.scheduleMoonPhases(this.userId);\n  }\n\n  private attachListeners() {\n    const isValidNavigator = (nav: unknown): nav is Navigator & { serviceWorker: ServiceWorkerContainer } => {\n      if (!(typeof nav === 'object' && nav !== null)) return false;\n      if (!('serviceWorker' in nav)) return false;\n      const serviceWorker = (nav as { serviceWorker: unknown }).serviceWorker;\n      return typeof serviceWorker === 'object' && serviceWorker !== null;\n    };\n\n    if (isValidNavigator(navigator)) {\n      navigator.serviceWorker.addEventListener('message', (evt: MessageEvent<unknown>) => {\n        const d = evt.data;\n        if (!isRecord(d)) return;\n        \n        if (d.type !== 'notification-click') return;\n\n        const action = typeof d.action === 'string' ? d.action : undefined;\n        const chartId = typeof d.chartId === 'string' ? d.chartId : undefined;\n        this.onClick({ action, chartId });\n      });\n    }\n\n    const isValidWindow = (win: unknown): win is Window => {\n      return typeof win === 'object' && win !== null;\n    };\n\n    if (isValidWindow(window)) {\n      window.addEventListener('storage', e => {\n        if (e.key === null || e.key === undefined || !e.key.startsWith('cosmichub-sync-') || e.newValue === null || e.newValue === undefined) {\n          return;\n        }\n\n        try {\n          const parsed: unknown = JSON.parse(e.newValue);\n          if (isSyncMessageData(parsed)) {\n            this.onSync(parsed);\n          }\n        } catch {\n          /* ignore parse errors */\n        }\n      });\n    }\n  }\n\n  private onClick(data: { action?: string; chartId?: string }) {\n    debug('Click', data);\n    switch (data.action) {\n      case 'view_chart': window.location.href = `/chart/${data.chartId ?? ''}`; break;\n      case 'read': window.location.href = '/horoscope'; break;\n      case 'start_session': window.location.href = '/healwave/session'; break;\n      default: window.location.href = '/dashboard';\n    }\n  }\n\n  private onSync(msg: SyncMessageData) {\n    debug('Sync', msg.type);\n    if (msg.type === 'cosmichub-sync-chart_synced' && hasStringId(msg.data)) {\n      void this.notifyChartReady(msg.data);\n    }\n  }\n\n  private getUserBirthData(): { sunSign?: string } | null {\n    try {\n      const raw = localStorage.getItem('cosmichub-birth-data');\n      if (raw === null) return null;\n\n      const parsed: unknown = JSON.parse(raw);\n      if (!isRecord(parsed) || typeof parsed.sunSign !== 'string') return null;\n      return { sunSign: parsed.sunSign };\n    } catch {\n      return null;\n    }\n  }\n}\n\n// Singleton export\nlet singleton: UnifiedNotificationManager | null = null;\n\nexport function getNotificationManager(): UnifiedNotificationManager {\n  singleton ??= new UnifiedNotificationManager();\n  return singleton;\n}\nexport const initializeNotifications = (userId?: string) => getNotificationManager().initialize(userId);\n\n// Backwards compatibility named export\nexport default UnifiedNotificationManager;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/validation.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'planet' is defined but never used.","line":170,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/shared/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/test-setup.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":41,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":42,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":42,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":60,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":60,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":68,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":68,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":69,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":69,"endColumn":12},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":70,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":70,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":71,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":71,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":73,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":73,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":74,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":75,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":75,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":76,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":76,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":77,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":77,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":78,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":78,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":79,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":80,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":80,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":81,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":82,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":82,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":83,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":84,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":84,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":85,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":85,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":86,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":86,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":87,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":87,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":88,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":88,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":89,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":89,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":90,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":90,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":139,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":139,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":163,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":163,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\nimport '@testing-library/jest-dom';\nimport React from 'react';\n\n// Make React available globally for tests\n(globalThis as typeof globalThis & { React: typeof React }).React = React;\n\n// Test setup with comprehensive mocking for external dependencies\n\n// Mock Firebase modules completely\nvi.mock('firebase/app', () => ({\n  initializeApp: vi.fn(() => ({})),\n  getApps: vi.fn(() => []),\n  getApp: vi.fn(() => ({})),\n}));\n\nvi.mock('firebase/auth', () => ({\n  getAuth: vi.fn(() => ({})),\n  connectAuthEmulator: vi.fn(),\n  signInWithEmailAndPassword: vi.fn(() => Promise.resolve({ user: { uid: 'test-uid' } })),\n  createUserWithEmailAndPassword: vi.fn(() => Promise.resolve({ user: { uid: 'test-uid' } })),\n  signOut: vi.fn(() => Promise.resolve()),\n  onAuthStateChanged: vi.fn(() => vi.fn()),\n  User: {},\n}));\n\nvi.mock('firebase/firestore', () => ({\n  getFirestore: vi.fn(() => ({})),\n  connectFirestoreEmulator: vi.fn(),\n  enableNetwork: vi.fn(() => Promise.resolve()),\n  disableNetwork: vi.fn(() => Promise.resolve()),\n}));\n\n// Mock Auth package with useAuth hook\nvi.mock('@cosmichub/auth', () => ({\n  useAuth: vi.fn(() => ({\n    user: null,\n    loading: false,\n    signOut: vi.fn(),\n  })),\n  AuthProvider: ({ children }: { children: React.ReactNode }) => children,\n  SubscriptionProvider: ({ children }: { children: React.ReactNode }) => children,\n  useSubscription: vi.fn(() => ({\n    plan: 'free',\n    userTier: 'free',\n    loading: false,\n    usage: { daily: 0, monthly: 0 },\n    hasFeature: vi.fn(() => false), // Mock hasFeature function\n  })),\n  logIn: vi.fn(),\n  signUp: vi.fn(),\n  logOut: vi.fn(),\n}));\n\n// Mock ToastProvider and useToast hook\nvi.mock('./components/ToastProvider', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n  ToastProvider: ({ children }: { children: React.ReactNode }) => children,\n}));\n\n// Mock UI components that may be missing\nvi.mock('@cosmichub/ui', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n  TooltipProvider: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  Tooltip: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  Card: ({ children, className }: { children: React.ReactNode; className?: string }) => React.createElement('div', { className }, children),\n  CardContent: ({ children, className }: { children: React.ReactNode; className?: string }) => React.createElement('div', { className }, children),\n  CardHeader: ({ children, className }: { children: React.ReactNode; className?: string }) => React.createElement('div', { className }, children),\n  CardTitle: ({ children, className }: { children: React.ReactNode; className?: string }) => React.createElement('h3', { className }, children),\n  Button: ({ children, onClick, className }: { children: React.ReactNode; onClick?: () => void; className?: string }) => React.createElement('button', { onClick, className }, children),\n  Input: ({ placeholder, value, onChange, className }: { placeholder?: string; value?: string; onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void; className?: string }) => React.createElement('input', { placeholder, value, onChange, className }),\n  Table: ({ children }: { children: React.ReactNode }) => React.createElement('table', {}, children),\n  TableBody: ({ children }: { children: React.ReactNode }) => React.createElement('tbody', {}, children),\n  TableCell: ({ children, className }: { children: React.ReactNode; className?: string }) => React.createElement('td', { className }, children),\n  TableHead: ({ children }: { children: React.ReactNode }) => React.createElement('th', {}, children),\n  TableHeader: ({ children }: { children: React.ReactNode }) => React.createElement('thead', {}, children),\n  TableRow: ({ children }: { children: React.ReactNode }) => React.createElement('tr', {}, children),\n  Accordion: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  AccordionContent: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  AccordionItem: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  AccordionTrigger: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  Tabs: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  TabsContent: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  TabsList: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  TabsTrigger: ({ children }: { children: React.ReactNode }) => React.createElement('div', {}, children),\n  UpgradeModal: ({ children, isOpen }: { children?: React.ReactNode; isOpen?: boolean }) => \n    isOpen === true ? React.createElement('div', { 'data-testid': 'upgrade-modal' }, children ?? 'Upgrade Modal') : null\n}));\n\n// Mock integrations package\nvi.mock('@cosmichub/integrations', () => ({\n  useCrossAppStore: vi.fn(() => ({\n    addNotification: vi.fn(),\n    notifications: [],\n    clearNotifications: vi.fn(),\n  })),\n  subscriptionManager: {\n    checkLimits: vi.fn(() => Promise.resolve({ allowed: true })),\n    getCurrentPlan: vi.fn(() => 'free'),\n    getUsage: vi.fn(() => ({ daily: 0, monthly: 0 })),\n    checkFeatureAccess: vi.fn(() => ({ canAccess: true, isLimited: false })),\n  },\n  API_ENDPOINTS: {\n    astrology: '/api/astrology',\n    healwave: '/api/healwave',\n    numerology: '/api/numerology',\n    humanDesign: '/api/human-design',\n  },\n}));\n\n// Mock Firebase config module\nvi.mock('@cosmichub/config', () => ({\n  default: {\n    apiKey: 'test-api-key',\n    authDomain: 'test-project.firebaseapp.com',\n    projectId: 'test-project',\n    storageBucket: 'test-project.appspot.com',\n    messagingSenderId: '123456789',\n    appId: '1:123456789:web:test-app-id',\n    measurementId: 'G-TEST123',\n  },\n  app: {},\n  auth: {},\n  db: {},\n  isEmulator: false,\n  isDevelopment: false,\n  projectId: 'test-project',\n  // Feature system exports used by FeatureGuard and other components\n  FEATURE_KEYS: {\n    SYNSTRY_ANALYSIS: 'synastry_analysis',\n    AI_INTERPRETATION: 'ai_interpretation',\n    TRANSIT_ANALYSIS: 'transit_analysis',\n    MULTI_SYSTEM_ANALYSIS: 'multi_system_analysis'\n  },\n  isFeatureKey: (value: string) => [\n    'synastry_analysis',\n    'ai_interpretation',\n    'transit_analysis',\n    'multi_system_analysis'\n  ].includes(value),\n  FEATURE_REQUIRED_TIERS: {\n    synastry_analysis: 'premium',\n    ai_interpretation: 'elite',\n    transit_analysis: 'elite',\n    multi_system_analysis: 'premium'\n  },\n  FEATURE_LABELS: {\n    synastry_analysis: 'Synastry Compatibility',\n    ai_interpretation: 'AI Interpretation',\n    transit_analysis: 'Transit Analysis',\n    multi_system_analysis: 'Multi-System Analysis'\n  },\n  ALL_FEATURE_KEYS: [\n    'synastry_analysis',\n    'ai_interpretation',\n    'transit_analysis',\n    'multi_system_analysis'\n  ],\n  isFeatureEnabled: () => false,\n}));","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/test/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { vi } from 'vitest';\n\n// Mock Web Audio API for testing\n(globalThis as typeof globalThis & { AudioContext: typeof AudioContext }).AudioContext = vi.fn().mockImplementation(() => ({\n  createOscillator: vi.fn(() => ({\n    frequency: { setValueAtTime: vi.fn() },\n    type: 'sine',\n    connect: vi.fn(),\n    start: vi.fn(),\n    stop: vi.fn(),\n    disconnect: vi.fn(),\n  })),\n  createGain: vi.fn(() => ({\n    gain: { \n      setValueAtTime: vi.fn(),\n      linearRampToValueAtTime: vi.fn(),\n      exponentialRampToValueAtTime: vi.fn(),\n    },\n    connect: vi.fn(),\n    disconnect: vi.fn(),\n  })),\n  destination: {},\n  currentTime: 0,\n  state: 'running',\n  resume: vi.fn().mockResolvedValue(undefined),\n}));\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(), // deprecated\n    removeListener: vi.fn(), // deprecated\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n\n// Mock ResizeObserver\n(globalThis as typeof globalThis & { ResizeObserver: typeof ResizeObserver }).ResizeObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\n// Mock IntersectionObserver\n(globalThis as typeof globalThis & { IntersectionObserver: typeof IntersectionObserver }).IntersectionObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/astrology.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/birth-data.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":17,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[380,385],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":48,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1265,1270],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UnifiedBirthData } from '@cosmichub/types';\n\nexport interface ChartBirthData extends UnifiedBirthData {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  city: string;\n  lat: number;\n  lon: number;\n  timezone: string;\n}\n\n// Type guard for ChartBirthData\nexport function isChartBirthData(value: unknown): value is ChartBirthData {\n  if (!value || typeof value !== 'object') return false;\n  \n  const data = value as Partial<ChartBirthData>;\n  return (\n    typeof data.year === 'number' &&\n    typeof data.month === 'number' &&\n    typeof data.day === 'number' &&\n    typeof data.hour === 'number' &&\n    typeof data.minute === 'number' &&\n    typeof data.city === 'string' &&\n    typeof data.lat === 'number' &&\n    typeof data.lon === 'number' &&\n    typeof data.timezone === 'string' &&\n    data.month >= 1 && data.month <= 12 &&\n    data.day >= 1 && data.day <= 31 &&\n    data.hour >= 0 && data.hour <= 23 &&\n    data.minute >= 0 && data.minute <= 59\n  );\n}\n\nexport interface StoredBirthData {\n  date: string;\n  time: string;\n  location: string;\n  lat?: number;\n  lon?: number;\n  timezone?: string;\n}\n\n// Type guard for StoredBirthData\nexport function isStoredBirthData(value: unknown): value is StoredBirthData {\n  if (!value || typeof value !== 'object') return false;\n  \n  const data = value as Partial<StoredBirthData>;\n  return (\n    typeof data.date === 'string' &&\n    typeof data.time === 'string' &&\n    typeof data.location === 'string' &&\n    (data.lat === undefined || typeof data.lat === 'number') &&\n    (data.lon === undefined || typeof data.lon === 'number') &&\n    (data.timezone === undefined || typeof data.timezone === 'string')\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/cosmichub-auth.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[718,721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[718,721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":26,"column":19,"nodeType":"TSAnyKeyword","messageId":"overrides","endLine":26,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Type declarations for @cosmichub/auth package\ndeclare module '@cosmichub/auth' {\n  import { ReactNode, FC } from 'react';\n  import { User } from 'firebase/auth';\n\n  export interface AuthState {\n    user: User | null;\n    loading: boolean;\n    signOut: () => Promise<void>;\n  }\n\n  export const useAuth: () => AuthState;\n\n  export interface AuthProviderProps {\n    children: ReactNode;\n    appName?: string;\n  }\n\n  export const AuthProvider: FC<AuthProviderProps>;\n\n  export const logIn: (email: string, password: string) => Promise<User>;\n  export const signUp: (email: string, password: string) => Promise<User>;\n  export const logOut: () => Promise<void>;\n\n  export interface SubscriptionState {\n    subscription: any | null;\n    userTier: string;\n    tier: string; // Alias for userTier for compatibility\n    isLoading: boolean;\n    hasFeature: (feature: string, app?: 'astro' | 'healwave') => boolean;\n    upgradeRequired: (feature: string) => void;\n    refreshSubscription: () => Promise<void>;\n    checkUsageLimit?: (limitType: string) => { allowed: boolean; current: number; limit: number };\n  }\n\n  export const useSubscription: () => SubscriptionState;\n\n  export interface SubscriptionProviderProps {\n    children: ReactNode;\n    appType: string;\n  }\n\n  export const SubscriptionProvider: FC<SubscriptionProviderProps>;\n\n  export * from 'firebase/auth';\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/eslint-js.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Type declarations for @eslint/js module\n * This provides TypeScript support for ESLint configuration\n */\n\ndeclare module '@eslint/js' {\n  interface ESLintRule {\n    [key: string]: string | number | boolean | object | Array<any>;\n  }\n\n  interface ESLintConfig {\n    rules: Record<string, ESLintRule>;\n  }\n\n  interface ESLintConfigs {\n    recommended: ESLintConfig;\n    all: ESLintConfig;\n  }\n\n  const js: {\n    configs: ESLintConfigs;\n  };\n\n  export = js;\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/eslint-plugin-jsx-a11y.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[264,267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[264,267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal ambient declaration for eslint-plugin-jsx-a11y so TS stops complaining.\n// If official types become available, remove this file and install them.\ndeclare module 'eslint-plugin-jsx-a11y' {\n  // Plugin object shape is intentionally loose.\n  const plugin: any;\n  export = plugin;\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/house-cusp.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":38,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":38,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[795,798],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Strongly-typed definitions for house cusp data in chart calculations\n */\n\nexport type ZodiacSign = \n  | 'aries'\n  | 'taurus' \n  | 'gemini' \n  | 'cancer' \n  | 'leo' \n  | 'virgo' \n  | 'libra' \n  | 'scorpio' \n  | 'sagittarius' \n  | 'capricorn' \n  | 'aquarius' \n  | 'pisces';\n\nexport interface HouseCusp {\n  /** House number (1-12) */\n  house?: number;\n  /** Alternative field for house number */\n  number?: number;\n  /** Zodiac sign of the house cusp */\n  sign?: string;\n  /** Absolute position in degrees (0-360) */\n  cusp?: number;\n  /** Degree within the sign (0-30) */\n  degree?: number | string;\n  /** Ruling planet of the sign */\n  ruler?: string;\n}\n\n/**\n * Type guard to check if an object is a valid HouseCusp\n */\nexport function isHouseCusp(obj: unknown): obj is HouseCusp {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const houseCusp = obj as HouseCusp;\n  return (\n    (typeof houseCusp.house === 'number' || typeof houseCusp.number === 'number') &&\n    (typeof houseCusp.cusp === 'number' || \n     typeof houseCusp.degree === 'number' || \n     typeof houseCusp.degree === 'string')\n  );\n}\n\n/**\n * Type guard to check if an array contains valid HouseCusps\n */\nexport function isHouseCuspArray(arr: unknown[]): arr is HouseCusp[] {\n  return arr.length > 0 && isHouseCusp(arr[0]);\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/preferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/processed-chart.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AspectData' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AngleData' is defined but never used.","line":4,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":57},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":94,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":94,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2795,2798],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Strongly-typed definitions for processed chart data used in displays\n */\nimport { AspectData, PlanetData, AsteroidData, AngleData, HouseData } from './astrology.types';\n\n/**\n * Processed planet data with formatted degree for display\n */\nexport interface ProcessedPlanetData extends Omit<PlanetData, 'degree'> {\n  /** Formatted degree string with decimal precision */\n  degree: string;\n  /** Whether the planet is in retrograde motion */\n  retrograde?: boolean;\n  /** Position in degrees (0-360) */\n  position?: number;\n}\n\n/**\n * Processed asteroid data with formatted degree and aspects for display\n */\nexport interface ProcessedAsteroidData extends Omit<AsteroidData, 'degree' | 'aspects'> {\n  /** Formatted degree string with decimal precision */\n  degree: string;\n  /** Formatted aspect string describing aspects to other points */\n  aspects: string;\n  /** Position in degrees (0-360) */\n  position?: number;\n}\n\n/**\n * Processed angle data with formatted degree for display\n */\nexport interface ProcessedAngleData {\n  /** Name of the angle (e.g., \"Ascendant\", \"Midheaven\") */\n  name: string;\n  /** Zodiac sign of the angle */\n  sign: string;\n  /** Formatted degree string with decimal precision */\n  degree: string;\n  /** Position in degrees (0-360) */\n  position?: number;\n}\n\n/**\n * Processed house data with formatted cusp degree for display\n */\nexport interface ProcessedHouseData extends HouseData {\n  /** Formatted cusp degree string with decimal precision */\n  cuspDegree: string;\n  /** List of planets in this house as a formatted string */\n  planetsInHouse: string;\n  /** House number as string (e.g., \"1st\", \"2nd\") */\n  house: string;\n  /** Original house data for reference */\n  originalHouse?: Record<string, unknown>;\n}\n\n/**\n * Processed aspect data with formatted orb and status for display\n */\nexport interface ProcessedAspectData {\n  /** Name of the first planet/point */\n  planet1: string;\n  /** Name of the second planet/point */\n  planet2: string;\n  /** Type of aspect (e.g., \"Conjunction\", \"Trine\") */\n  type: string;\n  /** Formatted orb string with decimal precision */\n  orb: string;\n  /** Status of the aspect (e.g., \"Applying\", \"Separating\", \"Exact\") */\n  applying: string;\n}\n\n/**\n * Collection of all processed chart sections\n */\nexport interface ProcessedChartSections {\n  /** Processed planet data */\n  planets: ProcessedPlanetData[];\n  /** Processed asteroid data */\n  asteroids: ProcessedAsteroidData[];\n  /** Processed angle data */\n  angles: ProcessedAngleData[];\n  /** Processed house data */\n  houses: ProcessedHouseData[];\n  /** Processed aspect data */\n  aspects: ProcessedAspectData[];\n}\n\n/**\n * Type guard to check if an object is a valid ProcessedAngleData\n */\nexport function isProcessedAngleData(obj: unknown): obj is ProcessedAngleData {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const angle = obj as ProcessedAngleData;\n  return (\n    typeof angle.name === 'string' &&\n    typeof angle.sign === 'string' &&\n    typeof angle.degree === 'string'\n  );\n}\n\n/**\n * Type guard to check if an array contains valid ProcessedAngleData\n */\nexport function isProcessedAngleDataArray(arr: unknown[]): arr is ProcessedAngleData[] {\n  return arr.length > 0 && isProcessedAngleData(arr[0]);\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/pwa.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/chart-validation.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): apps/astro/src/utils/chart-validation.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tests for chart validation utilities\n */\nimport { describe, it, expect } from 'vitest';\nimport { \n  validateChart, \n  parseChartSafely,\n  getDataTypeName,\n  validateUserProfile,\n  validateNumerologyData,\n  validateAstrologyData\n} from './chart-validation';\nimport type { AstrologyChart, UserProfile, NumerologyData } from '@cosmichub/types';\n\n// Test fixtures\nconst validChart: AstrologyChart = {\n  planets: [\n    { name: 'Sun', sign: 'Leo', degree: 15.25, position: 135.25, house: '5', aspects: [] },\n    { name: 'Moon', sign: 'Aries', degree: 2.5, position: 12.5, house: '1', aspects: [] }\n  ],\n  houses: [\n    { house: 1, number: 1, sign: 'Aries', degree: 0, cusp: 0, ruler: 'Mars' },\n    { house: 2, number: 2, sign: 'Taurus', degree: 30, cusp: 30, ruler: 'Venus' },\n    { house: 3, number: 3, sign: 'Gemini', degree: 60, cusp: 60, ruler: 'Mercury' },\n    { house: 4, number: 4, sign: 'Cancer', degree: 90, cusp: 90, ruler: 'Moon' },\n    { house: 5, number: 5, sign: 'Leo', degree: 120, cusp: 120, ruler: 'Sun' },\n    { house: 6, number: 6, sign: 'Virgo', degree: 150, cusp: 150, ruler: 'Mercury' },\n    { house: 7, number: 7, sign: 'Libra', degree: 180, cusp: 180, ruler: 'Venus' },\n    { house: 8, number: 8, sign: 'Scorpio', degree: 210, cusp: 210, ruler: 'Pluto' },\n    { house: 9, number: 9, sign: 'Sagittarius', degree: 240, cusp: 240, ruler: 'Jupiter' },\n    { house: 10, number: 10, sign: 'Capricorn', degree: 270, cusp: 270, ruler: 'Saturn' },\n    { house: 11, number: 11, sign: 'Aquarius', degree: 300, cusp: 300, ruler: 'Uranus' },\n    { house: 12, number: 12, sign: 'Pisces', degree: 330, cusp: 330, ruler: 'Neptune' }\n  ],\n  aspects: [\n    { planet1: 'Sun', planet2: 'Moon', type: 'Trine', orb: 5.0, applying: 'true' }\n  ],\n  asteroids: [\n    { name: 'Ceres', sign: 'Virgo', degree: 10.0, house: '6' }\n  ],\n  angles: [\n    { name: 'Ascendant', sign: 'Aries', degree: 0, position: 0 }\n  ]\n};\n\nconst validUserProfile: UserProfile = {\n  userId: 'user123',\n  birthData: {\n    date: '1990-01-01',\n    time: '12:00',\n    location: 'New York, NY'\n  }\n};\n\nconst validNumerologyData: NumerologyData = {\n  lifePath: 7,\n  destiny: 9,\n  personalYear: 3\n};\n\ndescribe('Chart Validation Utilities', () => {\n  describe('validateChart', () => {\n    it('should return null for valid charts', () => {\n      const result = validateChart(validChart);\n      expect(result).toBeNull();\n    });\n    \n    it('should return errors for invalid charts', () => {\n      const invalidChart = { ...validChart, planets: 'not an array' };\n      const result = validateChart(invalidChart);\n      expect(result).not.toBeNull();\n      expect(Array.isArray(result)).toBe(true);\n      expect(result!.length).toBeGreaterThan(0);\n    });\n    \n    it('should detect missing required properties', () => {\n      const incompleteChart = { ...validChart };\n      // @ts-expect-error - Intentionally removing a required property for testing\n      delete incompleteChart.planets;\n      \n      const result = validateChart(incompleteChart);\n      expect(result).not.toBeNull();\n  // Current validator short-circuits with a generic invalid chart message if structural guard fails\n  expect(result![0]).toContain('Invalid chart data');\n    });\n    \n    it('should validate house count', () => {\n      const chartWithTooFewHouses = {\n        ...validChart,\n        houses: validChart.houses.slice(0, 5) // Only 5 houses instead of 12\n      };\n      \n      const result = validateChart(chartWithTooFewHouses);\n      expect(result).not.toBeNull();\n      expect(result!.some(error => error.includes('12 houses'))).toBe(true);\n    });\n  });\n  \n  describe('parseChartSafely', () => {\n    it('should successfully parse valid chart JSON', () => {\n      const json = JSON.stringify(validChart);\n      const result = parseChartSafely(json);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n      expect(result.chart).toEqual(validChart);\n    });\n    \n    it('should handle invalid JSON', () => {\n      const invalidJson = '{not valid json}';\n      const result = parseChartSafely(invalidJson);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.chart).toBeNull();\n    });\n    \n    it('should validate chart structure after parsing', () => {\n      const invalidChartJson = JSON.stringify({ ...validChart, planets: null });\n      const result = parseChartSafely(invalidChartJson);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n  \n  describe('getDataTypeName', () => {\n    it('should identify chart data correctly', () => {\n      expect(getDataTypeName(validChart)).toBe('Astrology Chart');\n    });\n    \n    it('should identify user profile data correctly', () => {\n      expect(getDataTypeName(validUserProfile)).toBe('User Profile');\n    });\n    \n    it('should identify numerology data correctly', () => {\n      expect(getDataTypeName(validNumerologyData)).toBe('Numerology Data');\n    });\n    \n    it('should return Unknown Data for invalid types', () => {\n      expect(getDataTypeName(null)).toBe('Unknown Data');\n      expect(getDataTypeName({})).toBe('Unknown Data');\n      expect(getDataTypeName('string')).toBe('Unknown Data');\n    });\n  });\n  \n  describe('validateUserProfile', () => {\n    it('should return null for valid profiles', () => {\n      const result = validateUserProfile(validUserProfile);\n      expect(result).toBeNull();\n    });\n    \n    it('should validate date format', () => {\n      const profileWithInvalidDate = {\n        ...validUserProfile,\n        birthData: {\n          ...validUserProfile.birthData,\n          date: '01/01/1990' // Invalid format, should be YYYY-MM-DD\n        }\n      };\n      \n      const result = validateUserProfile(profileWithInvalidDate);\n      expect(result).not.toBeNull();\n      expect(result!.some(error => error.includes('date'))).toBe(true);\n    });\n    \n    it('should validate time format', () => {\n      const profileWithInvalidTime = {\n        ...validUserProfile,\n        birthData: {\n          ...validUserProfile.birthData,\n          time: '12pm' // Invalid format, should be HH:MM or HH:MM:SS\n        }\n      };\n      \n      const result = validateUserProfile(profileWithInvalidTime);\n      expect(result).not.toBeNull();\n      expect(result!.some(error => error.includes('time'))).toBe(true);\n    });\n  });\n  \n  describe('validateNumerologyData', () => {\n    it('should return null for valid numerology data', () => {\n      const result = validateNumerologyData(validNumerologyData);\n      expect(result).toBeNull();\n    });\n    \n    it('should validate life path number', () => {\n      const invalidLifePath = {\n        ...validNumerologyData,\n        lifePath: 15 // Invalid, not 1-9 or 11,22,33\n      };\n      \n      const result = validateNumerologyData(invalidLifePath);\n      expect(result).not.toBeNull();\n      expect(result!.some(error => error.includes('Life path'))).toBe(true);\n    });\n    \n    it('should validate master numbers', () => {\n      const withMasterNumbers = {\n        lifePath: 11,\n        destiny: 22,\n        personalYear: 9\n      };\n      \n      const result = validateNumerologyData(withMasterNumbers);\n      expect(result).toBeNull(); // Should be valid\n    });\n  });\n  \n  describe('validateAstrologyData', () => {\n    it('should automatically detect and validate chart data', () => {\n      const result = validateAstrologyData(validChart);\n      \n      expect(result.type).toBe('Astrology Chart');\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toBeNull();\n    });\n    \n    it('should automatically detect and validate user profile data', () => {\n      const result = validateAstrologyData(validUserProfile);\n      \n      expect(result.type).toBe('User Profile');\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toBeNull();\n    });\n    \n    it('should automatically detect and validate numerology data', () => {\n      const result = validateAstrologyData(validNumerologyData);\n      \n      expect(result.type).toBe('Numerology Data');\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toBeNull();\n    });\n    \n    it('should handle unknown data types', () => {\n      const result = validateAstrologyData({ random: 'object' });\n      \n      expect(result.type).toBe('Unknown Data');\n      expect(result.isValid).toBe(false);\n      expect(result.errors).not.toBeNull();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/chart-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/componentLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/exportUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":39,"column":98,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":39,"endColumn":100}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// apps/astro/src/utils/exportUtils.ts\n\nconst serializeValue = (val: unknown): string => {\n  if (val === null || val === undefined) return '';\n  if (typeof val === 'object') {\n    try {\n      return JSON.stringify(val);\n    } catch {\n      return '[object]';\n    }\n  }\n  if (typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean') {\n    return String(val);\n  }\n  return '[unknown]';\n};\n\nexport const exportTableAsCSV = <T extends Record<string, unknown>>(data: T[], filename: string): void => {\n  if (data.length === 0) return;\n\n  const first = data[0];\n  const headers = Object.keys(first).join(',');\n  const csv = [\n    headers,\n    ...data.map((row: T) =>\n      Object.values(row)\n        .map((val: unknown) => `\"${serializeValue(val).replace(/\"/g, '\"\"')}\"`)\n        .join(',')\n    ),\n  ].join('\\n');\n\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  link.href = URL.createObjectURL(blob);\n  link.download = filename;\n  link.click();\n};\n\nexport const downloadFile = (content: string, filename: string, mimeType: string = 'text/plain') => {\n  const blob = new Blob([content], { type: mimeType });\n  const link = document.createElement('a');\n  link.href = URL.createObjectURL(blob);\n  link.download = filename;\n  link.click();\n};\n\nexport const formatDataForExport = <T extends Record<string, unknown>>(data: T[], type: 'csv' | 'json' = 'csv'): string => {\n  if (type === 'json') {\n    return JSON.stringify(data, null, 2);\n  }\n\n  if (data.length === 0) return '';\n\n  const first = data[0];\n  const headers = Object.keys(first).join(',');\n  return [\n    headers,\n    ...data.map((row: T) =>\n      Object.values(row)\n        .map((val: unknown) => `\"${serializeValue(val).replace(/\"/g, '\"\"')}\"`)\n        .join(',')\n    ),\n  ].join('\\n');\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/guards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/logger.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":20,"suggestions":[{"fix":{"range":[545,603],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":17,"suggestions":[{"fix":{"range":[717,773],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":17,"suggestions":[{"fix":{"range":[881,937],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":18,"suggestions":[{"fix":{"range":[1045,1239],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/typeGuards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/upgradeEvents.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-var-requires').","line":31,"column":11,"severity":1,"nodeType":null,"fix":{"range":[804,866],"text":" "}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":66},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":32,"column":34,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":32,"endColumn":66},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":32,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":33,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":33,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":33,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":47,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":60}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Event system for triggering upgrade modal from anywhere in the app\n */\n\nexport interface UpgradeRequiredEvent {\n  feature: string;\n}\n\nclass UpgradeEventManager {\n  private listeners: Array<(event: UpgradeRequiredEvent) => void> = [];\n\n  subscribe(listener: (event: UpgradeRequiredEvent) => void): () => void {\n    this.listeners.push(listener);\n    \n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  emit(event: UpgradeRequiredEvent): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener(event);\n      } catch (error) {\n        // Lazy import to avoid cyclic dependency and keep this utility lightweight\n        try {\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\n          const { devConsole } = require('../config/environment');\n          devConsole.error('❌ Error in upgrade event listener:', error);\n        } catch {\n          if (typeof console !== 'undefined') console.error('Error in upgrade event listener:', error);\n        }\n      }\n    });\n  }\n\n  triggerUpgradeRequired(feature: string): void {\n    this.emit({ feature });\n  }\n}\n\n// Export singleton instance\nexport const upgradeEventManager = new UpgradeEventManager();\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]}]
