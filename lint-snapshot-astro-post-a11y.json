[{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/App.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/HumanDesignChart.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/MultiSystemChart.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/Profile.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/SynastryAnalysis.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/TestWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/auth.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/birthDataUtils.edge.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/birthDataUtils.safeParse.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/birthDataUtils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/__tests__/serialize.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIChat.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":55,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":55,"endColumn":65,"suggestions":[{"fix":{"range":[1453,1507],"text":"res?.data === null"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useAuth } from \"@cosmichub/auth\";\nimport { getAuthToken } from \"../services/api\";\nimport { useToast } from \"./ToastProvider\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\ninterface ErrorResponseData {\n  detail: string;\n}\n\ninterface ErrorResponseWrapper {\n  data: ErrorResponseData;\n}\n\ninterface ErrorResponse {\n  response: ErrorResponseWrapper;\n}\n\nexport default function AIChat(): React.ReactElement {\n  const { user, loading } = useAuth();\n  const [message, setMessage] = useState(\"\");\n  const [response, setResponse] = useState<ChatResponse | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handleSubmit = async (): Promise<void> => {\n    setError(null);\n    \n    if (message === null || message === undefined || typeof message !== 'string' || message.trim().length === 0) {\n      return;\n    }\n\n    try {\n      const token = await getAuthToken();\n      \n      if (token === null || token === undefined || token.length === 0) {\n        throw new Error('Authentication token is missing');\n      }\n\n      const res = await axios.post(\n        `${import.meta.env.VITE_BACKEND_URL}/chat`,\n        { text: message },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (res === null || res === undefined || res.data === null || res.data === undefined || typeof res.data !== 'object') {\n        throw new Error('No response data received');\n      }\n\n      const chatResponse = res.data as ChatResponse;\n      \n      if (chatResponse === null || chatResponse === undefined || \n          !Array.isArray(chatResponse.choices) || \n          chatResponse.choices.length === 0 ||\n          chatResponse.choices[0] === null || \n          chatResponse.choices[0] === undefined ||\n          typeof chatResponse.choices[0].message?.content !== 'string' ||\n          chatResponse.choices[0].message.content.length === 0) {\n        throw new Error('Invalid response format');\n      }\n\n      setResponse(chatResponse);\n      toast({\n        title: \"Response Received\",\n        description: \"Your AI response has been generated successfully\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      const err = error as Partial<ErrorResponse>;\n      const errorMessage = err.response?.data?.detail ?? \"Failed to get response\";\n      setError(errorMessage);\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  if (loading === true) {\n    return <div className=\"text-white\" role=\"status\" aria-label=\"Loading authentication\">Loading...</div>;\n  }\n  \n  if (user === undefined || user === null || typeof user !== 'object') {\n    return <Navigate to=\"/login\" replace aria-label=\"Redirecting to login\" />;\n  }\n\n  return (\n    <div \n      role=\"main\"\n      aria-label=\"AI Astrology Chat Interface\"\n      className=\"max-w-2xl p-6 mx-auto text-white border shadow-2xl bg-cosmic-dark/80 backdrop-blur-xl border-cosmic-gold/20 rounded-xl\"\n    >\n      <h1 className=\"mb-6 text-2xl font-bold text-center text-cosmic-gold\">\n        AI Astrology Chat\n      </h1>\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"ai-message-input\" className=\"block mb-2 text-cosmic-gold\">Your Message</label>\n          <textarea \n            id=\"ai-message-input\"\n            value={message} \n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>): void => setMessage(e.target.value)} \n            placeholder=\"Ask about your chart...\" \n            className=\"w-full p-3 text-white border rounded-lg resize-none bg-cosmic-dark border-cosmic-gold/30 placeholder-cosmic-silver focus:border-cosmic-gold focus:outline-none\"\n            rows={4}\n            aria-describedby=\"ai-message-help\"\n          />\n          <div id=\"ai-message-help\" className=\"mt-1 text-sm text-cosmic-silver/70\">\n            Ask questions about your astrological chart or request interpretations\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          className=\"w-full py-3 font-semibold transition-colors rounded-lg bg-cosmic-gold text-cosmic-dark hover:bg-cosmic-gold/90 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={(): void => {\n            void handleSubmit();\n          }}\n          disabled={message === null || message === undefined || typeof message !== 'string' || message.trim().length === 0}\n          aria-label=\"Send message to AI chat\"\n        >\n          Send\n        </button>\n  {error !== null && error !== undefined && typeof error === 'string' && error.length > 0 && (\n    <div className=\"p-3 text-red-400 border rounded-lg bg-red-900/20 border-red-500/30\" role=\"alert\">\n      {error}\n    </div>\n  )}\n  {response !== null && response !== undefined && \n   typeof response === 'object' &&\n   Array.isArray(response.choices) && \n   response.choices.length > 0 && \n   response.choices[0] !== null && \n   response.choices[0] !== undefined &&\n   typeof response.choices[0].message?.content === 'string' &&\n   response.choices[0].message.content.length > 0 && (\n    <div className=\"p-4 mt-4 border rounded-lg bg-cosmic-purple/20 border-cosmic-purple/30\">\n      <div className=\"text-cosmic-silver\">{response.choices[0].message.content}</div>\n    </div>\n  )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/AIInterpretation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/InterpretationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/__tests__/AIChat.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/useAIInterpretation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AIInterpretation/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AnalyzePersonality.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/AspectsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/AstrologyGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/FundamentalsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/HousesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/HowToUseTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/PlanetsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/SignsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AstrologyGuide/useAstrologyGuide.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/ChartDisplay.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/ChartDisplay.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Planet[]`.","line":582,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":582,"endColumn":97,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `House[]`.","line":584,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":584,"endColumn":94,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Aspect[]`.","line":586,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":586,"endColumn":97,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Asteroid[]`.","line":588,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":588,"endColumn":103,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `Angle[]`.","line":590,"column":31,"nodeType":"Property","messageId":"unsafeAssignment","endLine":590,"endColumn":94,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/ChartHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/__tests__/ChartDisplay.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/__tests__/normalizeChart.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/__tests__/validateChart.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/normalizeChart.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/sampleData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/AngleTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/AspectTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/HouseTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/PlanetTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/AngleTable.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/AspectTable.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/HouseTable.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/__tests__/PlanetTable.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/tables/tableUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/validateChart.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartDisplay/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ChartPreferences.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user?.uid'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [user?.uid, toast]","fix":{"range":[3569,3584],"text":"[user?.uid, toast]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'user?.uid'. Either include it or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [userId, loadUserPreferences, user?.uid]","fix":{"range":[4467,4496],"text":"[userId, loadUserPreferences, user?.uid]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user?.uid'. Either include it or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [user?.uid, onSaved, toast, preferences]","fix":{"range":[6521,6558],"text":"[user?.uid, onSaved, toast, preferences]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useToast } from './ToastProvider';\nimport { useAuth } from '@cosmichub/auth';\nimport { db } from '@cosmichub/config/firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { componentLogger } from '../utils/componentLogger';\n\nimport { \n  type ChartStyle,\n  type HouseSystem,\n  type ThemeOption,\n  type ChartPreferencesData,\n  isChartPreferencesData,\n  DEFAULT_PREFERENCES\n} from '../types/preferences';\n\n// Stable user id validator extracted outside component so it isn't recreated each render\nconst isValidUserId = (userId: unknown): userId is string => typeof userId === 'string' && userId.length > 0;\n\nexport interface ChartPreferencesProps {\n  /** Optional override to preload preferences (primarily for Storybook / tests) */\n  initialPreferences?: ChartPreferencesData;\n  /** Called after successful save (for external analytics) */\n  onSaved?: (prefs: ChartPreferencesData) => void;\n}\n\nconst ChartPreferences: React.FC<ChartPreferencesProps> = function ChartPreferences({ initialPreferences, onSaved }) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [preferences, setPreferences] = useState<ChartPreferencesData>(initialPreferences ?? DEFAULT_PREFERENCES);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingPreferences, setIsLoadingPreferences] = useState(true);\n\n  // Derived stable user id & flags\n  const userId = user?.uid;\n  const hasValidUserId = userId !== undefined && userId !== null && typeof userId === 'string' && userId.length > 0;\n  const saveAriaLabel = isLoading === true\n    ? 'Saving preferences'\n    : hasValidUserId === true\n      ? 'Save preferences'\n      : 'Sign in to save preferences';\n  const saveButtonDisabled = hasValidUserId === false || isLoading === true;\n\n  const loadUserPreferences = useCallback(async (): Promise<void> => {\n    const currentUid = user?.uid;\n    if (!isValidUserId(currentUid)) {\n      return;\n    }\n\n    try {\n      setIsLoadingPreferences(true);\n      if (currentUid === undefined || currentUid === null) {\n        return;\n      }\n      const userDocRef = doc(db, 'users', currentUid);\n      const userDoc = await getDoc(userDocRef);\n\n      const isValidUserData = (data: unknown): data is { chartPreferences: ChartPreferencesData } => {\n        if (data === null || data === undefined || typeof data !== 'object') return false;\n        const obj = data as { chartPreferences?: unknown };\n        return 'chartPreferences' in obj && \n               obj.chartPreferences !== null && \n               obj.chartPreferences !== undefined && \n               isChartPreferencesData(obj.chartPreferences);\n      };\n\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        if (isValidUserData(userData)) {\n          setPreferences(userData.chartPreferences);\n        } else {\n          componentLogger.warn('ChartPreferences', 'Invalid preferences data in Firestore', userData?.chartPreferences);\n          setPreferences(DEFAULT_PREFERENCES);\n        }\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error \n        ? error.message \n        : 'Failed to load user preferences';\n      \n      componentLogger.error('ChartPreferences', errorMessage, error);\n      toast({\n        description: errorMessage,\n        status: 'error'\n      });\n    } finally {\n      setIsLoadingPreferences(false);\n    }\n  // deps: user?.uid (determines Firestore path), toast (stable from provider)\n  }, [userId, toast]);\n\n  // Load user preferences on mount\n  useEffect(() => {\n    const userId = user?.uid;\n    // Explicit check for userId existence and validity\n    if (userId === null || userId === undefined || typeof userId !== 'string' || userId.length === 0) {\n      setIsLoadingPreferences(false);\n      return;\n    }\n    \n    // Create an abort controller to handle cleanup\n    const abortController = new AbortController();\n    \n    // Wrap async operation\n    const loadPrefs = async () => {\n      try {\n        await loadUserPreferences();\n      } catch (error) {\n        // Only handle error if not aborted\n        if (!abortController.signal.aborted) {\n          componentLogger.error('ChartPreferences', 'Failed to load preferences on mount', error);\n        }\n      }\n    };\n\n    void loadPrefs();\n\n    // Cleanup function\n    return () => {\n      abortController.abort();\n    };\n  }, [userId, loadUserPreferences]);\n\n  const handlePreferenceChange = useCallback(<K extends keyof ChartPreferencesData>(\n    key: K,\n    value: ChartPreferencesData[K]\n  ): void => {\n    setPreferences(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  }, []);\n\n  const handleSavePreferences = useCallback(async (): Promise<void> => {\n    const userId = user?.uid;\n    // Explicit validation of userId with type guard\n    if (userId === null || userId === undefined || typeof userId !== 'string' || userId.length === 0) {\n      toast({\n        description: 'You must be logged in to save preferences',\n        status: 'error'\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Save preferences to Firestore\n      const userDocRef = doc(db, 'users', userId);\n      await setDoc(userDocRef, {\n        chartPreferences: preferences,\n        updatedAt: new Date()\n      }, { merge: true });\n\n      toast({\n        description: 'Preferences saved successfully',\n        status: 'success'\n      });\n    } catch (error) {\n      // Default error message\n      let errorMessage = 'Failed to save preferences. Please try again.';\n      \n      // Error instance with message\n      if (error instanceof Error && error.message !== undefined && error.message !== null && error.message.length > 0) {\n        errorMessage = error.message;\n      } \n      // String error\n      else if (typeof error === 'string' && error.length > 0) {\n        errorMessage = error;\n      }\n      // Unknown error type - use default message but log full error\n      else if (error !== null && error !== undefined) {\n        componentLogger.warn('ChartPreferences', 'Received non-standard error type', { error });\n      }\n      \n      componentLogger.error('ChartPreferences', 'Failed to save preferences', { error, preferences });\n      toast({\n        description: errorMessage,\n        status: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n    if (onSaved !== undefined && onSaved !== null) {\n      onSaved(preferences);\n    }\n  }, [preferences, userId, toast, onSaved]);\n\n  return (\n    <div className=\"space-y-6\" aria-live=\"polite\" role=\"form\" aria-labelledby=\"chart-prefs-heading\">\n      <h2 id=\"chart-prefs-heading\" className=\"sr-only\">Chart Preferences</h2>\n      {isLoadingPreferences ? (\n  <Card title=\"Chart Preferences\" aria-busy=\"true\">\n          <div className=\"flex items-center justify-center py-8\" role=\"status\" aria-label=\"Loading user chart preferences\">\n            <div className=\"text-cosmic-silver\">Loading preferences…</div>\n          </div>\n        </Card>\n      ) : (\n  <Card title=\"Chart Preferences\">\n          <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"chartStyle\" className=\"block text-cosmic-silver mb-2\">\n              Chart Style\n            </label>\n            <select\n              id=\"chartStyle\"\n              value={preferences.chartStyle}\n              onChange={(e) => handlePreferenceChange('chartStyle', e.target.value as ChartStyle)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select chart style\"\n            >\n              <option value=\"western\">Western Tropical</option>\n              <option value=\"vedic\">Vedic Sidereal</option>\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"houseSystem\" className=\"block text-cosmic-silver mb-2\">\n              House System\n            </label>\n            <select\n              id=\"houseSystem\"\n              value={preferences.houseSystem}\n              onChange={(e) => handlePreferenceChange('houseSystem', e.target.value as HouseSystem)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select house system\"\n            >\n              <option value=\"placidus\">Placidus</option>\n              <option value=\"whole-sign\">Whole Sign</option>\n              <option value=\"equal-house\">Equal House</option>\n            </select>\n          </div>\n\n                    <div>\n            <label htmlFor=\"theme\" className=\"block text-cosmic-silver mb-2\">\n              Theme\n            </label>\n            <select\n              id=\"theme\"\n              value={preferences.theme}\n              onChange={(e) => handlePreferenceChange('theme', e.target.value as ThemeOption)}\n              className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n              aria-label=\"Select theme\"\n            >\n              <option value=\"dark\">Dark</option>\n              <option value=\"light\">Light</option>\n              <option value=\"auto\">Auto</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"notifications\"\n              checked={preferences.notifications}\n              onChange={(e) => handlePreferenceChange('notifications', e.target.checked)}\n              className=\"rounded\"\n              aria-describedby=\"notifications-hint\"\n            />\n            <label htmlFor=\"notifications\" className=\"text-cosmic-silver\">\n              Email notifications\n            </label>\n            <span id=\"notifications-hint\" className=\"sr-only\">Enable or disable email notification features</span>\n          </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"text-center\">\n        <Button \n          onClick={() => { void handleSavePreferences(); }} \n          variant=\"primary\"\n          disabled={saveButtonDisabled}\n          aria-disabled={saveButtonDisabled}\n          aria-busy={isLoading}\n          aria-label={saveAriaLabel}\n        >\n          {isLoading ? 'Saving...' : 'Save Preferences'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChartPreferences;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Contact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/CosmicLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EducationalContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EducationalTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EnvironmentStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/EphemerisPerformanceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorBoundary.stories.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":17,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport ErrorBoundary from './ErrorBoundary';\nimport './ErrorBoundary.stories.css';\n\nconst meta: Meta<typeof ErrorBoundary> = {\n  title: 'Feedback/ErrorBoundary (Astro)'.replace(/\\s+/g,' '),\n  component: ErrorBoundary,\n  args: {\n    name: 'DemoBoundary'\n  }\n};\nexport default meta;\n\ntype Story = StoryObj<typeof ErrorBoundary>;\n\nconst Boom: React.FC<{ mode?: 'render' | 'effect' }>= ({ mode='render' }) => {\n  const [count,setCount] = useState(0);\n  if (mode==='render' && count>1) {\n    throw new Error('Render explosion after 2 clicks');\n  }\n  return (\n  <div className=\"error-boundary-demo\">\n      <p>Click the button to increment. After 2 clicks it will throw.</p>\n      <button onClick={()=>setCount(c=>c+1)}>Clicks: {count}</button>\n    </div>\n  );\n};\n\nexport const Basic: Story = {\n  render: (args)=> (\n    <ErrorBoundary {...args}>\n      <Boom />\n    </ErrorBoundary>\n  )\n};\n\nexport const WithFallback: Story = {\n  render: (args)=> (\n    <ErrorBoundary {...args} fallback={<div className=\"error-boundary-fallback\">Custom fallback UI</div>}>\n      <Boom />\n    </ErrorBoundary>\n  )\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":54,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":54,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":66,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":66,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2185,2200],"text":"(this.props.name != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2185,2200],"text":"(this.props.name ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2185,2200],"text":"(Boolean(this.props.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":69,"column":33,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":69,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2329,2345],"text":"(this.state.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":78,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":78,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2890,2912],"text":"(this.state.error.stack != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2890,2912],"text":"(this.state.error.stack ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2890,2912],"text":"(Boolean(this.state.error.stack))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { isDevelopment, devConsole } from '../config/environment';\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  name?: string;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\n/**\n * Enhanced Error Boundary for Astro app with cosmic theming\n * This will be migrated to use @cosmichub/ui ErrorBoundary\n */\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): { hasError: boolean; error: Error } {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    devConsole.log('🚨 Astro Error Boundary');\n    devConsole.error('Error:', error);\n    devConsole.error('Error Info:', errorInfo);\n    \n    // Check if this is a serialization error and log additional context\n    if (error.message.includes('serialization') || error.message.includes('deserialize')) {\n      devConsole.warn('⚠️ Serialization Error Detected', {\n        errorType: 'SERIALIZATION_ERROR',\n        component: this.props.name,\n        message: error.message,\n        stack: error.stack?.slice(0, 500) // Truncate for logging\n      });\n    }\n    \n    this.props.onError?.(error, errorInfo);\n  }\n\n  private handleRetry = () => {\n    this.setState({ hasError: false, error: null });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-[200px] flex items-center justify-center p-8\">\n          <div className=\"max-w-md w-full bg-cosmic-dark/80 backdrop-blur-sm rounded-lg border border-cosmic-silver/20 p-6 text-center\">\n            <div className=\"text-4xl mb-4\">⭐</div>\n            <h2 className=\"text-xl font-bold text-cosmic-gold mb-2\">\n              Something went wrong\n            </h2>\n            <p className=\"text-cosmic-silver text-sm mb-6\">\n              {this.props.name ? `Error in ${this.props.name}` : 'An unexpected error occurred'}\n            </p>\n            \n            {isDevelopment() && this.state.error && (\n              <details className=\"mb-6 text-left\">\n                <summary className=\"cursor-pointer text-sm font-medium text-cosmic-silver/80 hover:text-cosmic-silver\">\n                  Technical Details\n                </summary>\n                <div className=\"mt-2 p-3 bg-cosmic-dark rounded border border-cosmic-silver/10 text-xs font-mono text-red-400 overflow-auto max-h-32\">\n                  <div className=\"font-semibold text-red-300\">\n                    {this.state.error.message}\n                  </div>\n                  {this.state.error.stack && (\n                    <pre className=\"mt-2 whitespace-pre-wrap text-red-400/80\">\n                      {this.state.error.stack}\n                    </pre>\n                  )}\n                </div>\n              </details>\n            )}\n\n            <div className=\"flex gap-3 justify-center\">\n              <button\n                onClick={this.handleRetry}\n                className=\"px-4 py-2 bg-cosmic-purple hover:bg-cosmic-purple/80 text-white text-sm rounded transition-colors\"\n              >\n                Try Again\n              </button>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"px-4 py-2 border border-cosmic-silver/30 hover:bg-cosmic-silver/10 text-cosmic-silver text-sm rounded transition-colors\"\n              >\n                Reload Page\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ErrorTestComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/FeatureGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/ActivationSequenceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/CoreQuartetTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeyDetails.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":10,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":10,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[261,273],"text":"selectedKey == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":21,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":21,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[623,630],"text":"(onClose != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { GeneKey } from './types';\n\ninterface GeneKeyDetailsProps {\n  selectedKey: GeneKey | null;\n  onClose?: () => void;\n}\n\nconst GeneKeyDetails: React.FC<GeneKeyDetailsProps> = React.memo(({ selectedKey, onClose }) => {\n  if (!selectedKey) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-cosmic-silver/60\">Select a Gene Key to view details</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border cosmic-card bg-gradient-to-br from-purple-900/30 to-pink-900/30 border-cosmic-gold/30\">\n      <div className=\"p-6\">\n        {onClose && (\n          <div className=\"flex justify-end mb-4\">\n            <button\n              onClick={onClose}\n              className=\"transition-colors text-cosmic-silver/60 hover:text-cosmic-silver\"\n              aria-label=\"Close details\"\n            >\n              ✕\n            </button>\n          </div>\n        )}\n        \n        <div className=\"mb-6 text-center\">\n          <h3 className=\"mb-2 text-2xl font-bold text-cosmic-gold\">\n            Gene Key {selectedKey.number}\n          </h3>\n          <h4 className=\"mb-4 text-xl font-semibold text-cosmic-silver\">\n            {selectedKey.name}\n          </h4>\n          <p className=\"leading-relaxed text-cosmic-silver/80\">\n            {selectedKey.description}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n          {/* Shadow */}\n          <div className=\"p-4 border rounded-lg bg-red-900/30 border-red-500/30\">\n            <div className=\"flex items-center mb-3\">\n              <span className=\"mr-2 text-2xl\">🌑</span>\n              <h5 className=\"text-lg font-bold text-red-400\">Shadow</h5>\n            </div>\n            <p className=\"text-sm leading-relaxed text-cosmic-silver/90\">\n              {selectedKey.shadow}\n            </p>\n          </div>\n\n          {/* Gift */}\n          <div className=\"p-4 border rounded-lg bg-green-900/30 border-green-500/30\">\n            <div className=\"flex items-center mb-3\">\n              <span className=\"mr-2 text-2xl\">🎁</span>\n              <h5 className=\"text-lg font-bold text-green-400\">Gift</h5>\n            </div>\n            <p className=\"text-sm leading-relaxed text-cosmic-silver/90\">\n              {selectedKey.gift}\n            </p>\n          </div>\n\n          {/* Siddhi */}\n          <div className=\"p-4 border rounded-lg bg-golden-900/30 border-yellow-500/30\">\n            <div className=\"flex items-center mb-3\">\n              <span className=\"mr-2 text-2xl\">✨</span>\n              <h5 className=\"text-lg font-bold text-yellow-400\">Siddhi</h5>\n            </div>\n            <p className=\"text-sm leading-relaxed text-cosmic-silver/90\">\n              {selectedKey.siddhi}\n            </p>\n          </div>\n        </div>\n\n        {/* Codon Information */}\n        <div className=\"pt-6 mt-6 border-t border-cosmic-silver/20\">\n          <div className=\"text-center\">\n            <h5 className=\"mb-2 text-lg font-bold text-cosmic-silver\">Genetic Codon</h5>\n            <p className=\"font-mono text-xl tracking-wider text-cosmic-gold\">\n              {selectedKey.codon}\n            </p>\n            <p className=\"mt-2 text-sm text-cosmic-silver/60\">\n              I Ching Hexagram {selectedKey.number}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nGeneKeyDetails.displayName = 'GeneKeyDetails';\n\nexport default GeneKeyDetails;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysChart.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysChart.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleCalculate'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [birthData, handleCalculate]","fix":{"range":[2666,2677],"text":"[birthData, handleCalculate]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/GeneKeysComponents.tsx","messages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":21,"column":5,"nodeType":"JSXOpeningElement","endLine":24,"endColumn":6},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":73,"column":5,"nodeType":"JSXOpeningElement","endLine":76,"endColumn":6},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":79,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":79,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2522,2534],"text":"(geneKey.line != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2522,2534],"text":"(geneKey.line ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2522,2534],"text":"(Boolean(geneKey.line))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":86,"column":8,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":86,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2774,2792],"text":"(geneKey.line_theme != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2774,2792],"text":"(geneKey.line_theme ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2774,2792],"text":"(Boolean(geneKey.line_theme))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":86,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":86,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2796,2818],"text":"(geneKey.sphere_context != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2796,2818],"text":"(geneKey.sphere_context ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2796,2818],"text":"(Boolean(geneKey.sphere_context))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":101,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":101,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3297,3309],"text":"selectedKey == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":119,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":119,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3926,3942],"text":"(selectedKey.line != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3926,3942],"text":"(selectedKey.line ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3926,3942],"text":"(Boolean(selectedKey.line))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":126,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":126,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4204,4226],"text":"(selectedKey.line_theme != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4204,4226],"text":"(selectedKey.line_theme ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4204,4226],"text":"(Boolean(selectedKey.line_theme))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":126,"column":36,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":126,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4230,4256],"text":"(selectedKey.sphere_context != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4230,4256],"text":"(selectedKey.sphere_context ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4230,4256],"text":"(Boolean(selectedKey.sphere_context))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useCallback } from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { FaLeaf, FaGem, FaSun, FaChevronDown } from 'react-icons/fa';\nimport type { \n  GeneKey, \n  GeneKeyDisplayProps, \n  SequenceDisplayProps, \n  GeneKeyDetailsProps,\n  VenusSequenceProps,\n  HologenicProfileProps,\n  GeneKeysData\n} from './types';\n\n// Memoized Gene Key display component\nexport const GeneKeyDisplay = memo<GeneKeyDisplayProps>(({ geneKey, title, description, onKeySelect }) => {\n  const handleClick = useCallback(() => {\n    onKeySelect(geneKey);\n  }, [geneKey, onKeySelect]);\n\n  return (\n    <div \n      className=\"transition-all duration-200 cursor-pointer cosmic-card hover:shadow-lg\"\n      onClick={handleClick}\n    >\n      <div className=\"p-4\">\n        <h3 className=\"font-bold text-purple-600 text-md\">{title}</h3>\n        <p className=\"text-sm text-gray-700\">{description}</p>\n      </div>\n      <div className=\"p-4 pt-0\">\n        <div className=\"text-center\">\n          <span className=\"px-3 py-1 text-white bg-purple-500 rounded-full font-size-lg\">\n            Gene Key {geneKey.number}\n          </span>\n          <h4 className=\"mt-2 text-sm\">{geneKey.name}</h4>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nGeneKeyDisplay.displayName = 'GeneKeyDisplay';\n\n// Memoized Sequence display component\nexport const SequenceDisplay = memo<SequenceDisplayProps>(({ sequence, onKeySelect }) => {\n  return (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <h3 className=\"mb-2 font-bold text-md\">{sequence.name}</h3>\n        <p className=\"mb-4 text-sm text-gray-700\">{sequence.description}</p>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {sequence.keys.map((key, index) => (\n            <GeneKeyItem\n              key={index}\n              geneKey={key}\n              onKeySelect={onKeySelect}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nSequenceDisplay.displayName = 'SequenceDisplay';\n\n// Memoized individual Gene Key item component\nconst GeneKeyItem = memo<{ geneKey: GeneKey; onKeySelect: (key: GeneKey) => void }>(({ geneKey, onKeySelect }) => {\n  const handleClick = useCallback(() => {\n    onKeySelect(geneKey);\n  }, [geneKey, onKeySelect]);\n\n  return (\n    <div \n      className=\"p-3 rounded-md cursor-pointer bg-gray-50 hover:bg-gray-100\"\n      onClick={handleClick}\n    >\n      <div className=\"flex items-center justify-between mb-2\">\n        <p className=\"text-sm font-bold\">Gene Key {geneKey.number}</p>\n        {geneKey.line && (\n          <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full\">\n            Line {geneKey.line}\n          </span>\n        )}\n      </div>\n      <p className=\"text-xs text-gray-700 mb-1\">{geneKey.name}</p>\n      {geneKey.line_theme && geneKey.sphere_context && (\n        <div className=\"mt-2 p-2 bg-gradient-to-r from-purple-50 to-blue-50 rounded border-l-2 border-purple-300\">\n          <p className=\"text-xs font-medium text-purple-700\">\n            {geneKey.sphere_context} Line Theme: {geneKey.line_theme}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n});\n\nGeneKeyItem.displayName = 'GeneKeyItem';\n\n// Memoized Gene Key details component\nexport const GeneKeyDetails = memo<GeneKeyDetailsProps>(({ selectedKey }) => {\n  if (!selectedKey) {\n    return (\n      <div className=\"flex p-4 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n        <span className=\"text-xl text-blue-500\">ℹ️</span>\n        <p className=\"text-white/80\">\n          Click on any Gene Key above to see detailed information about its Shadow, Gift, and Siddhi.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h2 className=\"text-lg font-bold\">\n            Gene Key {selectedKey.number}: {selectedKey.name}\n          </h2>\n          {selectedKey.line && (\n            <span className=\"px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full\">\n              Line {selectedKey.line}\n            </span>\n          )}\n        </div>\n        <p className=\"text-gray-700 mb-2\">Codon: {selectedKey.codon}</p>\n        {selectedKey.line_theme && selectedKey.sphere_context && (\n          <div className=\"mb-4 p-3 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border-l-4 border-purple-400\">\n            <p className=\"text-sm font-semibold text-purple-800\">\n              {selectedKey.sphere_context} Sphere - Line {selectedKey.line}: {selectedKey.line_theme}\n            </p>\n            <p className=\"text-xs text-purple-600 mt-1\">\n              This is your contemplative theme for the {selectedKey.sphere_context.toLowerCase()} sphere of the Golden Path.\n            </p>\n          </div>\n        )}\n      </div>\n      <div className=\"p-4 pt-0\">\n        <p className=\"mb-6 text-lg\">{selectedKey.description}</p>\n        \n        <div className=\"grid grid-cols-3 gap-6\">\n          <div className=\"p-4 border border-red-500 rounded-md bg-red-50\">\n            <div className=\"flex items-center mb-2 space-x-2\">\n              <FaLeaf className=\"text-red-500\" />\n              <h3 className=\"font-bold text-red-600 text-md\">Shadow</h3>\n            </div>\n            <p className=\"mb-2 font-bold\">{selectedKey.shadow}</p>\n            <p className=\"text-sm text-gray-700\">\n              The unconscious, reactive pattern that creates suffering and limitation.\n            </p>\n          </div>\n          \n          <div className=\"p-4 border border-green-500 rounded-md bg-green-50\">\n            <div className=\"flex items-center mb-2 space-x-2\">\n              <FaGem className=\"text-green-500\" />\n              <h3 className=\"font-bold text-green-600 text-md\">Gift</h3>\n            </div>\n            <p className=\"mb-2 font-bold\">{selectedKey.gift}</p>\n            <p className=\"text-sm text-gray-700\">\n              The conscious, stable frequency that serves yourself and others.\n            </p>\n          </div>\n          \n          <div className=\"p-4 border border-yellow-500 rounded-md bg-yellow-50\">\n            <div className=\"flex items-center mb-2 space-x-2\">\n              <FaSun className=\"text-yellow-500\" />\n              <h3 className=\"font-bold text-yellow-600 text-md\">Siddhi</h3>\n            </div>\n            <p className=\"mb-2 font-bold\">{selectedKey.siddhi}</p>\n            <p className=\"text-sm text-gray-700\">\n              The superconsious, transcendent state of pure being and service.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nGeneKeyDetails.displayName = 'GeneKeyDetails';\n\n// Memoized Venus Sequence component\nexport const VenusSequence = memo<VenusSequenceProps>(({ geneKeysData, onKeySelect }) => {\n  return (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <h2 className=\"mb-4 text-lg font-bold\">Venus Sequence</h2>\n        <p className=\"mb-6 text-sm text-gray-700\">\n          The Venus Sequence reveals the pathway to opening your heart through relationships.\n        </p>\n        \n        <Accordion.Root type=\"single\" collapsible>\n          <Accordion.Item value=\"0\">\n            <Accordion.Trigger className=\"flex justify-between w-full\">\n              <span className=\"font-bold\">IQ Sphere</span>\n              <FaChevronDown className=\"text-cosmic-silver\" />\n            </Accordion.Trigger>\n            <Accordion.Content className=\"pb-4\">\n              <p className=\"mb-4 text-sm text-gray-700\">{geneKeysData.iq.description}</p>\n              <div className=\"grid grid-cols-1 gap-4\">\n                <GeneKeyItem\n                  geneKey={geneKeysData.iq}\n                  onKeySelect={onKeySelect}\n                />\n              </div>\n            </Accordion.Content>\n          </Accordion.Item>\n\n          <Accordion.Item value=\"1\">\n            <Accordion.Trigger className=\"flex justify-between w-full\">\n              <span className=\"font-bold\">EQ Sphere</span>\n              <FaChevronDown className=\"text-cosmic-silver\" />\n            </Accordion.Trigger>\n            <Accordion.Content className=\"pb-4\">\n              <p className=\"mb-4 text-sm text-gray-700\">{geneKeysData.eq.description}</p>\n              <div className=\"grid grid-cols-1 gap-4\">\n                <GeneKeyItem\n                  geneKey={geneKeysData.eq}\n                  onKeySelect={onKeySelect}\n                />\n              </div>\n            </Accordion.Content>\n          </Accordion.Item>\n\n          <Accordion.Item value=\"2\">\n            <Accordion.Trigger className=\"flex justify-between w-full\">\n              <span className=\"font-bold\">SQ Sphere</span>\n              <FaChevronDown className=\"text-cosmic-silver\" />\n            </Accordion.Trigger>\n            <Accordion.Content className=\"pb-4\">\n              <p className=\"mb-4 text-sm text-gray-700\">{geneKeysData.sq.description}</p>\n              <div className=\"grid grid-cols-1 gap-4\">\n                <GeneKeyItem\n                  geneKey={geneKeysData.sq}\n                  onKeySelect={onKeySelect}\n                />\n              </div>\n            </Accordion.Content>\n          </Accordion.Item>\n        </Accordion.Root>\n      </div>\n    </div>\n  );\n});\n\nVenusSequence.displayName = 'VenusSequence';\n\n// Memoized Hologenic Profile component\nexport const HologenicProfile = memo<HologenicProfileProps>(({ geneKeysData, onKeySelect }) => {\n  return (\n    <div className=\"mb-6 cosmic-card\">\n      <div className=\"p-4\">\n        <h2 className=\"mb-4 text-lg font-bold\">Your Hologenetic Profile</h2>\n        <p className=\"mb-6 text-sm text-gray-700\">\n          {geneKeysData.hologenetic_profile.description}\n        </p>\n        \n        <h3 className=\"mb-4 font-bold text-md\">Core Spheres</h3>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <GeneKeyDisplay\n            geneKey={geneKeysData.life_work}\n            title=\"Life's Work\"\n            description=\"What you're here to do\"\n            onKeySelect={onKeySelect}\n          />\n          <GeneKeyDisplay\n            geneKey={geneKeysData.evolution}\n            title=\"Evolution\"\n            description=\"What you're here to learn\"\n            onKeySelect={onKeySelect}\n          />\n          <GeneKeyDisplay\n            geneKey={geneKeysData.radiance}\n            title=\"Radiance\"\n            description=\"What keeps you healthy\"\n            onKeySelect={onKeySelect}\n          />\n          <GeneKeyDisplay\n            geneKey={geneKeysData.purpose}\n            title=\"Purpose\"\n            description=\"What fulfills you\"\n            onKeySelect={onKeySelect}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n\nHologenicProfile.displayName = 'HologenicProfile';\n\n// Memoized Activation Sequence component\nexport const ActivationSequence = memo<{ geneKeysData: GeneKeysData; onKeySelect: (key: GeneKey) => void }>(({ geneKeysData, onKeySelect }) => {\n  return (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <h2 className=\"mb-4 text-lg font-bold\">Activation Sequence</h2>\n        <p className=\"mb-6 text-sm text-gray-700\">\n          The Activation Sequence focuses on grounding your core purpose through four primary Gene Keys.\n        </p>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          {geneKeysData.activation.keys.map((key, index) => (\n            <GeneKeyItem\n              key={index}\n              geneKey={key}\n              onKeySelect={onKeySelect}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nActivationSequence.displayName = 'ActivationSequence';\n\n// Memoized Pearl Sequence component\nexport const PearlSequence = memo<{ geneKeysData: GeneKeysData }>(({ geneKeysData }) => {\n  return (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <h2 className=\"mb-4 text-lg font-bold\">Pearl Sequence</h2>\n        <p className=\"mb-6 text-sm text-gray-700\">\n          The Pearl Sequence awakens your prosperity consciousness and true service.\n        </p>\n        \n        <h3 className=\"mb-4 font-bold text-md\">Contemplation Sequence</h3>\n        <div className=\"flex flex-col space-y-3\">\n          {geneKeysData.contemplation_sequence.map((step, index) => (\n            <div key={index} className=\"p-3 rounded-md bg-gray-50\">\n              <p className=\"text-sm font-bold\">{step}</p>\n            </div>\n          ))}\n        </div>\n        \n        <h3 className=\"mt-6 mb-4 font-bold text-md\">Integration Path</h3>\n        <div className=\"flex flex-col space-y-3\">\n          {geneKeysData.hologenetic_profile.integration_path.map((path, index) => (\n            <div key={index} className=\"p-3 rounded-md bg-purple-50\">\n              <p className=\"text-sm\">{path}</p>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"flex p-4 mt-6 space-x-4 border border-green-500 rounded-md bg-green-900/50\">\n          <span className=\"text-xl text-green-500\">✅</span>\n          <p className=\"text-white/80\">\n            Remember: The Gene Keys are not about becoming something new, but about remembering \n            and embodying what you already are at the deepest level.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nPearlSequence.displayName = 'PearlSequence';\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/HologenicProfileTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/PearlSequenceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/VenusSequenceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/GeneKeysChart/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/CentersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/GatesChannelsTab.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":47,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":47,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":48,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":48,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":48,"fix":{"range":[4533,4536],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4533,4536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4533,4536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":63,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":75,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":64,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":64,"endColumn":53},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":64,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":64,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4601,4625],"text":"(Boolean((a?.planet?.toLowerCase())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":64,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":64,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet on an `any` value.","line":64,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":32},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":64,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":64,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4626,4628],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":53},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":65,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4655,4679],"text":"(Boolean((b?.planet?.toLowerCase())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":65,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet on an `any` value.","line":65,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":32},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":65,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":65,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4680,4682],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":67,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":67,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":68,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":68,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":81,"column":7,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":81,"endColumn":11},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":86,"column":7,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":86,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":37,"fix":{"range":[5462,5465],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5462,5465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5462,5465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":94,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":94,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":94,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":95,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":95,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":95,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":96,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":96,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .center on an `any` value.","line":97,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":98,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":98,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet on an `any` value.","line":98,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet_symbol on an `any` value.","line":99,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":100,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":100,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":101,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .position on an `any` value.","line":101,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":109,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":109,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":140,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":140,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":60},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":140,"column":66,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":140,"endColumn":76,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6925,6935],"text":"(Boolean((gate?.name)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":140,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":76},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":140,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":140,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6936,6938],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":143,"column":17,"nodeType":"JSXOpeningElement","endLine":146,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":147,"column":46,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":147,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7323,7342],"text":"(Boolean((gate?.planet_symbol)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet_symbol on an `any` value.","line":147,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":65},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":147,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":147,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7343,7345],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":149,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":149,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7434,7446],"text":"(Boolean((gate?.number)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":149,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7447,7449],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":149,"column":44,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":149,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7456,7466],"text":"(Boolean((gate?.line)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":149,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7467,7469],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":151,"column":62,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":151,"endColumn":74,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7562,7574],"text":"(Boolean((gate?.center)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .center on an `any` value.","line":151,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":74},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":151,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":151,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7575,7577],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":174,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":174,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":60},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":66,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":174,"endColumn":76,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8380,8390],"text":"(Boolean((gate?.name)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":174,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":76},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":174,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":174,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8391,8393],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":177,"column":17,"nodeType":"JSXOpeningElement","endLine":180,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":181,"column":46,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":181,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8771,8790],"text":"(Boolean((gate?.planet_symbol)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planet_symbol on an `any` value.","line":181,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":65},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8791,8793],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":183,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":183,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8882,8894],"text":"(Boolean((gate?.number)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .number on an `any` value.","line":183,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":183,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":183,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8895,8897],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":183,"column":44,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":183,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8904,8914],"text":"(Boolean((gate?.line)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .line on an `any` value.","line":183,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":183,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":183,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8915,8917],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":185,"column":60,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":185,"endColumn":72,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9008,9020],"text":"(Boolean((gate?.center)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .center on an `any` value.","line":185,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":72},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":185,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":185,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9021,9023],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":205,"column":14,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":205,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":209,"column":21,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":209,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":209,"column":63,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":209,"endColumn":76,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[9887,9900],"text":"(channel.gate1 !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[9887,9900],"text":"(!Number.isNaN(channel.gate1))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9887,9900],"text":"(Boolean(channel.gate1))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":209,"column":80,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":209,"endColumn":93,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[9904,9917],"text":"(channel.gate2 !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[9904,9917],"text":"(!Number.isNaN(channel.gate2))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9904,9917],"text":"(Boolean(channel.gate2))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":211,"column":54,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":211,"endColumn":66,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[10029,10041],"text":"(channel.name.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[10029,10041],"text":"(channel.name !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10029,10041],"text":"(Boolean(channel.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":216,"column":40,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":216,"endColumn":51},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":226,"column":21,"nodeType":"JSXOpeningElement","endLine":229,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":233,"column":24,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":233,"endColumn":35}],"suppressedMessages":[],"errorCount":80,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport type { TabProps } from './types';\nimport InlineTooltip from './InlineTooltip';\nimport HumanDesignModal, { type GateModalData, type ChannelModalData } from './HumanDesignModal';\n\n// Channel data for tooltips and modals\nconst CHANNELS: Record<string, { name: string; circuit: string; theme: string; }> = {\n  \"1-8\": { name: \"The Channel of Inspiration\", circuit: \"Individual\", theme: \"Creative Role Model\" },\n  \"2-14\": { name: \"The Channel of the Beat\", circuit: \"Individual\", theme: \"Keeper of the Keys\" },\n  \"3-60\": { name: \"The Channel of Mutation\", circuit: \"Individual\", theme: \"Energy for Change\" },\n  \"4-63\": { name: \"The Channel of Logic\", circuit: \"Collective\", theme: \"Mental Ease\" },\n  \"5-15\": { name: \"The Channel of Rhythm\", circuit: \"Collective\", theme: \"Being in the Flow\" },\n  \"6-59\": { name: \"The Channel of Mating\", circuit: \"Tribal\", theme: \"Focused on Reproduction\" },\n  \"7-31\": { name: \"The Channel of the Alpha\", circuit: \"Collective\", theme: \"Leadership for the Future\" },\n  \"9-52\": { name: \"The Channel of Concentration\", circuit: \"Collective\", theme: \"Focused Determination\" },\n  \"10-20\": { name: \"The Channel of Awakening\", circuit: \"Individual\", theme: \"Commitment to Higher Principles\" },\n  \"10-34\": { name: \"The Channel of Exploration\", circuit: \"Individual\", theme: \"Following One's Convictions\" },\n  \"10-57\": { name: \"The Channel of Perfected Form\", circuit: \"Individual\", theme: \"Survival\" },\n  \"11-56\": { name: \"The Channel of Curiosity\", circuit: \"Collective\", theme: \"The Seeker\" },\n  \"12-22\": { name: \"The Channel of Openness\", circuit: \"Individual\", theme: \"A Social Being\" },\n  \"13-33\": { name: \"The Channel of the Prodigal\", circuit: \"Collective\", theme: \"A Witness\" },\n  \"16-48\": { name: \"The Channel of the Wavelength\", circuit: \"Collective\", theme: \"Talent\" },\n  \"17-62\": { name: \"The Channel of Acceptance\", circuit: \"Collective\", theme: \"An Organized Being\" },\n  \"18-58\": { name: \"The Channel of Judgment\", circuit: \"Collective\", theme: \"Insatiable Critic\" },\n  \"19-49\": { name: \"The Channel of Synthesis\", circuit: \"Tribal\", theme: \"Sensitivity\" },\n  \"20-57\": { name: \"The Channel of the Brainwave\", circuit: \"Individual\", theme: \"Penetrating Awareness\" },\n  \"21-45\": { name: \"The Channel of Money\", circuit: \"Tribal\", theme: \"A Material Way of Life\" },\n  \"23-43\": { name: \"The Channel of Structuring\", circuit: \"Individual\", theme: \"Genius to Freak\" },\n  \"24-61\": { name: \"The Channel of Awareness\", circuit: \"Individual\", theme: \"Thinker\" },\n  \"25-51\": { name: \"The Channel of Initiation\", circuit: \"Individual\", theme: \"Needing to be First\" },\n  \"26-44\": { name: \"The Channel of Surrender\", circuit: \"Tribal\", theme: \"A Transmitter\" },\n  \"27-50\": { name: \"The Channel of Preservation\", circuit: \"Tribal\", theme: \"Custodianship\" },\n  \"28-38\": { name: \"The Channel of Struggle\", circuit: \"Individual\", theme: \"Stubbornness\" },\n  \"29-46\": { name: \"The Channel of Discovery\", circuit: \"Collective\", theme: \"Succeeding Where Others Fail\" },\n  \"30-41\": { name: \"The Channel of Recognition\", circuit: \"Individual\", theme: \"A Focused Way of Life\" },\n  \"32-54\": { name: \"The Channel of Transformation\", circuit: \"Tribal\", theme: \"Being Driven\" },\n  \"34-57\": { name: \"The Channel of Power\", circuit: \"Individual\", theme: \"An Archetype\" },\n  \"35-36\": { name: \"The Channel of Transitoriness\", circuit: \"Collective\", theme: \"A Being of Experience\" },\n  \"37-40\": { name: \"The Channel of Community\", circuit: \"Tribal\", theme: \"A Part Seeking Wholeness\" },\n  \"39-55\": { name: \"The Channel of Emoting\", circuit: \"Individual\", theme: \"Moodiness\" },\n  \"42-53\": { name: \"The Channel of Maturation\", circuit: \"Collective\", theme: \"Balanced Development\" },\n  \"47-64\": { name: \"The Channel of Abstraction\", circuit: \"Collective\", theme: \"Mental Activity & Clarity\" }\n};\n\nconst GatesChannelsTab: React.FC<TabProps> = ({ humanDesignData }) => {\n  // Safe data extraction with fallbacks\n  const gates = humanDesignData?.gates || [];\n  const channels = humanDesignData?.channels || [];\n  \n  // Modal state\n  const [modalData, setModalData] = useState<GateModalData | ChannelModalData | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // Define planetary order for sorting\n  const planetaryOrder = [\n    'sun', 'earth', 'moon', 'north_node', 'south_node',\n    'mercury', 'venus', 'mars', 'jupiter', 'saturn',\n    'uranus', 'neptune', 'pluto'\n  ];\n  \n  // Function to sort gates by planetary order\n  const sortGatesByPlanetaryOrder = (gates: any[]) => {\n    return gates.sort((a, b) => {\n      const planetA = a?.planet?.toLowerCase() || '';\n      const planetB = b?.planet?.toLowerCase() || '';\n      \n      const indexA = planetaryOrder.indexOf(planetA);\n      const indexB = planetaryOrder.indexOf(planetB);\n      \n      // If planet not found in order, put it at the end\n      const orderA = indexA === -1 ? 999 : indexA;\n      const orderB = indexB === -1 ? 999 : indexB;\n      \n      return orderA - orderB;\n    });\n  };\n  \n  // Separate gates by type with proper data validation\n  const personalityGates = sortGatesByPlanetaryOrder(\n    gates.filter(gate => \n      gate && typeof gate === 'object' && gate.type === 'personality'\n    )\n  );\n  const designGates = sortGatesByPlanetaryOrder(\n    gates.filter(gate => \n      gate && typeof gate === 'object' && gate.type === 'design'\n    )\n  );\n\n  // Click handlers for opening modals\n  const handleGateClick = (gate: any) => {\n    const gateData: GateModalData = {\n      type: 'gate',\n      number: gate.number,\n      line: gate.line,\n      name: gate.name,\n      center: gate.center,\n      planet: gate.planet,\n      planet_symbol: gate.planet_symbol,\n      gateType: gate.type,\n      position: gate.position\n    };\n    setModalData(gateData);\n    setIsModalOpen(true);\n  };\n\n  const handleChannelClick = (channel: string) => {\n    const channelInfo = CHANNELS[channel];\n    if (channelInfo) {\n      const channelData: ChannelModalData = {\n        type: 'channel',\n        id: channel,\n        name: channelInfo.name,\n        circuit: channelInfo.circuit,\n        theme: channelInfo.theme,\n        gates: channel.split('-').map(g => parseInt(g))\n      };\n      setModalData(channelData);\n      setIsModalOpen(true);\n    }\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalData(null);\n  };\n\n  return (\n    <div className=\"grid grid-cols-3 gap-4 max-w-6xl mx-auto\">\n        {/* Personality Column */}\n        <div className=\"cosmic-card\">\n          <div className=\"p-3\">\n            <h4 className=\"text-sm font-medium text-yellow-400 mb-2 text-center\">\n              Personality ({personalityGates.length})\n            </h4>\n          <div className=\"space-y-1\">\n            {personalityGates.map((gate, index) => (\n              <InlineTooltip \n                key={`personality-${index}`} \n                content={`Gate ${gate?.number}.${gate?.line} • ${gate?.name || 'Unknown Gate'}`}\n                position=\"right\"\n              >\n                <div \n                  className=\"px-2 py-1 rounded border-l-4 border-yellow-500 bg-yellow-50/10 flex items-center space-x-2 cursor-pointer hover:bg-yellow-50/20 transition-colors\"\n                  onClick={() => handleGateClick(gate)}\n                >\n                  <span className=\"text-xl\">{gate?.planet_symbol || '○'}</span>\n                  <span className=\"font-bold text-sm\">\n                    {gate?.number || '?'}.{gate?.line || '?'}\n                  </span>\n                  <span className=\"text-sm text-yellow-300\">{gate?.center || 'Unknown'}</span>\n                </div>\n              </InlineTooltip>\n            ))}\n            {personalityGates.length === 0 && (\n              <div className=\"text-center text-cosmic-silver py-2\">\n                <p className=\"text-sm\">No personality gates</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Design Column */}\n      <div className=\"cosmic-card\">\n        <div className=\"p-3\">\n          <h4 className=\"text-sm font-medium text-blue-400 mb-2 text-center\">\n            Design ({designGates.length})\n          </h4>\n          <div className=\"space-y-1\">\n            {designGates.map((gate, index) => (\n              <InlineTooltip \n                key={`design-${index}`} \n                content={`Gate ${gate?.number}.${gate?.line} • ${gate?.name || 'Unknown Gate'}`}\n                position=\"left\"\n              >\n                <div \n                  className=\"px-2 py-1 rounded border-l-4 border-blue-500 bg-blue-50/10 flex items-center space-x-2 cursor-pointer hover:bg-blue-50/20 transition-colors\"\n                  onClick={() => handleGateClick(gate)}\n                >\n                  <span className=\"text-xl\">{gate?.planet_symbol || '○'}</span>\n                  <span className=\"font-bold text-sm\">\n                    {gate?.number || '?'}.{gate?.line || '?'}\n                  </span>\n                  <span className=\"text-sm text-blue-300\">{gate?.center || 'Unknown'}</span>\n                </div>\n              </InlineTooltip>\n            ))}\n            {designGates.length === 0 && (\n              <div className=\"text-center text-cosmic-silver py-2\">\n                <p className=\"text-sm\">No design gates</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Channels Column */}\n      <div className=\"cosmic-card\">\n        <div className=\"p-3\">\n          <h4 className=\"text-sm font-medium text-purple-400 mb-2 text-center\">\n            Channels ({channels.length})\n          </h4>\n          <div className=\"space-y-1\">\n            {channels && channels.length > 0 ? (\n              channels.map((channel, index) => {\n                const channelId = typeof channel === 'string' \n                  ? channel \n                  : channel && typeof channel === 'object' && channel.gate1 && channel.gate2\n                    ? `${channel.gate1}-${channel.gate2}`\n                    : typeof channel === 'object' && channel.name \n                      ? channel.name\n                      : JSON.stringify(channel);\n                \n                const channelInfo = CHANNELS[channelId];\n                const tooltipContent = channelInfo \n                  ? `${channelId} • ${channelInfo.name}`\n                  : `Channel ${channelId}`;\n                \n                return (\n                  <InlineTooltip \n                    key={`channel-${index}`}\n                    content={tooltipContent}\n                    position=\"left\"\n                  >\n                    <div \n                      className=\"px-2 py-1 rounded bg-purple-50/10 border border-purple-500/20 cursor-pointer hover:bg-purple-50/20 transition-colors\"\n                      onClick={() => handleChannelClick(channelId)}\n                    >\n                      <span className=\"font-bold text-sm text-cosmic-gold\">\n                        {channelId}\n                      </span>\n                      {channelInfo && (\n                        <p className=\"text-xs text-purple-300 mt-1\">\n                          {channelInfo.theme}\n                        </p>\n                      )}\n                    </div>\n                  </InlineTooltip>\n                );\n              })\n            ) : (\n              <div className=\"text-center text-cosmic-silver py-2\">\n                <p className=\"text-sm\">No channels formed</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Modal for detailed information */}\n      <HumanDesignModal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        data={modalData}\n      />\n    </div>\n  );\n};\n\nexport default GatesChannelsTab;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/HumanDesignChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":1,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'memo' is defined but never used.","line":1,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'axios' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaExpand' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCompress' is defined but never used.","line":6,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChartData' is defined but never used.","line":7,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":32,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":36,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":36,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1678,1688],"text":"birthData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":46,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":46,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1945,1968],"text":"onHumanDesignCalculated != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":71,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":71,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2616,2625],"text":"birthData != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":72,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":72,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2635,2635],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2635,2635],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleCalculate'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [birthData, handleCalculate]","fix":{"range":[2665,2676],"text":"[birthData, handleCalculate]"}}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":87,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":87,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3032,3037],"text":"error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3032,3037],"text":"error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3032,3037],"text":"Boolean(error)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":101,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":101,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3449,3465],"text":"humanDesignData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":110,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":110,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3854,3865],"text":"(onCalculate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo, memo, Suspense } from 'react';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport { useToast } from '../ToastProvider';\nimport axios from 'axios';\nimport { FaExpand, FaCompress } from 'react-icons/fa';\nimport type { ChartData } from '../../types';\nimport { useAuth } from '@cosmichub/auth';\nimport { calculateHumanDesign } from '../../services/api';\nimport type { HumanDesignData, HumanDesignChartProps } from './types';\nimport type { ChartBirthData } from '@cosmichub/types';\nimport { getTypeColor, getTypeDescription } from './utils';\n\n// Lazy load tab components for better performance\nconst CentersTab = React.lazy(() => import('./CentersTab'));\nconst ProfileTab = React.lazy(() => import('./ProfileTab'));\nconst IncarnationCrossTab = React.lazy(() => import('./IncarnationCrossTab'));\nconst GatesChannelsTab = React.lazy(() => import('./GatesChannelsTab'));\nconst VariablesTab = React.lazy(() => import('./VariablesTab'));\n\n// Loading fallback component\nconst TabLoadingFallback: React.FC = () => (\n  <div className=\"flex items-center justify-center p-8\">\n    <div className=\"text-2xl text-purple-500 animate-spin\">⭐</div>\n  </div>\n);\n\nconst HumanDesignChart: React.FC<HumanDesignChartProps> = ({ birthData, onCalculate, onHumanDesignCalculated }) => {\n  const [humanDesignData, setHumanDesignData] = useState<HumanDesignData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handleCalculate = async () => {\n    if (!birthData) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await calculateHumanDesign(birthData);\n      setHumanDesignData(response.human_design);\n      \n      // Pass the Human Design data back to the parent component\n      if (onHumanDesignCalculated) {\n        onHumanDesignCalculated(response.human_design);\n      }\n      \n      toast({\n        title: \"Human Design Calculated\",\n        description: \"Your Human Design chart has been generated successfully!\",\n        status: \"success\",\n        duration: 3000,\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to calculate Human Design';\n      setError(errorMessage);\n      toast({\n        title: \"Calculation Error\",\n        description: errorMessage,\n        status: \"error\",\n        duration: 5000,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (birthData) {\n      handleCalculate();\n    }\n  }, [birthData]);\n\n  if (loading) {\n    return (\n      <div className=\"p-8 cosmic-card\">\n        <div className=\"space-y-4 text-center\">\n          <div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>\n          <p className=\"text-lg font-medium text-cosmic-silver\">Calculating your Human Design chart...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6 cosmic-card\">\n        <div className=\"flex p-4 space-x-4 border border-red-500 rounded-md bg-red-900/50\">\n          <span className=\"text-xl text-red-500\">⚠️</span>\n          <div>\n            <h3 className=\"font-bold text-white\">Calculation Error</h3>\n            <p className=\"text-white/80\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!humanDesignData) {\n    return (\n      <div className=\"p-8 cosmic-card\">\n        <div className=\"space-y-4 text-center\">\n          <div className=\"mb-4 text-4xl\">🔮</div>\n          <h3 className=\"text-xl font-bold text-cosmic-gold\">Human Design Chart</h3>\n          <p className=\"text-cosmic-silver\">\n            Enter your birth information to calculate your Human Design chart\n          </p>\n          {onCalculate && (\n            <button \n              className=\"mt-4 cosmic-button\" \n              onClick={() => onCalculate({\n                year: 2000,\n                month: 1,\n                day: 1,\n                hour: 0,\n                minute: 0\n              } as ChartBirthData)}\n            >\n              🧬 Calculate Human Design\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Header with Type and Strategy */}\n      <div className=\"cosmic-card\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex flex-col space-y-3\">\n              <h2 className=\"text-2xl font-bold text-cosmic-gold\">🧬 Your Human Design</h2>\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <span \n                      className={`${getTypeColor(humanDesignData.type)} text-white font-bold text-lg px-4 py-2 rounded-full cursor-help inline-block`}\n                    >\n                      {humanDesignData.type}\n                    </span>\n                  </Tooltip.Trigger>\n                  <Tooltip.Portal>\n                    <Tooltip.Content\n                      className=\"z-50 max-w-xs p-3 text-sm border rounded-lg shadow-lg cosmic-card text-cosmic-silver border-cosmic-gold/30\"\n                      sideOffset={5}\n                    >\n                      <div className=\"space-y-2\">\n                        <div className=\"font-bold text-cosmic-gold\">{humanDesignData.type}</div>\n                        <div>{getTypeDescription(humanDesignData.type)}</div>\n                      </div>\n                      <Tooltip.Arrow className=\"fill-cosmic-dark\" />\n                    </Tooltip.Content>\n                  </Tooltip.Portal>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            </div>\n            <div className=\"flex flex-col items-end space-y-2\">\n              <p className=\"text-sm text-cosmic-silver\">Strategy</p>\n              <p className=\"text-lg font-bold text-cosmic-gold\">{humanDesignData.strategy}</p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n            <div className=\"text-center md:text-left\">\n              <p className=\"mb-1 text-cosmic-silver\">Authority</p>\n              <p className=\"text-lg font-bold text-cosmic-silver\">{humanDesignData.authority}</p>\n            </div>\n            <div className=\"text-center md:text-left\">\n              <p className=\"mb-1 text-cosmic-silver\">Signature</p>\n              <p className=\"text-lg font-bold text-green-400\">{humanDesignData.signature}</p>\n            </div>\n            <div className=\"text-center md:text-left\">\n              <p className=\"mb-1 text-cosmic-silver\">Not-Self Theme</p>\n              <p className=\"text-lg font-bold text-red-400\">{humanDesignData.not_self_theme}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabbed Content */}\n      <Tabs.Root className=\"border rounded-md border-cosmic-silver/30\" defaultValue=\"centers\">\n        <Tabs.List className=\"flex border-b border-cosmic-silver/30\">\n          <Tabs.Trigger value=\"centers\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Centers\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"profile\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Profile\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"cross\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Incarnation Cross\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"gates\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Gates & Channels\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"variables\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n            Variables\n          </Tabs.Trigger>\n        </Tabs.List>\n\n        <Tabs.Content value=\"centers\" className=\"p-6\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <CentersTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"profile\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <ProfileTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"cross\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <IncarnationCrossTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"gates\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <GatesChannelsTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n\n        <Tabs.Content value=\"variables\" className=\"p-4\">\n          <Suspense fallback={<TabLoadingFallback />}>\n            <VariablesTab humanDesignData={humanDesignData} />\n          </Suspense>\n        </Tabs.Content>\n      </Tabs.Root>\n    </div>\n  );\n};\n\nexport default HumanDesignChart;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/HumanDesignModal.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":32,"column":19,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":32,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[700,705],"text":"(data == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":83,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&apos;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&lsquo;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&#39;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2503,2678],"text":"\n            This line filters the gate&rsquo;s archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":149,"column":5,"nodeType":"JSXOpeningElement","endLine":152,"endColumn":6}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { getGateLineKeynote, getChannelKeynote } from './gateKeynotes';\n\nexport interface GateModalData {\n  type: 'gate';\n  number: number;\n  line: number;\n  name: string;\n  center: string;\n  planet: string;\n  planet_symbol: string;\n  gateType: 'personality' | 'design';\n  position: number;\n}\n\nexport interface ChannelModalData {\n  type: 'channel';\n  id: string;\n  name: string;\n  circuit: string;\n  theme: string;\n  gates: number[];\n}\n\ninterface HumanDesignModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  data: GateModalData | ChannelModalData | null;\n}\n\nconst HumanDesignModal: React.FC<HumanDesignModalProps> = ({ isOpen, onClose, data }) => {\n  if (!isOpen || !data) return null;\n\n  const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const renderGateContent = (gateData: GateModalData) => (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-2xl font-bold text-cosmic-gold\">\n          Gate {gateData.number}.{gateData.line}\n        </h2>\n        <button\n          onClick={onClose}\n          className=\"text-cosmic-gold hover:text-cosmic-purple transition-colors text-2xl leading-none\"\n        >\n          ×\n        </button>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"text-xl font-semibold text-cosmic-gold mb-2\">{gateData.name}</h3>\n          <p className=\"text-cosmic-text\">I Ching Hexagram {gateData.number}</p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Center</h4>\n            <p className=\"text-cosmic-text\">{gateData.center}</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Activation</h4>\n            <p className=\"text-cosmic-text\">\n              {gateData.planet_symbol} {gateData.planet} ({gateData.gateType})\n            </p>\n          </div>\n        </div>\n        \n        <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Line {gateData.line} Keynote</h4>\n            <p className=\"text-cosmic-text italic\">\n              {getGateLineKeynote(gateData.number, gateData.line)}\n            </p>\n        </div>\n        \n        <div className=\"mt-2\">\n          <h4 className=\"font-semibold text-cosmic-gold\">Line Mechanics</h4>\n          <p className=\"text-cosmic-text text-sm\">\n            This line filters the gate's archetype through a specific role expression. Combine this keynote with your authority & strategy for correct application.\n          </p>\n        </div>\n        \n        <div className=\"mt-6 p-4 bg-cosmic-purple/10 border border-cosmic-purple/30 rounded-lg\">\n          <h4 className=\"font-semibold text-cosmic-gold mb-2\">Energy Theme</h4>\n          <p className=\"text-cosmic-text text-sm\">\n            This gate carries the archetypal energy of {gateData.name.toLowerCase()}, \n            activated through your {gateData.planet} in {gateData.gateType === 'personality' ? 'conscious' : 'unconscious'} expression.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderChannelContent = (channelData: ChannelModalData) => (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-2xl font-bold text-cosmic-gold\">\n          Channel {channelData.id}\n        </h2>\n        <button\n          onClick={onClose}\n          className=\"text-cosmic-gold hover:text-cosmic-purple transition-colors text-2xl leading-none\"\n        >\n          ×\n        </button>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"text-xl font-semibold text-cosmic-gold mb-2\">{channelData.name}</h3>\n          <p className=\"text-cosmic-text font-medium\">{channelData.theme}</p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Circuit</h4>\n            <p className=\"text-cosmic-text\">{channelData.circuit}</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-cosmic-gold\">Gates</h4>\n            <p className=\"text-cosmic-text\">Gates {channelData.gates.join(' - ')}</p>\n          </div>\n        </div>\n        \n        <div>\n          <h4 className=\"font-semibold text-cosmic-gold\">Channel Keynote</h4>\n          <p className=\"text-cosmic-text italic\">\n            {getChannelKeynote(channelData.id)}\n          </p>\n        </div>\n        \n        <div className=\"mt-6 p-4 bg-cosmic-purple/10 border border-cosmic-purple/30 rounded-lg\">\n          <h4 className=\"font-semibold text-cosmic-gold mb-2\">Defined Connection</h4>\n          <p className=\"text-cosmic-text text-sm\">\n            This channel creates a defined connection between centers, establishing consistent life force energy \n            and reliable patterns in your Human Design. The {channelData.circuit.toLowerCase()} circuit carries \n            the theme of {channelData.theme.toLowerCase()}.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n      onClick={handleOverlayClick}\n    >\n      <div className=\"bg-cosmic-dark border border-cosmic-purple/30 rounded-lg shadow-2xl shadow-cosmic-purple/20 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {data.type === 'gate' ? renderGateContent(data) : renderChannelContent(data)}\n      </div>\n    </div>\n  );\n};\n\nexport default HumanDesignModal;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/IncarnationCrossTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/InlineTooltip.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":19,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":42,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":42,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1565,1574],"text":"timeoutId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\n\ninterface InlineTooltipProps {\n  children: React.ReactNode;\n  content: string;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  delay?: number;\n  className?: string;\n}\n\nconst InlineTooltip: React.FC<InlineTooltipProps> = ({\n  children,\n  content,\n  position = 'top',\n  delay = 300,\n  className = ''\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  const positionClasses = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2'\n  };\n\n  const arrowClasses = {\n    top: 'top-full left-1/2 transform -translate-x-1/2 border-t-cosmic-dark border-t-4 border-x-transparent border-x-4 border-b-0',\n    bottom: 'bottom-full left-1/2 transform -translate-x-1/2 border-b-cosmic-dark border-b-4 border-x-transparent border-x-4 border-t-0',\n    left: 'left-full top-1/2 transform -translate-y-1/2 border-l-cosmic-dark border-l-4 border-y-transparent border-y-4 border-r-0',\n    right: 'right-full top-1/2 transform -translate-y-1/2 border-r-cosmic-dark border-r-4 border-y-transparent border-y-4 border-l-0'\n  };\n\n  const handleMouseEnter = () => {\n    const id = setTimeout(() => setIsVisible(true), delay);\n    setTimeoutId(id);\n  };\n\n  const handleMouseLeave = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      setTimeoutId(null);\n    }\n    setIsVisible(false);\n  };\n\n  return (\n    <div \n      className=\"relative\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleMouseEnter}\n      onBlur={handleMouseLeave}\n    >\n      {children}\n      {isVisible && (\n        <div\n          ref={tooltipRef}\n          className={`\n            absolute z-50 px-3 py-2 text-sm text-cosmic-gold bg-cosmic-dark/90 border border-cosmic-purple/30 rounded-lg shadow-lg shadow-cosmic-purple/20\n            whitespace-nowrap pointer-events-none backdrop-blur-sm\n            ${positionClasses[position]}\n            ${className}\n          `}\n          role=\"tooltip\"\n          aria-live=\"polite\"\n        >\n          {content}\n          <div className={`absolute ${arrowClasses[position]}`} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InlineTooltip;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/ProfileTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/VariablesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/gateKeynotes.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":560,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorString","endLine":560,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[16921,16948],"text":"((GATE_KEYNOTES[gate]?.[line]).length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[16921,16948],"text":"((GATE_KEYNOTES[gate]?.[line]) !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16921,16948],"text":"(Boolean((GATE_KEYNOTES[gate]?.[line])))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":564,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":564,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[17053,17080],"text":"(CHANNEL_KEYNOTES[channelId].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[17053,17080],"text":"(CHANNEL_KEYNOTES[channelId] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17053,17080],"text":"(Boolean(CHANNEL_KEYNOTES[channelId]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Lightweight, original (non-copyright) gate + line keynotes.\n// Extend or refine as needed. Keep phrases short & archetypal.\n// Structure: gate -> line -> keynote string.\n\nexport const GATE_KEYNOTES: Record<number, Record<number, string>> = {\n  1: {\n    1: 'Raw creative spark',\n    2: 'Quiet formative focus',\n    3: 'Inspiration incubation',\n    4: 'Externalized artist role',\n    5: 'Enduring creative pulse',\n    6: 'Exemplar of originality'\n  },\n  2: {\n    1: 'Innate receptive orientation',\n    2: 'Stillness aligning direction',\n    3: 'Adjustment under pressure',\n    4: 'Supportive directional influence',\n    5: 'Consistency in guidance',\n    6: 'Transpersonal orientation channel'\n  },\n  3: {\n    1: 'Initial ordering difficulty',\n    2: 'Measured ordering approach',\n    3: 'Testing new arrangements',\n    4: 'Accepting ordering chaos',\n    5: 'Reliable pattern synthesis',\n    6: 'Ordered transcendence'\n  },\n  4: {\n    1: 'Mental pressure foundation',\n    2: 'Selective formula sharing',\n    3: 'Testing logical constructs',\n    4: 'Formula refinement network',\n    5: 'Dependable logic teacher',\n    6: 'Wisdom of logical limits'\n  },\n  5: {\n    1: 'Natural timing awareness',\n    2: 'Patient rhythm calibration',\n    3: 'Testing temporal patterns',\n    4: 'Collective timing support',\n    5: 'Consistent flow guidance',\n    6: 'Rhythm field exemplar'\n  },\n  6: {\n    1: 'Emotional friction base',\n    2: 'Careful intimacy approach',\n    3: 'Testing connection bonds',\n    4: 'Network intimacy bridge',\n    5: 'Reliable emotional bond',\n    6: 'Soul mate archetype'\n  },\n  7: {\n    1: 'Authoritative intent',\n    2: 'Democratic listening',\n    3: 'Adaptive leadership testing',\n    4: 'Strategic network role',\n    5: 'Stabilizing influence',\n    6: 'Vision carrier'\n  },\n  8: {\n    1: 'Individual contribution spark',\n    2: 'Measured creative offering',\n    3: 'Testing unique expression',\n    4: 'Network inspiration link',\n    5: 'Consistent creative flow',\n    6: 'Inspirational exemplar'\n  },\n  9: {\n    1: 'Micro-focus beginning',\n    2: 'Selective sustained effort',\n    3: 'Refining focus through trial',\n    4: 'Focused collaboration',\n    5: 'Reliable concentration pattern',\n    6: 'Model of disciplined attention'\n  },\n  10: {\n    1: 'Self-love foundation',\n    2: 'Natural behavior expression',\n    3: 'Testing authentic action',\n    4: 'Network authenticity link',\n    5: 'Consistent self-expression',\n    6: 'Role model authenticity'\n  },\n  11: {\n    1: 'Idea pressure ignition',\n    2: 'Careful concept evaluation',\n    3: 'Testing idea validity',\n    4: 'Collective idea bridge',\n    5: 'Reliable idea teacher',\n    6: 'Transpersonal idea field'\n  },\n  12: {\n    1: 'Emotional standstill base',\n    2: 'Measured social expression',\n    3: 'Testing emotional sharing',\n    4: 'Network mood bridge',\n    5: 'Consistent emotional guide',\n    6: 'Transpersonal emotional field'\n  },\n  13: {\n    1: 'Deep listener core',\n    2: 'Resonant sharing caution',\n    3: 'Experiential storyteller learning',\n    4: 'Network memory conduit',\n    5: 'Trusted archive presence',\n    6: 'Narrative steward'\n  },\n  14: {\n    1: 'Material power base',\n    2: 'Measured resource sharing',\n    3: 'Testing wealth distribution',\n    4: 'Network resource link',\n    5: 'Reliable abundance guide',\n    6: 'Transpersonal wealth field'\n  },\n  15: {\n    1: 'Extreme moderation base',\n    2: 'Careful rhythm approach',\n    3: 'Testing flow patterns',\n    4: 'Network rhythm bridge',\n    5: 'Consistent flow guide',\n    6: 'Transpersonal rhythm field'\n  },\n  16: {\n    1: 'Skill preparation base',\n    2: 'Natural talent expression',\n    3: 'Testing skill application',\n    4: 'Network skill bridge',\n    5: 'Consistent mastery guide',\n    6: 'Transpersonal skill field'\n  },\n  17: {\n    1: 'Opinion foundation',\n    2: 'Measured viewpoint sharing',\n    3: 'Testing opinion validity',\n    4: 'Network opinion bridge',\n    5: 'Consistent perspective guide',\n    6: 'Transpersonal opinion field'\n  },\n  18: {\n    1: 'Correction pressure base',\n    2: 'Careful improvement approach',\n    3: 'Testing corrective action',\n    4: 'Network correction bridge',\n    5: 'Consistent improvement guide',\n    6: 'Transpersonal correction field'\n  },\n  19: {\n    1: 'Base sensitivity alert',\n    2: 'Measured approach to need',\n    3: 'Calibrating boundaries',\n    4: 'Tribal attunement link',\n    5: 'Dependable responder',\n    6: 'Transpersonal sensitivity field'\n  },\n  20: {\n    1: 'Present moment awareness',\n    2: 'Natural awareness flow',\n    3: 'Testing awareness expression',\n    4: 'Network awareness bridge',\n    5: 'Consistent awareness guide',\n    6: 'Transpersonal awareness field'\n  },\n  21: {\n    1: 'Control foundation',\n    2: 'Measured control expression',\n    3: 'Testing control application',\n    4: 'Network control bridge',\n    5: 'Consistent control guide',\n    6: 'Transpersonal control field'\n  },\n  22: {\n    1: 'Grace under pressure',\n    2: 'Natural grace expression',\n    3: 'Testing graceful response',\n    4: 'Network grace bridge',\n    5: 'Consistent grace guide',\n    6: 'Transpersonal grace field'\n  },\n  23: {\n    1: 'Insight pressure base',\n    2: 'Careful insight sharing',\n    3: 'Testing insight validity',\n    4: 'Network insight bridge',\n    5: 'Consistent insight guide',\n    6: 'Transpersonal insight field'\n  },\n  24: {\n    1: 'Return impulse base',\n    2: 'Natural return rhythm',\n    3: 'Testing return patterns',\n    4: 'Network return bridge',\n    5: 'Consistent return guide',\n    6: 'Transpersonal return field'\n  },\n  25: {\n    1: 'Innocence foundation',\n    2: 'Natural innocence expression',\n    3: 'Testing innocent response',\n    4: 'Network innocence bridge',\n    5: 'Consistent innocence guide',\n    6: 'Transpersonal innocence field'\n  },\n  26: {\n    1: 'Trickster energy base',\n    2: 'Measured trickster expression',\n    3: 'Testing trickster wisdom',\n    4: 'Network trickster bridge',\n    5: 'Consistent trickster guide',\n    6: 'Transpersonal trickster field'\n  },\n  27: {\n    1: 'Nourishment foundation',\n    2: 'Natural caring expression',\n    3: 'Testing caring boundaries',\n    4: 'Network caring bridge',\n    5: 'Consistent caring guide',\n    6: 'Transpersonal caring field'\n  },\n  28: {\n    1: 'Struggle foundation',\n    2: 'Measured struggle approach',\n    3: 'Testing struggle value',\n    4: 'Network struggle bridge',\n    5: 'Consistent struggle guide',\n    6: 'Transpersonal struggle field'\n  },\n  29: {\n    1: 'Commitment foundation',\n    2: 'Natural commitment expression',\n    3: 'Testing commitment depth',\n    4: 'Network commitment bridge',\n    5: 'Consistent commitment guide',\n    6: 'Transpersonal commitment field'\n  },\n  30: {\n    1: 'Desire foundation',\n    2: 'Natural desire expression',\n    3: 'Testing desire patterns',\n    4: 'Network desire bridge',\n    5: 'Consistent desire guide',\n    6: 'Transpersonal desire field'\n  },\n  31: {\n    1: 'Leadership foundation',\n    2: 'Natural leadership expression',\n    3: 'Testing leadership style',\n    4: 'Network leadership bridge',\n    5: 'Consistent leadership guide',\n    6: 'Transpersonal leadership field'\n  },\n  32: {\n    1: 'Endurance foundation',\n    2: 'Natural endurance expression',\n    3: 'Testing endurance limits',\n    4: 'Network endurance bridge',\n    5: 'Consistent endurance guide',\n    6: 'Transpersonal endurance field'\n  },\n  33: {\n    1: 'Retreat foundation',\n    2: 'Natural retreat timing',\n    3: 'Testing retreat wisdom',\n    4: 'Network retreat bridge',\n    5: 'Consistent retreat guide',\n    6: 'Transpersonal retreat field'\n  },\n  34: {\n    1: 'Power foundation',\n    2: 'Natural power expression',\n    3: 'Testing power application',\n    4: 'Network power bridge',\n    5: 'Consistent power guide',\n    6: 'Transpersonal power field'\n  },\n  35: {\n    1: 'Experience foundation',\n    2: 'Natural experience flow',\n    3: 'Testing experience value',\n    4: 'Network experience bridge',\n    5: 'Consistent experience guide',\n    6: 'Transpersonal experience field'\n  },\n  36: {\n    1: 'Crisis foundation',\n    2: 'Natural crisis response',\n    3: 'Testing crisis wisdom',\n    4: 'Network crisis bridge',\n    5: 'Consistent crisis guide',\n    6: 'Transpersonal crisis field'\n  },\n  37: {\n    1: 'Family foundation',\n    2: 'Natural family expression',\n    3: 'Testing family bonds',\n    4: 'Network family bridge',\n    5: 'Consistent family guide',\n    6: 'Transpersonal family field'\n  },\n  38: {\n    1: 'Core perseverance test',\n    2: 'Strategic struggle positioning',\n    3: 'Adaptive persistence crafting',\n    4: 'Cause alliance building',\n    5: 'Consistent stand archetype',\n    6: 'Transpersonal meaning fighter'\n  },\n  39: {\n    1: 'Provocation spark',\n    2: 'Measured emotional probe',\n    3: 'Testing provocation forms',\n    4: 'Community mood catalysis',\n    5: 'Reliable pressure release',\n    6: 'Mature catalytic presence'\n  },\n  40: {\n    1: 'Foundational will resource',\n    2: 'Measured commitment offer',\n    3: 'Refining promises',\n    4: 'Group provision role',\n    5: 'Consistent will delivery',\n    6: 'Exemplar of balanced work'\n  },\n  41: {\n    1: 'Fantasy foundation',\n    2: 'Natural fantasy expression',\n    3: 'Testing fantasy value',\n    4: 'Network fantasy bridge',\n    5: 'Consistent fantasy guide',\n    6: 'Transpersonal fantasy field'\n  },\n  42: {\n    1: 'Growth foundation',\n    2: 'Natural growth expression',\n    3: 'Testing growth patterns',\n    4: 'Network growth bridge',\n    5: 'Consistent growth guide',\n    6: 'Transpersonal growth field'\n  },\n  43: {\n    1: 'Seed insight formation',\n    2: 'Tentative conceptual shaping',\n    3: 'Insight resilience testing',\n    4: 'Selective sharing network',\n    5: 'Confident breakthrough delivery',\n    6: 'Transpersonal mutation voice'\n  },\n  44: {\n    1: 'Coming together foundation',\n    2: 'Natural meeting expression',\n    3: 'Testing connection value',\n    4: 'Network connection bridge',\n    5: 'Consistent connection guide',\n    6: 'Transpersonal connection field'\n  },\n  45: {\n    1: 'Gathering foundation',\n    2: 'Natural gathering expression',\n    3: 'Testing gathering wisdom',\n    4: 'Network gathering bridge',\n    5: 'Consistent gathering guide',\n    6: 'Transpersonal gathering field'\n  },\n  46: {\n    1: 'Embodied receptivity base',\n    2: 'Natural physical alignment',\n    3: 'Experimenting with form timing',\n    4: 'Supportive body wisdom',\n    5: 'Reliable embodiment field',\n    6: 'Role model of embodied flow'\n  },\n  47: {\n    1: 'Oppression foundation',\n    2: 'Natural oppression response',\n    3: 'Testing oppression wisdom',\n    4: 'Network oppression bridge',\n    5: 'Consistent oppression guide',\n    6: 'Transpersonal oppression field'\n  },\n  48: {\n    1: 'Well foundation',\n    2: 'Natural depth expression',\n    3: 'Testing depth value',\n    4: 'Network depth bridge',\n    5: 'Consistent depth guide',\n    6: 'Transpersonal depth field'\n  },\n  49: {\n    1: 'Revolution foundation',\n    2: 'Natural revolution timing',\n    3: 'Testing revolution wisdom',\n    4: 'Network revolution bridge',\n    5: 'Consistent revolution guide',\n    6: 'Transpersonal revolution field'\n  },\n  50: {\n    1: 'Cauldron foundation',\n    2: 'Natural transformation expression',\n    3: 'Testing transformation value',\n    4: 'Network transformation bridge',\n    5: 'Consistent transformation guide',\n    6: 'Transpersonal transformation field'\n  },\n  51: {\n    1: 'Shock foundation',\n    2: 'Natural shock response',\n    3: 'Testing shock wisdom',\n    4: 'Network shock bridge',\n    5: 'Consistent shock guide',\n    6: 'Transpersonal shock field'\n  },\n  52: {\n    1: 'Root stillness core',\n    2: 'Measured restraint practice',\n    3: 'Stabilizing trial process',\n    4: 'Focused support posture',\n    5: 'Dependable still point',\n    6: 'Collective anchoring presence'\n  },\n  53: {\n    1: 'Development foundation',\n    2: 'Natural development expression',\n    3: 'Testing development patterns',\n    4: 'Network development bridge',\n    5: 'Consistent development guide',\n    6: 'Transpersonal development field'\n  },\n  54: {\n    1: 'Initiating ambition impulse',\n    2: 'Measured aspiration alignment',\n    3: 'Refining drive through friction',\n    4: 'Network ambition bonding',\n    5: 'Consistent transformational push',\n    6: 'Transpersonal elevation catalyst'\n  },\n  55: {\n    1: 'Abundance foundation',\n    2: 'Natural abundance expression',\n    3: 'Testing abundance wisdom',\n    4: 'Network abundance bridge',\n    5: 'Consistent abundance guide',\n    6: 'Transpersonal abundance field'\n  },\n  56: {\n    1: 'Wanderer foundation',\n    2: 'Natural wanderer expression',\n    3: 'Testing wanderer wisdom',\n    4: 'Network wanderer bridge',\n    5: 'Consistent wanderer guide',\n    6: 'Transpersonal wanderer field'\n  },\n  57: {\n    1: 'Gentle foundation',\n    2: 'Natural gentle expression',\n    3: 'Testing gentle wisdom',\n    4: 'Network gentle bridge',\n    5: 'Consistent gentle guide',\n    6: 'Transpersonal gentle field'\n  },\n  58: {\n    1: 'Joy pressure ignition',\n    2: 'Measured vitality expression',\n    3: 'Calibration of enthusiasm',\n    4: 'Collective improvement drive',\n    5: 'Sustained vitality field',\n    6: 'Exemplar of corrective joy'\n  },\n  59: {\n    1: 'Dispersion foundation',\n    2: 'Natural dispersion expression',\n    3: 'Testing dispersion wisdom',\n    4: 'Network dispersion bridge',\n    5: 'Consistent dispersion guide',\n    6: 'Transpersonal dispersion field'\n  },\n  60: {\n    1: 'Limitation awareness seed',\n    2: 'Measured boundary respect',\n    3: 'Adaptive constraint testing',\n    4: 'Structured mutation support',\n    5: 'Reliable limit alchemy',\n    6: 'Mutation timing exemplar'\n  },\n  61: {\n    1: 'Inner truth ignition',\n    2: 'Reserved mystery holding',\n    3: 'Questioning pattern refinement',\n    4: 'Abstracted insight relay',\n    5: 'Consistent pressure for knowing',\n    6: 'Mystery field role model'\n  },\n  62: {\n    1: 'Detail foundation',\n    2: 'Natural detail expression',\n    3: 'Testing detail value',\n    4: 'Network detail bridge',\n    5: 'Consistent detail guide',\n    6: 'Transpersonal detail field'\n  },\n  63: {\n    1: 'Logical doubt baseline',\n    2: 'Measured hypothesis holding',\n    3: 'Iterative doubt testing',\n    4: 'Pattern verification networking',\n    5: 'Consistent questioning teacher',\n    6: 'Transpersonal logical auditor'\n  },\n  64: {\n    1: 'Unresolved pattern pressure',\n    2: 'Measured abstraction forming',\n    3: 'Testing confusion synthesis',\n    4: 'Story pattern framing',\n    5: 'Reliable abstraction guidance',\n    6: 'Transpersonal synthesis field'\n  }\n};\n\n// Channel-specific keynotes based on circuit and theme\nexport const CHANNEL_KEYNOTES: Record<string, string> = {\n  \"1-8\": \"Creative inspiration through individual contribution\",\n  \"2-14\": \"Directional guidance through resource mastery\",\n  \"3-60\": \"Ordering energy through limitation acceptance\",\n  \"4-63\": \"Mental clarity through logical doubt\",\n  \"5-15\": \"Natural rhythm through extreme moderation\",\n  \"6-59\": \"Intimate bonding through dispersive connection\",\n  \"7-31\": \"Future leadership through influential direction\",\n  \"9-52\": \"Focused determination through concentrated stillness\",\n  \"10-20\": \"Authentic awakening through present moment awareness\",\n  \"10-34\": \"Individual exploration through powerful conviction\",\n  \"10-57\": \"Perfect survival form through intuitive guidance\",\n  \"11-56\": \"Curious seeking through stimulating ideas\",\n  \"12-22\": \"Social grace through emotional expression\",\n  \"13-33\": \"Fellowship witness through retreating memory\",\n  \"16-48\": \"Wavelength talent through skill mastery\",\n  \"17-62\": \"Organized acceptance through detailed opinions\",\n  \"18-58\": \"Corrective judgment through vital improvement\",\n  \"19-49\": \"Tribal synthesis through sensitive approach\",\n  \"20-57\": \"Penetrating awareness through gentle intuition\",\n  \"21-45\": \"Material control through tribal gathering\",\n  \"23-43\": \"Individual structuring through breakthrough insight\",\n  \"24-61\": \"Awareness thinking through returning mystery\",\n  \"25-51\": \"Innocent initiation through shocking spirit\",\n  \"26-44\": \"Tribal surrender through trickster meetings\",\n  \"27-50\": \"Caring preservation through transformative values\",\n  \"28-38\": \"Individual struggle through purposeful opposition\",\n  \"29-46\": \"Collective discovery through committed embodiment\",\n  \"30-41\": \"Individual recognition through desire fantasy\",\n  \"32-54\": \"Tribal transformation through enduring ambition\",\n  \"34-57\": \"Individual power through intuitive strength\",\n  \"35-36\": \"Collective experience through crisis navigation\",\n  \"37-40\": \"Tribal community through family commitment\",\n  \"39-55\": \"Individual emotional expression through provocative abundance\",\n  \"42-53\": \"Collective maturation through growth development\",\n  \"47-64\": \"Mental abstraction through oppressive confusion\"\n};\n\nexport function getGateLineKeynote(gate: number, line: number): string {\n  return GATE_KEYNOTES[gate]?.[line] || 'Keynote not yet added.';\n}\n\nexport function getChannelKeynote(channelId: string): string {\n  return CHANNEL_KEYNOTES[channelId] || 'Channel keynote not available.';\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignChart/utils.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":13,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":13,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[621,662],"text":"(colors[centerName as keyof typeof colors].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[621,662],"text":"(colors[centerName as keyof typeof colors] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[621,662],"text":"(Boolean(colors[centerName as keyof typeof colors]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":24,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":24,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[950,985],"text":"(colors[type as keyof typeof colors].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[950,985],"text":"(colors[type as keyof typeof colors] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[950,985],"text":"(Boolean(colors[type as keyof typeof colors]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":39,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":39,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1987,2011],"text":"(descriptions[centerName].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1987,2011],"text":"(descriptions[centerName] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1987,2011],"text":"(Boolean(descriptions[centerName]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":50,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":50,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3046,3064],"text":"(descriptions[type].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3046,3064],"text":"(descriptions[type] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3046,3064],"text":"(Boolean(descriptions[type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const getCenterColor = (centerName: string, isActive: boolean): string => {\n  const colors = {\n    'Head': isActive ? 'bg-yellow-400' : 'bg-gray-200',\n    'Ajna': isActive ? 'bg-green-400' : 'bg-gray-200',\n    'Throat': isActive ? 'bg-brown-400' : 'bg-gray-200',\n    'G': isActive ? 'bg-yellow-400' : 'bg-gray-200',\n    'Heart': isActive ? 'bg-red-400' : 'bg-gray-200',\n    'Spleen': isActive ? 'bg-brown-400' : 'bg-gray-200',\n    'Solar Plexus': isActive ? 'bg-orange-400' : 'bg-gray-200',\n    'Sacral': isActive ? 'bg-red-400' : 'bg-gray-200',\n    'Root': isActive ? 'bg-brown-400' : 'bg-gray-200'\n  };\n  return colors[centerName as keyof typeof colors] || 'bg-gray-200';\n};\n\nexport const getTypeColor = (type: string): string => {\n  const colors = {\n    'Manifestor': 'bg-red-500',\n    'Generator': 'bg-orange-500',\n    'Manifesting Generator': 'bg-orange-600',\n    'Projector': 'bg-green-500',\n    'Reflector': 'bg-blue-500'\n  };\n  return colors[type as keyof typeof colors] || 'bg-gray-500';\n};\n\nexport const getCenterDescription = (centerName: string): string => {\n  const descriptions: { [key: string]: string } = {\n    'Head': 'Center of inspiration and mental pressure. Questions and doubts that drive contemplation.',\n    'Ajna': 'Center of conceptualization and mental awareness. How you process and express thoughts.',\n    'Throat': 'Center of communication and manifestation. How you express yourself to the world.',\n    'G-Center': 'Center of identity and direction. Your sense of self and life path.',\n    'Heart': 'Center of willpower and ego. Your drive, promises, and self-worth.',\n    'Spleen': 'Center of intuition and survival instincts. Your body wisdom and immune system.',\n    'Solar Plexus': 'Center of emotions and sensitivity. Your emotional intelligence and wave.',\n    'Sacral': 'Center of life force and sexuality. Your creative and reproductive energy.',\n    'Root': 'Center of pressure and adrenaline. Your drive to act and survive.'\n  };\n  return descriptions[centerName] || 'Energy center in the Human Design system.';\n};\n\nexport const getTypeDescription = (type: string): string => {\n  const descriptions: { [key: string]: string } = {\n    'Manifestor': 'Natural initiators who can create and act independently. Make up about 9% of the population. Your role is to initiate and inform others of your actions.',\n    'Generator': 'The life force of humanity with sustainable energy. Make up about 37% of the population. Your role is to respond to life and follow your gut feelings.',\n    'Manifesting Generator': 'Multi-passionate beings who can initiate and respond. Make up about 33% of the population. Your role is to respond quickly and skip steps efficiently.',\n    'Projector': 'Natural guides and leaders who see the big picture. Make up about 20% of the population. Your role is to wait for recognition and guide others.',\n    'Reflector': 'Mirrors of their environment with deep wisdom. Make up about 1% of the population. Your role is to wait a lunar cycle before making decisions.'\n  };\n  return descriptions[type] || 'One of the five Human Design types that determines your strategy for life.';\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/HumanDesignGeneKeys.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":46,"column":59,"nodeType":"CallExpression","messageId":"conditionErrorString","endLine":46,"endColumn":99,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1585,1626],"text":"formData[field as keyof FormData].trim().length === 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1585,1626],"text":"formData[field as keyof FormData].trim() === \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1585,1626],"text":"!Boolean(formData[field as keyof FormData].trim())"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":87,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":87,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2551,2556],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":98,"column":26,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":98,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2971,2980],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, lazy, Suspense } from 'react';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { FaUser, FaStar, FaKey, FaChartLine } from 'react-icons/fa';\nimport { useAuth } from '@cosmichub/auth';\nimport { useToast } from './ToastProvider';\nimport type { ChartBirthData } from '@cosmichub/types';\n\nconst HumanDesignChart = lazy(() => import('./HumanDesignChart/HumanDesignChart'));\nconst GeneKeysChart = lazy(() => import('./GeneKeysChart'));\nconst EducationalContent = lazy(() => import('./EducationalContent'));\n\n// Using shared ChartBirthData type (alias of UnifiedBirthData)\n\ninterface FormData {\n  year: string;\n  month: string;\n  day: string;\n  hour: string;\n  minute: string;\n  city: string;\n  timezone: string;\n}\n\nconst HumanDesignGeneKeys: React.FC = React.memo(() => {\n  const [birthData, setBirthData] = useState<ChartBirthData | null>(null);\n  const [showCalculation, setShowCalculation] = useState(false);\n  const [formData, setFormData] = useState<FormData>({\n    year: '',\n    month: '',\n    day: '',\n    hour: '',\n    minute: '',\n    city: '',\n    timezone: 'America/New_York'\n  });\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  }, []);\n\n  const handleCalculate = useCallback(() => {\n    const requiredFields = ['year', 'month', 'day', 'hour', 'minute', 'city'];\n    const missingFields = requiredFields.filter(field => !formData[field as keyof FormData].trim());\n    \n    if (missingFields.length > 0) {\n      toast({\n        title: 'Missing Information',\n        description: `Please fill in: ${missingFields.join(', ')}`,\n        status: 'warning',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n  const data: ChartBirthData = {\n      year: parseInt(formData.year),\n      month: parseInt(formData.month),\n      day: parseInt(formData.day),\n      hour: parseInt(formData.hour),\n      minute: parseInt(formData.minute),\n      city: formData.city,\n      timezone: formData.timezone\n    };\n\n    setBirthData(data);\n    setShowCalculation(true);\n  }, [formData, toast]);\n\n  const handleNewCalculation = useCallback(() => {\n    setBirthData(null);\n    setShowCalculation(false);\n    setFormData({\n      year: '',\n      month: '',\n      day: '',\n      hour: '',\n      minute: '',\n      city: '',\n      timezone: 'America/New_York'\n    });\n  }, []);\n\n  if (!user) {\n    return (\n      <div className=\"py-10 text-center\">\n        <div className=\"flex max-w-2xl p-4 mx-auto space-x-4 border border-yellow-500 rounded-md bg-yellow-900/50\">\n          <span className=\"text-xl text-yellow-500\">⚠️</span>\n          <p className=\"text-cosmic-silver\">Please log in to access Human Design and Gene Keys calculations.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (showCalculation && birthData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"py-6 bg-gradient-to-r from-purple-600 to-pink-600 text-cosmic-silver\">\n          <div className=\"mx-auto max-w-7xl\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex flex-col space-y-2\">\n                <h2 className=\"text-2xl font-bold\">Human Design & Gene Keys</h2>\n                <p>Your complete genetic blueprint and consciousness codes</p>\n              </div>\n              <button\n                className=\"px-4 py-2 transition-colors border rounded bg-white/20 border-white/50 text-cosmic-silver hover:bg-white/30\"\n                onClick={handleNewCalculation}\n                aria-label=\"Start New Calculation\"\n              >\n                New Calculation\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"py-4 mx-auto max-w-7xl\">\n          <div className=\"mb-6 cosmic-card\">\n            <div className=\"p-4\">\n              <div className=\"flex justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <FaUser className=\"text-gold-400\" />\n                  <p className=\"font-bold text-cosmic-silver\">\n                    {formData.city} • {formData.month}/{formData.day}/{formData.year} • {formData.hour}:{formData.minute.padStart(2, '0')} {formData.timezone}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Tabs.Root defaultValue=\"human-design\">\n            <Tabs.List className=\"flex border-b border-cosmic-silver/30\">\n              <Tabs.Trigger value=\"human-design\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n                <div className=\"flex items-center space-x-2\">\n                  <FaChartLine />\n                  <span>Human Design</span>\n                </div>\n              </Tabs.Trigger>\n              <Tabs.Trigger value=\"gene-keys\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n                <div className=\"flex items-center space-x-2\">\n                  <FaKey />\n                  <span>Gene Keys</span>\n                </div>\n              </Tabs.Trigger>\n              <Tabs.Trigger value=\"learn\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">\n                <div className=\"flex items-center space-x-2\">\n                  <FaStar />\n                  <span>Learn More</span>\n                </div>\n              </Tabs.Trigger>\n            </Tabs.List>\n\n            <Tabs.Content value=\"human-design\" className=\"pt-4\">\n              <Suspense fallback={<div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>}>\n                <HumanDesignChart birthData={birthData} />\n              </Suspense>\n            </Tabs.Content>\n            <Tabs.Content value=\"gene-keys\" className=\"pt-4\">\n              <Suspense fallback={<div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>}>\n                <GeneKeysChart birthData={birthData} />\n              </Suspense>\n            </Tabs.Content>\n            <Tabs.Content value=\"learn\" className=\"pt-4\">\n              <Suspense fallback={<div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>}>\n                <EducationalContent />\n              </Suspense>\n            </Tabs.Content>\n          </Tabs.Root>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-2xl py-10 mx-auto\">\n      <div className=\"cosmic-card\">\n        <div className=\"p-6\">\n          <h2 className=\"mb-6 text-2xl font-bold text-center text-cosmic-gold\">Enter Your Birth Information</h2>\n          <form aria-label=\"Human Design & Gene Keys Form\">\n            <div className=\"flex flex-col space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label htmlFor=\"month\" className=\"block mb-2 text-cosmic-gold\">Month <span aria-hidden=\"true\">*</span></label>\n                  <select\n                    id=\"month\"\n                    name=\"month\"\n                    value={formData.month}\n                    onChange={handleInputChange}\n                    className=\"cosmic-input\"\n                    aria-required=\"true\"\n                  >\n                    {Array.from({ length: 12 }, (_, i) => (\n                      <option key={i + 1} value={i + 1}>\n                        {new Date(0, i).toLocaleString('en', { month: 'long' })}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label htmlFor=\"day\" className=\"block mb-2 text-cosmic-gold\">Day <span aria-hidden=\"true\">*</span></label>\n                  <input\n                    id=\"day\"\n                    name=\"day\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"31\"\n                    value={formData.day}\n                    onChange={handleInputChange}\n                    placeholder=\"Day\"\n                    className=\"cosmic-input\"\n                    aria-required=\"true\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"year\" className=\"block mb-2 text-cosmic-gold\">Year <span aria-hidden=\"true\">*</span></label>\n                  <input\n                    id=\"year\"\n                    name=\"year\"\n                    type=\"number\"\n                    min=\"1900\"\n                    max=\"2030\"\n                    value={formData.year}\n                    onChange={handleInputChange}\n                    placeholder=\"Year\"\n                    className=\"cosmic-input\"\n                    aria-required=\"true\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"hour\" className=\"block mb-2 text-cosmic-gold\">Hour (24h) <span aria-hidden=\"true\">*</span></label>\n                  <input\n                    id=\"hour\"\n                    name=\"hour\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"23\"\n                    value={formData.hour}\n                    onChange={handleInputChange}\n                    placeholder=\"Hour\"\n                    className=\"cosmic-input\"\n                    aria-required=\"true\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"minute\" className=\"block mb-2 text-cosmic-gold\">Minute <span aria-hidden=\"true\">*</span></label>\n                  <input\n                    id=\"minute\"\n                    name=\"minute\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"59\"\n                    value={formData.minute}\n                    onChange={handleInputChange}\n                    placeholder=\"Minute\"\n                    className=\"cosmic-input\"\n                    aria-required=\"true\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"city\" className=\"block mb-2 text-cosmic-gold\">Birth City <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"city\"\n                  name=\"city\"\n                  value={formData.city}\n                  onChange={handleInputChange}\n                  placeholder=\"City, State/Country\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"timezone\" className=\"block mb-2 text-cosmic-gold\">Timezone <span aria-hidden=\"true\">*</span></label>\n                <select\n                  id=\"timezone\"\n                  name=\"timezone\"\n                  value={formData.timezone}\n                  onChange={handleInputChange}\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                  aria-label=\"Timezone\"\n                >\n                  <option value=\"America/New_York\">Eastern Time</option>\n                  <option value=\"America/Chicago\">Central Time</option>\n                  <option value=\"America/Denver\">Mountain Time</option>\n                  <option value=\"America/Los_Angeles\">Pacific Time</option>\n                  <option value=\"Europe/London\">GMT</option>\n                  <option value=\"Europe/Paris\">Central European Time</option>\n                  <option value=\"Asia/Tokyo\">Japan Standard Time</option>\n                  <option value=\"Australia/Sydney\">Australian Eastern Time</option>\n                </select>\n              </div>\n              <button\n                className=\"w-full cosmic-button\"\n                onClick={handleCalculate}\n                aria-label=\"Calculate Human Design & Gene Keys\"\n              >\n                Calculate Human Design & Gene Keys\n              </button>\n            </div>\n          </form>\n\n          <div className=\"flex p-4 mt-6 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n            <span className=\"text-xl text-blue-500\">ℹ️</span>\n            <div className=\"flex flex-col space-y-2\">\n              <p className=\"text-sm font-bold text-cosmic-silver\">Why both systems?</p>\n              <p className=\"text-sm text-cosmic-silver\">\n                Human Design provides your mechanical operating instructions, while Gene Keys offers \n                the contemplative path for consciousness evolution. Together, they create a complete \n                map for living your authentic purpose.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nHumanDesignGeneKeys.displayName = 'HumanDesignGeneKeys';\n\nexport default HumanDesignGeneKeys;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":48,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":48,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from './ToastProvider';\nimport { logIn } from '@cosmichub/auth';\n\nconst Login: React.FC = React.memo(() => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      await logIn(email, password);\n      toast({\n        title: 'Logged In',\n        description: 'Successfully logged into your account',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      navigate('/chart');\n    } catch (error) {\n      toast({\n        title: 'Login Failed',\n        description: error instanceof Error ? error.message : 'An unknown error occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [email, password, navigate, toast]);\n\n  return (\n    <div className=\"min-h-screen px-4 py-8 bg-gray-50\">\n      <div className=\"max-w-lg p-8 mx-auto border shadow-2xl bg-cosmic-dark/80 backdrop-blur-xl border-cosmic-silver/20 rounded-3xl\">\n        <div className=\"flex flex-col space-y-6\">\n          <div className=\"space-y-4 text-center\">\n            <h2 className=\"text-3xl font-bold text-cosmic-gold font-cinzel\">Sign In</h2>\n            <p className=\"text-lg text-cosmic-silver\">Log in to access your personalized astrology insights.</p>\n          </div>\n\n          <form onSubmit={handleSubmit} aria-label=\"Login Form\">\n            <div className=\"flex flex-col space-y-6\">\n              <div>\n                <label htmlFor=\"email\" className=\"block mb-2 text-cosmic-gold\">Email <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"your@email.com\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"password\" className=\"block mb-2 text-cosmic-gold\">Password <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"••••••••\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"w-full cosmic-button\"\n                disabled={isLoading}\n              >\n                Sign In\n              </button>\n            </div>\n          </form>\n\n          <hr className=\"my-8 border-cosmic-silver/30\" />\n\n          <div className=\"flex flex-col space-y-4 text-center\">\n            <p className=\"text-sm text-cosmic-silver\">🧪 For Testing & Development</p>\n            <button\n              className=\"w-full mx-auto cosmic-button sm:w-auto\"\n              onClick={() => navigate('/mock-login')}\n              aria-label=\"Quick Mock Login\"\n            >\n              Quick Mock Login Panel\n            </button>\n            <p className=\"max-w-sm mx-auto text-xs text-cosmic-silver/60\">\n              Access demo accounts for Free, Premium, and Elite tiers\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nLogin.displayName = 'Login';\n\nexport default Login;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MockLoginPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaUser' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaStar' is defined but never used.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCrown' is defined but never used.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":50,"fix":{"range":[2185,2188],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2185,2188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2185,2188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `any` value.","line":79,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createError' is defined but never used.","line":90,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":29},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":143,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":143,"endColumn":64}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from './ToastProvider';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '@cosmichub/config/firebase';\nimport { FaUser, FaStar, FaCrown, FaSignInAlt } from 'react-icons/fa';\n\ninterface MockUser {\n  email: string;\n  password: string;\n  tier: 'free' | 'premium' | 'elite';\n  displayName: string;\n  description: string;\n  features: string[];\n}\n\nconst mockUsers: MockUser[] = [\n  {\n    email: 'free@cosmichub.test',\n    password: 'demo123',\n    tier: 'free',\n    displayName: 'Free User',\n    description: 'Basic astrology features',\n    features: [\n      'Basic birth chart calculation',\n      'Western tropical astrology',\n      'Limited saved charts (3)',\n      'Basic interpretations'\n    ]\n  },\n  {\n    email: 'premium@cosmichub.test', \n    password: 'demo123',\n    tier: 'premium',\n    displayName: 'Premium User',\n    description: 'Enhanced astrology experience',\n    features: [\n      'Multi-system analysis',\n      'Synastry compatibility',\n      'PDF chart exports',\n      'Unlimited saved charts',\n      'Advanced interpretations'\n    ]\n  },\n  {\n    email: 'elite@cosmichub.test',\n    password: 'demo123', \n    tier: 'elite',\n    displayName: 'Elite User',\n    description: 'Complete cosmic toolkit',\n    features: [\n      'All Premium features',\n      'AI interpretations',\n      'Transit analysis & predictions',\n      'Priority support',\n      'Early access to new features'\n    ]\n  }\n];\n\nconst MockLoginPanel: React.FC = React.memo(() => {\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const handleMockLogin = useCallback(async (mockUser: MockUser) => {\n    try {\n      await signInWithEmailAndPassword(auth, mockUser.email, mockUser.password);\n      \n      toast({\n        title: `Logged in as ${mockUser.displayName}`,\n        description: `You now have ${mockUser.tier} tier access`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      \n      navigate('/chart');\n    } catch (error) {\n      if (error instanceof Error && (error as any).code === 'auth/user-not-found') {\n        try {\n          await createUserWithEmailAndPassword(auth, mockUser.email, mockUser.password);\n          toast({\n            title: 'Mock Account Created',\n            description: `Created and logged in as ${mockUser.displayName}`,\n            status: 'success',\n            duration: 3000,\n            isClosable: true,\n          });\n          navigate('/chart');\n        } catch (createError) {\n          toast({\n            title: 'Error',\n            description: 'Failed to create mock account',\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          });\n        }\n      } else {\n        toast({\n          title: 'Error',\n          description: 'Failed to log in with mock account',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        });\n      }\n    }\n  }, [navigate, toast]);\n\n  const getTierColor = (tier: MockUser['tier']) => {\n    switch (tier) {\n      case 'free': return 'gray-500';\n      case 'premium': return 'purple-500';\n      case 'elite': return 'orange-500';\n      default: return 'gray-500';\n    }\n  };\n\n  return (\n    <div className=\"max-w-3xl p-6 mx-auto\">\n      <div className=\"flex flex-col space-y-6\">\n        <div className=\"space-y-2 text-center\">\n          <h2 className=\"text-2xl font-bold text-cosmic-gold\">Mock Login Panel</h2>\n          <p className=\"text-cosmic-silver\">Use demo accounts for testing different tiers</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n          {mockUsers.map((mockUser) => (\n            <div key={mockUser.email} className=\"cosmic-card\">\n              <div className=\"p-4\">\n                <div className=\"flex items-start justify-between space-x-4\">\n                  <div className=\"flex flex-col flex-1 space-y-2\">\n                    <h3 className=\"font-bold text-md text-cosmic-gold\">{mockUser.displayName}</h3>\n                    <p className=\"text-sm text-cosmic-silver\">{mockUser.description}</p>\n                  </div>\n                  <div className=\"flex flex-col items-end space-y-2\">\n                    <span className={`bg-${getTierColor(mockUser.tier)}/20 text-${getTierColor(mockUser.tier)} px-2 py-1 rounded text-xs`}>\n                      {mockUser.tier}\n                    </span>\n                    <button\n                      className=\"cosmic-button\"\n                      onClick={() => handleMockLogin(mockUser)}\n                      aria-label={`Login as ${mockUser.displayName}`}\n                    >\n                      <FaSignInAlt className=\"mr-2\" />\n                      Login\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"mt-4\">\n                  <p className=\"mb-2 text-sm font-bold text-cosmic-silver\">Available Features:</p>\n                  <div className=\"flex flex-col space-y-1\">\n                    {mockUser.features.map((feature, index) => (\n                      <p key={index} className=\"text-xs text-cosmic-silver/80\">• {feature}</p>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"p-3 mt-4 rounded-md bg-gray-50/30\">\n                  <p className=\"text-xs text-cosmic-silver/60\">\n                    <strong>Email:</strong> {mockUser.email} <br />\n                    <strong>Password:</strong> {mockUser.password}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <hr className=\"my-6 border-cosmic-silver/30\" />\n\n        <p className=\"text-sm text-center text-cosmic-silver/60\">\n          These are mock accounts for testing purposes only. \n          In production, subscription tiers would be managed through Stripe integration.\n        </p>\n      </div>\n    </div>\n  );\n});\n\nMockLoginPanel.displayName = 'MockLoginPanel';\n\nexport default MockLoginPanel;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/ChineseChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":9,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":9,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ChineseChartData } from './types';\n\ninterface Props {\n  data: ChineseChartData;\n}\n\nconst ChineseChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Chinese astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-red-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-red-700 text-md\">Chinese Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div>\n              <p className=\"mb-2 font-bold\">Four Pillars</p>\n              <p className=\"mb-2 text-sm\"><strong>Year:</strong> {data.year?.element} {data.year?.animal}</p>\n              <p className=\"mb-2 text-sm\"><strong>Month:</strong> {data.month?.animal}</p>\n              <p className=\"mb-2 text-sm\"><strong>Day:</strong> {data.day?.animal}</p>\n              <p className=\"mb-2 text-sm\"><strong>Hour:</strong> {data.hour?.animal}</p>\n            </div>\n            <div>\n              <p className=\"mb-2 font-bold\">Bazi Chart</p>\n              <p className=\"mb-2 font-mono text-sm\">{data.four_pillars}</p>\n              <p className=\"mb-2 font-bold\">Elemental Balance</p>\n              <p className=\"text-sm\">{data.elements_analysis?.analysis}</p>\n            </div>\n          </div>\n\n          <p className=\"mb-2 font-bold\">Personality Traits</p>\n          <p className=\"mb-4 text-sm\">{data.year?.traits}</p>\n\n          <p className=\"mb-2 font-bold\">Overall Summary</p>\n          <p className=\"text-sm\">{data.personality_summary}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChineseChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/MayanChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":9,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":9,"endColumn":12},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":22,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[728,746],"text":"Tzolk&apos;in Signature"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[728,746],"text":"Tzolk&lsquo;in Signature"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[728,746],"text":"Tzolk&#39;in Signature"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[728,746],"text":"Tzolk&rsquo;in Signature"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { MayanChartData } from './types';\n\ninterface Props {\n  data: MayanChartData;\n}\n\nconst MayanChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Mayan astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-green-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-green-700 text-md\">Mayan Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div>\n              <p className=\"mb-2 font-bold\">Tzolk'in Signature</p>\n              <p className=\"mb-2 text-2xl\">{data.sacred_number?.number} {data.day_sign?.name}</p>\n              <p className=\"mb-2 text-sm\"><strong>Symbol:</strong> {data.day_sign?.symbol}</p>\n              <p className=\"mb-2 text-sm\"><strong>Color:</strong> {data.day_sign?.color}</p>\n              <p className=\"mb-2 text-sm\"><strong>Meaning:</strong> {data.day_sign?.meaning}</p>\n            </div>\n            <div>\n              <p className=\"mb-2 font-bold\">Wavespell</p>\n              <p className=\"mb-2 text-sm\"><strong>Tone:</strong> {data.wavespell?.tone?.name} ({data.wavespell?.position})</p>\n              <p className=\"mb-4 text-sm\">{data.wavespell?.description}</p>\n              <p className=\"mb-2 font-bold\">Long Count</p>\n              <p className=\"font-mono text-sm\">{data.long_count?.date}</p>\n            </div>\n          </div>\n\n          <p className=\"mb-2 font-bold\">Galactic Signature</p>\n          <p className=\"mb-4 text-sm\">{data.galactic_signature}</p>\n\n          <p className=\"mb-2 font-bold\">Life Purpose</p>\n          <p className=\"mb-4 text-sm\">{data.life_purpose}</p>\n\n          <p className=\"mb-2 font-bold\">Spiritual Guidance</p>\n          <p className=\"text-sm\">{data.spiritual_guidance}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MayanChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/MultiSystemChartDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showComparison' is assigned a value but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":36,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":36,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1013,1023],"text":"(chartData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":36,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":36,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1027,1037],"text":"(birthData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":48,"column":23,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":48,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1506,1515],"text":"(chartData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1516,1518],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":49,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":49,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1537,1546],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":69,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":69,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2326,2348],"text":"(displayData.birth_info != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { MultiSystemChartData } from './types';\nimport type { ChartBirthData } from '@cosmichub/types';\nimport WesternChart from './WesternChart';\nimport VedicChart from './VedicChart';\nimport ChineseChart from './ChineseChart';\nimport MayanChart from './MayanChart';\nimport UranianChart from './UranianChart';\nimport SynthesisChart from './SynthesisChart';\n\ninterface MultiSystemChartProps {\n  chartData?: MultiSystemChartData;\n  birthData?: ChartBirthData;\n  showComparison?: boolean;\n  isLoading?: boolean;\n}\n\nexport const MultiSystemChartDisplay: React.FC<MultiSystemChartProps> = ({ \n  chartData, \n  birthData, \n  showComparison = false,\n  isLoading = false \n}) => {\n  const bgColor = \"purple-50\";\n  const cardBg = \"white\";\n\n  if (isLoading) {\n    return (\n      <div className={`p-4 bg-${bgColor} rounded-lg`}>\n        <p className=\"text-center text-cosmic-silver\">Calculating multi-system chart...</p>\n      </div>\n    );\n  }\n\n  if (!chartData && !birthData) {\n    return (\n      <div className=\"p-4 border border-yellow-500 rounded-md bg-yellow-900/50\">\n                  <div className=\"text-center\">\n            <h3 className=\"font-bold text-cosmic-silver\">No Chart Data</h3>\n            <p className=\"text-cosmic-silver/70\">Please calculate a chart to see the multi-system analysis.</p>\n          </div>\n      </div>\n    );\n  }\n\n  // If we have birthData but no chartData, show a placeholder message\n  const displayData = chartData || {\n    birth_info: birthData ? {\n      date: `${birthData.year}-${String(birthData.month).padStart(2, '0')}-${String(birthData.day).padStart(2, '0')}`,\n      time: `${String(birthData.hour).padStart(2, '0')}:${String(birthData.minute).padStart(2, '0')}`,\n      location: {\n        latitude: birthData.lat,\n        longitude: birthData.lon,\n        timezone: birthData.timezone\n      }\n    } : undefined\n  };\n\n  return (\n    <div className={`bg-${bgColor} rounded-lg p-4`}>\n      <div className=\"flex flex-col space-y-6\">\n        {/* Birth Information Header */}\n        <div className={`cosmic-card bg-${cardBg}`}>\n          <div className=\"p-4\">\n            <h2 className=\"mb-4 text-lg font-bold text-center text-cosmic-gold\">\n              Multi-System Astrological Analysis\n            </h2>\n            {displayData.birth_info && (\n              <div className=\"flex flex-wrap justify-center gap-4\">\n                <p className=\"text-cosmic-silver\"><strong>Date:</strong> {displayData.birth_info.date}</p>\n                <p className=\"text-cosmic-silver\"><strong>Time:</strong> {displayData.birth_info.time}</p>\n                <p className=\"text-cosmic-silver\"><strong>Coordinates:</strong> {displayData.birth_info.location?.latitude?.toFixed(2)}°, {displayData.birth_info.location?.longitude?.toFixed(2)}°</p>\n                <p className=\"text-cosmic-silver\"><strong>Timezone:</strong> {displayData.birth_info.location?.timezone}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Multi-System Tabs */}\n        <Tabs.Root>\n          <Tabs.List className=\"flex flex-wrap\">\n            <Tabs.Trigger value=\"western\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Western Tropical</Tabs.Trigger>\n            <Tabs.Trigger value=\"vedic\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Vedic Sidereal</Tabs.Trigger>\n            <Tabs.Trigger value=\"chinese\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Chinese</Tabs.Trigger>\n            <Tabs.Trigger value=\"mayan\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Mayan</Tabs.Trigger>\n            <Tabs.Trigger value=\"uranian\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Uranian</Tabs.Trigger>\n            <Tabs.Trigger value=\"synthesis\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Synthesis</Tabs.Trigger>\n          </Tabs.List>\n\n          <Tabs.Content value=\"western\" className=\"pt-4\"><WesternChart data={displayData.western_tropical} /></Tabs.Content>\n          <Tabs.Content value=\"vedic\" className=\"pt-4\"><VedicChart data={displayData.vedic_sidereal ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"chinese\" className=\"pt-4\"><ChineseChart data={displayData.chinese ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"mayan\" className=\"pt-4\"><MayanChart data={displayData.mayan ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"uranian\" className=\"pt-4\"><UranianChart data={displayData.uranian ?? {}} /></Tabs.Content>\n          <Tabs.Content value=\"synthesis\" className=\"pt-4\"><SynthesisChart data={displayData.synthesis ?? {}} /></Tabs.Content>\n        </Tabs.Root>\n\n        {/* Footer with methodology */}\n        <div className={`cosmic-card bg-${cardBg} border border-cosmic-silver/30`}>\n          <div className=\"p-4\">\n            <p className=\"text-sm text-center text-cosmic-silver\">\n              This analysis combines Western tropical astrology, Vedic sidereal calculations, Chinese Four Pillars, \n              Mayan sacred calendar, and Uranian midpoint techniques to provide a comprehensive astrological perspective.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiSystemChartDisplay;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/SynthesisChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":30,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":30,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1232,1251],"text":"(data.primary_themes != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1252,1254],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":46,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":46,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1940,1957],"text":"(data.life_purpose != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1958,1960],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":63,"column":35,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":63,"endColumn":63,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2814,2842],"text":"(data.personality_integration != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":63,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":63,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2843,2845],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":69,"column":27,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":69,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":88,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":88,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3932,3951],"text":"(data.spiritual_path != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":88,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":88,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3952,3954],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { SynthesisChartData } from './types';\n\ninterface Props {\n  data: SynthesisChartData;\n}\n\nconst SynthesisChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No synthesis data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-gradient-to-br from-white/95 to-cyan-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-teal-700 text-md\">Integrated Analysis</h3>\n          <p className=\"mb-4 text-sm text-cosmic-silver/70\">\n            Synthesis of insights from all astrological traditions\n          </p>\n\n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"themes\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Primary Themes</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"flex flex-col space-y-2\">\n                  {(data.primary_themes || []).map((theme, idx) => (\n                    <span key={idx} className=\"p-2 border rounded-md border-cosmic-silver/30\">\n                      {theme}\n                    </span>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"purpose\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Life Purpose Integration</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"flex flex-col space-y-3\">\n                  {(data.life_purpose || []).map((purpose, idx) => (\n                    <div key={idx} className=\"flex p-4 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n                      <span className=\"text-xl text-blue-500\">ℹ️</span>\n                      <p className=\"text-cosmic-silver/70\">{purpose}</p>\n                    </div>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"personality\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Personality Integration</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                  {Object.entries(data.personality_integration || {}).map(([aspect, traits]: [string, string[]]) => (\n                    <div key={aspect}>\n                      <p className=\"mb-2 font-bold capitalize\">\n                        {aspect.replace('_', ' ')}:\n                      </p>\n                      <div className=\"flex flex-col space-y-1\">\n                        {(traits || []).map((trait, idx) => (\n                          <p key={idx} className=\"text-sm text-cosmic-silver/70\">\n                            {trait}\n                          </p>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"path\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Spiritual Path</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <div className=\"flex flex-col space-y-3\">\n                  {(data.spiritual_path || []).map((guidance, idx) => (\n                    <div key={idx} className=\"flex p-4 space-x-4 border border-green-500 rounded-md bg-green-900/50\">\n                      <span className=\"text-xl text-green-500\">✅</span>\n                      <p className=\"text-cosmic-silver/70\">{guidance}</p>\n                    </div>\n                  ))}\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SynthesisChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/UranianChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":38,"column":37,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":38,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1522,1542],"text":"(data.uranian_planets != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":38,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":38,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1543,1545],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":71,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":71,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3125,3142],"text":"(data.dial_aspects != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":71,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":71,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3143,3145],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { UranianChartData } from './types';\n\ninterface Props {\n  data: UranianChartData;\n}\n\nconst UranianChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Uranian astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-indigo-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-indigo-700 text-md\">Uranian Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n\n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"0\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Transneptunian Points</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <table className=\"w-full text-sm table-auto\">\n                  <thead>\n                    <tr>\n                      <th className=\"py-2 text-left\">Planet</th>\n                      <th className=\"py-2 text-left\">Position</th>\n                      <th className=\"py-2 text-left\">Meaning</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.entries(data.uranian_planets || {}).map(([planet, info]: [string, { symbol?: string; position?: number; meaning?: string }]) => (\n                      <tr key={planet}>\n                        <td className=\"py-2\">\n                          <div className=\"flex\">\n                            <span>{info.symbol}</span>\n                            <span className=\"ml-2 font-medium\">{planet.charAt(0).toUpperCase() + planet.slice(1)}</span>\n                          </div>\n                        </td>\n                        <td className=\"py-2 font-mono\">{info.position?.toFixed(2)}°</td>\n                        <td className=\"py-2 text-xs\">{info.meaning}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"1\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">90° Dial Aspects</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <table className=\"w-full text-sm table-auto\">\n                  <thead>\n                    <tr>\n                      <th className=\"py-2 text-left\">Bodies</th>\n                      <th className=\"py-2 text-left\">Aspect</th>\n                      <th className=\"py-2 text-left\">Orb</th>\n                      <th className=\"py-2 text-left\">Meaning</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {(data.dial_aspects || []).slice(0, 8).map((aspect, idx) => (\n                      <tr key={idx}>\n                        <td className=\"py-2 text-sm\">{aspect.body1} - {aspect.body2}</td>\n                        <td className=\"py-2\">{aspect.angle}°</td>\n                        <td className=\"py-2\">{aspect.orb?.toFixed(2)}°</td>\n                        <td className=\"py-2 text-xs\">{aspect.meaning}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UranianChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/VedicChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":52,"column":37,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":52,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2196,2208],"text":"(data.planets != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":52,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":52,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2209,2211],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { VedicChartData } from './types';\n\ninterface Props {\n  data: VedicChartData;\n}\n\nconst VedicChart: React.FC<Props> = ({ data }) => {\n  if (!data) return <p className=\"text-cosmic-silver\">No Vedic astrology data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div className=\"cosmic-card bg-orange-50/95\">\n        <div className=\"p-4 text-gray-800\">\n          <h3 className=\"mb-4 font-bold text-orange-700 text-md\">Vedic Sidereal Astrology</h3>\n          <p className=\"mb-4 text-sm font-medium text-gray-700\">\n            {data.description}\n          </p>\n          <p className=\"mb-4 text-sm text-gray-700\">\n            <strong>Ayanamsa:</strong> {data.ayanamsa?.toFixed(4)}°\n          </p>\n\n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"0\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Lunar Analysis</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <p className=\"mb-2 text-sm font-medium\">Moon Sign (Rashi): {data.analysis?.moon_sign}</p>\n                <p className=\"text-sm\">{data.analysis?.analysis}</p>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"1\">\n              <Accordion.Trigger className=\"flex justify-between w-full\">\n                <span className=\"font-bold\">Planets & Nakshatras</span>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"pb-4\">\n                <table className=\"w-full text-sm table-auto\">\n                  <thead>\n                    <tr>\n                      <th className=\"py-2 text-left\">Planet</th>\n                      <th className=\"py-2 text-left\">Sign</th>\n                      <th className=\"py-2 text-left\">Nakshatra</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.entries(data.planets || {}).map(([planet, info]: [string, { vedic_sign?: string; nakshatra?: { name?: string; pada?: string } }]) => (\n                      <tr key={planet}>\n                        <td className=\"py-2 font-medium capitalize\">{planet}</td>\n                        <td className=\"py-2\">{info.vedic_sign}</td>\n                        <td className=\"py-2\">{info.nakshatra?.name} (Pada {info.nakshatra?.pada})</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VedicChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/WesternChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":12,"column":8,"nodeType":"ChainExpression","messageId":"conditionErrorNullableObject","endLine":12,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[364,378],"text":"(data?.planets) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":49,"column":58,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":49,"endColumn":109,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2483,2534],"text":"(planetSymbols[planet as keyof typeof planetSymbols].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2483,2534],"text":"(planetSymbols[planet as keyof typeof planetSymbols] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2483,2534],"text":"(Boolean(planetSymbols[planet as keyof typeof planetSymbols]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":55,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":55,"endColumn":45,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3016,3031],"text":"(info.retrograde ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3016,3031],"text":"(info.retrograde === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":73,"column":103,"nodeType":"ChainExpression","messageId":"conditionErrorNumber","endLine":73,"endColumn":123,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[4008,4028],"text":"((data.aspects?.length) !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[4008,4028],"text":"(!Number.isNaN((data.aspects?.length)))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4008,4028],"text":"(Boolean((data.aspects?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":88,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":88,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":92,"column":58,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":92,"endColumn":116,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[4986,5044],"text":"(aspectSymbols[aspect.aspect as keyof typeof aspectSymbols].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[4986,5044],"text":"(aspectSymbols[aspect.aspect as keyof typeof aspectSymbols] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4986,5044],"text":"(Boolean(aspectSymbols[aspect.aspect as keyof typeof aspectSymbols]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React from 'react';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { WesternChartData } from './types';\nimport { planetSymbols, aspectSymbols, getZodiacSign } from './utils';\n\ninterface Props {\n  data?: WesternChartData;\n}\n\nconst WesternChart: React.FC<Props> = ({ data }) => {\n  if (!data?.planets) return <p className=\"text-cosmic-silver\">No Western chart data available</p>;\n\n  return (\n    <div className=\"flex flex-col space-y-6\">\n      <div className=\"cosmic-card\">\n        <div className=\"p-6\">\n          <h3 className=\"mb-4 font-bold text-purple-300 text-md\">\n            Western Tropical Chart\n          </h3>\n          <p className=\"mb-6 text-sm text-cosmic-silver/90\">\n            Based on tropical zodiac, solar-focused approach emphasizing personality and life expression\n          </p>\n          \n          <Accordion.Root type=\"single\" collapsible>\n            <Accordion.Item value=\"planets\" className=\"rounded-lg cosmic-card border-purple-300/30\">\n              <Accordion.Trigger className=\"flex justify-between w-full p-4 transition-colors duration-300 bg-purple-500/20 hover:bg-purple-500/30 lg:p-6\">\n                <div className=\"flex space-x-2\">\n                  <span className=\"mb-0 font-bold\">Planets & Positions</span>\n                  <span className=\"px-2 py-1 text-sm text-cosmic-silver rounded bg-cosmic-purple\">{Object.keys(data.planets).length}</span>\n                </div>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead>\n                      <tr>\n                        <th className=\"px-4 py-2 text-left min-w-32\">Planet</th>\n                        <th className=\"px-4 py-2 text-left min-w-48\">Position</th>\n                        <th className=\"px-4 py-2 text-left min-w-24\">Retrograde</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {Object.entries(data.planets).map(([planet, info]: [string, { position: number; retrograde?: boolean }]) => (\n                        <tr key={planet}>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <div className=\"flex space-x-2\">\n                              <span className=\"text-lg\">{planetSymbols[planet as keyof typeof planetSymbols] || '●'}</span>\n                              <span className=\"font-semibold text-cosmic-silver capitalize\">{planet.replace('_', ' ')}</span>\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-2 font-mono border-b border-cosmic-gold/20 text-cosmic-silver\">{getZodiacSign(info.position)}</td>\n                          <td className=\"px-4 py-2 text-center border-b border-cosmic-gold/20\">\n                            {info.retrograde ? (\n                              <span className=\"px-2 py-1 text-sm text-yellow-500 rounded bg-yellow-500/20\">℞</span>\n                            ) : (\n                              <span className=\"text-cosmic-silver/60\">—</span>\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item value=\"aspects\" className=\"mt-4 rounded-lg cosmic-card border-purple-300/30\">\n              <Accordion.Trigger className=\"flex justify-between w-full p-4 transition-colors duration-300 bg-purple-500/20 hover:bg-purple-500/30 lg:p-6\">\n                <div className=\"flex space-x-2\">\n                  <span className=\"mb-0 font-bold\">Aspects</span>\n                  <span className=\"px-2 py-1 text-sm rounded bg-cosmic-purple/20 text-cosmic-purple\">{data.aspects?.length || 0}</span>\n                </div>\n                <ChevronDownIcon />\n              </Accordion.Trigger>\n              <Accordion.Content className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead>\n                      <tr>\n                        <th className=\"px-4 py-2 text-left min-w-32\">Aspect Type</th>\n                        <th className=\"px-4 py-2 text-left min-w-40\">Planets</th>\n                        <th className=\"px-4 py-2 text-left min-w-24\">Orb</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {(data.aspects || []).map((aspect, idx) => (\n                        <tr key={idx}>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <div className=\"flex space-x-2\">\n                              <span className=\"text-lg\">{aspectSymbols[aspect.aspect as keyof typeof aspectSymbols] || '—'}</span>\n                              <span className=\"font-semibold text-cosmic-silver\">{aspect.aspect}</span>\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <span className=\"text-cosmic-silver\">{aspect.point1} - {aspect.point2}</span>\n                            <p className=\"text-sm text-cosmic-silver/70\">\n                              {aspect.point1_sign} (H{aspect.point1_house}) - {aspect.point2_sign} (H{aspect.point2_house})\n                            </p>\n                          </td>\n                          <td className=\"px-4 py-2 border-b border-cosmic-gold/20\">\n                            <span className={`${aspect.exact ? 'bg-green-500 text-cosmic-dark' : 'bg-cosmic-purple/20 text-cosmic-purple'} px-2 py-1 rounded text-sm`}>\n                              {aspect.orb.toFixed(2)}°\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WesternChart;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/MultiSystemChart/utils.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":25,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":25,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1041,1063],"text":"(zodiacSigns[signIndex].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1041,1063],"text":"(zodiacSigns[signIndex] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1041,1063],"text":"(Boolean(zodiacSigns[signIndex]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const planetSymbols = {\n  sun: \"☉\", moon: \"☽\", mercury: \"☿\", venus: \"♀\", mars: \"♂\",\n  jupiter: \"♃\", saturn: \"♄\", uranus: \"♅\", neptune: \"♆\", pluto: \"♇\",\n  chiron: \"⚷\", ceres: \"⚳\", pallas: \"⚴\", juno: \"⚵\", vesta: \"⚶\",\n  lilith: \"⚸\", vertex: \"Vx\", antivertex: \"AVx\", part_of_fortune: \"⊗\",\n  rahu: \"☊\", ketu: \"☋\",\n  cupido: \"♇⚷\", hades: \"♇⚸\", zeus: \"♇⚹\", kronos: \"♇⚺\", \n  apollon: \"♇⚻\", admetos: \"♇⚼\", vulkanus: \"♇⚽\", poseidon: \"♇⚾\"\n};\n\nexport const aspectSymbols = {\n  \"Conjunction\": \"☌\", \"Opposition\": \"☍\", \"Trine\": \"△\", \"Square\": \"□\",\n  \"Sextile\": \"⚹\", \"Quincunx\": \"⚻\", \"Semisextile\": \"⚺\", \"Semisquare\": \"∠\"\n};\n\nexport const getZodiacSign = (position: number): string => {\n  const zodiacSigns = [\n    \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\",\n    \"Libra\", \"Scorpio\", \"Sagittarius\", \"Capricorn\", \"Aquarius\", \"Pisces\"\n  ];\n  if (typeof position !== 'number' || isNaN(position)) return 'N/A';\n  const sign = Math.floor(position / 30);\n  const deg = position % 30;\n  const signIndex = sign % 12;\n  return `${deg.toFixed(2)}° ${zodiacSigns[signIndex] || 'Unknown'}`;\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Navbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaHeart' is defined but never used.","line":4,"column":145,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":152},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCog' is defined but never used.","line":4,"column":163,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":168},{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/auth' import is duplicated.","line":7,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":7,"endColumn":51},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":33,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":33,"endColumn":23,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1096,1137],"text":"type NavLinkProps = NavItem"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":35,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":35,"endColumn":27,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1139,1192],"text":"type DropdownNavProps = DropdownNavItem"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":70,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":70,"endColumn":14},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":139,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":139,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":210,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":210,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7705,7709],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":241,"column":38,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":241,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8757,8761],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":270,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":270,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9614,9618],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":311,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":311,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11412,11416],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":311,"column":16,"nodeType":null,"messageId":"preferOptionalChain","endLine":311,"endColumn":34,"suggestions":[{"fix":{"range":[11412,11430],"text":"user?.email"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":311,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":311,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11420,11430],"text":"(user.email != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11420,11430],"text":"(user.email ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11420,11430],"text":"(Boolean(user.email))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":312,"column":90,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":312,"endColumn":105},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":357,"column":17,"nodeType":"JSXOpeningElement","endLine":357,"endColumn":79},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":368,"column":19,"nodeType":"JSXOpeningElement","endLine":368,"endColumn":81},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":380,"column":19,"nodeType":"JSXOpeningElement","endLine":380,"endColumn":81},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":387,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":387,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14892,14896],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":394,"column":21,"nodeType":"JSXOpeningElement","endLine":394,"endColumn":83},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":403,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":403,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15662,15666],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":403,"column":18,"nodeType":null,"messageId":"preferOptionalChain","endLine":403,"endColumn":36,"suggestions":[{"fix":{"range":[15662,15680],"text":"user?.email"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":403,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":403,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15670,15680],"text":"(user.email != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[15670,15680],"text":"(user.email ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15670,15680],"text":"(Boolean(user.email))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":405,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":405,"endColumn":44},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":414,"column":21,"nodeType":"JSXOpeningElement","endLine":414,"endColumn":69}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport { devConsole } from '../config/environment';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { FaHome, FaCalculator, FaUsers, FaStar, FaCrown, FaUser, FaChartLine, FaBook, FaBrain, FaSignOutAlt, FaGlobe, FaCompass, FaChevronDown, FaHeart, FaTools, FaCog, FaKey } from 'react-icons/fa';\nimport { Link as RouterLink, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '@cosmichub/auth';\nimport { useSubscription } from '@cosmichub/auth';\nimport { EducationalTooltip } from './EducationalTooltip';\n\n// Lazy load components for performance\nconst UserMenu = lazy(() => import('./UserMenu'));\n\n// Type definitions for navigation items\ninterface NavItem {\n  to: string;\n  icon: React.ElementType;\n  label: string;\n  tooltip: {\n    title: string;\n    description: string;\n    examples?: string[];\n    tier?: 'free' | 'premium' | 'elite';\n  };\n  tier?: 'free' | 'premium' | 'elite';\n}\n\ninterface DropdownNavItem {\n  label: string;\n  icon: React.ElementType;\n  items: NavItem[];\n}\n\ninterface NavLinkProps extends NavItem {}\n\ninterface DropdownNavProps extends DropdownNavItem {}\n\nconst NavLink: React.FC<NavLinkProps> = React.memo(({ to, icon: Icon, label, tooltip, tier }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const isActive = location.pathname === to;\n\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault();\n      try {\n        navigate(to);\n      } catch (error) {\n  devConsole.error('Navigation error:', error);\n        window.location.href = to;\n      }\n    },\n    [navigate, to]\n  );\n\n  return (\n    <EducationalTooltip {...tooltip}>\n      <button\n        type=\"button\"\n        onClick={handleClick}\n        className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors duration-200 min-h-[44px] ${\n          isActive\n            ? 'bg-gradient-to-r from-cosmic-purple/30 to-cosmic-blue/30 text-cosmic-gold border-cosmic-purple/50 shadow-md'\n            : 'text-cosmic-silver hover:bg-cosmic-purple/10 hover:text-cosmic-gold'\n        }`}\n        aria-label={`Navigate to ${label}`}\n        aria-current={isActive ? 'page' : undefined}\n      >\n        <Icon className=\"w-5 h-5\" />\n        <span>{label}</span>\n        {tier && tier !== 'free' && (\n          <span className={`ml-2 px-2 py-1 rounded-full text-xs font-semibold ${\n            tier === 'elite' ? 'bg-gold-500/20 text-gold-500 border-gold-500/30' : 'bg-purple-500/20 text-purple-500 border-purple-500/30'\n          }`}>\n            {tier === 'elite' ? '👑' : '🌟'}\n          </span>\n        )}\n      </button>\n    </EducationalTooltip>\n  );\n});\n\nNavLink.displayName = 'NavLink';\n\n// Dropdown Navigation Component\nconst DropdownNav: React.FC<DropdownNavProps> = React.memo(({ label, icon: Icon, items }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  // Check if any dropdown item is active\n  const isDropdownActive = items.some(item => location.pathname === item.to);\n\n  const handleItemClick = useCallback((to: string) => {\n    try {\n      navigate(to);\n    } catch (error) {\n  devConsole.error('Navigation error:', error);\n      window.location.href = to;\n    }\n  }, [navigate]);\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <button\n          className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 min-h-[44px] group ${\n            isDropdownActive\n              ? 'bg-gradient-to-r from-cosmic-purple/30 to-cosmic-blue/30 text-cosmic-gold border-cosmic-purple/50 shadow-md'\n              : 'text-cosmic-silver hover:bg-cosmic-purple/10 hover:text-cosmic-gold'\n          }`}\n          aria-label={`${label} menu`}\n        >\n          <Icon className=\"w-5 h-5\" />\n          <span className=\"hidden sm:inline\">{label}</span>\n          <FaChevronDown className=\"w-3 h-3 transition-transform duration-200 group-data-[state=open]:rotate-180\" />\n        </button>\n      </DropdownMenu.Trigger>\n      \n      <DropdownMenu.Portal>\n        <DropdownMenu.Content\n          className=\"z-50 min-w-[220px] bg-cosmic-dark/95 backdrop-blur-lg border border-cosmic-silver/20 rounded-lg shadow-xl p-2 mt-2\"\n          sideOffset={5}\n          align=\"start\"\n        >\n          {items.map((item) => (\n            <DropdownMenu.Item key={item.to} asChild>\n              <EducationalTooltip {...item.tooltip}>\n                <button\n                  onClick={() => handleItemClick(item.to)}\n                  className={`w-full flex items-center gap-3 px-3 py-2 rounded-md font-medium transition-colors duration-200 text-left ${\n                    location.pathname === item.to\n                      ? 'bg-cosmic-purple/30 text-cosmic-gold'\n                      : 'text-cosmic-silver hover:bg-cosmic-purple/20 hover:text-cosmic-gold'\n                  }`}\n                  aria-label={`Navigate to ${item.label}`}\n                >\n                  <item.icon className=\"w-4 h-4 flex-shrink-0\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <span className=\"block truncate\">{item.label}</span>\n                    {item.tier && item.tier !== 'free' && (\n                      <span className={`inline-block mt-1 px-2 py-0.5 rounded-full text-xs font-semibold ${\n                        item.tier === 'elite' \n                          ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' \n                          : 'bg-purple-500/20 text-purple-400 border border-purple-500/30'\n                      }`}>\n                        {item.tier === 'elite' ? '👑 Elite' : '🌟 Premium'}\n                      </span>\n                    )}\n                  </div>\n                </button>\n              </EducationalTooltip>\n            </DropdownMenu.Item>\n          ))}\n        </DropdownMenu.Content>\n      </DropdownMenu.Portal>\n    </DropdownMenu.Root>\n  );\n});\n\nDropdownNav.displayName = 'DropdownNav';\n\nconst Navbar: React.FC = React.memo(() => {\n  const { user, signOut } = useAuth();\n  const { tier: userTier } = useSubscription();\n  const navigate = useNavigate();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleSignOut = useCallback(async () => {\n    try {\n      await signOut();\n      navigate('/');\n    } catch (error) {\n      devConsole.error('Sign out error:', error);\n    }\n  }, [signOut, navigate]);\n\n  const toggleMobileMenu = useCallback(() => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  }, [isMobileMenuOpen]);\n\n  // Consolidated navigation items - now organized into dropdowns\n  const coreNavItems: NavItem[] = [\n    { \n      to: '/', \n      icon: FaHome, \n      label: 'Home',\n      tooltip: { title: 'Home', description: 'Your personal cosmic dashboard with personalized insights.' }\n    },\n    { \n      to: '/chart', \n      icon: FaCompass, \n      label: 'Interactive Chart',\n      tooltip: { title: 'Interactive Chart', description: 'Explore your birth chart with beautiful D3.js visualizations and interactive elements.' }\n    }\n  ];\n\n  // Grouped navigation for dropdowns\n  const chartingTools: NavItem[] = [\n    { \n      to: '/calculator', \n      icon: FaCalculator, \n      label: 'Chart Calculator',\n      tooltip: { title: 'Chart Calculator', description: 'Calculate natal charts, transits, and progressions with precise astronomical data.' }\n    },\n    { \n      to: '/multi-system', \n      icon: FaGlobe, \n      label: 'Multi-System Analysis',\n      tooltip: { title: 'Multi-System Charts', description: 'Compare Western, Vedic, Chinese, and other astrological systems side by side.' }\n    },\n    ...(user ? [\n      { \n        to: '/saved-charts', \n        icon: FaChartLine, \n        label: 'Saved Charts',\n        tooltip: { title: 'Saved Charts', description: 'Access and manage your collection of saved astrological charts.' }\n      }\n    ] : [])\n  ];\n\n  const personalInsights: NavItem[] = [\n    { \n      to: '/numerology', \n      icon: FaChartLine, \n      label: 'Numerology',\n      tooltip: { title: 'Numerology Calculator', description: 'Discover your life path number, destiny number, and numerological patterns.' }\n    },\n    { \n      to: '/human-design', \n      icon: FaBook, \n      label: 'Human Design',\n      tooltip: { title: 'Human Design System', description: 'Explore your Human Design chart and discover your type, strategy, and authority.' }\n    },\n    { \n      to: '/gene-keys', \n      icon: FaKey, \n      label: 'Gene Keys',\n      tooltip: { title: 'Gene Keys Profile', description: 'Journey through the contemplative path of consciousness evolution with your genetic blueprint.' }\n    }\n  ];\n\n  const premiumFeatures: NavItem[] = user ? [\n    { \n      to: '/synastry', \n      icon: FaUsers, \n      label: 'Synastry Analysis',\n      tier: 'premium' as const,\n      tooltip: { title: 'Synastry & Compatibility', description: 'Analyze relationship compatibility through comprehensive chart comparison.', tier: 'premium' as const }\n    },\n    { \n      to: '/ai-interpretation', \n      icon: FaBrain, \n      label: 'AI Insights',\n      tier: 'elite' as const,\n      tooltip: { title: 'AI-Powered Analysis', description: 'Get personalized interpretations powered by advanced AI technology.', tier: 'elite' as const }\n    }\n  ] : [];\n\n  // Dropdown menu configuration\n  const dropdownMenus: DropdownNavItem[] = [\n    {\n      label: 'Charts',\n      icon: FaTools,\n      items: chartingTools\n    },\n    {\n      label: 'Insights',\n      icon: FaBrain,\n      items: personalInsights\n    },\n    ...(user && premiumFeatures.length > 0 ? [{\n      label: 'Premium',\n      icon: FaCrown,\n      items: premiumFeatures\n    }] : [])\n  ];\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-cosmic-dark/95 backdrop-blur-lg border-b border-cosmic-silver/10 shadow-lg\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <RouterLink \n            to=\"/\" \n            className=\"flex items-center gap-3 text-2xl font-bold text-cosmic-gold font-cinzel hover:scale-105 transition-all duration-300 group\"\n          >\n            <div className=\"relative\">\n              <FaStar className=\"text-cosmic-gold group-hover:rotate-12 transition-transform duration-300\" />\n              <div className=\"absolute inset-0 bg-cosmic-gold/20 rounded-full blur-lg scale-150 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n            </div>\n            <span className=\"bg-gradient-to-r from-cosmic-gold to-cosmic-purple bg-clip-text text-transparent\">\n              Cosmic Hub\n            </span>\n          </RouterLink>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden lg:flex items-center gap-1\">\n            {/* Core navigation items */}\n            {coreNavItems.map((item) => (\n              <NavLink key={item.to} {...item} />\n            ))}\n            \n            {/* Dropdown menus */}\n            {dropdownMenus.map((dropdown) => (\n              <DropdownNav key={dropdown.label} {...dropdown} />\n            ))}\n          </div>\n\n          {/* User Menu / Auth */}\n          <div className=\"hidden md:flex items-center gap-4\">\n            <Suspense fallback={<div className=\"w-24 h-10 bg-cosmic-purple/20 rounded-lg animate-pulse\" />}>\n              {user && user.email ? (\n                <UserMenu user={{ email: user.email }} userTier={userTier} handleSignOut={handleSignOut} />\n              ) : (\n                <div className=\"flex items-center gap-3\">\n                  <NavLink \n                    to=\"/login\"\n                    icon={FaUser}\n                    label=\"Sign In\"\n                    tooltip={{ title: 'Sign In', description: 'Access your account and unlock premium astrological features.' }}\n                  />\n                  <button\n                    onClick={() => navigate('/signup')}\n                    className=\"px-6 py-2 bg-gradient-to-r from-cosmic-gold to-cosmic-purple text-cosmic-dark rounded-lg font-semibold hover:scale-105 hover:shadow-lg transition-all duration-300 border border-cosmic-gold/20\"\n                    aria-label=\"Sign Up for Cosmic Hub\"\n                  >\n                    Get Started\n                  </button>\n                </div>\n              )}\n            </Suspense>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            onClick={toggleMobileMenu}\n            className=\"lg:hidden p-2 rounded-lg text-cosmic-silver hover:bg-cosmic-purple/20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-cosmic-purple/50\"\n            aria-label={isMobileMenuOpen ? 'Close Menu' : 'Open Menu'}\n            {...(isMobileMenuOpen ? { 'aria-expanded': 'true' } : { 'aria-expanded': 'false' })}\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth=\"2\" \n                d={isMobileMenuOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16m-7 6h7'} \n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden py-4 px-2 bg-cosmic-dark/98 backdrop-blur-lg border-t border-cosmic-silver/10 rounded-b-lg shadow-xl\">\n            <div className=\"space-y-2\">\n              {/* Core items in mobile */}\n              {coreNavItems.map((item) => (\n                <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                  <NavLink {...item} />\n                </div>\n              ))}\n              \n              {/* Chart tools section */}\n              <div className=\"pt-2 border-t border-cosmic-silver/10\">\n                <h3 className=\"px-4 py-2 text-sm font-semibold text-cosmic-gold uppercase tracking-wider\">\n                  Chart Tools\n                </h3>\n                {chartingTools.map((item) => (\n                  <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                    <NavLink {...item} />\n                  </div>\n                ))}\n              </div>\n              \n              {/* Personal Insights section */}\n              <div className=\"pt-2 border-t border-cosmic-silver/10\">\n                <h3 className=\"px-4 py-2 text-sm font-semibold text-cosmic-gold uppercase tracking-wider\">\n                  Personal Insights\n                </h3>\n                {personalInsights.map((item) => (\n                  <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                    <NavLink {...item} />\n                  </div>\n                ))}\n              </div>\n              \n              {/* Premium features section */}\n              {user && premiumFeatures.length > 0 && (\n                <div className=\"pt-2 border-t border-cosmic-silver/10\">\n                  <h3 className=\"px-4 py-2 text-sm font-semibold text-cosmic-gold uppercase tracking-wider flex items-center gap-2\">\n                    <FaCrown className=\"text-yellow-400\" />\n                    Premium Features\n                  </h3>\n                  {premiumFeatures.map((item) => (\n                    <div key={item.to} onClick={() => setIsMobileMenuOpen(false)}>\n                      <NavLink {...item} />\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              {/* Auth section */}\n              <div className=\"pt-4 border-t border-cosmic-silver/10\">\n                {user && user.email ? (\n                  <button\n                    onClick={handleSignOut}\n                    className=\"w-full flex items-center gap-3 px-4 py-3 text-red-400 rounded-lg hover:bg-red-900/10 transition-colors duration-200 font-medium\"\n                    aria-label=\"Sign Out\"\n                  >\n                    <FaSignOutAlt />\n                    Sign Out\n                  </button>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <div onClick={() => setIsMobileMenuOpen(false)}>\n                      <NavLink \n                        to=\"/login\"\n                        icon={FaUser}\n                        label=\"Sign In\"\n                        tooltip={{ title: 'Sign In', description: 'Access your account and premium features.' }}\n                      />\n                    </div>\n                    <button\n                      onClick={() => {\n                        navigate('/signup');\n                        setIsMobileMenuOpen(false);\n                      }}\n                      className=\"w-full px-4 py-3 bg-gradient-to-r from-cosmic-gold to-cosmic-purple text-cosmic-dark rounded-lg font-semibold transition-all duration-300\"\n                      aria-label=\"Sign Up\"\n                    >\n                      Get Started\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n});\n\nNavbar.displayName = 'Navbar';\n\nexport default Navbar;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NotificationSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":29,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":41,"fix":{"range":[994,997],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":32,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":32,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1029,1029],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1029,1029],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCurrentSettings' and 'loadStats'. Either include them or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadCurrentSettings, loadStats, userId]","fix":{"range":[1105,1113],"text":"[loadCurrentSettings, loadStats, userId]"}}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'loadCurrentSettings' has no 'await' expression.","line":37,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":37,"endColumn":42,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1147,1153],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":40,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1308,1314],"text":"stored != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1308,1314],"text":"stored ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1308,1314],"text":"Boolean(stored)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<NotificationPreferences>`.","line":43,"column":24,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":43,"endColumn":29},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":54,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":58,"endColumn":8,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1659,1659],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1659,1659],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":57,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":57,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1822,1835],"text":"(subscription == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":70,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":70,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2163,2176],"text":"(subscription == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":72,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":72,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2196,2208],"text":"subscription != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":140,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":140,"endColumn":39},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":147,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":147,"endColumn":43},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":171,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":171,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":179,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":179,"endColumn":42},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":198,"column":15,"nodeType":"JSXOpeningElement","endLine":198,"endColumn":108},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":215,"column":15,"nodeType":"JSXOpeningElement","endLine":215,"endColumn":108},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":232,"column":15,"nodeType":"JSXOpeningElement","endLine":232,"endColumn":108},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must have accessible text.","line":249,"column":15,"nodeType":"JSXOpeningElement","endLine":249,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":282,"column":58,"nodeType":"Property","messageId":"anyAssignment","endLine":282,"endColumn":90},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":282,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":90,"fix":{"range":[10141,10144],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10141,10144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10141,10144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":317,"column":21,"nodeType":"JSXOpeningElement","endLine":317,"endColumn":104},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":331,"column":21,"nodeType":"JSXOpeningElement","endLine":331,"endColumn":104},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":358,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":358,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[13331,13355],"text":"(Boolean(stats.totalSubscriptions))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalSubscriptions on an `any` value.","line":358,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":358,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":358,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":358,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13356,13358],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":367,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":367,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[13732,13757],"text":"(Boolean(stats.activeSubscriptions))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .activeSubscriptions on an `any` value.","line":367,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":367,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":367,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":367,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13758,13760],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":376,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":376,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14141,14166],"text":"(Boolean(stats.queuedNotifications))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .queuedNotifications on an `any` value.","line":376,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":376,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":376,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14167,14169],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .permissionStatus on an `any` value.","line":385,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":385,"endColumn":42},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":405,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15357,15412],"text":"• Test notifications to ensure they&apos;re working properly"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15357,15412],"text":"• Test notifications to ensure they&lsquo;re working properly"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15357,15412],"text":"• Test notifications to ensure they&#39;re working properly"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15357,15412],"text":"• Test notifications to ensure they&rsquo;re working properly"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * Notification Settings Component for CosmicHub\n * Allows users to manage push notification preferences\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  PushNotificationManager, \n  NotificationPreferences, \n  DefaultNotificationPreferences \n} from '@cosmichub/config';\nimport { devConsole } from '../config/environment';\n\ninterface NotificationSettingsProps {\n  userId: string;\n  pushManager: PushNotificationManager;\n  onSettingsChange?: (preferences: NotificationPreferences) => void;\n}\n\nexport const NotificationSettings: React.FC<NotificationSettingsProps> = ({\n  userId,\n  pushManager,\n  onSettingsChange\n}) => {\n  const [preferences, setPreferences] = useState<NotificationPreferences>(DefaultNotificationPreferences);\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [permissionStatus, setPermissionStatus] = useState<NotificationPermission>('default');\n  const [stats, setStats] = useState<any>({});\n\n  useEffect(() => {\n    loadCurrentSettings();\n    checkNotificationStatus();\n    loadStats();\n  }, [userId]);\n\n  const loadCurrentSettings = async () => {\n    // In a real implementation, load from your backend\n    const stored = localStorage.getItem(`cosmichub-notification-prefs-${userId}`);\n    if (stored) {\n      try {\n        const prefs = JSON.parse(stored);\n        setPreferences(prefs);\n      } catch (error) {\n        devConsole.warn('Failed to load notification preferences:', error);\n      }\n    }\n  };\n\n  const checkNotificationStatus = () => {\n    setPermissionStatus(Notification.permission);\n    \n    // Check if user is subscribed\n    navigator.serviceWorker.ready.then(registration => {\n      return registration.pushManager.getSubscription();\n    }).then(subscription => {\n      setIsSubscribed(!!subscription);\n    });\n  };\n\n  const loadStats = () => {\n    const notificationStats = pushManager.getNotificationStats();\n    setStats(notificationStats);\n  };\n\n  const handleSubscribe = async () => {\n    setIsLoading(true);\n    try {\n      const subscription = await pushManager.subscribeUser(userId, preferences);\n      setIsSubscribed(!!subscription);\n      \n      if (subscription) {\n        // Show welcome notification\n        await pushManager.queueNotification({\n          title: '🔔 Notifications Enabled!',\n          body: 'You\\'ll now receive personalized cosmic insights and healing reminders.',\n          tag: 'welcome-notification',\n          urgency: 'low'\n        });\n      }\n    } catch (error) {\n      devConsole.error('Failed to subscribe:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleUnsubscribe = async () => {\n    setIsLoading(true);\n    try {\n      await pushManager.unsubscribeUser(userId);\n      setIsSubscribed(false);\n    } catch (error) {\n      devConsole.error('Failed to unsubscribe:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updatePreferences = (updates: Partial<NotificationPreferences>) => {\n    const newPreferences = { ...preferences, ...updates };\n    setPreferences(newPreferences);\n    \n    // Save locally\n    localStorage.setItem(`cosmichub-notification-prefs-${userId}`, JSON.stringify(newPreferences));\n    \n    // Update with push manager if subscribed\n    if (isSubscribed) {\n      pushManager.updateUserPreferences(userId, updates);\n    }\n    \n    // Notify parent component\n    onSettingsChange?.(newPreferences);\n  };\n\n  const testNotification = async () => {\n    await pushManager.queueNotification({\n      title: '🧪 Test Notification',\n      body: 'This is a test notification to check your settings.',\n      tag: 'test-notification',\n      urgency: 'low'\n    });\n  };\n\n  const getSuggestedSettings = async () => {\n    const suggestions = await pushManager.suggestNotificationSettings(userId);\n    if (Object.keys(suggestions).length > 0) {\n      updatePreferences(suggestions);\n    }\n  };\n\n  return (\n    <div className=\"notification-settings p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          🔔 Notification Settings\n        </h2>\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={testNotification}\n            disabled={!isSubscribed}\n            className=\"px-3 py-1 text-sm bg-blue-500 text-white rounded disabled:opacity-50\"\n          >\n            Test\n          </button>\n          <button\n            onClick={getSuggestedSettings}\n            className=\"px-3 py-1 text-sm bg-purple-500 text-white rounded\"\n          >\n            Smart Setup\n          </button>\n        </div>\n      </div>\n\n      {/* Permission Status */}\n      <div className=\"mb-6 p-4 rounded-lg bg-gray-50 dark:bg-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n              Permission Status\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n              {permissionStatus === 'granted' && '✅ Notifications enabled'}\n              {permissionStatus === 'denied' && '❌ Notifications blocked'}\n              {permissionStatus === 'default' && '⏳ Not requested yet'}\n            </p>\n          </div>\n          \n          {!isSubscribed ? (\n            <button\n              onClick={handleSubscribe}\n              disabled={isLoading || permissionStatus === 'denied'}\n              className=\"px-4 py-2 bg-green-500 text-white rounded disabled:opacity-50\"\n            >\n              {isLoading ? 'Enabling...' : 'Enable Notifications'}\n            </button>\n          ) : (\n            <button\n              onClick={handleUnsubscribe}\n              disabled={isLoading}\n              className=\"px-4 py-2 bg-red-500 text-white rounded\"\n            >\n              {isLoading ? 'Disabling...' : 'Disable Notifications'}\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Notification Types */}\n      {isSubscribed && (\n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Notification Types\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <label className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded\">\n                <div>\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\n                    ✨ Daily Horoscope\n                  </span>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    Receive personalized daily cosmic insights\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={preferences.dailyHoroscope}\n                  onChange={(e) => updatePreferences({ dailyHoroscope: e.target.checked })}\n                  className=\"w-5 h-5 text-purple-600\"\n                />\n              </label>\n\n              <label className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded\">\n                <div>\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\n                    🪐 Transit Alerts\n                  </span>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    Get notified about important planetary movements\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={preferences.transitAlerts}\n                  onChange={(e) => updatePreferences({ transitAlerts: e.target.checked })}\n                  className=\"w-5 h-5 text-purple-600\"\n                />\n              </label>\n\n              <label className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded\">\n                <div>\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\n                    🎧 Frequency Reminders\n                  </span>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    Reminders for your healing sessions and therapy\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={preferences.frequencyReminders}\n                  onChange={(e) => updatePreferences({ frequencyReminders: e.target.checked })}\n                  className=\"w-5 h-5 text-purple-600\"\n                />\n              </label>\n\n              <label className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded\">\n                <div>\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\n                    📱 App Updates\n                  </span>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    Important updates and new features\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={preferences.appUpdates}\n                  onChange={(e) => updatePreferences({ appUpdates: e.target.checked })}\n                  className=\"w-5 h-5 text-purple-600\"\n                />\n              </label>\n            </div>\n          </div>\n\n          {/* Frequency Settings */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Notification Frequency\n            </h3>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n              {(['instant', 'hourly', 'daily', 'weekly'] as const).map(freq => (\n                <label key={freq} className=\"flex items-center p-2 bg-gray-50 dark:bg-gray-700 rounded\">\n                  <input\n                    type=\"radio\"\n                    name=\"frequency\"\n                    value={freq}\n                    checked={preferences.frequency === freq}\n                    onChange={(e) => updatePreferences({ frequency: e.target.value as any })}\n                    className=\"mr-2 text-purple-600\"\n                  />\n                  <span className=\"text-sm capitalize text-gray-900 dark:text-white\">\n                    {freq}\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Quiet Hours */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Quiet Hours\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={preferences.quietHours.enabled}\n                  onChange={(e) => updatePreferences({\n                    quietHours: { ...preferences.quietHours, enabled: e.target.checked }\n                  })}\n                  className=\"mr-3 w-5 h-5 text-purple-600\"\n                />\n                <span className=\"text-gray-900 dark:text-white\">\n                  Enable quiet hours (no notifications during specified times)\n                </span>\n              </label>\n\n              {preferences.quietHours.enabled && (\n                <div className=\"grid grid-cols-2 gap-4 ml-8\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Start Time\n                    </label>\n                    <input\n                      type=\"time\"\n                      value={preferences.quietHours.start}\n                      onChange={(e) => updatePreferences({\n                        quietHours: { ...preferences.quietHours, start: e.target.value }\n                      })}\n                      aria-label=\"Quiet hours start time\"\n                      className=\"w-full p-2 border rounded dark:bg-gray-600 dark:text-white\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      End Time\n                    </label>\n                    <input\n                      type=\"time\"\n                      value={preferences.quietHours.end}\n                      onChange={(e) => updatePreferences({\n                        quietHours: { ...preferences.quietHours, end: e.target.value }\n                      })}\n                      aria-label=\"Quiet hours end time\"\n                      className=\"w-full p-2 border rounded dark:bg-gray-600 dark:text-white\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Statistics */}\n          <div className=\"pt-6 border-t border-gray-200 dark:border-gray-600\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Notification Statistics\n            </h3>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"p-3 bg-blue-50 dark:bg-blue-900 rounded\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-300\">\n                  {stats.totalSubscriptions || 0}\n                </div>\n                <div className=\"text-sm text-blue-600 dark:text-blue-300\">\n                  Total Devices\n                </div>\n              </div>\n              \n              <div className=\"p-3 bg-green-50 dark:bg-green-900 rounded\">\n                <div className=\"text-2xl font-bold text-green-600 dark:text-green-300\">\n                  {stats.activeSubscriptions || 0}\n                </div>\n                <div className=\"text-sm text-green-600 dark:text-green-300\">\n                  Active Devices\n                </div>\n              </div>\n              \n              <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900 rounded\">\n                <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-300\">\n                  {stats.queuedNotifications || 0}\n                </div>\n                <div className=\"text-sm text-yellow-600 dark:text-yellow-300\">\n                  Queued\n                </div>\n              </div>\n              \n              <div className=\"p-3 bg-purple-50 dark:bg-purple-900 rounded\">\n                <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-300\">\n                  {stats.permissionStatus === 'granted' ? '✅' : '❌'}\n                </div>\n                <div className=\"text-sm text-purple-600 dark:text-purple-300\">\n                  Permission\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Help Text */}\n      <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n        <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n          💡 Pro Tips\n        </h4>\n        <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n          <li>• Enable notifications for the best CosmicHub experience</li>\n          <li>• Use quiet hours to avoid late-night notifications</li>\n          <li>• Smart Setup analyzes your usage to suggest optimal settings</li>\n          <li>• Test notifications to ensure they're working properly</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationSettings;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/ChallengeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersCard.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":18,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":18,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[629,639],"text":"(components != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface CoreNumberCardProps {\n  title: string;\n  number: number;\n  meaning: string;\n  components?: { month: number; day: number; year: number };\n}\n\nconst CoreNumberCard: React.FC<CoreNumberCardProps> = ({ title, number, meaning, components }) => (\n  <div className=\"cosmic-card\">\n    <div className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <h3 className=\"font-bold text-md\">{title}</h3>\n        <span className=\"px-3 py-1 text-lg text-white rounded-full bg-cosmic-purple\">{number}</span>\n      </div>\n      <p className=\"text-cosmic-silver\">{meaning}</p>\n      {components && (\n        <p className=\"mt-2 text-sm text-cosmic-silver/80\">\n          Calculation: {components.month} + {components.day} + {components.year} = {number}\n        </p>\n      )}\n    </div>\n  </div>\n);\n\nexport default CoreNumberCard;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersTab.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CoreNumbersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CyclesChallenges.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/CyclesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/Interpretation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/InterpretationTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicNumbers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/KarmicTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyCalculator.enhanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyCalculator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaStar' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaInfoCircle' is defined but never used.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FeatureGuard' is defined but never used.","line":7,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":122,"column":10,"nodeType":"CallExpression","messageId":"conditionErrorString","endLine":122,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2897,2918],"text":"formData.name.trim().length === 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2897,2918],"text":"formData.name.trim() === \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2897,2918],"text":"!Boolean(formData.name.trim())"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":152,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":152,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<NumerologyResult | null>`.","line":153,"column":17,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":153,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numerology on an `any` value.","line":153,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":188,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":188,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4962,4972],"text":"(components != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":251,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":251,"endColumn":36},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":254,"column":13,"nodeType":"JSXOpeningElement","endLine":254,"endColumn":60},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":265,"column":15,"nodeType":"JSXOpeningElement","endLine":265,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":276,"column":15,"nodeType":"JSXOpeningElement","endLine":276,"endColumn":62},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":289,"column":15,"nodeType":"JSXOpeningElement","endLine":289,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":308,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":308,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9373,9379],"text":"(result != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDownIcon } from '@radix-ui/react-icons';\nimport React, { useState } from 'react';\nimport { useToast } from '../ToastProvider';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { FaStar, FaInfoCircle } from 'react-icons/fa';\nimport FeatureGuard from '../FeatureGuard';\n\ninterface NumerologyData {\n  name: string;\n  year: number;\n  month: number;\n  day: number;\n}\n\ninterface CoreNumbers {\n  life_path: {\n    number: number;\n    meaning: string;\n    components?: { month: number; day: number; year: number };\n  };\n  destiny: {\n    number: number;\n    meaning: string;\n  };\n  soul_urge: {\n    number: number;\n    meaning: string;\n  };\n  personality: {\n    number: number;\n    meaning: string;\n  };\n  birth_day: {\n    number: number;\n    meaning: string;\n  };\n  attitude: {\n    number: number;\n    meaning: string;\n  };\n  power_name: {\n    number: number;\n    meaning: string;\n  };\n}\n\ninterface NumerologyResult {\n  core_numbers: CoreNumbers;\n  karmic_numbers: {\n    karmic_debts: number[];\n    karmic_lessons: number[];\n    debt_meanings: string[];\n    lesson_meanings: string[];\n  };\n  personal_year: {\n    number: number;\n    year: number;\n    meaning: string;\n  };\n  challenge_numbers: {\n    first_challenge: { number: number; period: string };\n    second_challenge: { number: number; period: string };\n    third_challenge: { number: number; period: string };\n    fourth_challenge: { number: number; period: string };\n    meanings: {\n      first: string;\n      second: string;\n      third: string;\n      fourth: string;\n    };\n  };\n  pinnacle_numbers: {\n    first_pinnacle: { number: number; period: string };\n    second_pinnacle: { number: number; period: string };\n    third_pinnacle: { number: number; period: string };\n    fourth_pinnacle: { number: number; period: string };\n    meanings: {\n      first: string;\n      second: string;\n      third: string;\n      fourth: string;\n    };\n  };\n  systems: {\n    pythagorean: {\n      system: string;\n      letter_values: Record<string, string[]>;\n      total_value: number;\n      characteristics: string[];\n    };\n    chaldean: {\n      system: string;\n      letter_values: Record<string, string[]>;\n      total_value: number;\n      chaldean_number: number;\n      meaning: string;\n    };\n  };\n  interpretation: {\n    life_purpose: string;\n    personality_overview: string;\n    current_focus: string;\n    spiritual_path: string;\n  };\n}\n\nconst NumerologyCalculator: React.FC = () => {\n  const [formData, setFormData] = useState<NumerologyData>({\n    name: '',\n    year: new Date().getFullYear() - 30,\n    month: 1,\n    day: 1\n  });\n  const [result, setResult] = useState<NumerologyResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter your full name',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const birthDate = `${formData.year}-${String(formData.month).padStart(2, '0')}-${String(formData.day).padStart(2, '0')}`;\n      \n      const response = await fetch(`${import.meta.env.VITE_BACKEND_URL}/calculate-numerology`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          birth_date: birthDate\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to calculate numerology');\n      }\n\n      const data = await response.json();\n      setResult(data.numerology);\n\n      toast({\n        title: 'Numerology Calculated',\n        description: 'Your numerology chart is ready!',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (err) {\n      toast({\n        title: 'Calculation Failed',\n        description: err instanceof Error ? err.message : 'Unknown error',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: name === 'name' ? value : parseInt(value) }));\n  };\n\n  const renderCoreNumber = (title: string, number: number, meaning: string, components?: { month: number; day: number; year: number }) => (\n    <div className=\"cosmic-card\">\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"font-bold text-md\">{title}</h3>\n          <span className=\"px-3 py-1 text-lg text-white rounded-full bg-cosmic-purple\">{number}</span>\n        </div>\n        <p className=\"text-cosmic-silver\">{meaning}</p>\n        {components && (\n          <p className=\"mt-2 text-sm text-cosmic-silver/80\">\n            Calculation: {components.month} + {components.day} + {components.year} = {number}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n\n  const SystemsDisplay = ({ systems }: { systems: NumerologyResult['systems'] }) => (\n    <div className=\"flex flex-col space-y-6\">\n      <div className=\"cosmic-card\">\n        <div className=\"p-4\">\n          <h3 className=\"mb-4 text-lg font-bold\">Pythagorean System</h3>\n          <p className=\"mb-4 text-cosmic-silver\">{systems.pythagorean.system}</p>\n          <div className=\"grid grid-cols-3 gap-2 mb-4\">\n            {Object.entries(systems.pythagorean.letter_values).map(([letter, values]) => (\n              <div key={letter} className=\"p-2 text-center rounded-md bg-gray-50\">\n                <p className=\"font-bold\">{letter}</p>\n                <p className=\"text-sm\">{values.join(', ')}</p>\n              </div>\n            ))}\n          </div>\n          <p className=\"mb-2 text-cosmic-silver\">Total Value: {systems.pythagorean.total_value}</p>\n          <div className=\"flex flex-col space-y-2\">\n            {systems.pythagorean.characteristics.map((char, index) => (\n              <p key={index} className=\"text-cosmic-silver\">{char}</p>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"cosmic-card\">\n        <div className=\"p-4\">\n          <h3 className=\"mb-4 text-lg font-bold\">Chaldean System</h3>\n          <p className=\"mb-4 text-cosmic-silver\">{systems.chaldean.system}</p>\n          <div className=\"grid grid-cols-3 gap-2 mb-4\">\n            {Object.entries(systems.chaldean.letter_values).map(([letter, values]) => (\n              <div key={letter} className=\"p-2 text-center rounded-md bg-gray-50\">\n                <p className=\"font-bold\">{letter}</p>\n                <p className=\"text-sm\">{values.join(', ')}</p>\n              </div>\n            ))}\n          </div>\n          <p className=\"mb-2 text-cosmic-silver\">Total Value: {systems.chaldean.total_value}</p>\n          <p className=\"mb-2 text-cosmic-silver\">Chaldean Number: {systems.chaldean.chaldean_number}</p>\n          <p className=\"text-cosmic-silver\">{systems.chaldean.meaning}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"py-10 text-center\">\n        <div className=\"mx-auto text-4xl text-purple-500 animate-spin\">⭐</div>\n        <p className=\"mt-4 text-cosmic-silver\">Calculating your numerology chart...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col space-y-6\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"flex flex-col space-y-4\">\n          <div>\n            <label className=\"block mb-2 text-cosmic-gold\">Full Name</label>\n            <input\n              className=\"cosmic-input\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              placeholder=\"Enter your full name\"\n            />\n          </div>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block mb-2 text-cosmic-gold\">Year</label>\n              <input\n                className=\"cosmic-input\"\n                name=\"year\"\n                type=\"number\"\n                value={formData.year}\n                onChange={handleChange}\n                placeholder=\"Year\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2 text-cosmic-gold\">Month</label>\n              <input\n                className=\"cosmic-input\"\n                name=\"month\"\n                type=\"number\"\n                min=\"1\"\n                max=\"12\"\n                value={formData.month}\n                onChange={handleChange}\n                placeholder=\"Month\"\n              />\n            </div>\n            <div>\n              <label className=\"block mb-2 text-cosmic-gold\">Day</label>\n              <input\n                className=\"cosmic-input\"\n                name=\"day\"\n                type=\"number\"\n                min=\"1\"\n                max=\"31\"\n                value={formData.day}\n                onChange={handleChange}\n                placeholder=\"Day\"\n              />\n            </div>\n          </div>\n          <button className=\"cosmic-button\" type=\"submit\">\n            Calculate Numerology\n          </button>\n        </div>\n      </form>\n\n      {result && (\n        <Tabs.Root>\n          <Tabs.List className=\"flex border-b border-cosmic-silver/30\">\n            <Tabs.Trigger value=\"core\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Core Numbers</Tabs.Trigger>\n            <Tabs.Trigger value=\"cycles\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Cycles & Challenges</Tabs.Trigger>\n            <Tabs.Trigger value=\"karmic\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Karmic Numbers</Tabs.Trigger>\n            <Tabs.Trigger value=\"systems\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Systems Comparison</Tabs.Trigger>\n            <Tabs.Trigger value=\"interpretation\" className=\"px-4 py-2 data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\">Interpretation</Tabs.Trigger>\n          </Tabs.List>\n\n          <Tabs.Content value=\"core\" className=\"p-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              {renderCoreNumber(\"Life Path\", result.core_numbers.life_path.number, result.core_numbers.life_path.meaning, result.core_numbers.life_path.components)}\n              {renderCoreNumber(\"Destiny\", result.core_numbers.destiny.number, result.core_numbers.destiny.meaning)}\n              {renderCoreNumber(\"Soul Urge\", result.core_numbers.soul_urge.number, result.core_numbers.soul_urge.meaning)}\n              {renderCoreNumber(\"Personality\", result.core_numbers.personality.number, result.core_numbers.personality.meaning)}\n              {renderCoreNumber(\"Birth Day\", result.core_numbers.birth_day.number, result.core_numbers.birth_day.meaning)}\n              {renderCoreNumber(\"Attitude\", result.core_numbers.attitude.number, result.core_numbers.attitude.meaning)}\n              {renderCoreNumber(\"Power Name\", result.core_numbers.power_name.number, result.core_numbers.power_name.meaning)}\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"cycles\" className=\"p-4\">\n            <div className=\"flex flex-col space-y-6\">\n              <Accordion.Root type=\"single\" collapsible>\n                <Accordion.Item value=\"challenges\">\n                  <Accordion.Trigger className=\"flex justify-between w-full\">\n                    <span className=\"font-bold\">Challenge Numbers</span>\n                    <ChevronDownIcon />\n                  </Accordion.Trigger>\n                  <Accordion.Content className=\"pb-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">First Challenge ({result.challenge_numbers.first_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.first_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.first}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Second Challenge ({result.challenge_numbers.second_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.second_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.second}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Third Challenge ({result.challenge_numbers.third_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.third_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.third}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Fourth Challenge ({result.challenge_numbers.fourth_challenge.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-blue-500 rounded\">{result.challenge_numbers.fourth_challenge.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.challenge_numbers.meanings.fourth}</p>\n                      </div>\n                    </div>\n                  </Accordion.Content>\n                </Accordion.Item>\n\n                <Accordion.Item value=\"pinnacles\">\n                  <Accordion.Trigger className=\"flex justify-between w-full\">\n                    <span className=\"font-bold\">Pinnacle Numbers</span>\n                    <ChevronDownIcon />\n                  </Accordion.Trigger>\n                  <Accordion.Content className=\"pb-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">First Pinnacle ({result.pinnacle_numbers.first_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.first_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.first}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Second Pinnacle ({result.pinnacle_numbers.second_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.second_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.second}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Third Pinnacle ({result.pinnacle_numbers.third_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.third_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.third}</p>\n                      </div>\n                      <div className=\"p-4 rounded-md bg-gray-50\">\n                        <p className=\"mb-1 font-bold\">Fourth Pinnacle ({result.pinnacle_numbers.fourth_pinnacle.period})</p>\n                        <span className=\"px-2 py-1 mr-2 text-sm text-white bg-green-500 rounded\">{result.pinnacle_numbers.fourth_pinnacle.number}</span>\n                        <p className=\"mt-2 text-sm\">{result.pinnacle_numbers.meanings.fourth}</p>\n                      </div>\n                    </div>\n                  </Accordion.Content>\n                </Accordion.Item>\n              </Accordion.Root>\n\n              <div className=\"cosmic-card\">\n                <div className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-bold text-md\">Personal Year {result.personal_year.year}</h3>\n                    <span className=\"px-4 py-2 text-xl text-white bg-orange-500 rounded-full\">{result.personal_year.number}</span>\n                  </div>\n                  <p className=\"mt-4 text-cosmic-silver\">{result.personal_year.meaning}</p>\n                </div>\n              </div>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"karmic\" className=\"p-4\">\n            <div className=\"flex flex-col space-y-6\">\n              {result.karmic_numbers.karmic_debts.length > 0 && (\n                <div className=\"p-4 border border-yellow-500 rounded-md bg-yellow-900/50\">\n                  <div className=\"flex mb-2 space-x-4\">\n                    <span className=\"text-xl text-yellow-500\">⚠️</span>\n                    <div>\n                      <h4 className=\"font-bold text-white\">Karmic Debts</h4>\n                      <p className=\"text-white/80\">Numbers: {result.karmic_numbers.karmic_debts.join(', ')}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col space-y-1\">\n                    {result.karmic_numbers.debt_meanings.map((meaning, index) => (\n                      <p key={index} className=\"text-sm text-white/80\">• {meaning}</p>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {result.karmic_numbers.karmic_lessons.length > 0 && (\n                <div className=\"p-4 border border-blue-500 rounded-md bg-blue-900/50\">\n                  <div className=\"flex mb-2 space-x-4\">\n                    <span className=\"text-xl text-blue-500\">ℹ️</span>\n                    <div>\n                      <h4 className=\"font-bold text-white\">Karmic Lessons</h4>\n                      <p className=\"text-white/80\">Missing Numbers: {result.karmic_numbers.karmic_lessons.join(', ')}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col space-y-1\">\n                    {result.karmic_numbers.lesson_meanings.map((meaning, index) => (\n                      <p key={index} className=\"text-sm text-white/80\">• {meaning}</p>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {result.karmic_numbers.karmic_debts.length === 0 && result.karmic_numbers.karmic_lessons.length === 0 && (\n                <div className=\"p-4 border border-green-500 rounded-md bg-green-900/50\">\n                  <div className=\"flex space-x-4\">\n                    <span className=\"text-xl text-green-500\">✅</span>\n                    <div>\n                      <h4 className=\"font-bold text-white\">Clear Karmic Path</h4>\n                      <p className=\"text-white/80\">You have no significant karmic debts or lessons indicated in your numerology chart.</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"systems\" className=\"p-4\">\n            <SystemsDisplay systems={result.systems} />\n          </Tabs.Content>\n\n          <Tabs.Content value=\"interpretation\" className=\"p-4\">\n            <div className=\"flex flex-col space-y-6\">\n              {Object.entries(result.interpretation).map(([key, value]) => (\n                <div key={key} className=\"border-l-4 border-purple-500 cosmic-card\">\n                  <div className=\"p-4\">\n                    <div className=\"flex flex-col space-y-2\">\n                      <h3 className=\"font-bold text-purple-600 capitalize text-md\">{key.replace('_', ' ')}</h3>\n                      <p className=\"text-cosmic-silver\">{value}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Tabs.Content>\n        </Tabs.Root>\n      )}\n    </div>\n  );\n};\n\nexport default NumerologyCalculator;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/NumerologyForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PersonalYearCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PersonalYearTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/PinnacleCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsComparison.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/SystemsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/useNumerology.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":16,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":18,"column":10,"nodeType":"CallExpression","messageId":"conditionErrorString","endLine":18,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[570,591],"text":"formData.name.trim().length === 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[570,591],"text":"formData.name.trim() === \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[570,591],"text":"!Boolean(formData.name.trim())"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":36,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":33,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1066,1095],"text":"(localStorage.getItem('token') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1066,1095],"text":"(localStorage.getItem('token') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1066,1095],"text":"(Boolean(localStorage.getItem('token')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1096,1098],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":45,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<NumerologyResult | null>`.","line":46,"column":17,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":46,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numerology on an `any` value.","line":46,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":32}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useToast } from '../ToastProvider';\nimport type { NumerologyData, NumerologyResult } from './types';\n\nexport const useNumerology = () => {\n  const [formData, setFormData] = useState<NumerologyData>({\n    name: '',\n    year: new Date().getFullYear() - 30,\n    month: 1,\n    day: 1,\n  });\n  const [result, setResult] = useState<NumerologyResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name.trim()) {\n      toast({\n        description: 'Please enter your full name',\n        status: 'error'\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const birthDate = `${formData.year}-${String(formData.month).padStart(2, '0')}-${String(formData.day).padStart(2, '0')}`;\n      const response = await fetch('/api/calculate-numerology', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token') || ''}`,\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          birth_date: birthDate,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to calculate numerology');\n      }\n\n      const data = await response.json();\n      setResult(data.numerology);\n      toast({\n        description: 'Numerology Calculated',\n        status: 'success'\n      });\n    } catch (err) {\n      toast({\n        description: err instanceof Error ? err.message : 'Unknown error',\n        status: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { formData, setFormData, result, loading, handleSubmit };\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/NumerologyCalculator/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PdfExport.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"fix":{"range":[517,520],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":24,"fix":{"range":[542,545],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[542,545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[542,545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":26,"fix":{"range":[1550,1553],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1550,1553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1550,1553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":52,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":52,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1676,1686],"text":"chartData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":56,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":56,"endColumn":102,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1672,2148],"text":"{ if (!chartData) {\n            throw new Error('Chart data is required for standard PDF export');\n          }\n          // Use serialization utility to ensure consistent data format\n          const serializedChartData = serializeAstrologyData(chartData as unknown as AstrologyChart);\n          exportData = {\n            chart_data: { chart: JSON.parse(serializedChartData) },\n            birth_info: birthInfo,\n            report_type: 'standard'\n          };\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":58,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":58,"endColumn":65},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":16,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":65,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2190,2202],"text":"(Boolean(synastryData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `AstrologyChart | UserProfile | NumerologyData`.","line":70,"column":67,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":70,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":29,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":78,"column":29,"nodeType":"Property","messageId":"anyAssignment","endLine":78,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":86,"column":16,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":86,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3016,3031],"text":"(Boolean(multiSystemData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":50},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":227,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8789,8805],"text":"What&apos;s Included:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8789,8805],"text":"What&lsquo;s Included:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8789,8805],"text":"What&#39;s Included:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8789,8805],"text":"What&rsquo;s Included:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":267,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":267,"endColumn":38}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useToast } from './ToastProvider';\nimport * as Dialog from '@radix-ui/react-dialog';\nimport { FaDownload } from 'react-icons/fa';\nimport FeatureGuard from './FeatureGuard';\nimport type { ChartData, BirthData } from '../types';\nimport { serializeAstrologyData, type AstrologyChart } from '@cosmichub/types';\nimport { devConsole } from '../config/environment';\n\ninterface PdfExportProps {\n  chartData?: ChartData;\n  birthInfo?: BirthData;\n  synastryData?: any;\n  multiSystemData?: any;\n}\n\ninterface ExportOptions {\n  reportType: 'standard' | 'synastry' | 'multi_system';\n  includeInterpretation: boolean;\n  includeAspects: boolean;\n  includeTransits: boolean;\n}\n\nconst PdfExport: React.FC<PdfExportProps> = React.memo(({ chartData, birthInfo, synastryData, multiSystemData }) => {\n  const [loading, setLoading] = useState(false);\n  const [options, setOptions] = useState<ExportOptions>({\n    reportType: 'standard',\n    includeInterpretation: true,\n    includeAspects: true,\n    includeTransits: false\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const handleOptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    setOptions((prev) => ({\n      ...prev,\n      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value,\n    }));\n  }, []);\n\n  const exportToPdf = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      let exportData: any = {};\n      let endpoint = '/api/export-pdf';\n\n      switch (options.reportType) {\n        case 'standard':\n          if (!chartData) {\n            throw new Error('Chart data is required for standard PDF export');\n          }\n          // Use serialization utility to ensure consistent data format\n          const serializedChartData = serializeAstrologyData(chartData as unknown as AstrologyChart);\n          exportData = {\n            chart_data: { chart: JSON.parse(serializedChartData) },\n            birth_info: birthInfo,\n            report_type: 'standard'\n          };\n          break;\n\n        case 'synastry':\n          if (!synastryData) {\n            throw new Error('Synastry data is required for synastry PDF export');\n          }\n          // Serialize synastry data if it matches our schema\n          try {\n            const serializedSynastryData = serializeAstrologyData(synastryData);\n            exportData = {\n              chart_data: { synastry: JSON.parse(serializedSynastryData) },\n              report_type: 'synastry'\n            };\n          } catch (serializationError) {\n            devConsole.warn('Could not serialize synastry data, using raw data:', serializationError);\n            exportData = {\n              chart_data: { synastry: synastryData },\n              report_type: 'synastry'\n            };\n          }\n          endpoint = '/api/export-synastry-pdf';\n          break;\n\n        case 'multi_system':\n          if (!multiSystemData) {\n            throw new Error('Multi-system data is required for multi-system PDF export');\n          }\n          exportData = {\n            chart_data: { charts: multiSystemData },\n            report_type: 'multi_system'\n          };\n          break;\n\n        default:\n          throw new Error('Invalid report type selected');\n      }\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(exportData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to generate PDF');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `cosmic_hub_${options.reportType}_report.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      toast({\n        title: 'PDF Generated',\n        description: 'Your report is downloading.',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (err) {\n      toast({\n        title: 'PDF Generation Failed',\n        description: err instanceof Error ? err.message : 'Unknown error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n      setIsOpen(false);\n    }\n  }, [options, chartData, birthInfo, synastryData, multiSystemData, toast]);\n\n  return (\n    <FeatureGuard requiredTier=\"premium\" feature=\"pdf_export\">\n      <div className=\"cosmic-card\">\n        <div className=\"p-6\">\n          <h2 className=\"mb-4 text-xl font-bold text-cosmic-gold\">Export to PDF</h2>\n          <p className=\"mb-6 text-cosmic-silver\">Download a professional PDF report of your chart analysis.</p>\n          <button\n            className=\"w-full cosmic-button\"\n            onClick={() => setIsOpen(true)}\n            disabled={loading}\n            aria-label=\"Open PDF Export Options\"\n          >\n            <FaDownload className=\"mr-2\" />\n            Export Chart to PDF\n          </button>\n        </div>\n      </div>\n\n      <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\n        <Dialog.Portal>\n          <Dialog.Overlay className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\" />\n          <Dialog.Content className=\"fixed w-full max-w-lg p-6 transform -translate-x-1/2 -translate-y-1/2 border rounded-lg top-1/2 left-1/2 bg-cosmic-blue/80 backdrop-blur-md border-cosmic-silver/20\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <Dialog.Title className=\"text-lg font-bold text-cosmic-gold\">PDF Export Options</Dialog.Title>\n              <Dialog.Close asChild>\n                <button className=\"text-cosmic-silver hover:text-cosmic-gold\" aria-label=\"Close\">\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </Dialog.Close>\n            </div>\n\n            <div className=\"flex flex-col space-y-6\">\n              <div>\n                <label htmlFor=\"reportType\" className=\"block mb-2 text-cosmic-gold\">Report Type</label>\n                <select\n                  id=\"reportType\"\n                  name=\"reportType\"\n                  value={options.reportType}\n                  onChange={handleOptionChange}\n                  className=\"cosmic-input\"\n                  aria-label=\"Report Type\"\n                >\n                  <option value=\"standard\">Standard Chart Report</option>\n                  <option value=\"synastry\">Synastry Report</option>\n                  <option value=\"multi_system\">Multi-System Report</option>\n                </select>\n              </div>\n\n              <div className=\"flex flex-col space-y-4\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"includeInterpretation\"\n                    checked={options.includeInterpretation}\n                    onChange={handleOptionChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Include AI Interpretation (Elite Feature)</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"includeAspects\"\n                    checked={options.includeAspects}\n                    onChange={handleOptionChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Include Detailed Aspects</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"includeTransits\"\n                    checked={options.includeTransits}\n                    onChange={handleOptionChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Include Current Transits (Elite Feature)</span>\n                </label>\n              </div>\n\n              <div className=\"flex p-4 space-x-4 border border-blue-500 rounded-md bg-blue-900/50\">\n                <span className=\"text-xl text-blue-500\">ℹ️</span>\n                <div className=\"flex flex-col space-y-2\">\n                  <p className=\"font-bold text-cosmic-silver\">What's Included:</p>\n                  <p className=\"text-sm text-cosmic-silver\">\n                    • Professional formatting with planetary positions<br />\n                    • House cusp details and sign placements<br />\n                    • Major aspect calculations with orbs\n                    {options.includeInterpretation && (\n                      <>\n                        <br />\n                        • AI-powered astrological interpretations\n                      </>\n                    )}\n                    {options.reportType === 'synastry' && (\n                      <>\n                        <br />\n                        • Relationship compatibility analysis<br />\n                        • House overlays and composite insights\n                      </>\n                    )}\n                    {options.reportType === 'multi_system' && (\n                      <>\n                        <br />\n                        • Western, Vedic, Chinese, and Mayan systems<br />\n                        • Integrated cross-system analysis\n                      </>\n                    )}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex mt-6 space-x-3\">\n              <button\n                className=\"flex-1 bg-transparent border cosmic-button border-cosmic-silver text-cosmic-silver hover:bg-cosmic-silver/10\"\n                onClick={() => setIsOpen(false)}\n                aria-label=\"Cancel\"\n              >\n                Cancel\n              </button>\n              <button\n                className=\"flex-1 cosmic-button\"\n                onClick={exportToPdf}\n                disabled={loading}\n              >\n                <FaDownload className=\"mr-2\" />\n                {loading ? 'Generating...' : 'Generate & Download'}\n              </button>\n            </div>\n          </Dialog.Content>\n        </Dialog.Portal>\n      </Dialog.Root>\n    </FeatureGuard>\n  );\n});\n\nPdfExport.displayName = 'PdfExport';\n\nexport default PdfExport;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PremiumFeaturesDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PricingPage.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/auth' import is duplicated.","line":4,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":4,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'calculateYearlySavings' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":49},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":20,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":20,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1058,1063],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":31,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":31,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1300,1314],"text":"stripeService == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":83,"column":61,"nodeType":"Identifier","messageId":"undef","endLine":83,"endColumn":64},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":101,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":48},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":132,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":132,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[5482,5503],"text":"(descriptions[feature].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[5482,5503],"text":"(descriptions[feature] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5482,5503],"text":"(Boolean(descriptions[feature]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":162,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":162,"endColumn":29},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":273,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":273,"endColumn":80}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { devConsole } from '../config/environment';\nimport { useAuth } from '@cosmichub/auth';\nimport { useSubscription } from '@cosmichub/auth';\nimport { useToast } from './ToastProvider';\nimport { stripeService } from '@cosmichub/integrations';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport { FaCheck, FaTimes, FaStar, FaCrown, FaUser, FaChartLine, FaUsers, FaBrain, FaMagic, FaInfinity, FaQuestionCircle, FaHeart, FaCalendarAlt, FaFilePdf, FaSave, FaHeadset } from 'react-icons/fa';\n// Using centralized subscription tiers\nimport { COSMICHUB_TIERS, calculateYearlySavings, AstroSubscriptionTier } from '@cosmichub/subscriptions';\n\nconst PricingPage: React.FC = React.memo(() => {\n  const { user } = useAuth();\n  const { tier: userTier } = useSubscription();\n  const { toast } = useToast();\n  const [isAnnual, setIsAnnual] = useState(false);\n  const [loading, setLoading] = useState<string | null>(null);\n\n  const handleUpgrade = useCallback(async (tier: 'premium' | 'elite') => {\n    if (!user) {\n      toast({\n        title: 'Authentication Required',\n        description: 'Please sign in to upgrade your plan.',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    if (!stripeService) {\n      toast({\n        title: 'Service Unavailable',\n        description: 'Payment service is currently unavailable. Please try again later.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setLoading(tier);\n    try {\n      const successUrl = `${window.location.origin}/pricing/success?tier=${tier}`;\n      const cancelUrl = `${window.location.origin}/pricing/cancel`;\n\n      await stripeService.createCheckoutSession({\n        tier,\n        userId: user.uid,\n        isAnnual,\n        successUrl,\n        cancelUrl,\n        metadata: {\n          sourceComponent: 'PricingPage',\n          billingCycle: isAnnual ? 'annual' : 'monthly'\n        }\n      });\n\n      // Update subscription data in Firestore\n      await stripeService.updateUserSubscription(user.uid, tier, isAnnual);\n      \n      toast({\n        title: 'Upgrade Initiated',\n        description: 'Redirecting to Stripe Checkout...',\n        status: 'info',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      devConsole.error('Upgrade error:', error);\n      toast({\n        title: 'Upgrade Failed',\n        description: 'An error occurred during the upgrade process. Please try again.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(null);\n    }\n  }, [user, isAnnual, toast]);\n\n  const getTierIcon = (tier: keyof typeof COSMICHUB_TIERS): JSX.Element => {\n    switch (tier) {\n      case 'free': return <FaUser className=\"text-gray-500\" />;\n      case 'premium': return <FaStar className=\"text-purple-500\" />;\n      case 'elite': return <FaCrown className=\"text-orange-500\" />;\n      default: return <FaUser className=\"text-gray-500\" />;\n    }\n  };\n\n  const getTierColor = (tier: keyof typeof COSMICHUB_TIERS): string => {\n    switch (tier) {\n      case 'free': return 'gray-500';\n      case 'premium': return 'purple-500';\n      case 'elite': return 'orange-500';\n      default: return 'gray-500';\n    }\n  };\n\n  const getFeatureIcon = (feature: string): JSX.Element => {\n    switch (feature) {\n      case 'Basic birth chart calculation': return <FaChartLine className=\"text-blue-500\" />;\n      case 'Western tropical astrology': return <FaUsers className=\"text-green-500\" />;\n      case 'Multi-system analysis': return <FaBrain className=\"text-purple-500\" />;\n      case 'Vedic sidereal charts': return <FaMagic className=\"text-orange-500\" />;\n      case 'Chinese astrology': return <FaInfinity className=\"text-red-500\" />;\n      case 'Mayan calendar': return <FaStar className=\"text-yellow-500\" />;\n      case 'Uranian astrology': return <FaCrown className=\"text-gold-500\" />;\n      case 'Synastry compatibility': return <FaHeart className=\"text-pink-500\" />;\n      case 'AI interpretations': return <FaBrain className=\"text-indigo-500\" />;\n      case 'Transit analysis': return <FaCalendarAlt className=\"text-cyan-500\" />;\n      case 'PDF export': return <FaFilePdf className=\"text-red-500\" />;\n      case 'Unlimited calculations': return <FaInfinity className=\"text-green-500\" />;\n      case 'Unlimited storage': return <FaSave className=\"text-blue-500\" />;\n      case 'Priority support': return <FaHeadset className=\"text-purple-500\" />;\n      default: return <FaQuestionCircle className=\"text-gray-500\" />;\n    }\n  };\n\n  const getFeatureDescription = (feature: string): string => {\n    const descriptions: Record<string, string> = {\n      'AI interpretations': 'Intelligent chart analysis powered by advanced AI models.',\n      'Transit analysis': 'Detailed forecasts of upcoming planetary influences and timing.',\n      'Multi-system analysis': 'Integrated Western, Vedic, Chinese, Mayan, and Uranian astrology.',\n      'Synastry compatibility': 'In-depth relationship analysis between multiple charts.',\n      'Vedic sidereal charts': 'Traditional Indian astrology with sidereal zodiac.',\n      'Chinese astrology': 'Four Pillars and Zi Wei Dou Shu systems.',\n      'Mayan calendar': 'Tzolk\\'in and Haab cycles for spiritual timing.',\n      'Uranian astrology': 'Midpoint and transneptunian planet analysis.'\n    };\n    return descriptions[feature] || 'Advanced astrological feature for deeper insights.';\n  };\n\n  const getFeatureExamples = (feature: string): string[] => {\n    const examples: Record<string, string[]> = {\n      'AI interpretations': [\n        'Personality analysis based on planetary patterns',\n        'Life purpose guidance from chart synthesis',\n        'Relationship compatibility insights',\n        'Career path recommendations'\n      ],\n      'Transit analysis': [\n        'Current life phase timing',\n        'Opportunity windows',\n        'Challenge periods',\n        'Growth cycles'\n      ],\n      'Multi-system analysis': [\n        'Western tropical chart for personality',\n        'Vedic sidereal for karmic patterns',\n        'Chinese Four Pillars for life cycles',\n        'Mayan calendar for spiritual purpose'\n      ],\n      'Synastry compatibility': [\n        'Romantic partnership analysis',\n        'Friendship compatibility',\n        'Family relationship dynamics',\n        'Business partnership potential'\n      ]\n    };\n    return examples[feature] || [];\n  };\n\n  const getFeatureTier = (feature: string): 'free' | 'premium' | 'elite' | undefined => {\n    const tiers: Record<string, 'free' | 'premium' | 'elite'> = {\n      'AI interpretations': 'elite',\n      'Transit analysis': 'elite',\n      'Multi-system analysis': 'premium',\n      'Synastry compatibility': 'premium',\n      'Vedic sidereal charts': 'premium',\n      'Chinese astrology': 'premium',\n      'Uranian astrology': 'elite',\n      'Mayan calendar': 'premium'\n    };\n    return tiers[feature];\n  };\n\n  const getAllFeatures = (): string[] => [\n    'Basic birth chart calculation',\n    'Western tropical astrology',\n    'Multi-system analysis',\n    'Vedic sidereal charts',\n    'Chinese astrology',\n    'Mayan calendar',\n    'Uranian astrology',\n    'Synastry compatibility',\n    'AI interpretations',\n    'Transit analysis',\n    'PDF export',\n    'Unlimited calculations',\n    'Unlimited storage',\n    'Priority support'\n  ];\n\n  const isFeatureIncluded = (feature: string, planFeatures: string[]): boolean => {\n    return planFeatures.includes(feature);\n  };\n\n  return (\n    <div className=\"min-h-screen px-4 py-12 bg-gray-50\">\n      <div className=\"mx-auto max-w-7xl\">\n        <div className=\"mb-12 space-y-4 text-center\">\n          <h2 className=\"text-4xl font-bold text-cosmic-gold font-cinzel\">Pricing Plans</h2>\n          <p className=\"max-w-2xl mx-auto text-lg text-cosmic-silver\">\n            Choose the perfect plan to unlock the cosmos. All plans include core astrology features, with premium tiers adding advanced analysis and unlimited access.\n          </p>\n        </div>\n\n        <div className=\"flex justify-center mb-8\">\n          <label className=\"flex items-center space-x-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={isAnnual}\n              onChange={(e) => setIsAnnual(e.target.checked)}\n              className=\"w-5 h-5 text-purple-500 rounded\"\n            />\n            <span className=\"font-medium text-cosmic-silver\">Annual Billing</span>\n            <span className=\"px-2 py-1 text-sm text-green-500 rounded bg-green-500/20\">Save 20%</span>\n          </label>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 md:grid-cols-3\">\n          {Object.entries(COSMICHUB_TIERS).map(([tierKey, tier]: [string, AstroSubscriptionTier]) => (\n            <div key={tierKey} className={`cosmic-card ${tierKey === userTier ? 'border-2 border-purple-500 shadow-lg' : ''}`}>\n              <div className=\"p-6\">\n                <div className=\"flex items-center mb-4 space-x-3\">\n                  {getTierIcon(tierKey)}\n                  <h3 className=\"text-2xl font-bold text-cosmic-gold\">{tier.name}</h3>\n                </div>\n                <p className=\"mb-6 text-sm text-cosmic-silver\">{tier.description}</p>\n                <div className=\"flex items-baseline mb-6 space-x-2\">\n                  <span className=\"text-3xl font-bold text-cosmic-gold\">${isAnnual ? tier.price.yearly : tier.price.monthly}</span>\n                  <span className=\"text-sm text-cosmic-silver/80\">/{isAnnual ? 'year' : 'month'}</span>\n                </div>\n                <ul className=\"mb-6 space-y-4\">\n                  {tier.features.map((feature: string, index: number) => (\n                    <li key={index} className=\"flex items-start space-x-3\">\n                      <FaCheck className=\"mt-1 text-green-500\" />\n                      <div className=\"flex flex-col space-y-1\">\n                        <p className=\"text-sm text-cosmic-silver\">{feature}</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`bg-${getTierColor(feature)}/20 text-${getTierColor(feature)} px-2 py-1 rounded text-xs`}>\n                            {getFeatureTier(feature)}\n                          </span>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <button className=\"text-cosmic-purple hover:text-cosmic-purple/80\" aria-label=\"Feature Information\">\n                                <FaQuestionCircle />\n                              </button>\n                            </Tooltip.Trigger>\n                            <Tooltip.Portal>\n                              <Tooltip.Content className=\"bg-cosmic-blue/80 backdrop-blur-md border border-cosmic-silver/20 rounded-md shadow-lg p-2 text-cosmic-silver max-w-[300px]\" side=\"top\">\n                                <p className=\"mb-2 font-bold\">{feature}</p>\n                                <p className=\"mb-2 text-sm\">{getFeatureDescription(feature)}</p>\n                                <div className=\"flex flex-col space-y-1\">\n                                  {getFeatureExamples(feature).map((example, i) => (\n                                    <p key={i} className=\"text-xs text-cosmic-silver/80\">• {example}</p>\n                                  ))}\n                                </div>\n                                <Tooltip.Arrow className=\"fill-cosmic-blue/80\" />\n                              </Tooltip.Content>\n                            </Tooltip.Portal>\n                          </Tooltip.Root>\n                        </div>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n                <button\n                  className=\"w-full cosmic-button\"\n                  disabled={loading === tierKey || tierKey === userTier}\n                  onClick={() => handleUpgrade(tierKey as 'premium' | 'elite')}\n                  aria-label={tierKey === userTier ? 'Current Plan' : 'Select Plan'}\n                >\n                  {tierKey === userTier ? 'Current Plan' : tier.price.monthly === 0 ? 'Free' : 'Subscribe Now'}\n                </button>\n                {tier.price.monthly === 0 && (\n                  <p className=\"mt-2 text-xs text-center text-cosmic-silver/80\">Always free</p>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <hr className=\"my-12 border-cosmic-silver/30\" />\n\n        <div className=\"space-y-4 text-center\">\n          <h2 className=\"text-2xl font-bold text-cosmic-gold\">Feature Comparison</h2>\n          <p className=\"text-sm text-cosmic-silver\">Hover over features for more details</p>\n        </div>\n\n        <div className=\"mt-8 overflow-x-auto\">\n          <table className=\"w-full table-auto\">\n            <thead>\n              <tr>\n                <th className=\"px-4 py-3 font-semibold text-left text-cosmic-silver\">Feature</th>\n                <th className=\"px-4 py-3 font-semibold text-center text-cosmic-silver\">Free</th>\n                <th className=\"px-4 py-3 font-semibold text-center text-cosmic-silver\">Premium</th>\n                <th className=\"px-4 py-3 font-semibold text-center text-cosmic-silver\">Elite</th>\n              </tr>\n            </thead>\n            <tbody>\n              {getAllFeatures().map((feature) => (\n                <tr key={feature} className=\"border-b border-cosmic-silver/20\">\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getFeatureIcon(feature)}\n                      <span className=\"text-cosmic-silver\">{feature}</span>\n                      <Tooltip.Root>\n                        <Tooltip.Trigger asChild>\n                          <button className=\"text-cosmic-purple hover:text-cosmic-purple/80\" aria-label=\"Feature Information\">\n                            <FaQuestionCircle />\n                          </button>\n                        </Tooltip.Trigger>\n                        <Tooltip.Portal>\n                          <Tooltip.Content className=\"bg-cosmic-blue/80 backdrop-blur-md border border-cosmic-silver/20 rounded-md shadow-lg p-2 text-cosmic-silver max-w-[300px]\" side=\"top\">\n                            <p className=\"mb-2 font-bold\">{feature}</p>\n                            <p className=\"mb-2 text-sm\">{getFeatureDescription(feature)}</p>\n                            <div className=\"flex flex-col space-y-1\">\n                              {getFeatureExamples(feature).map((example, i) => (\n                                <p key={i} className=\"text-xs text-cosmic-silver/80\">• {example}</p>\n                              ))}\n                            </div>\n                            <Tooltip.Arrow className=\"fill-cosmic-blue/80\" />\n                          </Tooltip.Content>\n                        </Tooltip.Portal>\n                      </Tooltip.Root>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">\n                    {isFeatureIncluded(feature, COSMICHUB_TIERS.free.features) ? <FaCheck className=\"mx-auto text-green-500\" /> : <FaTimes className=\"mx-auto text-red-500\" />}\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">\n                    {isFeatureIncluded(feature, COSMICHUB_TIERS.premium.features) ? <FaCheck className=\"mx-auto text-green-500\" /> : <FaTimes className=\"mx-auto text-red-500\" />}\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">\n                    {isFeatureIncluded(feature, COSMICHUB_TIERS.elite.features) ? <FaCheck className=\"mx-auto text-green-500\" /> : <FaTimes className=\"mx-auto text-red-500\" />}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nPricingPage.displayName = 'PricingPage';\n\nexport default PricingPage;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/PrivacyPolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ProgressBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SaveChart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":22,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":22,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[589,594],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":27,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":32,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":22,"fix":{"range":[1691,1694],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1691,1694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1691,1694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":59,"endColumn":71},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":59,"column":19,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":59,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1716,1742],"text":"(Boolean((err.response?.data?.detail)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":59,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":59,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":59,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1743,1745],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":60,"column":16,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":60,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in array predicate return type. An explicit empty string check is required.","line":71,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorString","endLine":71,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2017,2018],"text":"v.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2017,2018],"text":"v !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2017,2018],"text":"Boolean(v)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[2013,2013],"text":": boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":76,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":76,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":169,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":184,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":184,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5620,5625],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5620,5625],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5620,5625],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useToast } from './ToastProvider';\nimport axios from \"axios\";\nimport { useAuth } from \"@cosmichub/auth\";\n\nexport default function SaveChart() {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    year: \"\",\n    month: \"\",\n    day: \"\",\n    hour: \"\",\n    minute: \"\",\n    city: \"\",\n  });\n  const [houseSystem, setHouseSystem] = useState(\"P\");\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  if (!user) {\n    navigate(\"/login\");\n    return null;\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    try {\n      const token = await user.getIdToken();\n      await axios.post(\n        `${import.meta.env.VITE_BACKEND_URL}/save-chart`,\n        {\n          year: parseInt(formData.year),\n          month: parseInt(formData.month),\n          day: parseInt(formData.day),\n          hour: parseInt(formData.hour),\n          minute: parseInt(formData.minute),\n          city: formData.city,\n          house_system: houseSystem\n        },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      toast({\n        title: \"Chart Saved\",\n        description: \"Your natal chart has been saved successfully.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n      navigate(\"/saved-charts\");\n    } catch (err: any) {\n      const msg = err.response?.data?.detail || \"Failed to save chart\";\n      setError(msg);\n      toast({\n        title: \"Error\",\n        description: msg,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const isFormValid = () => Object.values(formData).every((v) => v);\n\n  return (\n    <div className=\"max-w-2xl p-6 mx-auto cosmic-card\">\n      <h1 className=\"mb-6 text-3xl font-bold text-center text-cosmic-gold font-cinzel\">Save Natal Chart</h1>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n          <div>\n            <label htmlFor=\"year\" className=\"block mb-2 text-cosmic-gold\">Year *</label>\n            <input\n              id=\"year\"\n              type=\"number\"\n              name=\"year\"\n              value={formData.year}\n              onChange={handleInputChange}\n              placeholder=\"1990\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"month\" className=\"block mb-2 text-cosmic-gold\">Month *</label>\n            <input\n              id=\"month\"\n              type=\"number\"\n              name=\"month\"\n              value={formData.month}\n              onChange={handleInputChange}\n              placeholder=\"1\"\n              min=\"1\"\n              max=\"12\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"day\" className=\"block mb-2 text-cosmic-gold\">Day *</label>\n            <input\n              id=\"day\"\n              type=\"number\"\n              name=\"day\"\n              value={formData.day}\n              onChange={handleInputChange}\n              placeholder=\"1\"\n              min=\"1\"\n              max=\"31\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"hour\" className=\"block mb-2 text-cosmic-gold\">Hour (24h) *</label>\n            <input\n              id=\"hour\"\n              type=\"number\"\n              name=\"hour\"\n              value={formData.hour}\n              onChange={handleInputChange}\n              placeholder=\"12\"\n              min=\"0\"\n              max=\"23\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"minute\" className=\"block mb-2 text-cosmic-gold\">Minute *</label>\n            <input\n              id=\"minute\"\n              type=\"number\"\n              name=\"minute\"\n              value={formData.minute}\n              onChange={handleInputChange}\n              placeholder=\"0\"\n              min=\"0\"\n              max=\"59\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"city\" className=\"block mb-2 text-cosmic-gold\">City *</label>\n            <input\n              id=\"city\"\n              name=\"city\"\n              value={formData.city}\n              onChange={handleInputChange}\n              placeholder=\"New York\"\n              className=\"cosmic-input\"\n              required\n            />\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"houseSystem\" className=\"block mb-2 text-cosmic-gold\">House System *</label>\n          <select\n            id=\"houseSystem\"\n            value={houseSystem}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setHouseSystem(e.target.value)}\n            className=\"cosmic-input\"\n            required\n          >\n            <option value=\"P\">Placidus</option>\n            <option value=\"E\">Equal House</option>\n          </select>\n        </div>\n        <button\n          type=\"submit\"\n          className=\"w-full cosmic-button\"\n          disabled={!isFormValid()}\n        >\n          Save Chart\n        </button>\n        {error && <p className=\"text-center text-red-400\">{error}</p>}\n      </form>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SavedCharts.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":5,"column":8,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":5,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":39,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":69,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":69,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2421,2431],"text":"(chart.name != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2421,2431],"text":"(chart.name ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2421,2431],"text":"(Boolean(chart.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2432,2434],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":69,"column":41,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":69,"endColumn":63,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2436,2458],"text":"((chart.birth_data?.city) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2436,2458],"text":"((chart.birth_data?.city) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2436,2458],"text":"(Boolean((chart.birth_data?.city)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":77,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":77,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3058,3074],"text":"(chart.created_at != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3058,3074],"text":"(chart.created_at ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3058,3074],"text":"(Boolean(chart.created_at))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":83,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":83,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3454,3470],"text":"(chart.birth_time != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3454,3470],"text":"(chart.birth_time ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3454,3470],"text":"(Boolean(chart.birth_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":83,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":83,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3471,3473],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":89,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":89,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3840,3860],"text":"(chart.birth_location != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3840,3860],"text":"(chart.birth_location ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3840,3860],"text":"(Boolean(chart.birth_location))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":89,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":89,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3861,3863],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\n// Fallback date formatter with better error handling\nconst formatDate = (date: string | Date | undefined | null): string => {\n  if (!date) return 'Unknown';\n  try {\n    const d = typeof date === 'string' ? new Date(date) : date;\n    // Check if date is valid\n    if (isNaN(d.getTime())) return 'Invalid Date';\n    return d.toLocaleDateString();\n  } catch {\n    return 'Invalid Date';\n  }\n};\n\n/** Birth data information */\ninterface ChartBirthData {\n  city?: string;\n}\n\n/** Chart metadata for displaying saved charts */\ninterface Chart {\n  /** Unique identifier for the chart */\n  id: string;\n  /** Optional display name for the chart */\n  name: string | null;\n  /** Type of chart (natal, transit, etc.) */\n  chart_type: string | null;\n  /** Birth data containing optional city information */\n  birth_data: ChartBirthData | null;\n  /** Chart creation timestamp */\n  created_at: string | null;\n  /** Birth time for natal chart */\n  birth_time: string | null;\n  /** Birth location for natal chart */\n  birth_location: string | null;\n}\n\nconst SavedCharts = (): JSX.Element => {\n  // Example charts state (replace with real data/fetch)\n  const [charts] = useState<Chart[]>([]);\n\n  return (\n    <div className=\"cosmic-container\">\n      <div className=\"cosmic-section\">\n        <h1 className=\"mb-8 text-center cosmic-heading lg:mb-12 text-2xl font-bold\">\n          Saved Charts\n        </h1>\n        {charts.length === 0 ? (\n          <div className=\"py-16 text-center\">\n            <div className=\"max-w-md p-8 mx-auto cosmic-card\">\n              <p className=\"mb-4 text-lg cosmic-text\">No charts saved yet.</p>\n              <p className=\"text-sm cosmic-text opacity-80\">\n                Calculate your first chart to get started on your astrological journey!\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"responsive-grid\">\n            {charts.map((chart) => (\n              <div \n                key={chart.id} \n                className=\"transition-all duration-300 transform cursor-pointer cosmic-card group hover:scale-105\"\n              >\n                <div className=\"relative p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <h3 className=\"flex-1 text-lg font-semibold text-gray-900 line-clamp-2\">\n                        {chart.name || (chart.birth_data?.city && typeof chart.birth_data.city === 'string' ? `${chart.birth_data.city} Chart` : 'Unnamed Chart')}\n                      </h3>\n                      <span className=\"px-2 py-1 text-xs text-purple-800 bg-purple-100 rounded\">{chart.chart_type}</span>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs text-gray-800 bg-gray-100 rounded\">Date</span>\n                        <span className=\"text-sm font-medium text-gray-700\">\n                          {chart.created_at ? formatDate(chart.created_at) : 'Unknown'}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs text-gray-800 bg-gray-100 rounded\">Time</span>\n                        <span className=\"text-sm font-medium text-gray-700\">\n                          {chart.birth_time || 'Unknown'}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs text-gray-800 bg-gray-100 rounded\">Location</span>\n                        <span className=\"flex-1 text-sm font-medium text-gray-700 truncate\">\n                          {chart.birth_location || 'Unknown'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SavedCharts;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/Signup.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":71,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":71,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2065,2080],"text":"(formData.email.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2065,2080],"text":"(formData.email === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2065,2080],"text":"(!Boolean(formData.email))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":164,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":164,"endColumn":40},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":319,"column":17,"nodeType":"JSXOpeningElement","endLine":319,"endColumn":67}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from './ToastProvider';\nimport { signUp } from '@cosmichub/auth';\nimport { getFirestore, doc, setDoc } from 'firebase/firestore';\n\ninterface FormData {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  timeOfBirth: string;\n  placeOfBirth: string;\n  timezone: string;\n  astrologicalExperience: string;\n  interests: string;\n  notificationPreferences: {\n    dailyHoroscope: boolean;\n    monthlyForecast: boolean;\n    compatibilityInsights: boolean;\n    newFeatures: boolean;\n  };\n  privacyConsent: boolean;\n}\n\nconst Signup: React.FC = React.memo(() => {\n  const [formData, setFormData] = useState<FormData>({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: '',\n    dateOfBirth: '',\n    timeOfBirth: '',\n    placeOfBirth: '',\n    timezone: '',\n    astrologicalExperience: '',\n    interests: '',\n    notificationPreferences: {\n      dailyHoroscope: false,\n      monthlyForecast: false,\n      compatibilityInsights: false,\n      newFeatures: false,\n    },\n    privacyConsent: false,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  }, []);\n\n  const handleCheckboxChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      notificationPreferences: { ...prev.notificationPreferences, [name]: checked },\n      privacyConsent: name === 'privacyConsent' ? checked : prev.privacyConsent,\n    }));\n  }, []);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (!formData.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      toast({\n        title: 'Invalid Email',\n        description: 'Please enter a valid email address',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: 'Invalid Password',\n        description: 'Password must be at least 6 characters',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: 'Password Mismatch',\n        description: 'Passwords do not match',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (!formData.privacyConsent) {\n      toast({\n        title: 'Consent Required',\n        description: 'You must agree to the Privacy Policy and Terms of Service',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const userCredential = await signUp(formData.email, formData.password);\n      const db = getFirestore();\n      await setDoc(doc(db, 'users', userCredential.uid), {\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        dateOfBirth: formData.dateOfBirth,\n        timeOfBirth: formData.timeOfBirth,\n        placeOfBirth: formData.placeOfBirth,\n        timezone: formData.timezone,\n        astrologicalExperience: formData.astrologicalExperience,\n        interests: formData.interests,\n        notificationPreferences: formData.notificationPreferences,\n        createdAt: new Date(),\n      });\n\n      toast({\n        title: 'Account Created',\n        description: 'Welcome to Cosmic Hub!',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      navigate('/chart');\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'An error occurred';\n      toast({\n        title: 'Signup Failed',\n        description: errorMessage,\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [formData, navigate, toast]);\n\n  return (\n    <div className=\"min-h-screen px-4 py-8 bg-gray-50\">\n      <div className=\"max-w-lg p-8 mx-auto border shadow-2xl bg-cosmic-dark/80 backdrop-blur-xl border-cosmic-silver/20 rounded-3xl\">\n        <div className=\"flex flex-col space-y-6\">\n          <h2 className=\"text-3xl font-bold text-center text-cosmic-gold font-cinzel\">Join Cosmic Hub</h2>\n          <p className=\"text-lg text-center text-cosmic-silver\">Create your account to unlock personalized astrology insights.</p>\n\n          <form onSubmit={handleSubmit} aria-label=\"Signup Form\">\n            <div className=\"flex flex-col space-y-6\">\n              <div>\n                <label htmlFor=\"email\" className=\"block mb-2 text-cosmic-gold\">Email <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  placeholder=\"your@email.com\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"password\" className=\"block mb-2 text-cosmic-gold\">Password <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"password\"\n                  type=\"password\"\n                  name=\"password\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"••••••••\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"confirmPassword\" className=\"block mb-2 text-cosmic-gold\">Confirm Password <span aria-hidden=\"true\">*</span></label>\n                <input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  placeholder=\"••••••••\"\n                  className=\"cosmic-input\"\n                  aria-required=\"true\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"firstName\" className=\"block mb-2 text-cosmic-gold\">First Name</label>\n                  <input\n                    id=\"firstName\"\n                    type=\"text\"\n                    name=\"firstName\"\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                    placeholder=\"First Name\"\n                    className=\"cosmic-input\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"lastName\" className=\"block mb-2 text-cosmic-gold\">Last Name</label>\n                  <input\n                    id=\"lastName\"\n                    type=\"text\"\n                    name=\"lastName\"\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                    placeholder=\"Last Name\"\n                    className=\"cosmic-input\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"dateOfBirth\" className=\"block mb-2 text-cosmic-gold\">Date of Birth</label>\n                  <input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    name=\"dateOfBirth\"\n                    value={formData.dateOfBirth}\n                    onChange={handleInputChange}\n                    className=\"cosmic-input\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"timeOfBirth\" className=\"block mb-2 text-cosmic-gold\">Time of Birth</label>\n                  <input\n                    id=\"timeOfBirth\"\n                    type=\"time\"\n                    name=\"timeOfBirth\"\n                    value={formData.timeOfBirth}\n                    onChange={handleInputChange}\n                    className=\"cosmic-input\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"placeOfBirth\" className=\"block mb-2 text-cosmic-gold\">Place of Birth</label>\n                <input\n                  id=\"placeOfBirth\"\n                  type=\"text\"\n                  name=\"placeOfBirth\"\n                  value={formData.placeOfBirth}\n                  onChange={handleInputChange}\n                  placeholder=\"City, State/Country\"\n                  className=\"cosmic-input\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"timezone\" className=\"block mb-2 text-cosmic-gold\">Timezone</label>\n                <select\n                  id=\"timezone\"\n                  name=\"timezone\"\n                  value={formData.timezone}\n                  onChange={handleInputChange}\n                  className=\"cosmic-input\"\n                  aria-label=\"Timezone\"\n                >\n                  <option value=\"\">Select Timezone</option>\n                  <option value=\"America/New_York\">Eastern Time</option>\n                  <option value=\"America/Chicago\">Central Time</option>\n                  <option value=\"America/Denver\">Mountain Time</option>\n                  <option value=\"America/Los_Angeles\">Pacific Time</option>\n                  <option value=\"Europe/London\">GMT</option>\n                  <option value=\"Europe/Paris\">Central European Time</option>\n                  <option value=\"Asia/Tokyo\">Japan Standard Time</option>\n                  <option value=\"Australia/Sydney\">Australian Eastern Time</option>\n                </select>\n              </div>\n              <h3 className=\"mt-4 text-xl font-bold text-cosmic-gold\">Preferences</h3>\n              <div>\n                <label htmlFor=\"astrologicalExperience\" className=\"block mb-2 text-cosmic-gold\">Astrological Experience</label>\n                <select\n                  id=\"astrologicalExperience\"\n                  name=\"astrologicalExperience\"\n                  value={formData.astrologicalExperience}\n                  onChange={handleInputChange}\n                  className=\"cosmic-input\"\n                  aria-label=\"Astrological Experience Level\"\n                >\n                  <option value=\"\">Select your experience level</option>\n                  <option value=\"beginner\">Beginner - New to astrology</option>\n                  <option value=\"intermediate\">Intermediate - Some knowledge</option>\n                  <option value=\"advanced\">Advanced - Deep understanding</option>\n                  <option value=\"professional\">Professional - Practicing astrologer</option>\n                </select>\n              </div>\n              <div>\n                <label htmlFor=\"interests\" className=\"block mb-2 text-cosmic-gold\">Areas of Interest</label>\n                <textarea\n                  id=\"interests\"\n                  name=\"interests\"\n                  value={formData.interests}\n                  onChange={handleInputChange}\n                  placeholder=\"What aspects of astrology interest you most?\"\n                  className=\"cosmic-input\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex flex-col space-y-2\">\n                <label className=\"font-semibold text-cosmic-gold\">Notification Preferences</label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"dailyHoroscope\"\n                    checked={formData.notificationPreferences.dailyHoroscope}\n                    onChange={handleCheckboxChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Daily Horoscope</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"monthlyForecast\"\n                    checked={formData.notificationPreferences.monthlyForecast}\n                    onChange={handleCheckboxChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Monthly Forecast</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"compatibilityInsights\"\n                    checked={formData.notificationPreferences.compatibilityInsights}\n                    onChange={handleCheckboxChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">Compatibility Insights</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"newFeatures\"\n                    checked={formData.notificationPreferences.newFeatures}\n                    onChange={handleCheckboxChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                  />\n                  <span className=\"text-cosmic-silver\">New Features</span>\n                </label>\n              </div>\n              <div>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"privacyConsent\"\n                    checked={formData.privacyConsent}\n                    onChange={handleCheckboxChange}\n                    className=\"w-4 h-4 text-purple-500 rounded\"\n                    aria-required=\"true\"\n                  />\n                  <span className=\"text-sm text-cosmic-silver\">\n                    I agree to the{' '}\n                    <a href=\"/privacy-policy\" className=\"underline text-cosmic-gold hover:text-cosmic-gold/80\">Privacy Policy</a>{' '}\n                    and{' '}\n                    <a href=\"/terms-of-service\" className=\"underline text-cosmic-gold hover:text-cosmic-gold/80\">Terms of Service</a>\n                  </span>\n                </label>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"w-full mt-6 cosmic-button\"\n                disabled={isLoading}\n              >\n                Create Cosmic Account\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nSignup.displayName = 'Signup';\n\nexport default Signup;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SimpleBirthForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/consistent-type-definitions","severity":2,"message":"Use an `interface` instead of a `type`.","line":8,"column":6,"nodeType":"Identifier","messageId":"interfaceOverType","endLine":8,"endColumn":16,"fix":{"range":[341,430],"text":"interface FormFields {\n  birthDate: string;\n  birthTime: string;\n  birthLocation: string;\n}"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormFields' is defined but never used.","line":8,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showSampleButton' is assigned a value but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":48,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":48,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1536,1551],"text":"data.birthDate.length === 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1536,1551],"text":"data.birthDate === \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1536,1551],"text":"!Boolean(data.birthDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":51,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":51,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1620,1635],"text":"data.birthTime.length === 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1620,1635],"text":"data.birthTime === \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1620,1635],"text":"!Boolean(data.birthTime)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":54,"column":10,"nodeType":"CallExpression","messageId":"conditionErrorString","endLine":54,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1704,1730],"text":"data.birthLocation.trim().length === 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1704,1730],"text":"data.birthLocation.trim() === \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1704,1730],"text":"!Boolean(data.birthLocation.trim())"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleFormSubmit' has no 'await' expression.","line":61,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":61,"endColumn":83,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1856,1908],"text":"(e: FormEvent<HTMLFormElement>): void"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":71,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":71,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2162,2180],"text":"formData.birthDate.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2162,2180],"text":"formData.birthDate !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2162,2180],"text":"Boolean(formData.birthDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":115,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":115,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3440,3448],"text":"onSubmit != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":118,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":118,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3513,3523],"text":"(navigateTo != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3513,3523],"text":"(navigateTo ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3513,3523],"text":"(Boolean(navigateTo))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3524,3526],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleDetectLocation' has no 'await' expression.","line":134,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":134,"endColumn":58,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4005,4028],"text":"(): void"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":135,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":135,"endColumn":31},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":145,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":189,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":155,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":155,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":156,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":156,"endColumn":91},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":156,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":156,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4727,4745],"text":"(Boolean((data.address?.city)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":156,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4727,4767],"text":"(data.address?.city ?? data.address?.town)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":156,"column":48,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":156,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4749,4767],"text":"(Boolean((data.address?.town)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":156,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":60},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4768,4770],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":156,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":157,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":157,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":157,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":158,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":158,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":158,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":41},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":161,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":161,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4958,4962],"text":"(Boolean(city))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":161,"column":25,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":161,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4966,4971],"text":"(Boolean(state))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":161,"column":34,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":161,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4975,4982],"text":"(Boolean(country))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":163,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":163,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5073,5077],"text":"(Boolean(city))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":163,"column":32,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":163,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5081,5088],"text":"(Boolean(country))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":165,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":165,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5169,5176],"text":"Boolean(country)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":166,"column":15,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":166,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":169,"column":17,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":169,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[5263,5277],"text":"locationString.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[5263,5277],"text":"locationString !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5263,5277],"text":"Boolean(locationString)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":222,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":222,"endColumn":40},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":233,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":233,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[7512,7538],"text":"(validationErrors.birthDate.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[7512,7538],"text":"(validationErrors.birthDate !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7512,7538],"text":"(Boolean(validationErrors.birthDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":241,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":241,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[7838,7864],"text":"(validationErrors.birthDate.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[7838,7864],"text":"(validationErrors.birthDate !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7838,7864],"text":"(Boolean(validationErrors.birthDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":257,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":257,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[8562,8588],"text":"(validationErrors.birthTime.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[8562,8588],"text":"(validationErrors.birthTime !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8562,8588],"text":"(Boolean(validationErrors.birthTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":265,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":265,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[8888,8914],"text":"(validationErrors.birthTime.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[8888,8914],"text":"(validationErrors.birthTime !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8888,8914],"text":"(Boolean(validationErrors.birthTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":283,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":283,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[9772,9802],"text":"(validationErrors.birthLocation.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[9772,9802],"text":"(validationErrors.birthLocation !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9772,9802],"text":"(Boolean(validationErrors.birthLocation))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":293,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":293,"endColumn":45},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":301,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":301,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[10620,10650],"text":"(validationErrors.birthLocation.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[10620,10650],"text":"(validationErrors.birthLocation !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10620,10650],"text":"(Boolean(validationErrors.birthLocation))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":336,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12249,12308],"text":"• Click &quot;Current\" to use your current location as reference"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12249,12308],"text":"• Click &ldquo;Current\" to use your current location as reference"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12249,12308],"text":"• Click &#34;Current\" to use your current location as reference"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12249,12308],"text":"• Click &rdquo;Current\" to use your current location as reference"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":336,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12249,12308],"text":"• Click \"Current&quot; to use your current location as reference"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12249,12308],"text":"• Click \"Current&ldquo; to use your current location as reference"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12249,12308],"text":"• Click \"Current&#34; to use your current location as reference"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12249,12308],"text":"• Click \"Current&rdquo; to use your current location as reference"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":46,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, type FC, type FormEvent, type ChangeEvent } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Card } from '@cosmichub/ui';\nimport { useBirthData } from '../contexts/BirthDataContext';\nimport type { ChartBirthData } from '@cosmichub/types';\nimport { devConsole } from '../config/environment';\n\ntype FormFields = {\n  birthDate: string;\n  birthTime: string;\n  birthLocation: string;\n};\n\ninterface SimpleBirthFormProps {\n  title?: string;\n  submitButtonText?: string;\n  onSubmit?: (data: ChartBirthData) => void;\n  showSampleButton?: boolean;\n  navigateTo?: string; // Custom navigation path\n}\n\nexport const SimpleBirthForm: FC<SimpleBirthFormProps> = ({\n  title = \"Birth Details\",\n  submitButtonText = \"Calculate Chart\",\n  onSubmit,\n  showSampleButton = false,\n  navigateTo\n}) => {\n  const navigate = useNavigate();\n  const { setBirthData } = useBirthData();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDetectingLocation, setIsDetectingLocation] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  // Form state with empty defaults - users must enter their own data\n  const [formData, setFormData] = useState({\n    birthDate: '',\n    birthTime: '',\n    birthLocation: ''\n  });\n\n  // Sample birth data removed - users must enter their own data\n\n  const validateFormData = (data: typeof formData): Record<string, string> => {\n    const errors: Record<string, string> = {};\n\n    // Required field validation\n    if (!data.birthDate) {\n      errors.birthDate = 'Birth date is required';\n    }\n    if (!data.birthTime) {\n      errors.birthTime = 'Birth time is required';\n    }\n    if (!data.birthLocation.trim()) {\n      errors.birthLocation = 'Birth location is required';\n    }\n    \n    return errors;\n  };\n\n  const handleFormSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {\n    e.preventDefault();\n\n    // Clear previous validation errors\n    setValidationErrors({});\n\n    // Validate form data\n    const errors = validateFormData(formData);\n\n    // Check if date is reasonable (between 1900 and current year + 1)\n    if (formData.birthDate) {\n      const [yearStr] = formData.birthDate.split('-');\n      const selectedYear = parseInt(yearStr, 10);\n      const currentYear = new Date().getFullYear();\n      if (selectedYear < 1900 || selectedYear > currentYear + 1) {\n        errors.birthDate = `Year must be between 1900 and ${currentYear + 1}`;\n      }\n    }\n\n    if (Object.keys(errors).length > 0) {\n      setValidationErrors(errors);\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // Parse the date string explicitly to avoid timezone issues\n      const [yearStr, monthStr, dayStr] = formData.birthDate.split('-');\n      const year = parseInt(yearStr, 10);\n      const month = parseInt(monthStr, 10);\n      const day = parseInt(dayStr, 10);\n\n      const [hours, minutes] = formData.birthTime.split(':').map(Number);\n\n      const chartData: ChartBirthData = {\n        year,\n        month,\n        day,\n        hour: hours,\n        minute: minutes,\n        city: formData.birthLocation.trim(),\n      };\n\n      setBirthData(chartData);\n\n      const storedBirthData = {\n        date: formData.birthDate,\n        time: formData.birthTime,\n        location: formData.birthLocation.trim(),\n      };\n\n      sessionStorage.setItem('birthData', JSON.stringify(storedBirthData));\n\n      if (onSubmit) {\n        onSubmit(chartData);\n      } else {\n        navigate(navigateTo || '/chart-results');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      devConsole.error('Error creating chart:', errorMessage);\n      setValidationErrors({ \n        form: 'Failed to create chart. Please check your inputs and try again.' \n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Sample functionality removed\n\n  // Geolocation functionality\n  const handleDetectLocation = async (): Promise<void> => {\n    if (!navigator.geolocation) {\n      setValidationErrors({\n        birthLocation: 'Geolocation is not supported by this browser.'\n      });\n      return;\n    }\n\n    setIsDetectingLocation(true);\n    \n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          \n          // Use reverse geocoding to get city name\n          const response = await fetch(\n            `https://api.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&addressdetails=1`\n          );\n          \n          if (response.ok) {\n            const data = await response.json();\n            const city = data.address?.city || data.address?.town || data.address?.village;\n            const state = data.address?.state;\n            const country = data.address?.country;\n            \n            let locationString = '';\n            if (city && state && country) {\n              locationString = `${city}, ${state}, ${country}`;\n            } else if (city && country) {\n              locationString = `${city}, ${country}`;\n            } else if (country) {\n              locationString = country;\n            }\n            \n            if (locationString) {\n              setFormData(prev => ({ ...prev, birthLocation: locationString }));\n            } else {\n              setValidationErrors({\n                birthLocation: 'Could not determine location name. Please enter manually.'\n              });\n            }\n          } else {\n            setValidationErrors({\n              birthLocation: 'Could not determine location name. Please enter manually.'\n            });\n          }\n        } catch (error) {\n          devConsole.error('Error with reverse geocoding:', error);\n          setValidationErrors({\n            birthLocation: 'Could not determine location name. Please enter manually.'\n          });\n        } finally {\n          setIsDetectingLocation(false);\n        }\n      },\n      (error) => {\n        devConsole.error('Geolocation error:', error);\n        let message = 'Could not get your location. ';\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            message += 'Please allow location access and try again.';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            message += 'Location information is unavailable.';\n            break;\n          case error.TIMEOUT:\n            message += 'Location request timed out.';\n            break;\n          default:\n            message += 'An unknown error occurred.';\n            break;\n        }\n        setValidationErrors({\n          birthLocation: message\n        });\n        setIsDetectingLocation(false);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 600000 // 10 minutes\n      }\n    );\n  };\n\n  return (\n    <Card title={title}>\n      <form onSubmit={handleFormSubmit} className=\"space-y-4\">\n        {/* Birth Date - Single composite field */}\n        <div>\n          <label htmlFor=\"birth-date\" className=\"block text-cosmic-silver mb-2\">Birth Date</label>\n          <input \n            id=\"birth-date\"\n            name=\"birthDate\"\n            type=\"date\" \n            value={formData.birthDate}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => setFormData(prev => ({...prev, birthDate: e.target.value}))}\n            className={`w-full p-3 rounded bg-cosmic-dark border text-cosmic-silver ${\n              validationErrors.birthDate \n                ? 'border-red-500 focus:border-red-400' \n                : 'border-cosmic-purple focus:border-cosmic-gold'\n            } transition-colors`}\n            required\n            aria-label=\"Select your birth date\"\n            aria-describedby=\"birth-date-error\"\n          />\n          {validationErrors.birthDate && (\n            <p id=\"birth-date-error\" className=\"text-red-400 text-sm mt-1\" aria-live=\"polite\">\n              ⚠️ {validationErrors.birthDate}\n            </p>\n          )}\n        </div>\n        \n        {/* Birth Time - Single composite field */}\n        <div>\n          <label htmlFor=\"birth-time\" className=\"block text-cosmic-silver mb-2\">Birth Time</label>\n          <input \n            id=\"birth-time\"\n            type=\"time\" \n            value={formData.birthTime}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => setFormData(prev => ({...prev, birthTime: e.target.value}))}\n            className={`w-full p-3 rounded bg-cosmic-dark border text-cosmic-silver ${\n              validationErrors.birthTime \n                ? 'border-red-500 focus:border-red-400' \n                : 'border-cosmic-purple focus:border-cosmic-gold'\n            } transition-colors`}\n            required\n            aria-label=\"Select your birth time\"\n            aria-describedby=\"birth-time-error\"\n          />\n          {validationErrors.birthTime && (\n            <p id=\"birth-time-error\" className=\"text-red-400 text-sm mt-1\" aria-live=\"polite\">\n              ⚠️ {validationErrors.birthTime}\n            </p>\n          )}\n        </div>\n        \n        {/* Birth Location - Single composite field */}\n        <div>\n          <label htmlFor=\"birth-location\" className=\"block text-cosmic-silver mb-2\">Birth Location</label>\n          <div className=\"flex gap-2\">\n            <input \n              id=\"birth-location\"\n              type=\"text\" \n              placeholder=\"City, State/Country (e.g., New York, NY or London, UK)\"\n              value={formData.birthLocation}\n              onChange={(e: ChangeEvent<HTMLInputElement>) => setFormData(prev => ({...prev, birthLocation: e.target.value}))}\n              className={`flex-1 p-3 rounded bg-cosmic-dark border text-cosmic-silver ${\n                validationErrors.birthLocation \n                  ? 'border-red-500 focus:border-red-400' \n                  : 'border-cosmic-purple focus:border-cosmic-gold'\n              } transition-colors`}\n              required\n              aria-label=\"Enter your birth location\"\n              aria-describedby=\"birth-location-error\"\n            />\n            <button\n              type=\"button\"\n              onClick={handleDetectLocation}\n              disabled={isDetectingLocation}\n              className=\"px-4 py-3 bg-cosmic-gold/20 hover:bg-cosmic-gold/30 disabled:bg-gray-600 border border-cosmic-gold/30 text-cosmic-gold text-sm rounded transition-colors whitespace-nowrap\"\n              title=\"Use your current location\"\n            >\n              {isDetectingLocation ? '📍...' : '📍 Current'}\n            </button>\n          </div>\n          {validationErrors.birthLocation && (\n            <p id=\"birth-location-error\" className=\"text-red-400 text-sm mt-1\" aria-live=\"polite\">\n              ⚠️ {validationErrors.birthLocation}\n            </p>\n          )}\n          <p className=\"text-cosmic-silver/60 text-sm mt-1\">\n            💡 Timezone will be automatically detected from your location\n          </p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full bg-cosmic-purple hover:bg-cosmic-purple/80 disabled:bg-gray-600 text-white p-3 rounded transition-colors relative overflow-hidden\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center gap-2\">\n                <div className=\"animate-spin text-lg\">🌌</div>\n                <span>Calculating cosmic positions...</span>\n              </div>\n            ) : (\n              submitButtonText\n            )}\n          </button>\n          \n          {/* Quick tips */}\n          <div className=\"mt-4 p-3 bg-cosmic-gold/10 rounded-lg border border-cosmic-gold/20\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-cosmic-gold mt-0.5\">💡</span>\n              <div className=\"text-sm\">\n                <p className=\"text-cosmic-gold font-medium mb-1\">Pro Tips:</p>\n                <ul className=\"text-cosmic-silver/80 space-y-1 text-xs\">\n                  <li>• Use exact birth time from birth certificate for accuracy</li>\n                  <li>• Include state/province for better location matching</li>\n                  <li>• Click \"Current\" to use your current location as reference</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SubscriptionStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isPremium' is assigned a value but never used.","line":19,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useSubscription } from '@cosmichub/auth';\nimport { FaStar, FaCheck } from 'react-icons/fa';\nimport { COSMICHUB_TIERS } from '@cosmichub/subscriptions';\n\nexport const SubscriptionStatus: React.FC = React.memo(() => {\n  const { userTier, isLoading } = useSubscription();\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-cosmic-blue/30 rounded-xl px-4 py-2 border border-cosmic-silver/20 max-w-[320px]\">\n        <p className=\"text-sm text-cosmic-silver\">Loading subscription...</p>\n      </div>\n    );\n  }\n\n  const tierInfo = COSMICHUB_TIERS[userTier];\n  const isElite = userTier === 'elite';\n  const isPremium = userTier === 'premium';\n\n  return (\n    <div className=\"bg-cosmic-blue/30 rounded-xl px-4 py-2 border border-cosmic-silver/20 max-w-[320px]\">\n      <div className=\"flex items-center justify-between space-x-3\">\n        <div className=\"flex items-center space-x-2\">\n          {isElite ? <FaStar className=\"text-gold-400\" /> : <FaCheck className=\"text-cosmic-purple\" />}\n          <p className=\"text-sm font-semibold text-cosmic-silver\">{tierInfo.name}</p>\n        </div>\n        <span className=\"px-2 py-1 text-xs uppercase rounded bg-cosmic-purple/20 text-cosmic-purple\">\n          {userTier.toUpperCase()}\n        </span>\n      </div>\n    </div>\n  );\n});\n\nSubscriptionStatus.displayName = 'SubscriptionStatus';\n\nexport default SubscriptionStatus;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/SynastryAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-definitions","severity":2,"message":"Use an `interface` instead of a `type`.","line":6,"column":6,"nodeType":"Identifier","messageId":"interfaceOverType","endLine":6,"endColumn":17,"fix":{"range":[302,372],"text":"interface ApiResponse<T> { data: T; success: boolean; message?: string }"}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":37,"column":22,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":37,"endColumn":113,"fix":{"range":[1417,1448],"text":""}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":84,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":84,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2981,2996],"text":"(synastryResult == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":87,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":87,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":98,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":98,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3465,3470],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3465,3470],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3465,3470],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":107,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":107,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3769,3784],"text":"(synastryResult == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":115,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":115,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4112,4126],"text":"(synastryResult != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":151,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":151,"endColumn":48}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport FeatureGuard from '../FeatureGuard';\nimport { apiClient } from '../../services/api';\n// Lightweight ApiResponse type (mirrors packages/config) to avoid cross-package path resolution issues here\ntype ApiResponse<T> = { data: T; success: boolean; message?: string };\nimport {\n  CompatibilityScore,\n  KeyAspects,\n  HouseOverlays,\n  CompositeChart,\n  RelationshipSummary\n} from './SynastryComponents';\nimport type { SynastryAnalysisProps, SynastryResult } from './types';\nimport { synastryRequestSchema } from '../../utils/validation';\n\nexport const SynastryAnalysis = React.memo<SynastryAnalysisProps>(({\n  person1,\n  person2,\n  person1Name = \"Person 1\",\n  person2Name = \"Person 2\"\n}) => {\n  const [synastryResult, setSynastryResult] = useState<SynastryResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const cardBg = 'cosmic-blue';\n  const borderColor = 'cosmic-silver/30';\n\n  const calculateSynastry = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const parsed = synastryRequestSchema.parse({ person1, person2 });\n      // Unified endpoint: backend router mounted at /api/synastry, path /calculate-synastry\n      const result = await apiClient.post('/synastry/calculate-synastry', parsed) as ApiResponse<SynastryResult>;\n      setSynastryResult(result.data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    } finally {\n      setLoading(false);\n    }\n  }, [person1, person2]);\n\n  const getAspectColor = useCallback((aspect: string) => {\n    switch (aspect) {\n      case 'conjunction':\n      case 'trine':\n      case 'sextile':\n        return 'green-500';\n      case 'square':\n      case 'opposition':\n        return 'orange-500';\n      default:\n        return 'gray-500';\n    }\n  }, []);\n\n  const formatPlanetName = useCallback((planet: string) => {\n    return planet.charAt(0).toUpperCase() + planet.slice(1);\n  }, []);\n\n  return (\n    <FeatureGuard requiredTier=\"premium\" feature=\"synastry_analysis\">\n      <div className=\"py-8 mx-auto max-w-7xl\">\n        <div className=\"flex flex-col space-y-6\">\n          <div className=\"text-center\">\n            <h2 className=\"mb-4 text-xl font-bold text-purple-600\">\n              💕 Relationship Compatibility Analysis\n            </h2>\n            <p className=\"text-lg text-white/80\">\n              Synastry Comparison: {person1Name} & {person2Name}\n            </p>\n          </div>\n\n          <div className={`cosmic-card bg-${cardBg} border border-${borderColor}`}>\n            <div className=\"p-4\">\n              <p className=\"mb-4 text-cosmic-silver\">\n                Synastry compares two birth charts to reveal relationship dynamics, compatibility patterns, \n                and growth opportunities between partners.\n              </p>\n\n        {!synastryResult && (\n                <button\n                  className=\"cosmic-button\"\n                  onClick={calculateSynastry}\n                  disabled={loading}\n                >\n          {loading ? 'Calculating...' : 'Calculate Compatibility'}\n                  <FaInfoCircle className=\"mr-2\" />\n          <span className=\"sr-only\">Start synastry compatibility calculation</span>\n                </button>\n              )}\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"p-4 border border-red-500 rounded-md bg-red-900/50\">\n              <div className=\"flex space-x-4\">\n                <span className=\"text-xl text-red-500\">⚠️</span>\n                {error}\n              </div>\n            </div>\n          )}\n\n          {loading && !synastryResult && (\n            <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2 animate-pulse\" aria-hidden>\n              {Array.from({length:4}).map((_,i)=>(\n                <div key={i} className=\"h-40 border rounded cosmic-card border-cosmic-silver/30 bg-gray-800/40\" />\n              ))}\n            </div>\n          )}\n\n          {synastryResult && !loading && (\n            <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\n              {/* Overall Compatibility Score */}\n              <CompatibilityScore synastryResult={synastryResult} />\n\n              {/* Key Relationship Aspects */}\n              <KeyAspects \n                synastryResult={synastryResult}\n                getAspectColor={getAspectColor}\n                formatPlanetName={formatPlanetName}\n              />\n\n              {/* House Overlays & Composite */}\n              <div className=\"flex flex-col space-y-4\">\n                <HouseOverlays \n                  synastryResult={synastryResult}\n                  formatPlanetName={formatPlanetName}\n                />\n\n                <CompositeChart synastryResult={synastryResult} />\n              </div>\n\n              {/* Relationship Summary */}\n              <RelationshipSummary synastryResult={synastryResult} />\n\n              {/* Action Buttons */}\n              <div className=\"col-span-1 lg:col-span-2\">\n                <div className=\"flex justify-center space-x-4\">\n                  <button\n                    className=\"px-4 py-2 text-blue-500 transition-colors border border-blue-500 rounded bg-blue-500/20 hover:bg-blue-500/30\"\n                    onClick={() => window.location.href = '/transits'}\n                  >\n                    View Relationship Transits\n                  </button>\n                  <button\n                    className=\"px-4 py-2 text-purple-500 transition-colors border border-purple-500 rounded bg-purple-500/20 hover:bg-purple-500/30\"\n                    onClick={calculateSynastry}\n                    disabled={loading}\n                  >\n                    Recalculate\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </FeatureGuard>\n  );\n});\n\nSynastryAnalysis.displayName = 'SynastryAnalysis';\n\nexport default SynastryAnalysis;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/SynastryComponents.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":89,"column":8,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":89,"endColumn":55},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":107,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":107,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3906,3948],"text":"(synastryResult.compatibility_analysis.meta != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":148,"column":41,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":148,"endColumn":90,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[5838,5887],"text":"(ASPECT_COLOR_CLASS[getAspectColor(aspect.aspect)].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[5838,5887],"text":"(ASPECT_COLOR_CLASS[getAspectColor(aspect.aspect)] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5838,5887],"text":"(Boolean(ASPECT_COLOR_CLASS[getAspectColor(aspect.aspect)]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport './SynastryComponents.css';\nimport { FaStar, FaChevronDown } from 'react-icons/fa';\nimport * as Accordion from '@radix-ui/react-accordion';\nimport type { SynastryResult } from './types';\n\nconst SCORE_COLOR_MAP: Record<'excellent'|'good'|'moderate'|'low', string> = {\n  excellent: 'text-green-500',\n  good: 'text-blue-500',\n  moderate: 'text-yellow-500',\n  low: 'text-red-500'\n};\n\nconst FILL_COLOR_MAP: Record<'excellent'|'good'|'moderate'|'low', string> = {\n  excellent: 'bg-green-500',\n  good: 'bg-blue-500',\n  moderate: 'bg-yellow-500',\n  low: 'bg-red-500'\n};\n\n// Safe aspect color classes (avoid dynamic Tailwind construction & ensure purge safety)\nconst ASPECT_COLOR_CLASS: Record<string,string> = {\n  'green-500': 'bg-green-500',\n  'orange-500': 'bg-orange-500',\n  'gray-500': 'bg-gray-500'\n};\n\ninterface ProgressBarProps { score: number; tier: 'excellent'|'good'|'moderate'|'low'; }\n\nexport const ProgressBar: React.FC<ProgressBarProps> = React.memo(({ score, tier }) => {\n  const clamped = Math.min(Math.max(score, 0), 100);\n  const step = Math.round(clamped / 5) * 5;\n  const stepClass = `w-step-${step}`;\n  return (\n    <div className=\"progress-bar\">\n  <div className={`progress-fill ${stepClass} ${FILL_COLOR_MAP[tier]}`} />\n    </div>\n  );\n});\nProgressBar.displayName = \"ProgressBar\";\n\ninterface StarRatingProps {\n  score: number;\n}\n\nexport const StarRating: React.FC<StarRatingProps> = React.memo(({ score }) => {\n  const stars = Math.round(score / 20);\n  return (\n    <div className=\"flex\">\n      {Array.from({ length: 5 }).map((_, i) => (\n        <FaStar \n          key={i} \n          className={`${i < stars ? 'text-yellow-400' : 'text-gray-300'} text-xl`}\n        />\n      ))}\n    </div>\n  );\n});\nStarRating.displayName = \"StarRating\";\n\ninterface CompatibilityScoreProps { synastryResult: SynastryResult; }\n\nexport const CompatibilityScore: React.FC<CompatibilityScoreProps> = React.memo(({ synastryResult }) => {\n  const tierFor = (score:number): 'excellent'|'good'|'moderate'|'low' => {\n    if (score >= 80) return 'excellent';\n    if (score >= 60) return 'good';\n    if (score >= 40) return 'moderate';\n    return 'low';\n  };\n  const tier = tierFor(synastryResult.compatibility_analysis.overall_score);\n  const colorClass = SCORE_COLOR_MAP[tier];\n  return (\n  <div className=\"col-span-1 border lg:col-span-2 cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <h3 className=\"mb-4 font-bold text-md text-cosmic-silver\">Overall Compatibility Score</h3>\n      \n      <div className=\"flex items-center mb-4 space-x-4\">\n        <StarRating score={synastryResult.compatibility_analysis.overall_score} />\n        <span className={`text-3xl font-bold ${colorClass}`}>\n          {synastryResult.compatibility_analysis.overall_score}/100\n        </span>\n      </div>\n      \n      <p className=\"mb-6 text-cosmic-silver\">\n        {synastryResult.compatibility_analysis.interpretation}\n      </p>\n\n      {/* Compatibility Breakdown */}\n      {synastryResult.compatibility_analysis.breakdown && (\n        <div>\n          <h4 className=\"mb-4 text-sm font-bold text-cosmic-silver\">Compatibility Areas</h4>\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {Object.entries(synastryResult.compatibility_analysis.breakdown).map(([area, score]) => {\n              const t = tierFor(score);\n              return (\n              <div key={area} className=\"p-4 border rounded-md border-cosmic-silver/30\">\n                <p className=\"mb-2 text-sm font-semibold capitalize text-cosmic-silver\">\n                  {area.charAt(0).toUpperCase() + area.slice(1)}\n                </p>\n                <ProgressBar score={score} tier={t} />\n                <p className=\"text-sm text-white/80\">\n                  {score.toFixed(1)}%\n                </p>\n              </div>\n            );})}\n          </div>\n          {synastryResult.compatibility_analysis.meta && (\n            <div className=\"mt-6 text-xs text-white/60 space-y-1\">\n              <p className=\"font-semibold text-cosmic-silver\">Scoring Meta</p>\n              <p>Overlay Bonus Applied: {synastryResult.compatibility_analysis.meta.overlay_bonus_applied}</p>\n              <p>Aspect Counts: {Object.entries(synastryResult.compatibility_analysis.meta.aspect_type_counts).map(([k,v])=>`${k}:${v}`).join(', ')}</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  </div>\n);});\nCompatibilityScore.displayName = \"CompatibilityScore\";\n\ninterface KeyAspectsProps {\n  synastryResult: SynastryResult;\n  getAspectColor: (aspect: string) => string;\n  formatPlanetName: (planet: string) => string;\n}\n\nexport const KeyAspects: React.FC<KeyAspectsProps> = React.memo(({ \n  synastryResult, \n  getAspectColor, \n  formatPlanetName \n}) => (\n  <div className=\"border cosmic-card border-cosmic-silver/30 h-fit\">\n    <div className=\"p-4\">\n      <Accordion.Root type=\"single\" collapsible defaultValue=\"0\">\n        <Accordion.Item value=\"0\">\n          <Accordion.Trigger className=\"flex justify-between w-full\">\n            <span className=\"text-sm font-bold\">Key Relationship Aspects</span>\n            <FaChevronDown className=\"text-cosmic-silver\" />\n          </Accordion.Trigger>\n          <Accordion.Content className=\"pb-4\">\n            <div className=\"flex flex-col space-y-3\">\n              {synastryResult.interaspects.slice(0, 8).map((aspect, index) => (\n                <div key={index} className=\"p-3 border rounded-md border-cosmic-silver/30\">\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-sm font-semibold text-cosmic-silver\">\n                      {formatPlanetName(aspect.person1_planet)} {aspect.aspect} {formatPlanetName(aspect.person2_planet)}\n                    </span>\n                    <span className={`${ASPECT_COLOR_CLASS[getAspectColor(aspect.aspect)] || 'bg-gray-500'} text-white px-2 py-1 rounded text-sm`}>\n                      {aspect.aspect}\n                    </span>\n                  </div>\n                  <p className=\"mb-1 text-xs text-white/80\">\n                    Orb: {aspect.orb.toFixed(2)}° | Strength: {aspect.strength}\n                  </p>\n                  <p className=\"text-sm text-cosmic-silver\">\n                    {aspect.interpretation}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </Accordion.Content>\n        </Accordion.Item>\n      </Accordion.Root>\n    </div>\n  </div>\n));\nKeyAspects.displayName = \"KeyAspects\";\n\ninterface HouseOverlaysProps {\n  synastryResult: SynastryResult;\n  formatPlanetName: (planet: string) => string;\n}\n\nexport const HouseOverlays: React.FC<HouseOverlaysProps> = React.memo(({ \n  synastryResult, \n  formatPlanetName \n}) => (\n  <div className=\"border cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <Accordion.Root type=\"single\" collapsible>\n        <Accordion.Item value=\"0\">\n          <Accordion.Trigger className=\"flex justify-between w-full\">\n            <span className=\"text-sm font-bold\">House Overlays</span>\n            <FaChevronDown className=\"text-cosmic-silver\" />\n          </Accordion.Trigger>\n          <Accordion.Content className=\"pb-4\">\n            <div className=\"flex flex-col space-y-3\">\n              {synastryResult.house_overlays.slice(0, 6).map((overlay, index) => (\n                <div key={index} className=\"p-3 rounded-md bg-gray-50\">\n                  <p className=\"mb-1 text-sm font-semibold text-cosmic-silver\">\n                    {formatPlanetName(overlay.person1_planet)} in {overlay.person2_house}th House\n                  </p>\n                  <p className=\"text-sm text-white/80\">\n                    {overlay.interpretation}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </Accordion.Content>\n        </Accordion.Item>\n      </Accordion.Root>\n    </div>\n  </div>\n));\nHouseOverlays.displayName = \"HouseOverlays\";\n\ninterface CompositeChartProps {\n  synastryResult: SynastryResult;\n}\n\nexport const CompositeChart: React.FC<CompositeChartProps> = React.memo(({ synastryResult }) => (\n  <div className=\"border cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <Accordion.Root type=\"single\" collapsible>\n        <Accordion.Item value=\"0\">\n          <Accordion.Trigger className=\"flex justify-between w-full\">\n            <span className=\"text-sm font-bold\">Composite Chart</span>\n            <FaChevronDown className=\"text-cosmic-silver\" />\n          </Accordion.Trigger>\n          <Accordion.Content className=\"pb-4\">\n            <p className=\"mb-2 font-semibold text-cosmic-silver\">Relationship Purpose:</p>\n            <p className=\"mb-4 text-cosmic-silver\">\n              {synastryResult.composite_chart.relationship_purpose}\n            </p>\n            \n            <p className=\"text-sm text-white/80\">\n              Composite Sun: {synastryResult.composite_chart.midpoint_sun.toFixed(2)}°\n              <br />\n              Composite Moon: {synastryResult.composite_chart.midpoint_moon.toFixed(2)}°\n            </p>\n          </Accordion.Content>\n        </Accordion.Item>\n      </Accordion.Root>\n    </div>\n  </div>\n));\nCompositeChart.displayName = \"CompositeChart\";\n\ninterface RelationshipSummaryProps {\n  synastryResult: SynastryResult;\n}\n\nexport const RelationshipSummary: React.FC<RelationshipSummaryProps> = React.memo(({ synastryResult }) => (\n  <div className=\"col-span-1 border lg:col-span-2 cosmic-card border-cosmic-silver/30\">\n    <div className=\"p-4\">\n      <h3 className=\"mb-4 font-bold text-md text-cosmic-silver\">Relationship Summary</h3>\n      \n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n        <div className=\"flex flex-col space-y-4\">\n          <div>\n            <p className=\"mb-2 font-semibold text-green-600\">\n              🌟 Key Themes\n            </p>\n            <div className=\"flex flex-wrap space-x-2\">\n              {synastryResult.summary.key_themes.map((theme, index) => (\n                <span key={index} className=\"px-2 py-1 text-sm text-green-500 rounded bg-green-500/20\">\n                  {theme}\n                </span>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <p className=\"mb-2 font-semibold text-blue-600\">\n              💪 Strengths\n            </p>\n            <div className=\"flex flex-col space-y-1\">\n              {synastryResult.summary.strengths.map((strength, index) => (\n                <p key={index} className=\"text-sm text-cosmic-silver\">\n                  • {strength}\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col space-y-4\">\n          <div>\n            <p className=\"mb-2 font-semibold text-orange-600\">\n              🔄 Growth Areas\n            </p>\n            <div className=\"flex flex-col space-y-1\">\n              {synastryResult.summary.challenges.map((challenge, index) => (\n                <p key={index} className=\"text-sm text-cosmic-silver\">\n                  • {challenge}\n                </p>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <p className=\"mb-2 font-semibold text-purple-600\">\n              💡 Relationship Advice\n            </p>\n            <div className=\"flex flex-col space-y-1\">\n              {synastryResult.summary.advice.map((advice, index) => (\n                <p key={index} className=\"text-sm text-cosmic-silver\">\n                  • {advice}\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n));\nRelationshipSummary.displayName = \"RelationshipSummary\";\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/SynastryAnalysis/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TermsOfService.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/ToastProvider.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":2,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext } from 'react';\nimport type { ReactNode } from 'react';\nimport { devConsole } from '../config/environment';\n\nexport interface Toast {\n  id: string;\n  title?: string;\n  description: string;\n  status: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  isClosable?: boolean;\n}\n\ninterface ToastContextType {\n  toast: (options: Omit<Toast, 'id'>) => void;\n  closeToast: (id: string) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const useToast = (): ToastContextType => {\n  const context = useContext(ToastContext);\n  if (context === undefined) {\n    // Return a mock implementation to prevent compilation errors\n    return {\n      toast: () => devConsole.log('Toast provider not available'),\n      closeToast: () => devConsole.log('Toast provider not available')\n    };\n  }\n  return context;\n};\n\n// Simple provider implementation\nexport const ToastProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const toast = () => {};\n  const closeToast = () => {};\n  \n  return (\n    <ToastContext.Provider value={{ toast, closeToast }}>\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/DateRangeForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/EphemerisChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatPlanetPosition' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":23},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":35,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[951,961],"text":"&apos;\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[951,961],"text":"&lsquo;\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[951,961],"text":"&#39;\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[951,961],"text":"&rsquo;\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":61,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":61,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1582,1587],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":95,"column":15,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":95,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":109,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":109,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3021,3026],"text":"error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":124,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":124,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":134,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":134,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3827,3837],"text":"positions == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Ephemeris chart component for displaying planetary positions.\n * \n * This component uses the ephemeris service to fetch and display\n * real-time planetary positions for astrological analysis.\n */\n\nimport React from 'react';\nimport {\n  useAllPlanetaryPositions,\n  useEphemerisHealth,\n  formatPlanetPosition,\n  getAstrologicalSign,\n  type PlanetName,\n} from '../../services/ephemeris';\n\ninterface EphemerisChartProps {\n  date: Date;\n}\n\ninterface PlanetRowProps {\n  planet: PlanetName;\n  position: number;\n  retrograde: boolean;\n}\n\nconst PlanetRow: React.FC<PlanetRowProps> = ({ planet, position, retrograde }) => {\n  const sign = getAstrologicalSign(position);\n  \n  return (\n    <tr className=\"border-b border-gray-200 hover:bg-gray-50\">\n      <td className=\"py-2 px-3 font-medium capitalize\">{planet}</td>\n      <td className=\"py-2 px-3\">{sign.sign}</td>\n      <td className=\"py-2 px-3 text-right\">\n        {sign.signDegrees}° {sign.signMinutes}'\n        {retrograde && (\n          <span className=\"ml-1 text-red-500\" title=\"Retrograde\">\n            ℞\n          </span>\n        )}\n      </td>\n      <td className=\"py-2 px-3 text-right text-sm text-gray-600\">\n        {position.toFixed(2)}°\n      </td>\n    </tr>\n  );\n};\n\nconst HealthIndicator: React.FC = () => {\n  const { data: health, isLoading, error } = useEphemerisHealth();\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex items-center text-sm text-gray-500\">\n        <div className=\"w-2 h-2 bg-yellow-400 rounded-full mr-2 animate-pulse\"></div>\n        Checking service...\n      </div>\n    );\n  }\n  \n  if (error || health?.status !== 'healthy') {\n    return (\n      <div className=\"flex items-center text-sm text-red-600\">\n        <div className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n        Service unavailable\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"flex items-center text-sm text-green-600\">\n      <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n      Service healthy\n    </div>\n  );\n};\n\nexport const EphemerisChart: React.FC<EphemerisChartProps> = ({ date }) => {\n  const {\n    data: positions,\n    isLoading,\n    error,\n    refetch,\n  } = useAllPlanetaryPositions(date);\n  \n  if (isLoading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Planetary Positions</h3>\n          <HealthIndicator />\n        </div>\n        <div className=\"animate-pulse\">\n          <div className=\"space-y-3\">\n            {[...Array(15)].map((_, i) => (\n              <div key={i} className=\"flex space-x-4\">\n                <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-12\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Planetary Positions</h3>\n          <HealthIndicator />\n        </div>\n        <div className=\"text-center py-8\">\n          <div className=\"text-red-600 mb-2\">\n            Failed to load planetary positions\n          </div>\n          <div className=\"text-gray-600 text-sm mb-4\">\n            {error instanceof Error ? error.message : 'Unknown error occurred'}\n          </div>\n          <button\n            onClick={() => refetch()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!positions) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Planetary Positions</h3>\n          <HealthIndicator />\n        </div>\n        <div className=\"text-center py-8 text-gray-600\">\n          No planetary position data available\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold\">Planetary Positions</h3>\n          <HealthIndicator />\n        </div>\n        <p className=\"text-sm text-gray-600 mt-1\">\n          {date.toLocaleDateString('en-US', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })}\n        </p>\n      </div>\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"py-3 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Planet\n              </th>\n              <th className=\"py-3 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Sign\n              </th>\n              <th className=\"py-3 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Position\n              </th>\n              <th className=\"py-3 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Degree\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {Object.entries(positions).map(([planet, position]) => (\n              <PlanetRow\n                key={planet}\n                planet={planet as PlanetName}\n                position={position.position}\n                retrograde={position.retrograde}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/EphemerisChartWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/LunarCyclesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TabLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":61,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":61,"endColumn":52},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":62,"column":30,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":62,"endColumn":54}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense } from 'react';\nimport FeatureGuard from '../FeatureGuard';\nimport TransitTabs from './TransitsTab';  // Note: TransitTabs component is in TransitsTab.tsx file\nimport { TabLoader } from './TabLoader';\nimport { useTransitAnalysis } from './useTransitAnalysis';\nimport type { TransitBirthData } from './types';\n\nexport interface TransitAnalysisProps {\n  birthData: TransitBirthData;\n}\n\nconst TransitAnalysis: React.FC<TransitAnalysisProps> = ({ birthData }) => {\n  const { \n    activeTab, \n    setActiveTab, \n    transitResults, \n    lunarTransits, \n    loading, \n    loadingLunar, \n    error,\n    dateRange, \n    setDateRange, \n    calculateTransits, \n    calculateLunarTransits,\n    clearError,\n    isValidDateRange,\n    transitSummary,\n    lunarSummary,\n    hasResults\n  } = useTransitAnalysis(birthData);\n\n  return (\n    <FeatureGuard feature=\"transitAnalysis\" requiredTier=\"premium\">\n      <div className=\"max-w-6xl p-6 mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"mb-4 text-3xl font-bold text-cosmic-gold\">Transit Analysis</h1>\n          <p className=\"leading-relaxed text-cosmic-silver\">\n            Explore how current planetary movements influence your natal chart. \n            Transit analysis reveals timing for opportunities, challenges, and personal growth.\n          </p>\n          {!isValidDateRange && (\n            <div className=\"mt-4 p-3 bg-yellow-900/20 border border-yellow-500/30 rounded-lg\">\n              <p className=\"text-yellow-400 text-sm\">\n                Please select a valid date range (max 1 year) to calculate transits.\n              </p>\n            </div>\n          )}\n        </div>\n        \n        <Suspense fallback={<TabLoader />}>\n          <TransitTabs\n            activeTab={activeTab}\n            setActiveTab={setActiveTab}\n            transitResults={transitResults}\n            lunarTransits={lunarTransits}\n            loading={loading}\n            loadingLunar={loadingLunar}\n            error={error}\n            dateRange={dateRange}\n            setDateRange={setDateRange}\n            onCalculateTransits={calculateTransits}\n            onCalculateLunar={calculateLunarTransits}\n            onClearError={clearError}\n            transitSummary={transitSummary}\n            lunarSummary={lunarSummary}\n          />\n        </Suspense>\n        \n        {hasResults && (\n          <div className=\"mt-8 p-4 bg-cosmic-deep-purple/20 rounded-lg border border-cosmic-purple/20\">\n            <h3 className=\"text-lg font-semibold text-cosmic-gold mb-2\">\n              Analysis Complete\n            </h3>\n            <p className=\"text-cosmic-silver text-sm\">\n              Your transit analysis is ready. Use the tabs above to explore planetary transits \n              and lunar cycles for your selected date range. Results are cached for faster subsequent access.\n            </p>\n          </div>\n        )}\n      </div>\n    </FeatureGuard>\n  );\n};\n\nexport default TransitAnalysis;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/TransitsTab.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":32,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1148,1153],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1148,1153],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1148,1153],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":100,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":100,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4421,4440],"text":"(transit.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4421,4440],"text":"(transit.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4421,4440],"text":"(Boolean(transit.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":140,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":140,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5675,5680],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5675,5680],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5675,5680],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":205,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":205,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8818,8835],"text":"(lunar.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8818,8835],"text":"(lunar.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8818,8835],"text":"(Boolean(lunar.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { FaCalendarAlt, FaClock, FaSpinner, FaExclamationTriangle } from 'react-icons/fa';\nimport DateRangeForm from './DateRangeForm';\nimport type { TransitResult, LunarTransitResult, DateRange } from './types';\n\n// Enhanced components with better UI and error handling\nconst TransitsTabContent: React.FC<{\n  transitResults: TransitResult[];\n  loading: boolean;\n  error: string | null;\n  dateRange: DateRange;\n  onCalculateTransits: () => void;\n  onClearError: () => void;\n  transitSummary: {\n    total: number;\n    major: number;\n    challenging: number;\n    harmonious: number;\n    intensity: number;\n  };\n}> = ({ transitResults, loading, error, dateRange, onCalculateTransits, onClearError, transitSummary }) => (\n  <div className=\"cosmic-card\">\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-cosmic-gold\">Planet Transits</h3>\n        <span className=\"text-sm text-cosmic-silver\">\n          {dateRange.startDate} to {dateRange.endDate}\n        </span>\n      </div>\n      \n      {error && (\n        <div className=\"mb-4 p-3 bg-red-900/20 border border-red-500/30 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-red-400\">\n            <FaExclamationTriangle className=\"flex-shrink-0\" />\n            <span className=\"text-sm\">{error}</span>\n            <button \n              onClick={onClearError}\n              className=\"ml-auto text-xs hover:text-red-300 transition-colors\"\n            >\n              Dismiss\n            </button>\n          </div>\n        </div>\n      )}\n      \n      <button\n        onClick={onCalculateTransits}\n        disabled={loading}\n        className=\"mb-4 cosmic-button flex items-center gap-2\"\n      >\n        {loading && <FaSpinner className=\"animate-spin\" />}\n        {loading ? 'Calculating...' : 'Calculate Transits'}\n      </button>\n      \n      {transitResults.length > 0 && (\n        <div className=\"space-y-4\">\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 p-4 bg-cosmic-deep-purple/30 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-gold\">{transitSummary.total}</div>\n              <div className=\"text-xs text-cosmic-silver\">Total Aspects</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-green-400\">{transitSummary.harmonious}</div>\n              <div className=\"text-xs text-cosmic-silver\">Harmonious</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-red-400\">{transitSummary.challenging}</div>\n              <div className=\"text-xs text-cosmic-silver\">Challenging</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-purple\">{transitSummary.intensity}%</div>\n              <div className=\"text-xs text-cosmic-silver\">Avg Intensity</div>\n            </div>\n          </div>\n          \n          {/* Transit Results */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {transitResults.slice(0, 10).map((transit) => (\n              <div key={transit.id} className=\"p-3 bg-cosmic-deep-purple/20 rounded-lg border border-cosmic-purple/20\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-cosmic-gold\">\n                    {transit.planet} {transit.aspect} {transit.natal_planet}\n                  </span>\n                  <span className=\"text-xs text-cosmic-silver\">{transit.date}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className={`px-2 py-1 rounded text-xs ${\n                    transit.energy === 'harmonious' ? 'bg-green-900/30 text-green-400' :\n                    transit.energy === 'challenging' ? 'bg-red-900/30 text-red-400' :\n                    'bg-cosmic-purple/30 text-cosmic-silver'\n                  }`}>\n                    {transit.energy}\n                  </span>\n                  <span className=\"text-cosmic-silver\">\n                    Intensity: {Math.round(transit.intensity)}%\n                  </span>\n                </div>\n                {transit.description && (\n                  <p className=\"text-xs text-cosmic-silver mt-2\">{transit.description}</p>\n                )}\n              </div>\n            ))}\n            {transitResults.length > 10 && (\n              <div className=\"text-center text-cosmic-silver text-sm py-2\">\n                Showing first 10 of {transitResults.length} transits\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\nconst LunarCyclesTabContent: React.FC<{\n  lunarTransits: LunarTransitResult[];\n  loadingLunar: boolean;\n  error: string | null;\n  dateRange: DateRange;\n  onCalculateLunar: () => void;\n  onClearError: () => void;\n  lunarSummary: {\n    total: number;\n    newMoons: number;\n    fullMoons: number;\n    averageIntensity: number;\n  };\n}> = ({ lunarTransits, loadingLunar, error, dateRange, onCalculateLunar, onClearError, lunarSummary }) => (\n  <div className=\"cosmic-card\">\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-cosmic-gold\">Lunar Cycles</h3>\n        <span className=\"text-sm text-cosmic-silver\">\n          {dateRange.startDate} to {dateRange.endDate}\n        </span>\n      </div>\n      \n      {error && (\n        <div className=\"mb-4 p-3 bg-red-900/20 border border-red-500/30 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-red-400\">\n            <FaExclamationTriangle className=\"flex-shrink-0\" />\n            <span className=\"text-sm\">{error}</span>\n            <button \n              onClick={onClearError}\n              className=\"ml-auto text-xs hover:text-red-300 transition-colors\"\n            >\n              Dismiss\n            </button>\n          </div>\n        </div>\n      )}\n      \n      <button\n        onClick={onCalculateLunar}\n        disabled={loadingLunar}\n        className=\"mb-4 cosmic-button flex items-center gap-2\"\n      >\n        {loadingLunar && <FaSpinner className=\"animate-spin\" />}\n        {loadingLunar ? 'Calculating...' : 'Calculate Lunar Cycles'}\n      </button>\n      \n      {lunarTransits.length > 0 && (\n        <div className=\"space-y-4\">\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 p-4 bg-cosmic-deep-purple/30 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-gold\">{lunarSummary.total}</div>\n              <div className=\"text-xs text-cosmic-silver\">Total Days</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-blue-400\">{lunarSummary.newMoons}</div>\n              <div className=\"text-xs text-cosmic-silver\">New Moons</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-yellow-400\">{lunarSummary.fullMoons}</div>\n              <div className=\"text-xs text-cosmic-silver\">Full Moons</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-cosmic-purple\">{lunarSummary.averageIntensity}%</div>\n              <div className=\"text-xs text-cosmic-silver\">Avg Intensity</div>\n            </div>\n          </div>\n          \n          {/* Lunar Transit Results */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {lunarTransits.slice(0, 10).map((lunar, index) => (\n              <div key={`${lunar.date}-${index}`} className=\"p-3 bg-cosmic-deep-purple/20 rounded-lg border border-cosmic-purple/20\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-cosmic-gold\">{lunar.phase}</span>\n                  <span className=\"text-xs text-cosmic-silver\">{lunar.date}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-cosmic-silver\">Moon in {lunar.moon_sign}</span>\n                  <span className=\"text-cosmic-silver\">\n                    Intensity: {Math.round(lunar.intensity)}%\n                  </span>\n                </div>\n                <div className=\"mt-2\">\n                  <span className=\"px-2 py-1 rounded text-xs bg-cosmic-purple/30 text-cosmic-silver\">\n                    {lunar.energy}\n                  </span>\n                </div>\n                {lunar.description && (\n                  <p className=\"text-xs text-cosmic-silver mt-2\">{lunar.description}</p>\n                )}\n              </div>\n            ))}\n            {lunarTransits.length > 10 && (\n              <div className=\"text-center text-cosmic-silver text-sm py-2\">\n                Showing first 10 of {lunarTransits.length} lunar transits\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\ninterface TransitTabsProps {\n  activeTab: string;\n  setActiveTab: (value: string) => void;\n  transitResults: TransitResult[];\n  lunarTransits: LunarTransitResult[];\n  loading: boolean;\n  loadingLunar: boolean;\n  error: string | null;\n  dateRange: DateRange;\n  setDateRange: (dateRange: DateRange) => void;\n  onCalculateTransits: () => void;\n  onCalculateLunar: () => void;\n  onClearError: () => void;\n  transitSummary: {\n    total: number;\n    major: number;\n    challenging: number;\n    harmonious: number;\n    intensity: number;\n  };\n  lunarSummary: {\n    total: number;\n    newMoons: number;\n    fullMoons: number;\n    averageIntensity: number;\n  };\n}\n\nconst TransitTabs: React.FC<TransitTabsProps> = ({\n  activeTab,\n  setActiveTab,\n  transitResults,\n  lunarTransits,\n  loading,\n  loadingLunar,\n  error,\n  dateRange,\n  setDateRange,\n  onCalculateTransits,\n  onCalculateLunar,\n  onClearError,\n  transitSummary,\n  lunarSummary,\n}) => {\n  return (\n    <Tabs.Root value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n      <Tabs.List className=\"flex p-1 border rounded-lg bg-cosmic-deep-purple/30 backdrop-blur-sm border-cosmic-purple/20\">\n        <Tabs.Trigger\n          value=\"transits\"\n          className=\"flex-1 flex items-center justify-center px-4 py-3 text-sm font-medium rounded-md transition-all duration-200 data-[state=active]:bg-cosmic-purple data-[state=active]:text-white data-[state=active]:shadow-sm text-cosmic-silver hover:text-white hover:bg-cosmic-purple/50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-cosmic-deep-purple\"\n          aria-label=\"Planet Transits\"\n        >\n          <FaCalendarAlt className=\"mr-2\" />\n          Planet Transits\n          {transitResults.length > 0 && (\n            <span className=\"ml-2 px-1.5 py-0.5 text-xs bg-cosmic-gold/20 text-cosmic-gold rounded\">\n              {transitResults.length}\n            </span>\n          )}\n        </Tabs.Trigger>\n        <Tabs.Trigger\n          value=\"lunar\"\n          className=\"flex-1 flex items-center justify-center px-4 py-3 text-sm font-medium rounded-md transition-all duration-200 data-[state=active]:bg-cosmic-purple data-[state=active]:text-white data-[state=active]:shadow-sm text-cosmic-silver hover:text-white hover:bg-cosmic-purple/50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-cosmic-deep-purple\"\n          aria-label=\"Lunar Cycles\"\n        >\n          <FaClock className=\"mr-2\" />\n          Lunar Cycles\n          {lunarTransits.length > 0 && (\n            <span className=\"ml-2 px-1.5 py-0.5 text-xs bg-cosmic-gold/20 text-cosmic-gold rounded\">\n              {lunarTransits.length}\n            </span>\n          )}\n        </Tabs.Trigger>\n      </Tabs.List>\n      \n      <DateRangeForm dateRange={dateRange} setDateRange={setDateRange} />\n      \n      <Tabs.Content value=\"transits\" className=\"focus:outline-none\">\n        <TransitsTabContent\n          transitResults={transitResults}\n          loading={loading}\n          error={error}\n          dateRange={dateRange}\n          onCalculateTransits={onCalculateTransits}\n          onClearError={onClearError}\n          transitSummary={transitSummary}\n        />\n      </Tabs.Content>\n      \n      <Tabs.Content value=\"lunar\" className=\"focus:outline-none\">\n        <LunarCyclesTabContent\n          lunarTransits={lunarTransits}\n          loadingLunar={loadingLunar}\n          error={error}\n          dateRange={dateRange}\n          onCalculateLunar={onCalculateLunar}\n          onClearError={onClearError}\n          lunarSummary={lunarSummary}\n        />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\nexport default TransitTabs;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/__tests__/TransitAnalysis.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/__tests__/TransitApiIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":31,"fix":{"range":[1571,1574],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1571,1574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1571,1574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Core types for transit analysis birth data (textual form)\n// NOTE: This differs from the shared ChartBirthData (numeric unified form)\nexport interface TransitBirthData {\n  birth_date: string; // ISO format: YYYY-MM-DD\n  birth_time: string; // HH:MM:SS\n  latitude: number;\n  longitude: number;\n  timezone?: string;\n  city?: string;\n}\n\nexport interface DateRange {\n  startDate: string; // ISO format: YYYY-MM-DD\n  endDate: string;   // ISO format: YYYY-MM-DD\n}\n\n// Enhanced transit result interface\nexport interface TransitResult {\n  id: string;\n  planet: string;\n  aspect: string;\n  natal_planet: string;\n  date: string; // ISO format: YYYY-MM-DD\n  degree: number;\n  exact_time?: string;\n  orb: number;\n  intensity: number; // 0-100 scale\n  energy: string;\n  duration_days: number;\n  description?: string;\n}\n\n// Enhanced lunar transit result interface\nexport interface LunarTransitResult {\n  phase: string;\n  date: string; // ISO format: YYYY-MM-DD\n  exact_time: string;\n  energy: string;\n  degree: number;\n  moon_sign: string;\n  intensity: number; // 0-100 scale\n  description?: string;\n}\n\n// API Response types\nexport interface TransitCalculationResponse {\n  results: TransitResult[];\n  totalCount: number;\n  dateRange: DateRange;\n  calculatedAt: string;\n  cached: boolean;\n}\n\nexport interface LunarTransitCalculationResponse {\n  results: LunarTransitResult[];\n  totalCount: number;\n  dateRange: DateRange;\n  calculatedAt: string;\n  cached: boolean;\n}\n\n// Error handling types\nexport interface ApiError {\n  message: string;\n  code: string;\n  details?: Record<string, any>;\n}\n\n// Transit analysis options\nexport interface TransitAnalysisOptions {\n  includeMinorAspects?: boolean;\n  includeAsteroids?: boolean;\n  orb?: number;\n}\n\nexport interface LunarAnalysisOptions {\n  includeVoidOfCourse?: boolean;\n  includeDailyPhases?: boolean;\n}","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/useTransitAnalysis.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TransitCalculationResponse' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LunarTransitCalculationResponse' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":79},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":28,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":28,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1104,1132],"text":"(Boolean(import.meta.env.VITE_API_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1133,1135],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":41,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1552,1570],"text":"(birthData.timezone != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1552,1570],"text":"(birthData.timezone ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1552,1570],"text":"(Boolean(birthData.timezone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":41,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":41,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1571,1573],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":47,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":47,"endColumn":59,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1736,1763],"text":"(options.includeMinorAspects ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1736,1763],"text":"(options.includeMinorAspects === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":47,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":47,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1764,1766],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":48,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":48,"endColumn":52,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1801,1825],"text":"(options.includeAsteroids ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1801,1825],"text":"(options.includeAsteroids === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1826,1828],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":49,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":49,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1849,1860],"text":"(options.orb != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1849,1860],"text":"(options.orb ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1849,1860],"text":"(Boolean(options.orb))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":49,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":49,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1861,1863],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":65,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":65,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":24,"fix":{"range":[2606,2609],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2606,2609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2606,2609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":75,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2694,2708],"text":"Boolean(error.response)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":75,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":68},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":77,"column":30,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":77,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2787,2814],"text":"(Boolean((error.response.data?.detail)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":77,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":77,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":77,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2787,2874],"text":"(error.response.data?.detail ?? \n                           error.response.data?.message)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":78,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":78,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2846,2874],"text":"(Boolean((error.response.data?.message)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":78,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":42},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":78,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":78,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2875,2877],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":79,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":80,"column":18,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":80,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":81,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":81,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2997,3010],"text":"Boolean(error.request)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .request on an `any` value.","line":81,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":104,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":104,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3785,3803],"text":"(birthData.timezone != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3785,3803],"text":"(birthData.timezone ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3785,3803],"text":"(Boolean(birthData.timezone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":104,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":104,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3804,3806],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":110,"column":33,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":110,"endColumn":60,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3970,3997],"text":"(options.includeVoidOfCourse ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3970,3997],"text":"(options.includeVoidOfCourse === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":110,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":110,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3998,4000],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":127,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":127,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":24,"fix":{"range":[4860,4863],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4860,4863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4860,4863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":137,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":137,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4954,4968],"text":"Boolean(error.response)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":137,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":139,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":141,"endColumn":68},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":139,"column":30,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":139,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5047,5074],"text":"(Boolean((error.response.data?.detail)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":139,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":139,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":139,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5047,5134],"text":"(error.response.data?.detail ?? \n                           error.response.data?.message)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":140,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":140,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5106,5134],"text":"(Boolean((error.response.data?.message)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":140,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":42},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":140,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":140,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5135,5137],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":141,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":142,"column":18,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":142,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":143,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":143,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5257,5270],"text":"Boolean(error.request)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .request on an `any` value.","line":143,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":185,"column":63,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":185,"endColumn":74,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[7008,7019],"text":"(t.intensity !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[7008,7019],"text":"(!Number.isNaN(t.intensity))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7008,7019],"text":"(Boolean(t.intensity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":199,"column":62,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":199,"endColumn":73,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[7545,7556],"text":"(l.intensity !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[7545,7556],"text":"(!Number.isNaN(l.intensity))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7545,7556],"text":"(Boolean(l.intensity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":49,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useState, useCallback, useMemo } from 'react';\nimport { devConsole } from '../../config/environment';\nimport axios from 'axios';\nimport type { \n  TransitBirthData as BirthData, \n  TransitResult, \n  LunarTransitResult, \n  DateRange,\n  TransitCalculationResponse,\n  LunarTransitCalculationResponse,\n  TransitAnalysisOptions,\n  LunarAnalysisOptions\n} from './types';\n\nexport const useTransitAnalysis = (birthData: BirthData) => {\n  const [activeTab, setActiveTab] = useState<string>('transits');\n  const [transitResults, setTransitResults] = useState<TransitResult[]>([]);\n  const [lunarTransits, setLunarTransits] = useState<LunarTransitResult[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingLunar, setLoadingLunar] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [dateRange, setDateRange] = useState<DateRange>({\n    startDate: new Date().toISOString().split('T')[0],\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n  });\n\n  // API base URL - could be moved to config\n  const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';\n\n  const calculateTransits = useCallback(async (options: TransitAnalysisOptions = {}) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const requestPayload = {\n        birth_data: {\n          birth_date: birthData.birth_date,\n          birth_time: birthData.birth_time,\n          latitude: birthData.latitude,\n          longitude: birthData.longitude,\n          timezone: birthData.timezone || 'UTC'\n        },\n        date_range: {\n          start_date: dateRange.startDate,\n          end_date: dateRange.endDate\n        },\n        include_minor_aspects: options.includeMinorAspects || false,\n        include_asteroids: options.includeAsteroids || false,\n        orb: options.orb || 2.0\n      };\n\n  devConsole.log('🚀 Calculating transits with payload:', requestPayload);\n\n      const response = await axios.post<TransitResult[]>(\n        `${API_BASE_URL}/api/astro/transits`,\n        requestPayload,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 30000, // 30 second timeout\n        }\n      );\n\n      if (response.data && Array.isArray(response.data)) {\n        setTransitResults(response.data);\n        devConsole.log(`✅ Transit calculation successful: ${response.data.length} results`);\n      } else {\n        devConsole.error('❌ Invalid response format:', response.data);\n        setError('Invalid response format from server');\n      }\n    } catch (error: any) {\n      devConsole.error('❌ Error calculating transits:', error);\n      \n      if (error.response) {\n        // Server responded with error status\n        const errorMessage = error.response.data?.detail || \n                           error.response.data?.message || \n                           `Server error: ${error.response.status}`;\n        setError(errorMessage);\n      } else if (error.request) {\n        // Request was made but no response received\n        setError('Unable to connect to transit calculation service. Please check your connection.');\n      } else {\n        // Something else happened\n        setError('Failed to calculate transits. Please try again.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [birthData, dateRange, API_BASE_URL]);\n\n  const calculateLunarTransits = useCallback(async (options: LunarAnalysisOptions = {}) => {\n    setLoadingLunar(true);\n    setError(null);\n    \n    try {\n      const requestPayload = {\n        birth_data: {\n          birth_date: birthData.birth_date,\n          birth_time: birthData.birth_time,\n          latitude: birthData.latitude,\n          longitude: birthData.longitude,\n          timezone: birthData.timezone || 'UTC'\n        },\n        date_range: {\n          start_date: dateRange.startDate,\n          end_date: dateRange.endDate\n        },\n        include_void_of_course: options.includeVoidOfCourse || false,\n        include_daily_phases: options.includeDailyPhases !== false // default to true\n      };\n\n  devConsole.log('🌙 Calculating lunar transits with payload:', requestPayload);\n\n      const response = await axios.post<LunarTransitResult[]>(\n        `${API_BASE_URL}/api/astro/lunar-transits`,\n        requestPayload,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 30000, // 30 second timeout\n        }\n      );\n\n      if (response.data && Array.isArray(response.data)) {\n        setLunarTransits(response.data);\n        devConsole.log(`✅ Lunar transit calculation successful: ${response.data.length} results`);\n      } else {\n        devConsole.error('❌ Invalid lunar response format:', response.data);\n        setError('Invalid response format from server');\n      }\n    } catch (error: any) {\n      devConsole.error('❌ Error calculating lunar transits:', error);\n      \n      if (error.response) {\n        // Server responded with error status\n        const errorMessage = error.response.data?.detail || \n                           error.response.data?.message || \n                           `Server error: ${error.response.status}`;\n        setError(errorMessage);\n      } else if (error.request) {\n        // Request was made but no response received\n        setError('Unable to connect to lunar transit service. Please check your connection.');\n      } else {\n        // Something else happened\n        setError('Failed to calculate lunar transits. Please try again.');\n      }\n    } finally {\n      setLoadingLunar(false);\n    }\n  }, [birthData, dateRange, API_BASE_URL]);\n\n  // Clear error when user changes settings\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // Memoize results to prevent unnecessary re-renders\n  const memoizedTransitResults = useMemo(() => transitResults, [transitResults]);\n  const memoizedLunarTransits = useMemo(() => lunarTransits, [lunarTransits]);\n\n  // Enhanced date range validation\n  const isValidDateRange = useMemo(() => {\n    const start = new Date(dateRange.startDate);\n    const end = new Date(dateRange.endDate);\n    const diffDays = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24);\n    \n    return diffDays > 0 && diffDays <= 365; // Max 1 year range\n  }, [dateRange]);\n\n  // Calculate summary statistics\n  const transitSummary = useMemo(() => {\n    const majorAspects = transitResults.filter(t => ['conjunction', 'opposition', 'trine', 'square', 'sextile'].includes(t.aspect));\n    const challengingAspects = transitResults.filter(t => ['opposition', 'square'].includes(t.aspect));\n    const harmonious = transitResults.filter(t => ['trine', 'sextile'].includes(t.aspect));\n    \n    return {\n      total: transitResults.length,\n      major: majorAspects.length,\n      challenging: challengingAspects.length,\n      harmonious: harmonious.length,\n      intensity: transitResults.length > 0 \n        ? Math.round(transitResults.reduce((sum, t) => sum + (t.intensity || 0), 0) / transitResults.length)\n        : 0\n    };\n  }, [transitResults]);\n\n  const lunarSummary = useMemo(() => {\n    const newMoons = lunarTransits.filter(l => l.phase.toLowerCase().includes('new'));\n    const fullMoons = lunarTransits.filter(l => l.phase.toLowerCase().includes('full'));\n    \n    return {\n      total: lunarTransits.length,\n      newMoons: newMoons.length,\n      fullMoons: fullMoons.length,\n      averageIntensity: lunarTransits.length > 0\n        ? Math.round(lunarTransits.reduce((sum, l) => sum + (l.intensity || 0), 0) / lunarTransits.length)\n        : 0\n    };\n  }, [lunarTransits]);\n\n  return {\n    // State\n    activeTab,\n    setActiveTab,\n    transitResults: memoizedTransitResults,\n    lunarTransits: memoizedLunarTransits,\n    loading,\n    loadingLunar,\n    error,\n    dateRange,\n    setDateRange,\n    \n    // Actions\n    calculateTransits,\n    calculateLunarTransits,\n    clearError,\n    \n    // Computed values\n    isValidDateRange,\n    transitSummary,\n    lunarSummary,\n    \n    // Helper values\n    hasResults: transitResults.length > 0 || lunarTransits.length > 0,\n    isCalculating: loading || loadingLunar,\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/TransitAnalysis/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UnifiedBirthInput.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":59,"column":11,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":59,"endColumn":89,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2265,2343],"text":"birthData?.city ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":62,"column":15,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":62,"endColumn":105,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2501,2591],"text":"birthData?.timezone ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":77,"column":15,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":77,"endColumn":92,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3303,3380],"text":"birthData.city ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":80,"column":19,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":80,"endColumn":108,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3548,3637],"text":"birthData.timezone ?? ''"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":196,"column":17,"nodeType":"JSXOpeningElement","endLine":196,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":211,"column":17,"nodeType":"JSXOpeningElement","endLine":211,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":230,"column":17,"nodeType":"JSXOpeningElement","endLine":230,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":249,"column":17,"nodeType":"JSXOpeningElement","endLine":249,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":264,"column":17,"nodeType":"JSXOpeningElement","endLine":264,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":282,"column":15,"nodeType":"JSXOpeningElement","endLine":282,"endColumn":76},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":324,"column":21,"nodeType":"JSXOpeningElement","endLine":324,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":337,"column":21,"nodeType":"JSXOpeningElement","endLine":337,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":350,"column":21,"nodeType":"JSXOpeningElement","endLine":350,"endColumn":85}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useBirthData, formatBirthDataDisplay } from '../contexts/BirthDataContext';\nimport type { ChartBirthData } from '@cosmichub/types';\n\ninterface UnifiedBirthInputProps {\n  onSubmit?: (data: ChartBirthData) => void;\n  showSubmitButton?: boolean;\n  submitButtonText?: string;\n  title?: string;\n  description?: string;\n  autoSubmit?: boolean;\n  showCurrentData?: boolean;\n  className?: string;\n}\n\nconst SAMPLE_DATA = {\n  year: 1990,\n  month: 6,\n  day: 21,\n  hour: 14,\n  minute: 30,\n  city: 'New York, NY',\n  lat: 40.7128,\n  lon: -74.0060,\n  timezone: 'America/New_York'\n};\n\nconst MAJOR_CITIES = [\n  { name: 'New York, NY', lat: 40.7128, lon: -74.0060, tz: 'America/New_York' },\n  { name: 'Los Angeles, CA', lat: 34.0522, lon: -118.2437, tz: 'America/Los_Angeles' },\n  { name: 'London, UK', lat: 51.5074, lon: -0.1278, tz: 'Europe/London' },\n  { name: 'Paris, France', lat: 48.8566, lon: 2.3522, tz: 'Europe/Paris' },\n  { name: 'Tokyo, Japan', lat: 35.6762, lon: 139.6503, tz: 'Asia/Tokyo' },\n  { name: 'Sydney, Australia', lat: -33.8688, lon: 151.2093, tz: 'Australia/Sydney' },\n  { name: 'Mumbai, India', lat: 19.0760, lon: 72.8777, tz: 'Asia/Kolkata' },\n  { name: 'São Paulo, Brazil', lat: -23.5558, lon: -46.6396, tz: 'America/Sao_Paulo' }\n];\n\nexport const UnifiedBirthInput: React.FC<UnifiedBirthInputProps> = ({\n  onSubmit,\n  showSubmitButton = true,\n  submitButtonText = 'Calculate Chart',\n  title = 'Birth Information',\n  description = 'Enter your birth details to unlock your cosmic blueprint',\n  autoSubmit = false,\n  showCurrentData = true,\n  className = ''\n}) => {\n  const { birthData, setBirthData, isDataValid } = useBirthData();\n  \n  // Form state - initialize with existing birth data or defaults\n  const [formData, setFormData] = useState(() => ({\n    year: birthData?.year !== undefined ? birthData.year.toString() : '',\n    month: birthData?.month !== undefined ? birthData.month.toString() : '',\n    day: birthData?.day !== undefined ? birthData.day.toString() : '',\n    hour: birthData?.hour !== undefined ? birthData.hour.toString() : '',\n    minute: birthData?.minute !== undefined ? birthData.minute.toString() : '',\n    city: birthData?.city !== undefined && birthData.city !== null ? birthData.city : '',\n    lat: birthData?.lat !== undefined ? birthData.lat.toString() : '',\n    lon: birthData?.lon !== undefined ? birthData.lon.toString() : '',\n    timezone: birthData?.timezone !== undefined && birthData.timezone !== null ? birthData.timezone : ''\n  }));\n\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [citySearchResults, setCitySearchResults] = useState<typeof MAJOR_CITIES>([]);\n\n  // Update form when birth data changes from context\n  useEffect(() => {\n    if (birthData !== null && birthData !== undefined) {\n      setFormData({\n        year: birthData.year !== undefined ? birthData.year.toString() : '',\n        month: birthData.month !== undefined ? birthData.month.toString() : '',\n        day: birthData.day !== undefined ? birthData.day.toString() : '',\n        hour: birthData.hour !== undefined ? birthData.hour.toString() : '',\n        minute: birthData.minute !== undefined ? birthData.minute.toString() : '',\n        city: birthData.city !== undefined && birthData.city !== null ? birthData.city : '',\n        lat: birthData.lat !== undefined ? birthData.lat.toString() : '',\n        lon: birthData.lon !== undefined ? birthData.lon.toString() : '',\n        timezone: birthData.timezone !== undefined && birthData.timezone !== null ? birthData.timezone : ''\n      });\n    }\n  }, [birthData]);\n\n  const handleInputChange = useCallback((field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Smart city search\n    if (field === 'city') {\n      if (value.length > 2) {\n        const filtered = MAJOR_CITIES.filter(city => \n          typeof city.name === 'string' && city.name.length > 0 && \n          city.name.toLowerCase().includes(value.toLowerCase())\n        );\n        setCitySearchResults(filtered.slice(0, 5));\n      } else {\n        setCitySearchResults([]);\n      }\n    }\n  }, []);\n\n  const handleCitySelect = useCallback((city: typeof MAJOR_CITIES[0]) => {\n    setFormData(prev => ({\n      ...prev,\n      city: city.name,\n      lat: city.lat.toString(),\n      lon: city.lon.toString(),\n      timezone: city.tz\n    }));\n    setCitySearchResults([]);\n  }, []);\n\n  const loadSampleData = useCallback(() => {\n    setFormData({\n      year: SAMPLE_DATA.year.toString(),\n      month: SAMPLE_DATA.month.toString(),\n      day: SAMPLE_DATA.day.toString(),\n      hour: SAMPLE_DATA.hour.toString(),\n      minute: SAMPLE_DATA.minute.toString(),\n      city: SAMPLE_DATA.city,\n      lat: SAMPLE_DATA.lat.toString(),\n      lon: SAMPLE_DATA.lon.toString(),\n      timezone: SAMPLE_DATA.timezone\n    });\n  }, []);\n\n  const handleSubmit = useCallback((e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const newBirthData: ChartBirthData = {\n      year: formData.year.length > 0 ? parseInt(formData.year, 10) : 0,\n      month: formData.month.length > 0 ? parseInt(formData.month, 10) : 0,\n      day: formData.day.length > 0 ? parseInt(formData.day, 10) : 0,\n      hour: formData.hour.length > 0 ? parseInt(formData.hour, 10) : 0,\n      minute: formData.minute.length > 0 ? parseInt(formData.minute, 10) : 0,\n      city: formData.city.length > 0 ? formData.city : '',\n      lat: formData.lat.length > 0 ? parseFloat(formData.lat) : undefined,\n      lon: formData.lon.length > 0 ? parseFloat(formData.lon) : undefined,\n      timezone: formData.timezone.length > 0 ? formData.timezone : undefined\n    };\n\n    // Validate required fields\n    if (newBirthData.year === 0 || newBirthData.month === 0 || newBirthData.day === 0 || \n        newBirthData.hour === 0 || newBirthData.minute === 0 || newBirthData.city === '') {\n      alert('Please fill in all required fields');\n      return;\n    }\n\n    setBirthData(newBirthData);\n    onSubmit?.(newBirthData);\n  }, [formData, setBirthData, onSubmit]);\n\n  // Auto-submit when data is complete and valid\n  useEffect(() => {\n    if (autoSubmit === true && isDataValid === true && birthData !== null && birthData !== undefined) {\n      onSubmit?.(birthData);\n    }\n  }, [autoSubmit, isDataValid, birthData, onSubmit]);\n\n  const isFormComplete = formData.year.length > 0 && formData.month.length > 0 && \n                        formData.day.length > 0 && formData.hour.length > 0 && \n                        formData.minute.length > 0 && formData.city.length > 0;\n\n  return (\n    <div className={`unified-birth-input ${className}`}>\n      {/* Current Data Display */}\n      {showCurrentData === true && birthData !== null && birthData !== undefined && (\n        <Card className=\"mb-6 bg-cosmic-gold/10 border-cosmic-gold/30\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"text-cosmic-gold font-semibold mb-1\">Current Birth Data</h4>\n              <p className=\"text-cosmic-silver/80 text-sm\">\n                {formatBirthDataDisplay(birthData)}\n              </p>\n            </div>\n            <Button \n              onClick={() => setBirthData(null)} \n              variant=\"secondary\" \n              className=\"text-sm\"\n            >\n              Edit\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Input Form */}\n      {(birthData === null || birthData === undefined || showCurrentData === false) && (\n        <Card title={title}>\n          <p className=\"text-cosmic-silver/70 mb-6\">{description}</p>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Date of Birth */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Year <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.year}\n                  onChange={(e) => handleInputChange('year', e.target.value)}\n                  placeholder=\"1990\"\n                  min=\"1900\"\n                  max=\"2030\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Month <span className=\"text-red-400\">*</span>\n                </label>\n                <select\n                  value={formData.month}\n                  onChange={(e) => handleInputChange('month', e.target.value)}\n                  required\n                  title=\"Select birth month\"\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                >\n                  <option value=\"\">Select Month</option>\n                  {Array.from({ length: 12 }, (_, i) => (\n                    <option key={i + 1} value={i + 1}>\n                      {new Date(2000, i).toLocaleString('default', { month: 'long' })}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Day <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.day}\n                  onChange={(e) => handleInputChange('day', e.target.value)}\n                  placeholder=\"15\"\n                  min=\"1\"\n                  max=\"31\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n            </div>\n\n            {/* Time of Birth */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Hour (24-hour) <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.hour}\n                  onChange={(e) => handleInputChange('hour', e.target.value)}\n                  placeholder=\"14\"\n                  min=\"0\"\n                  max=\"23\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-cosmic-silver font-medium mb-2\">\n                  Minute <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.minute}\n                  onChange={(e) => handleInputChange('minute', e.target.value)}\n                  placeholder=\"30\"\n                  min=\"0\"\n                  max=\"59\"\n                  required\n                  className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                />\n              </div>\n            </div>\n\n            {/* Birth Location */}\n            <div className=\"relative\">\n              <label className=\"block text-cosmic-silver font-medium mb-2\">\n                Birth City <span className=\"text-red-400\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.city}\n                onChange={(e) => handleInputChange('city', e.target.value)}\n                placeholder=\"Start typing a city name...\"\n                required\n                className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n              />\n              \n              {/* City Search Results */}\n              {citySearchResults.length > 0 && (\n                <div className=\"absolute z-10 w-full mt-1 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg shadow-lg\">\n                  {citySearchResults.map((city, index) => (\n                    <button\n                      key={index}\n                      type=\"button\"\n                      onClick={() => handleCitySelect(city)}\n                      className=\"w-full px-4 py-2 text-left text-cosmic-silver hover:bg-cosmic-purple/20 first:rounded-t-lg last:rounded-b-lg transition-colors\"\n                    >\n                      {city.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Advanced Options */}\n            <div>\n              <button\n                type=\"button\"\n                onClick={() => setShowAdvanced(!showAdvanced)}\n                className=\"text-cosmic-gold hover:text-cosmic-gold/80 transition-colors text-sm font-medium\"\n              >\n                {showAdvanced ? '▼' : '▶'} Advanced Options (Optional)\n              </button>\n              \n              {showAdvanced && (\n                <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-cosmic-silver/70 font-medium mb-2\">\n                      Latitude\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.000001\"\n                      value={formData.lat}\n                      onChange={(e) => handleInputChange('lat', e.target.value)}\n                      placeholder=\"40.7128\"\n                      className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-cosmic-silver/70 font-medium mb-2\">\n                      Longitude\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.000001\"\n                      value={formData.lon}\n                      onChange={(e) => handleInputChange('lon', e.target.value)}\n                      placeholder=\"-74.0060\"\n                      className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-cosmic-silver/70 font-medium mb-2\">\n                      Timezone\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={formData.timezone}\n                      onChange={(e) => handleInputChange('timezone', e.target.value)}\n                      placeholder=\"America/New_York\"\n                      className=\"w-full px-4 py-3 bg-cosmic-dark border border-cosmic-purple/30 rounded-lg text-cosmic-silver focus:border-cosmic-gold focus:outline-none transition-colors\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 items-center justify-between pt-4\">\n              <Button\n                onClick={loadSampleData}\n                variant=\"secondary\"\n                className=\"w-full sm:w-auto\"\n              >\n                📄 Load Sample Data\n              </Button>\n              \n              {showSubmitButton && (\n                <button\n                  type=\"submit\"\n                  disabled={!isFormComplete}\n                  className={`w-full sm:w-auto px-8 py-3 rounded-lg font-semibold transition-all duration-300 ${\n                    isFormComplete\n                      ? 'bg-cosmic-gold text-cosmic-dark hover:bg-cosmic-gold/90'\n                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                  }`}\n                >\n                  ✨ {submitButtonText}\n                </button>\n              )}\n            </div>\n          </form>\n        </Card>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradeModalDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":9,"column":28,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":9,"endColumn":66,"fix":{"range":[344,365],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":12,"column":20,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":12,"endColumn":94,"fix":{"range":[593,603],"text":""}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":12,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorString","endLine":12,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[530,552],"text":"((subscriptionData?.tier).length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[530,552],"text":"((subscriptionData?.tier) !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[530,552],"text":"(Boolean((subscriptionData?.tier)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":12,"column":47,"nodeType":"ChainExpression","messageId":"conditionErrorString","endLine":12,"endColumn":73,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[556,582],"text":"((subscriptionData?.userTier).length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[556,582],"text":"((subscriptionData?.userTier) !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[556,582],"text":"(Boolean((subscriptionData?.userTier)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":68,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don&apos;t have access, you'll see the upgrade modal.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don&lsquo;t have access, you'll see the upgrade modal.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don&#39;t have access, you'll see the upgrade modal.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don&rsquo;t have access, you'll see the upgrade modal.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":68,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don't have access, you&apos;ll see the upgrade modal.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don't have access, you&lsquo;ll see the upgrade modal.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don't have access, you&#39;ll see the upgrade modal.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2289,2442],"text":"\n            Click the buttons below to test different upgrade scenarios. \n            If you don't have access, you&rsquo;ll see the upgrade modal.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useSubscription, type SubscriptionState } from '@cosmichub/auth';\n\n/**\n * Demo component to test the upgrade modal functionality\n * This demonstrates how to use the subscription system to gate premium features\n */\nexport const UpgradeModalDemo: React.FC = () => {\n  const subscriptionData = useSubscription() as SubscriptionState;\n  const hasFeature = subscriptionData?.hasFeature ?? (() => false);\n  const upgradeRequired = subscriptionData?.upgradeRequired ?? (() => {});\n  const userTier = (subscriptionData?.tier || subscriptionData?.userTier || 'Free') as string;\n\n  const testGeneKeysFeature = () => {\n    if (!hasFeature('Pro')) {\n      upgradeRequired('Gene Keys Analysis');\n      return;\n    }\n    // Feature logic would go here\n    alert('Gene Keys Analysis is available! (This would open the actual feature)');\n  };\n\n  const testSynastryFeature = () => {\n    if (!hasFeature('Pro')) {\n      upgradeRequired('Synastry Compatibility Analysis');\n      return;\n    }\n    alert('Synastry Analysis is available!');\n  };\n\n  const testPdfExport = () => {\n    if (!hasFeature('Pro')) {\n      upgradeRequired('PDF Chart Export');\n      return;\n    }\n    alert('PDF Export is available!');\n  };\n\n  const testEnterpriseFeature = () => {\n    if (!hasFeature('Enterprise')) {\n      upgradeRequired('API Access & White-label Solutions');\n      return;\n    }\n    alert('Enterprise features are available!');\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"bg-white rounded-lg shadow-lg p-8\">\n        <h2 className=\"text-3xl font-bold text-cosmic-dark mb-6 text-center\">\n          Upgrade Modal Demo\n        </h2>\n        \n        <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n          <p className=\"text-lg\">\n            <span className=\"font-semibold\">Current Tier:</span> \n            <span className={`ml-2 px-3 py-1 rounded-full text-sm font-bold ${\n              userTier === 'Free' ? 'bg-gray-200 text-gray-800' :\n              userTier === 'Basic' ? 'bg-blue-200 text-blue-800' :\n              userTier === 'Pro' ? 'bg-purple-200 text-purple-800' :\n              'bg-gold-200 text-gold-800'\n            }`}>\n              {userTier}\n            </span>\n          </p>\n          <p className=\"text-gray-600 mt-2\">\n            Click the buttons below to test different upgrade scenarios. \n            If you don't have access, you'll see the upgrade modal.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-cosmic-dark\">Pro Features</h3>\n            \n            <button\n              onClick={testGeneKeysFeature}\n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              🧬 Try Gene Keys Analysis\n            </button>\n            \n            <button\n              onClick={testSynastryFeature}\n              className=\"w-full bg-pink-600 hover:bg-pink-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              💕 Try Synastry Analysis\n            </button>\n            \n            <button\n              onClick={testPdfExport}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              📄 Try PDF Export\n            </button>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-cosmic-dark\">Enterprise Features</h3>\n            \n            <button\n              onClick={testEnterpriseFeature}\n              className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n            >\n              🚀 Try Enterprise Features\n            </button>\n            \n            <div className=\"p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n              <h4 className=\"font-semibold text-yellow-800 mb-2\">How it works:</h4>\n              <ul className=\"text-sm text-yellow-700 space-y-1\">\n                <li>• Feature check using <code>hasFeature()</code></li>\n                <li>• Automatic upgrade modal trigger</li>\n                <li>• Contextual pricing recommendations</li>\n                <li>• Graceful upgrade flow</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-8 p-4 bg-cosmic-purple bg-opacity-10 rounded-lg border border-cosmic-purple border-opacity-30\">\n          <h4 className=\"font-semibold text-cosmic-purple mb-2\">🔧 Developer Notes:</h4>\n          <ul className=\"text-sm text-gray-700 space-y-1\">\n            <li>• The upgrade modal will show tier-specific recommendations</li>\n            <li>• Currently redirects to pricing page with pre-selected tier</li>\n            <li>• Ready for Stripe integration (TODO items marked)</li>\n            <li>• Event-based system prevents circular dependencies</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UpgradeModalDemo;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradeModalManager.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/auth' import is duplicated.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":5,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":30,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":30,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1147,1152],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":36,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":36,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1262,1276],"text":"stripeService == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'session' is assigned a value but never used.","line":49,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":81,"column":6,"nodeType":"ArrayExpression","endLine":81,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [user, closeUpgradeModal, feature, userTier, toast]","fix":{"range":[2737,2781],"text":"[user, closeUpgradeModal, feature, userTier, toast]"}}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":89,"column":17,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":89,"endColumn":32}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useEffect } from 'react';\nimport { UpgradeModal } from '@cosmichub/ui';\nimport { useUpgradeModal } from '../contexts/UpgradeModalContext';\nimport { useSubscription } from '@cosmichub/auth';\nimport { useAuth } from '@cosmichub/auth';\nimport { stripeService, StripeSession } from '@cosmichub/integrations';\nimport { upgradeEventManager } from '../utils/upgradeEvents';\nimport { useToast } from './ToastProvider';\nimport { devConsole } from '../config/environment';\n\n/**\n * Centralized component that manages the upgrade modal display and upgrade logic\n */\nexport const UpgradeModalManager: React.FC = () => {\n  const { isOpen, feature, openUpgradeModal, closeUpgradeModal } = useUpgradeModal();\n  const { userTier } = useSubscription();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Listen for upgrade required events\n  useEffect(() => {\n    const unsubscribe = upgradeEventManager.subscribe((event) => {\n      openUpgradeModal(event.feature);\n    });\n\n    return unsubscribe;\n  }, [openUpgradeModal]);\n\n  const handleUpgrade = useCallback(async (tier: 'Basic' | 'Pro' | 'Enterprise') => {\n    if (!user) {\n      devConsole.error('User not authenticated');\n      closeUpgradeModal();\n      return;\n    }\n\n    if (!stripeService) {\n      devConsole.error('Stripe service not available');\n      closeUpgradeModal();\n      return;\n    }\n\n    try {\n      // Map UI tier names to Stripe tier names\n      const stripeTier = tier === 'Basic' ? 'premium' : tier === 'Pro' ? 'premium' : 'elite';\n      \n      const successUrl = `${window.location.origin}/pricing/success?tier=${stripeTier}`;\n      const cancelUrl = `${window.location.origin}/pricing/cancel`;\n\n      const session: StripeSession = await stripeService.createCheckoutSession({\n        tier: stripeTier,\n        userId: user.uid,\n        isAnnual: true, // Default to annual, can be made configurable\n        successUrl,\n        cancelUrl,\n        feature,\n        metadata: {\n          sourceComponent: 'UpgradeModalManager',\n          originalTier: userTier\n        }\n      });\n\n      // Update user subscription in Firestore\n      await stripeService.updateUserSubscription(user.uid, stripeTier, true);\n      \n      // Close modal after successful initiation\n      closeUpgradeModal();\n    } catch (error) {\n      devConsole.error('Upgrade process failed:', error);\n      \n      // Show error notification to user\n      toast({\n        title: 'Upgrade Failed',\n        description: 'We encountered an issue while processing your upgrade. Please try again or contact support if the problem persists.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true\n      });\n      \n      closeUpgradeModal();\n    }\n  }, [user, userTier, feature, closeUpgradeModal]);\n\n  return (\n    <UpgradeModal\n      isOpen={isOpen}\n      onClose={closeUpgradeModal}\n      feature={feature}\n      currentTier={userTier as 'Free' | 'Basic' | 'Pro' | 'Enterprise'}\n      onUpgrade={handleUpgrade}\n    />\n  );\n};\n\nexport default UpgradeModalManager;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UpgradePrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/UserProfile.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/auth' import is duplicated.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":6,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UsageLimits' is defined but never used.","line":36,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToastConfig' is defined but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":49,"column":11,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":49,"endColumn":23},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":49,"column":66,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":49,"endColumn":104,"fix":{"range":[1369,1390],"text":""}},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleSaveProfile' has no 'await' expression.","line":61,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":61,"endColumn":40,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1669,1675],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":62,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":62,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1691,1696],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'serializedProfile' is assigned a value but never used.","line":80,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":30},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":101,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":101,"endColumn":48,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2790,2796],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":102,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":102,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2812,2817],"text":"(user == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":102,"column":19,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":102,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2821,2837],"text":"(checkUsageLimit == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":114,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3219,3246],"text":"((user.metadata?.creationTime) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3219,3246],"text":"((user.metadata?.creationTime) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3219,3246],"text":"(Boolean((user.metadata?.creationTime)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3247,3249],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":115,"column":29,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":115,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3291,3320],"text":"((user.metadata?.lastSignInTime) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3291,3320],"text":"((user.metadata?.lastSignInTime) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3291,3320],"text":"(Boolean((user.metadata?.lastSignInTime)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":115,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":115,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3321,3323],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":128,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":128,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3649,3649],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3649,3649],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":131,"column":61,"nodeType":"Identifier","messageId":"undef","endLine":131,"endColumn":64},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":166,"column":39,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":166,"endColumn":79,"fix":{"range":[4662,4694],"text":""}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":167,"column":23,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":167,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4719,4734],"text":"(checkUsageLimit != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":168,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":168,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4820,4835],"text":"(checkUsageLimit != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":170,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":170,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4918,4923],"text":"(user == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":248,"column":55,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":248,"endColumn":85,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8475,8505],"text":"(Boolean((subscription?.currentPeriodEnd)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentPeriodEnd on an `any` value.","line":248,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":248,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":250,"column":49,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":250,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentPeriodEnd on an `any` value.","line":250,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":78},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","line":314,"column":17,"nodeType":"JSXOpeningElement","endLine":314,"endColumn":55},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element li has an implicit role of listitem. Defining this explicitly is redundant and should be avoided.","line":315,"column":19,"nodeType":"JSXOpeningElement","endLine":315,"endColumn":79},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element li has an implicit role of listitem. Defining this explicitly is redundant and should be avoided.","line":323,"column":19,"nodeType":"JSXOpeningElement","endLine":323,"endColumn":79},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":362,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14265,14346],"text":"You&apos;ve reached your monthly chart limit. Upgrade your plan to create more charts."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14265,14346],"text":"You&lsquo;ve reached your monthly chart limit. Upgrade your plan to create more charts."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14265,14346],"text":"You&#39;ve reached your monthly chart limit. Upgrade your plan to create more charts."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14265,14346],"text":"You&rsquo;ve reached your monthly chart limit. Upgrade your plan to create more charts."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":391,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15842,15921],"text":"You&apos;ve reached your chart storage limit. Upgrade your plan to save more charts."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15842,15921],"text":"You&lsquo;ve reached your chart storage limit. Upgrade your plan to save more charts."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15842,15921],"text":"You&#39;ve reached your chart storage limit. Upgrade your plan to save more charts."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15842,15921],"text":"You&rsquo;ve reached your chart storage limit. Upgrade your plan to save more charts."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":468,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":468,"endColumn":52}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { devConsole } from '../config/environment';\nimport { VisuallyHidden } from '@/components/accessibility/VisuallyHidden';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@cosmichub/auth';\nimport { useSubscription, type SubscriptionState } from '@cosmichub/auth';\nimport { useToast } from './ToastProvider';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { \n  FaUser, \n  FaCrown, \n  FaStar, \n  FaCalendarAlt, \n  FaCreditCard, \n  FaArrowUp, \n  FaHistory \n} from 'react-icons/fa';\nimport { COSMICHUB_TIERS } from '@cosmichub/subscriptions';\nimport ProgressBar from './ProgressBar';\nimport './UserProfile.module.css';\nimport { serializeAstrologyData, type UserProfile as UserProfileType } from '@cosmichub/types';\n\ninterface UserStats {\n  totalCharts: number;\n  chartsThisMonth: number;\n  savedCharts: number;\n  joinDate: Date;\n  lastLogin: Date;\n}\n\ninterface UsageLimit {\n  current: number;\n  limit: number;\n}\n\ninterface UsageLimits {\n  chartsPerMonth: UsageLimit;\n  chartStorage: UsageLimit;\n}\n\ninterface ToastConfig {\n  description: string;\n  status: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n}\n\nconst UserProfile = React.memo(() => {\n  const { user } = useAuth();\n  const { subscription, userTier, isLoading, checkUsageLimit } = useSubscription() as SubscriptionState;\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const [userStats, setUserStats] = useState<UserStats>({\n    totalCharts: 0,\n    chartsThisMonth: 0,\n    savedCharts: 0,\n    joinDate: new Date(),\n    lastLogin: new Date(),\n  });\n\n  const handleSaveProfile = async () => {\n    if (!user) {\n      toast({\n        description: \"Please log in to save your profile.\",\n        status: 'error'\n      });\n      return;\n    }\n\n    const profileData: UserProfileType = {\n      userId: user.uid,\n      birthData: { // This is mock data, replace with actual form data\n        date: '1990-01-01',\n        time: '12:00',\n        location: 'Greenwich, UK',\n      }\n    };\n\n    try {\n      const serializedProfile = serializeAstrologyData(profileData);\n      // Here you would call a service to save the data, e.g.:\n      // await userProfileService.save(JSON.parse(serializedProfile));\n      \n      toast({\n        description: \"Profile saved successfully!\",\n        status: 'success',\n        duration: 3000\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n  devConsole.error(\"Failed to serialize profile:\", errorMessage);\n      \n      toast({\n        description: \"Failed to save profile. Please try again.\",\n        status: 'error',\n        duration: 5000\n      });\n    }\n  };\n\n  const loadUserStats = useCallback(async () => {\n    if (!user || !checkUsageLimit) {\n      return;\n    }\n\n    try {\n      const chartsUsage = checkUsageLimit('chartsPerMonth');\n      const savedUsage = checkUsageLimit('chartStorage');\n      \n      setUserStats({\n        totalCharts: chartsUsage.current + 50, // TODO: Get actual total from backend\n        chartsThisMonth: chartsUsage.current,\n        savedCharts: savedUsage.current,\n        joinDate: new Date(user.metadata?.creationTime || Date.now()),\n        lastLogin: new Date(user.metadata?.lastSignInTime || Date.now()),\n      });\n    } catch (error) {\n  devConsole.error('Failed to load user stats:', error);\n      toast({\n        description: 'Failed to load usage statistics. Please refresh the page.',\n        status: 'error',\n        duration: 5000\n      });\n    }\n  }, [user, checkUsageLimit, toast]);\n\n  useEffect(() => {\n    loadUserStats();\n  }, [loadUserStats]);\n\n  const getTierIcon = (tier: keyof typeof COSMICHUB_TIERS): JSX.Element => {\n    const iconProps = {\n      className: \"text-cosmic-silver\",\n      \"aria-hidden\": \"true\" as const\n    };\n\n    switch (tier) {\n      case 'free':\n        return <FaUser {...iconProps} />;\n      case 'premium':\n        return <FaStar className=\"text-cosmic-purple\" aria-hidden=\"true\" />;\n      case 'elite':\n        return <FaCrown className=\"text-cosmic-gold\" aria-hidden=\"true\" />;\n      default:\n        return <FaUser {...iconProps} />;\n    }\n  };\n\n  const getTierColor = (tier: keyof typeof COSMICHUB_TIERS): string => {\n    switch (tier) {\n      case 'free':\n        return 'cosmic-silver';\n      case 'premium':\n        return 'cosmic-purple';\n      case 'elite':\n        return 'cosmic-gold';\n      default:\n        return 'cosmic-silver';\n    }\n  };\n\n  const handleUpgrade = useCallback(() => {\n    navigate('/upgrade');\n  }, [navigate]);\n\n  const currentTier = COSMICHUB_TIERS[userTier as keyof typeof COSMICHUB_TIERS];\n  const chartsUsage = checkUsageLimit ? checkUsageLimit('chartsPerMonth') : { current: 0, limit: 0 };\n  const savedUsage = checkUsageLimit ? checkUsageLimit('chartStorage') : { current: 0, limit: 0 };\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"py-10 text-center\" role=\"status\" aria-label=\"Loading profile\">\n        <div className=\"mx-auto text-4xl text-cosmic-purple animate-spin\" aria-hidden=\"true\">⭐</div>\n        <p className=\"mt-4 text-cosmic-silver\">Loading profile...</p>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"max-w-4xl py-8 mx-auto\">\n      <div className=\"cosmic-card p-6 rounded-lg shadow-lg bg-cosmic-dark\">\n        <header className=\"flex flex-col items-center mb-6 space-y-4 sm:flex-row sm:space-y-0 sm:space-x-6\">\n          <div \n            className=\"flex items-center justify-center w-24 h-24 rounded-full bg-cosmic-blue/30\"\n            role=\"img\"\n            aria-label=\"User avatar\"\n          >\n            <FaUser \n              className=\"text-3xl text-cosmic-silver\" \n              aria-hidden=\"true\"\n              role=\"img\"\n              aria-label=\"Default user avatar\" \n            />\n          </div>\n          <div className=\"text-center sm:text-left\">\n            <h1 className=\"text-2xl font-bold text-cosmic-gold\">{user.email}</h1>\n            <div className=\"flex items-center mt-2 space-x-2\" role=\"status\" aria-label={`Subscription tier: ${userTier}`}>\n              {getTierIcon(userTier)}\n              <span \n                className={`bg-${getTierColor(userTier)}/20 text-${getTierColor(userTier)} px-2 py-1 rounded text-sm font-semibold uppercase`}\n              >\n                {userTier}\n              </span>\n            </div>\n          </div>\n        </header>\n\n        <Tabs.Root defaultValue=\"overview\" aria-label=\"User Profile\">\n          <Tabs.List \n            className=\"flex mb-6 border-b border-cosmic-silver/30\" \n            aria-label=\"User Profile Sections\"\n          >\n            {[\n              { id: 'overview', label: 'Overview' },\n              { id: 'usage', label: 'Usage' },\n              { id: 'account', label: 'Account' }\n            ].map((tab) => (\n              <Tabs.Trigger\n                key={tab.id}\n                value={tab.id}\n                className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple focus:outline-none focus:ring-2 focus:ring-cosmic-purple\"\n                aria-controls={`${tab.id}-tab`}\n              >\n                {tab.label}\n              </Tabs.Trigger>\n            ))}\n          </Tabs.List>\n\n          <Tabs.Content value=\"overview\" id=\"overview-tab\" role=\"tabpanel\" aria-labelledby=\"overview\">\n            <div className=\"flex flex-col space-y-6\">\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"subscription-details\">\n                <h2 id=\"subscription-details\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Subscription Details\n                </h2>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div>\n                    <p className=\"text-cosmic-silver\">Current Plan</p>\n                    <p className=\"font-bold text-cosmic-gold\">{currentTier.name}</p>\n                    <p className=\"text-sm text-cosmic-silver/80\">{currentTier.description}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-cosmic-silver\">Billing</p>\n                    <p className=\"font-bold text-cosmic-gold\">\n                      {currentTier.price.monthly > 0 \n                        ? `$${currentTier.price.monthly.toFixed(2)}/month` \n                        : 'Free'}\n                    </p>\n                    {currentTier.price.monthly > 0 && subscription?.currentPeriodEnd && (\n                      <p className=\"text-sm text-cosmic-silver/80\">\n                        Next billing: {new Date(subscription.currentPeriodEnd).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <button\n                  className=\"w-full mt-4 cosmic-button sm:w-auto\"\n                  onClick={handleUpgrade}\n                  aria-label={currentTier.name === 'Free' ? 'Upgrade Plan' : 'Manage Subscription'}\n                >\n                  {currentTier.name === 'Free' ? (\n                    <span className=\"flex items-center space-x-2\">\n                      <FaArrowUp />\n                      <span>Upgrade Plan</span>\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center space-x-2\">\n                      <FaCreditCard />\n                      <span>Manage Subscription</span>\n                    </span>\n                  )}\n                </button>\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"activity-summary-heading\">\n                <h2 id=\"activity-summary-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Activity Summary\n                </h2>\n                <div \n                  className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\" \n                  role=\"list\" \n                  aria-label=\"Chart statistics\"\n                >\n                  <div role=\"listitem\">\n                    <p className=\"text-cosmic-silver\">Total Charts Created</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">\n                      <VisuallyHidden>Created </VisuallyHidden>\n                      {userStats.totalCharts}\n                      <VisuallyHidden> charts in total</VisuallyHidden>\n                    </p>\n                  </div>\n                  <div role=\"listitem\">\n                    <p className=\"text-cosmic-silver\">Charts This Month</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">\n                      <VisuallyHidden>Created </VisuallyHidden>\n                      {userStats.chartsThisMonth}\n                      <VisuallyHidden> charts this month</VisuallyHidden>\n                    </p>\n                  </div>\n                  <div role=\"listitem\">\n                    <p className=\"text-cosmic-silver\">Saved Charts</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">\n                      <VisuallyHidden>Have </VisuallyHidden>\n                      {userStats.savedCharts}\n                      <VisuallyHidden> saved charts</VisuallyHidden>\n                    </p>\n                  </div>\n                </div>\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"recent-activity-heading\">\n                <h2 id=\"recent-activity-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Recent Activity\n                </h2>\n                <ul className=\"space-y-2\" role=\"list\">\n                  <li className=\"flex items-center space-x-2\" role=\"listitem\">\n                    <FaHistory className=\"text-cosmic-blue\" aria-hidden=\"true\" />\n                    <span className=\"text-cosmic-silver\">\n                      Last Login: <time dateTime={userStats.lastLogin.toISOString()}>\n                        {userStats.lastLogin.toLocaleString()}\n                      </time>\n                    </span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\" role=\"listitem\">\n                    <FaCalendarAlt className=\"text-cosmic-blue\" aria-hidden=\"true\" />\n                    <span className=\"text-cosmic-silver\">\n                      Joined: <time dateTime={userStats.joinDate.toISOString()}>\n                        {userStats.joinDate.toLocaleDateString()}\n                      </time>\n                    </span>\n                  </li>\n                </ul>\n              </section>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"usage\" id=\"usage-tab\" role=\"tabpanel\" aria-labelledby=\"usage\">\n            <div className=\"flex flex-col space-y-6\">\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"chart-creation-heading\">\n                <h2 id=\"chart-creation-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Chart Creation\n                </h2>\n                <div className=\"flex justify-between mb-2\" role=\"status\" aria-label=\"Monthly chart usage\">\n                  <p className=\"text-cosmic-silver\">Charts This Month</p>\n                  <p className=\"font-bold text-cosmic-gold\">\n                    <VisuallyHidden>Using </VisuallyHidden>\n                    {chartsUsage.current} / {chartsUsage.limit}\n                    <VisuallyHidden> charts</VisuallyHidden>\n                  </p>\n                </div>\n                <ProgressBar\n                  percentage={(chartsUsage.current / Math.max(chartsUsage.limit, 1)) * 100}\n                  color=\"purple\"\n                  aria-label={`Monthly chart usage: ${chartsUsage.current} of ${chartsUsage.limit} charts used (${((chartsUsage.current / Math.max(chartsUsage.limit, 1)) * 100).toFixed(0)}%)`}\n                />\n                {chartsUsage.current >= chartsUsage.limit && (\n                  <div \n                    className=\"flex p-4 mt-4 space-x-4 border border-yellow-500 rounded-md bg-yellow-900/50\"\n                    role=\"alert\"\n                    aria-live=\"polite\"\n                  >\n                    <span className=\"text-xl text-yellow-500\" aria-hidden=\"true\">⚠️</span>\n                    <p className=\"text-cosmic-silver\">You've reached your monthly chart limit. Upgrade your plan to create more charts.</p>\n                  </div>\n                )}\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"chart-storage-heading\">\n                <h2 id=\"chart-storage-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Chart Storage\n                </h2>\n                <div className=\"flex justify-between mb-2\" role=\"status\" aria-label=\"Chart storage usage\">\n                  <p className=\"text-cosmic-silver\">Saved Charts</p>\n                  <p className=\"font-bold text-cosmic-gold\">\n                    <VisuallyHidden>Using </VisuallyHidden>\n                    {savedUsage.current} / {savedUsage.limit}\n                    <VisuallyHidden> storage slots</VisuallyHidden>\n                  </p>\n                </div>\n                <ProgressBar\n                  percentage={(savedUsage.current / Math.max(savedUsage.limit, 1)) * 100}\n                  color=\"blue\"\n                  aria-label={`Storage usage progress: ${savedUsage.current} of ${savedUsage.limit}`}\n                />\n                {savedUsage.current >= savedUsage.limit && (\n                  <div \n                    className=\"flex p-4 mt-4 space-x-4 border border-yellow-500 rounded-md bg-yellow-900/50\"\n                    role=\"alert\"\n                    aria-live=\"polite\"\n                  >\n                    <span className=\"text-xl text-yellow-500\" aria-hidden=\"true\">⚠️</span>\n                    <p className=\"text-cosmic-silver\">You've reached your chart storage limit. Upgrade your plan to save more charts.</p>\n                  </div>\n                )}\n              </section>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"account\" id=\"account-tab\" role=\"tabpanel\" aria-labelledby=\"account\">\n            <div className=\"flex flex-col space-y-6\">\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"account-info-heading\">\n                <h2 id=\"account-info-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Account Information\n                </h2>\n                <dl className=\"flex flex-col space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Email Address</dt>\n                    <dd className=\"text-cosmic-silver\">{user.email}</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Email Verified</dt>\n                    <dd>\n                      <span \n                        className={`px-2 py-1 rounded text-sm ${user.emailVerified ? 'bg-green-500/20 text-green-500' : 'bg-red-500/20 text-red-500'}`}\n                        role=\"status\"\n                      >\n                        {user.emailVerified ? 'Verified' : 'Not Verified'}\n                      </span>\n                    </dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Account ID</dt>\n                    <dd className=\"font-mono text-sm text-cosmic-silver\" title={user.uid}>{user.uid.slice(0, 8)}...</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Two-Factor Auth</dt>\n                    <dd>\n                      <span className=\"px-2 py-1 text-sm text-cosmic-silver rounded bg-cosmic-silver/20\" role=\"status\">\n                        Not Set Up\n                      </span>\n                    </dd>\n                  </div>\n                </dl>\n              </section>\n\n              <section className=\"cosmic-card p-4\" aria-labelledby=\"preferences-heading\">\n                <h2 id=\"preferences-heading\" className=\"mb-4 text-lg font-bold text-cosmic-gold\">\n                  Preferences\n                </h2>\n                <dl className=\"flex flex-col space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Email Notifications</dt>\n                    <dd>\n                      <span \n                        className=\"px-2 py-1 text-sm text-green-500 rounded bg-green-500/20\"\n                        role=\"status\"\n                      >\n                        Enabled\n                      </span>\n                    </dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"font-medium text-cosmic-silver\">Marketing Emails</dt>\n                    <dd>\n                      <span \n                        className=\"px-2 py-1 text-sm text-cosmic-silver rounded bg-cosmic-silver/20\"\n                        role=\"status\"\n                      >\n                        Disabled\n                      </span>\n                    </dd>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <dt className=\"font-medium text-cosmic-silver\">Data Export</dt>\n                    <dd>\n                      <button \n                        type=\"button\"\n                        className=\"w-auto cosmic-button focus:ring-2 focus:ring-cosmic-purple focus:outline-none\"\n                        onClick={handleSaveProfile}\n                        aria-label=\"Request a data export of your account\"\n                      >\n                        Request Data\n                      </button>\n                    </dd>\n                  </div>\n                </dl>\n              </section>\n            </div>\n          </Tabs.Content>\n        </Tabs.Root>\n      </div>\n    </main>\n  );\n});\n\nUserProfile.displayName = 'UserProfile';\n\nexport default UserProfile;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/accessibility/VisuallyHidden.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":9,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * VisuallyHidden\n * Renders content that remains available to assistive technologies while being visually hidden.\n * Use for live updates, contextual labels for icon-only buttons, and status messages.\n */\nexport interface VisuallyHiddenProps {\n  as?: keyof JSX.IntrinsicElements;\n  children: React.ReactNode;\n  /**\n   * If true, element becomes visible when focused (for skip links). Ensure element is focusable.\n   */\n  focusable?: boolean;\n  className?: string;\n}\n\nconst baseClass = 'sr-only';\nconst focusableClass = 'sr-only-focusable';\n\nexport const VisuallyHidden: React.FC<VisuallyHiddenProps> = ({\n  as: Component = 'span',\n  children,\n  focusable = false,\n  className = ''\n}) => {\n  const classes = [baseClass, focusable ? focusableClass : '', className].filter(Boolean).join(' ');\n  return <Component className={classes}>{children}</Component>;\n};\n\nVisuallyHidden.displayName = 'VisuallyHidden';\n\nexport default VisuallyHidden;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/integrations/HealwaveIntegration/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/components/shared/AppSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/config/environment.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":18,"suggestions":[{"fix":{"range":[1081,1136],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":78,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":78,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2635,2656],"text":"(env.VITE_XAI_API_KEY == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2636,2656],"text":"(env.VITE_XAI_API_KEY ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2635,2656],"text":"(!Boolean(env.VITE_XAI_API_KEY))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":26,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":10,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\n// Environment validation schema\nconst envSchema = z.object({\n  VITE_FIREBASE_API_KEY: z.string().min(1, 'Firebase API key is required'),\n  VITE_FIREBASE_AUTH_DOMAIN: z.string().min(1, 'Firebase auth domain is required'),\n  VITE_FIREBASE_PROJECT_ID: z.string().min(1, 'Firebase project ID is required'),\n  VITE_FIREBASE_STORAGE_BUCKET: z.string().min(1, 'Firebase storage bucket is required'),\n  VITE_FIREBASE_MESSAGING_SENDER_ID: z.string().min(1, 'Firebase messaging sender ID is required'),\n  VITE_FIREBASE_APP_ID: z.string().min(1, 'Firebase app ID is required'),\n  VITE_API_URL: z.string().url().optional(),\n  VITE_XAI_API_KEY: z.string().optional(),\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n  VITE_ENABLE_ANALYTICS: z.string().transform(val => val === 'true').optional(),\n  VITE_ENABLE_ERROR_REPORTING: z.string().transform(val => val === 'true').optional(),\n});\n\n// Validate environment variables\nfunction validateEnvironment() {\n  try {\n    return envSchema.parse(import.meta.env);\n  } catch (error) {\n    console.error('Environment validation failed:', error);\n    throw new Error('Invalid environment configuration');\n  }\n}\n\n// Export validated environment\nexport const env = validateEnvironment();\n\n// Environment helper functions\nexport const isDevelopment = () => env.NODE_ENV === 'development';\nexport const isProduction = () => env.NODE_ENV === 'production';\nexport const isTest = () => env.NODE_ENV === 'test';\n\n// Feature flags\nexport const features = {\n  analytics: env.VITE_ENABLE_ANALYTICS ?? false,\n  errorReporting: env.VITE_ENABLE_ERROR_REPORTING ?? isProduction(),\n  healwave: true,\n  numerology: true,\n  humanDesign: true,\n  crossAppIntegration: true,\n};\n\n// API configuration\nexport const apiConfig = {\n  baseUrl: env.VITE_API_URL ?? 'http://localhost:8001',\n  timeout: 10000,\n  retries: 3,\n};\n\n// Firebase configuration\nexport const firebaseConfig = {\n  apiKey: env.VITE_FIREBASE_API_KEY,\n  authDomain: env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: env.VITE_FIREBASE_APP_ID,\n};\n\n// Security configuration\nexport const securityConfig = {\n  enableCSP: isProduction(),\n  enableHSTS: isProduction(),\n  sessionTimeout: 24 * 60 * 60 * 1000, // 24 hours\n  maxLoginAttempts: 5,\n  lockoutDuration: 15 * 60 * 1000, // 15 minutes\n};\n\n// XAI API configuration\nexport const xaiConfig = {\n  apiKey: env.VITE_XAI_API_KEY,\n  baseUrl: 'https://api.x.ai/v1',\n  model: 'grok-beta',\n  timeout: 30000,\n  enabled: !!env.VITE_XAI_API_KEY,\n};\n\n// Logging configuration\nexport const loggingConfig = {\n  level: isDevelopment() ? 'debug' : 'warn',\n  enableConsole: isDevelopment(),\n  enableRemote: isProduction(),\n};\n\n// Performance monitoring configuration\nexport const performanceConfig = {\n  enabled: isDevelopment() || env.VITE_ENABLE_ANALYTICS,\n  trackingInterval: 5000, // 5 seconds\n  maxOperations: 1000, // Keep last 1000 operations\n  enableMemoryTracking: 'memory' in performance,\n  enablePagePerformance: true,\n  enableComponentTracking: isDevelopment(),\n  thresholds: {\n    slowOperation: 1000, // 1 second\n    memoryWarning: 80, // 80% of heap limit\n    renderWarning: 100, // 100ms render time\n  },\n  logging: {\n    enabled: isDevelopment(),\n    verbose: false,\n    logSlowOperations: true,\n  },\n};\n\n// Development utilities\n/* eslint-disable no-console */\nexport const devConsole = {\n  log: isDevelopment() ? console.log.bind(console) : () => {},\n  warn: isDevelopment() ? console.warn.bind(console) : () => {},\n  error: console.error.bind(console), // Always log errors\n};\n/* eslint-enable no-console */\n\nexport default env;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/BirthDataContext.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":26,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":26,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[892,898],"text":"stored != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[892,898],"text":"stored ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[892,898],"text":"Boolean(stored)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":29,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[996,1002],"text":"(Boolean(parsed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":29,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":29,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1036,1047],"text":"(Boolean(parsed.year))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .year on an `any` value.","line":29,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":29,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":29,"endColumn":80,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1051,1063],"text":"(Boolean(parsed.month))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .month on an `any` value.","line":29,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":80},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":29,"column":84,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":29,"endColumn":94,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1067,1077],"text":"(Boolean(parsed.day))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .day on an `any` value.","line":29,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":30,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":30,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":19,"suggestions":[{"fix":{"range":[1152,1210],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":40,"column":5,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":40,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1310,1319],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":47,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":47,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1490,1494],"text":"data != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":20,"suggestions":[{"fix":{"range":[1583,1635],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":18,"suggestions":[{"fix":{"range":[1790,1841],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":65,"column":5,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":65,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1986,1995],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":99,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":99,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3028,3037],"text":"(data.city != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3028,3037],"text":"(data.city ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3028,3037],"text":"(Boolean(data.city))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport { devConsole } from '../config/environment';\nimport type { ChartBirthData } from '@cosmichub/types';\n\ninterface BirthDataContextType {\n  birthData: ChartBirthData | null;\n  setBirthData: (data: ChartBirthData | null) => void;\n  clearBirthData: () => void;\n  isDataValid: boolean;\n  lastUpdated: number | null;\n}\n\nconst BirthDataContext = createContext<BirthDataContextType | undefined>(undefined);\n\ninterface BirthDataProviderProps {\n  children: ReactNode;\n}\n\nconst STORAGE_KEY = 'cosmichub_birth_data';\n\nexport const BirthDataProvider: React.FC<BirthDataProviderProps> = ({ children }) => {\n  // Initialize with data from localStorage\n  const [birthData, setBirthDataState] = useState<ChartBirthData | null>(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        // Validate the data structure\n        if (parsed && typeof parsed === 'object' && parsed.year && parsed.month && parsed.day) {\n          return parsed;\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to parse stored birth data:', error);\n    }\n    return null;\n  });\n\n  const [lastUpdated, setLastUpdated] = useState<number | null>(\n    birthData ? Date.now() : null\n  );\n\n  const setBirthData = useCallback((data: ChartBirthData | null) => {\n    setBirthDataState(data);\n    setLastUpdated(Date.now());\n    \n    if (data) {\n      try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n        console.log('✅ Birth data saved to storage:', data);\n      } catch (error) {\n  devConsole.error('❌ Failed to save birth data:', error);\n      }\n    } else {\n      localStorage.removeItem(STORAGE_KEY);\n      console.log('🗑️ Birth data cleared from storage');\n    }\n  }, []);\n\n  const clearBirthData = useCallback(() => {\n    setBirthData(null);\n  }, [setBirthData]);\n\n  const isDataValid = Boolean(\n    birthData &&\n    birthData.year > 1900 && birthData.year < 2100 &&\n    birthData.month >= 1 && birthData.month <= 12 &&\n    birthData.day >= 1 && birthData.day <= 31 &&\n    birthData.hour >= 0 && birthData.hour <= 23 &&\n    birthData.minute >= 0 && birthData.minute <= 59\n  );\n\n  const value: BirthDataContextType = {\n    birthData,\n    setBirthData,\n    clearBirthData,\n    isDataValid,\n    lastUpdated\n  };\n\n  return (\n    <BirthDataContext.Provider value={value}>\n      {children}\n    </BirthDataContext.Provider>\n  );\n};\n\nexport const useBirthData = (): BirthDataContextType => {\n  const context = useContext(BirthDataContext);\n  if (context === undefined) {\n    throw new Error('useBirthData must be used within a BirthDataProvider');\n  }\n  return context;\n};\n\n// Helper function to format birth data for display\nexport const formatBirthDataDisplay = (data: ChartBirthData): string => {\n  const base = `${data.month}/${data.day}/${data.year} ${data.hour.toString().padStart(2, '0')}:${data.minute.toString().padStart(2, '0')}`;\n  return data.city ? `${base} in ${data.city}` : base;\n};\n\n// Helper function to validate coordinates\nexport const validateCoordinates = (lat?: number, lon?: number): boolean => {\n  return (\n    lat !== undefined && lon !== undefined &&\n    lat >= -90 && lat <= 90 &&\n    lon >= -180 && lon <= 180\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/IntegrationContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/NotificationContext.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":41,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":41,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1303,1324],"text":"(notification.duration != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1303,1324],"text":"(notification.duration ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1303,1324],"text":"(Boolean(notification.duration))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":41,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":41,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1325,1327],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id'>) => void;\n  removeNotification: (id: string) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  const addNotification = (notification: Omit<Notification, 'id'>) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newNotification = { ...notification, id };\n    \n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove notification after duration (default 5 seconds)\n    const duration = notification.duration || 5000;\n    setTimeout(() => {\n      removeNotification(id);\n    }, duration);\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  const value = {\n    notifications,\n    addNotification,\n    removeNotification,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/contexts/UpgradeModalContext.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":52,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":52,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1363,1371],"text":"context == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\n\nexport interface UpgradeModalContextType {\n  isOpen: boolean;\n  feature?: string;\n  openUpgradeModal: (feature?: string) => void;\n  closeUpgradeModal: () => void;\n}\n\nconst UpgradeModalContext = createContext<UpgradeModalContextType | undefined>(undefined);\n\nexport interface UpgradeModalProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Provider for managing upgrade modal state globally across the app\n */\nexport const UpgradeModalProvider: React.FC<UpgradeModalProviderProps> = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [feature, setFeature] = useState<string | undefined>();\n\n  const openUpgradeModal = useCallback((requiredFeature?: string) => {\n    setFeature(requiredFeature);\n    setIsOpen(true);\n  }, []);\n\n  const closeUpgradeModal = useCallback(() => {\n    setIsOpen(false);\n    setFeature(undefined);\n  }, []);\n\n  const value: UpgradeModalContextType = {\n    isOpen,\n    feature,\n    openUpgradeModal,\n    closeUpgradeModal\n  };\n\n  return (\n    <UpgradeModalContext.Provider value={value}>\n      {children}\n    </UpgradeModalContext.Provider>\n  );\n};\n\n/**\n * Hook to access upgrade modal functionality\n */\nexport const useUpgradeModal = (): UpgradeModalContextType => {\n  const context = useContext(UpgradeModalContext);\n  if (!context) {\n    throw new Error('useUpgradeModal must be used within UpgradeModalProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/examples/InteractiveChartExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":30,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":30,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":59,"fix":{"range":[966,969],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[966,969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[966,969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":83,"column":24,"nodeType":"AwaitExpression","messageId":"await","endLine":96,"endColumn":9,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2556,2561],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":114,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":114,"endColumn":42},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":123,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":123,"endColumn":41},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":139,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":139,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4310,4324],"text":"(selectedPlanet != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4310,4324],"text":"(selectedPlanet ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4310,4324],"text":"(Boolean(selectedPlanet))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":150,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":150,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4755,4769],"text":"(Boolean(analysisResult))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":175,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":175,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":37,"fix":{"range":[5910,5913],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5910,5913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5910,5913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * Interactive Chart Integration Example\n * Demonstrates how to use the enhanced chart system\n */\n\nimport React, { useState, Suspense, lazy } from 'react';\nimport { devConsole } from '../config/environment';\nimport { getChartSyncService } from '../services/chartSyncService';\nimport { getChartAnalyticsService } from '../services/chartAnalyticsService';\nimport { getNotificationManager } from '../services/notificationManager';\nimport { Button } from '@cosmichub/ui';\n\n// Lazy load the heavy chart component\nconst ChartWheelInteractive = lazy(() => import('../features/ChartWheelInteractive'));\n\nconst sampleBirthData = {\n  year: 1990,\n  month: 6,\n  day: 15,\n  hour: 14,\n  minute: 30,\n  lat: 40.7128,\n  lon: -74.0060,\n  timezone: 'America/New_York',\n  city: 'New York'\n};\n\nexport const InteractiveChartExample: React.FC = () => {\n  const [selectedPlanet, setSelectedPlanet] = useState<string | null>(null);\n  const [analysisResult, setAnalysisResult] = useState<any>(null);\n  const [chartRegistered, setChartRegistered] = useState(false);\n\n  const handlePlanetSelect = async (planet: string) => {\n    setSelectedPlanet(planet);\n    \n    // Get analytics for selected planet\n    const analyticsService = getChartAnalyticsService();\n    const insights = analyticsService.getPersonalityInsights({\n      planets: { [planet]: { name: planet, position: 0 } },\n      houses: [],\n      aspects: []\n    });\n    \n    setAnalysisResult(insights);\n\n    // Send notification about planet selection\n  const notificationManager = getNotificationManager();\n  // Updated to use unified notification manager test API\n  await notificationManager.sendTest?.();\n  };\n\n  const handleRegisterChart = async () => {\n    const syncService = getChartSyncService();\n    \n    try {\n      await syncService.registerChart('example-chart', sampleBirthData, {\n        enableTransitUpdates: true,\n        enableProgressions: false,\n        aspectAlerts: true,\n        updateInterval: 1 // 1 minute for demo\n      });\n      \n      setChartRegistered(true);\n      \n      // Listen for chart events\n      syncService.on('aspect-event', (event) => {\n        devConsole.log?.('Aspect event detected:', event);\n      });\n      \n      syncService.on('transit-update', (event) => {\n        devConsole.log?.('Transit update received:', event);\n      });\n      \n    } catch (error) {\n      devConsole.error('❌ Failed to register chart:', error);\n    }\n  };\n\n  const handleAnalyzeChart = async () => {\n    const analyticsService = getChartAnalyticsService();\n    \n    try {\n      const analysis = await analyticsService.analyzeChart('example-chart', {\n        planets: { \n          sun: { name: 'sun', position: 75 }, // Leo\n          moon: { name: 'moon', position: 180 }, // Libra\n          mercury: { name: 'mercury', position: 60 } // Gemini\n        },\n        houses: [\n          { number: 1, cusp: 0, sign: 'Aries' },\n          { number: 2, cusp: 30, sign: 'Taurus' }\n        ],\n        aspects: [\n          { transitPlanet: 'sun', natalPlanet: 'moon', aspectType: 'square', orb: 5, type: 'aspect-forming', exactDate: new Date(), strength: 'medium' }\n        ]\n      });\n      \n      setAnalysisResult(analysis);\n      \n    } catch (error) {\n      devConsole.error('❌ Failed to analyze chart:', error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-cosmic-dark/50 rounded-lg p-6 border border-cosmic-gold/30\">\n        <h2 className=\"text-2xl font-bold text-cosmic-gold mb-4\">\n          🌟 Interactive Chart Integration Demo\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Button \n            onClick={handleRegisterChart}\n            disabled={chartRegistered}\n            variant=\"primary\"\n            className=\"w-full\"\n          >\n            {chartRegistered ? '✅ Chart Registered' : '🔄 Register Chart'}\n          </Button>\n          \n          <Button \n            onClick={handleAnalyzeChart}\n            variant=\"secondary\"\n            className=\"w-full\"\n          >\n            📊 Analyze Chart\n          </Button>\n          \n          <Button \n            onClick={() => setAnalysisResult(null)}\n            variant=\"secondary\"\n            className=\"w-full\"\n          >\n            🗑️ Clear Results\n          </Button>\n        </div>\n\n        {selectedPlanet && (\n          <div className=\"bg-cosmic-purple/20 rounded p-4 mb-4 border border-cosmic-gold/20\">\n            <h3 className=\"text-cosmic-gold font-semibold mb-2\">\n              Selected Planet: {selectedPlanet}\n            </h3>\n            <p className=\"text-cosmic-silver text-sm\">\n              Click on planets in the chart below to explore their energies and meanings.\n            </p>\n          </div>\n        )}\n\n        {analysisResult && (\n          <div className=\"bg-green-900/20 rounded p-4 mb-4 border border-green-500/30\">\n            <h3 className=\"text-green-400 font-semibold mb-2\">Analysis Results</h3>\n            <pre className=\"text-green-300 text-xs overflow-auto max-h-32\">\n              {JSON.stringify(analysisResult, null, 2)}\n            </pre>\n          </div>\n        )}\n      </div>\n\n      {/* Interactive Chart */}\n      <Suspense fallback={\n        <div className=\"flex items-center justify-center h-[600px] bg-cosmic-dark rounded-lg border border-cosmic-purple animate-pulse\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-cosmic-gold\"></div>\n            <span className=\"text-cosmic-silver\">Loading Interactive Chart...</span>\n          </div>\n        </div>\n      }>\n        <ChartWheelInteractive\n          birthData={sampleBirthData}\n        showAspects={true}\n        showAnimation={true}\n        showTransits={chartRegistered}\n        realTimeUpdates={chartRegistered}\n        onPlanetSelect={handlePlanetSelect}\n        onAspectSelect={(aspect: any) => {\n          devConsole.log?.('Aspect selected:', aspect);\n        }}\n      />\n      </Suspense>\n\n      {/* Feature Showcase */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <div className=\"bg-blue-900/20 rounded p-4 border border-blue-500/30\">\n          <h3 className=\"text-blue-400 font-semibold mb-2\">🔄 Real-time Transits</h3>\n          <p className=\"text-blue-300 text-sm\">\n            Live planetary positions updated every minute with automatic aspect detection.\n          </p>\n        </div>\n        \n        <div className=\"bg-purple-900/20 rounded p-4 border border-purple-500/30\">\n          <h3 className=\"text-purple-400 font-semibold mb-2\">📊 Smart Analytics</h3>\n          <p className=\"text-purple-300 text-sm\">\n            AI-powered pattern recognition and personality insights from chart data.\n          </p>\n        </div>\n        \n        <div className=\"bg-orange-900/20 rounded p-4 border border-orange-500/30\">\n          <h3 className=\"text-orange-400 font-semibold mb-2\">🎯 Interactive D3</h3>\n          <p className=\"text-orange-300 text-sm\">\n            Smooth animations, hover tooltips, and clickable chart elements.\n          </p>\n        </div>\n        \n        <div className=\"bg-green-900/20 rounded p-4 border border-green-500/30\">\n          <h3 className=\"text-green-400 font-semibold mb-2\">🔔 Smart Notifications</h3>\n          <p className=\"text-green-300 text-sm\">\n            Personalized alerts for important transits and astrological events.\n          </p>\n        </div>\n        \n        <div className=\"bg-pink-900/20 rounded p-4 border border-pink-500/30\">\n          <h3 className=\"text-pink-400 font-semibold mb-2\">📱 Responsive Design</h3>\n          <p className=\"text-pink-300 text-sm\">\n            Perfect viewing experience across all devices with touch support.\n          </p>\n        </div>\n        \n        <div className=\"bg-yellow-900/20 rounded p-4 border border-yellow-500/30\">\n          <h3 className=\"text-yellow-400 font-semibold mb-2\">⚡ Performance</h3>\n          <p className=\"text-yellow-300 text-sm\">\n            Optimized rendering with smart caching and efficient data updates.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveChartExample;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/examples/NotificationIntegrationExamples.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":47,"fix":{"range":[599,602],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[599,602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[599,602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":26,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":26,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":27,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":36,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":39,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":45,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":45,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .queueNotification on an `error` typed value.","line":45,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":67},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":59,"column":17,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":59,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":72,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":43,"fix":{"range":[2372,2375],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2372,2375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2372,2375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":77,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":77,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":77,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":77,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":89,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":89,"endColumn":60},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":98,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":98,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3108,3115],"text":"Boolean(success)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":100,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pushNotifications on an `any` value.","line":112,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":40},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":119,"column":16,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":119,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3889,3920],"text":"(Boolean((status.backgroundSync?.isOnline)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .backgroundSync on an `any` value.","line":119,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":126,"column":16,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":126,"endColumn":50,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4176,4210],"text":"(Boolean((status.backgroundSync?.queuedItems)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .backgroundSync on an `any` value.","line":126,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":126,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":126,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4211,4213],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":133,"column":16,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":133,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4452,4497],"text":"(Boolean((status.pushNotifications?.activeSubscriptions)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pushNotifications on an `any` value.","line":133,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":40},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":133,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":133,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4498,4500],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":142,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":142,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":149,"column":26,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":149,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":149,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":149,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":156,"column":26,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":156,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":156,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":156,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":57,"fix":{"range":[5475,5478],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5475,5478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5475,5478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":174,"column":11,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":174,"endColumn":51,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[5692,5732],"text":"((event.key?.startsWith('cosmichub-sync-')) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[5692,5732],"text":"((event.key?.startsWith('cosmichub-sync-')) === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":174,"column":55,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":174,"endColumn":69,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5736,5750],"text":"(event.newValue != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5736,5750],"text":"(event.newValue ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5736,5750],"text":"(Boolean(event.newValue))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":176,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":179,"column":36,"nodeType":"ArrayExpression","messageId":"unsafeReturn","endLine":184,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":181,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":181,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":181,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":182,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":182,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":182,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":183,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":183,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timestamp on an `any` value.","line":183,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":184,"column":14,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":184,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":23,"suggestions":[{"fix":{"range":[6141,6194],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":218,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":218,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":226,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":226,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":240,"column":20,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":240,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":240,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":240,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":246,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":247,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":250,"column":31,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":250,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timestamp on an `any` value.","line":250,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":53},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":267,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":267,"endColumn":42},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":274,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":274,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":281,"column":28,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":281,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":281,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":281,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":295,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":295,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":295,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":43,"fix":{"range":[9411,9414],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9411,9414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9411,9414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":299,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":299,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":310,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":310,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":311,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":311,"endColumn":55},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":311,"column":15,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":311,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9726,9757],"text":"(Boolean((status.backgroundSync?.isOnline)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .backgroundSync on an `any` value.","line":311,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":311,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":311,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":311,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9758,9760],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pushNotifications on an `any` value.","line":312,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":312,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":313,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":313,"endColumn":57},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":313,"column":18,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":313,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9862,9896],"text":"(Boolean((status.backgroundSync?.queuedItems)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .backgroundSync on an `any` value.","line":313,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":313,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":313,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":313,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9897,9899],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":316,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":50,"fix":{"range":[9976,9979],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9976,9979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9976,9979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":317,"column":7,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":317,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":317,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":317,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":319,"column":24,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":319,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":319,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":319,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":321,"column":21,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":321,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":321,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":321,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":323,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":33,"fix":{"range":[10181,10184],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10181,10184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10181,10184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":324,"column":7,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":324,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":324,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":324,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":326,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":31,"fix":{"range":[10279,10282],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10279,10282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10279,10282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":327,"column":7,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":327,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":327,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":327,"endColumn":35}],"suppressedMessages":[],"errorCount":84,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":7,"fixableWarningCount":0,"source":"/**\n * Example Integration: Using Push Notifications in CosmicHub Components\n * This shows how to integrate the notification system into your existing components\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { getNotificationManager } from '../services/notificationManager';\n\n// Example: Chart Calculation Component with Notifications\nexport const ChartCalculationWithNotifications: React.FC = () => {\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [notificationManager] = useState(() => getNotificationManager());\n\n  const calculateChart = async (birthData: any) => {\n    setIsCalculating(true);\n    \n    try {\n      // Start calculation\n      const calculationPromise = fetch('/api/charts/calculate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(birthData)\n      });\n\n      // Queue for background sync in case of network issues\n      await notificationManager.syncChartCalculation({\n        userId: birthData.userId,\n        birthData,\n        timestamp: Date.now()\n      });\n\n      const result = await calculationPromise;\n      const chartData = await result.json();\n\n      // Notify user of completion\n      await notificationManager.notifyChartCalculationComplete(chartData);\n      \n      setIsCalculating(false);\n      return chartData;\n\n    } catch (error) {\n      setIsCalculating(false);\n      \n      // Notification for error (will sync when online)\n      await notificationManager.getPushManager().queueNotification({\n        title: '⚠️ Chart Calculation Queued',\n        body: 'Your chart will be calculated when connection is restored.',\n        tag: 'chart-queued',\n        urgency: 'normal'\n      });\n      \n      throw error;\n    }\n  };\n\n  return (\n    <div className=\"chart-calculation\">\n      <button \n        onClick={() => calculateChart({ userId: 'user123', /* birth data */ })}\n        disabled={isCalculating}\n        className=\"px-6 py-3 bg-purple-600 text-white rounded-lg disabled:opacity-50\"\n      >\n        {isCalculating ? 'Calculating...' : 'Calculate Chart'}\n      </button>\n    </div>\n  );\n};\n\n// Example: User Settings Page with Notification Preferences\nexport const UserSettingsWithNotifications: React.FC = () => {\n  const [notificationManager] = useState(() => getNotificationManager());\n  const [status, setStatus] = useState<any>({});\n\n  useEffect(() => {\n    // Load notification status\n    const loadStatus = () => {\n      const currentStatus = notificationManager.getNotificationStatus();\n      setStatus(currentStatus);\n    };\n\n    loadStatus();\n    \n    // Update status every 10 seconds\n    const interval = setInterval(loadStatus, 10000);\n    return () => clearInterval(interval);\n  }, [notificationManager]);\n\n  const handleSubscribe = async () => {\n    const success = await notificationManager.subscribeUser('user123', {\n      dailyHoroscope: true,\n      transitAlerts: true,\n      frequencyReminders: false,\n      appUpdates: true,\n      quietHours: { enabled: true, start: '22:00', end: '08:00' },\n      frequency: 'daily' as const\n    });\n\n    if (success) {\n      // Send welcome notification\n      await notificationManager.sendTestNotification();\n    }\n  };\n\n  return (\n    <div className=\"user-settings\">\n      <div className=\"notification-status mb-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Notification Status</h3>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {status.pushNotifications?.permissionStatus === 'granted' ? '✅' : '❌'}\n            </div>\n            <div className=\"text-sm\">Push Permission</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {status.backgroundSync?.isOnline ? '🌐' : '📴'}\n            </div>\n            <div className=\"text-sm\">Connection Status</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {status.backgroundSync?.queuedItems || 0}\n            </div>\n            <div className=\"text-sm\">Queued Items</div>\n          </div>\n          \n          <div className=\"p-4 bg-gray-100 rounded\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {status.pushNotifications?.activeSubscriptions || 0}\n            </div>\n            <div className=\"text-sm\">Active Devices</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"notification-actions\">\n        <button\n          onClick={handleSubscribe}\n          className=\"px-4 py-2 bg-green-600 text-white rounded mr-4\"\n        >\n          Enable Notifications\n        </button>\n        \n        <button\n          onClick={() => notificationManager.sendTestNotification()}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded mr-4\"\n        >\n          Test Notification\n        </button>\n        \n        <button\n          onClick={() => notificationManager.getSmartSuggestions()}\n          className=\"px-4 py-2 bg-purple-600 text-white rounded\"\n        >\n          Smart Setup\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Example: Dashboard with Real-time Notifications\nexport const DashboardWithNotifications: React.FC = () => {\n  const [notifications, setNotifications] = useState<any[]>([]);\n  const [notificationManager] = useState(() => getNotificationManager());\n\n  useEffect(() => {\n    // Listen for background sync events\n    const handleStorageChange = (event: StorageEvent) => {\n      if (event.key?.startsWith('cosmichub-sync-') && event.newValue) {\n        try {\n          const message = JSON.parse(event.newValue);\n          \n          // Add to notification feed\n          setNotifications(prev => [{\n            id: Date.now(),\n            type: message.type,\n            data: message.data,\n            timestamp: message.timestamp\n          }, ...prev.slice(0, 9)]); // Keep last 10\n          \n        } catch (error) {\n          console.warn('Failed to parse sync message:', error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Simulate some notifications for demo\n    const demoNotifications = [\n      {\n        id: 1,\n        type: 'chart_synced',\n        data: { chartId: 'chart123' },\n        timestamp: Date.now() - 300000 // 5 minutes ago\n      },\n      {\n        id: 2,\n        type: 'user_data_synced',\n        data: { userId: 'user123' },\n        timestamp: Date.now() - 600000 // 10 minutes ago\n      }\n    ];\n    \n    setNotifications(demoNotifications);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  const triggerTransitAlert = async () => {\n    await notificationManager.notifyTransitAlert(\n      'Mars',\n      'opposition to Venus',\n      'This could bring intensity to relationships and creative projects.'\n    );\n  };\n\n  const triggerDailyHoroscope = async () => {\n    await notificationManager.notifyDailyHoroscope(\n      'Gemini',\n      'Communication flows easily today. Trust your intuition in conversations.'\n    );\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"notification-feed mb-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Recent Activity</h3>\n        \n        <div className=\"space-y-2\">\n          {notifications.map(notification => (\n            <div \n              key={notification.id}\n              className=\"p-3 bg-blue-50 border-l-4 border-blue-400 rounded\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <div className=\"font-medium\">\n                    {notification.type === 'chart_synced' && '📊 Chart Synchronized'}\n                    {notification.type === 'user_data_synced' && '👤 Profile Updated'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    {new Date(notification.timestamp).toLocaleTimeString()}\n                  </div>\n                </div>\n                <div className=\"text-xs text-blue-600\">\n                  ✅ Synced\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"demo-triggers\">\n        <h3 className=\"text-lg font-semibold mb-4\">Demo Notifications</h3>\n        \n        <div className=\"space-x-4\">\n          <button\n            onClick={triggerTransitAlert}\n            className=\"px-4 py-2 bg-red-600 text-white rounded\"\n          >\n            🪐 Transit Alert\n          </button>\n          \n          <button\n            onClick={triggerDailyHoroscope}\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded\"\n          >\n            ✨ Daily Horoscope\n          </button>\n          \n          <button\n            onClick={() => notificationManager.notifyRetrograde('Mercury', 'entering')}\n            className=\"px-4 py-2 bg-purple-600 text-white rounded\"\n          >\n            ↩️ Retrograde Alert\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Example: Hook for using notifications in any component\nexport const useNotifications = () => {\n  const [manager] = useState(() => getNotificationManager());\n  const [status, setStatus] = useState<any>({});\n\n  useEffect(() => {\n    const updateStatus = () => {\n      setStatus(manager.getNotificationStatus());\n    };\n    \n    updateStatus();\n    const interval = setInterval(updateStatus, 5000);\n    \n    return () => clearInterval(interval);\n  }, [manager]);\n\n  return {\n    manager,\n    status,\n    isOnline: status.backgroundSync?.isOnline || false,\n    hasPermission: status.pushNotifications?.permissionStatus === 'granted',\n    queuedItems: status.backgroundSync?.queuedItems || 0,\n    \n    // Helper methods\n    subscribe: (userId: string, preferences?: any) => \n      manager.subscribeUser(userId, preferences),\n    \n    unsubscribe: () => manager.unsubscribeUser(),\n    \n    sendTest: () => manager.sendTestNotification(),\n    \n    notifyChart: (chartData: any) => \n      manager.notifyChartCalculationComplete(chartData),\n    \n    syncChart: (chartData: any) => \n      manager.syncChartCalculation(chartData)\n  };\n};\n\n// Example usage in any component:\n/*\nfunction MyComponent() {\n  const { \n    hasPermission, \n    isOnline, \n    queuedItems, \n    subscribe, \n    sendTest \n  } = useNotifications();\n\n  return (\n    <div>\n      <p>Permission: {hasPermission ? '✅' : '❌'}</p>\n      <p>Online: {isOnline ? '🌐' : '📴'}</p>\n      <p>Queued: {queuedItems}</p>\n      \n      <button onClick={() => subscribe('user123')}>\n        Enable Notifications\n      </button>\n      \n      <button onClick={sendTest}>\n        Test Notification\n      </button>\n    </div>\n  );\n}\n*/\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/ChartWheel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BackendChartResponse' is defined but never used.","line":59,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":91,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":91,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2209,2219],"text":"birthData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":95,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":95,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2394,2404],"text":"(birthData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":95,"column":30,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":95,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2408,2427],"text":"(preTransformedData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":102,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":102,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2649,2667],"text":"(preTransformedData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":102,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":102,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2668,2670],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'houseKey' is defined but never used.","line":125,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":60},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":150,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":150,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4419,4425],"text":"(Boolean(aspect))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":167,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":167,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":191,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":191,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[5612,5650],"text":"(aspectAngles[aspectType.toLowerCase()] !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[5612,5650],"text":"(!Number.isNaN(aspectAngles[aspectType.toLowerCase()]))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5612,5650],"text":"(Boolean(aspectAngles[aspectType.toLowerCase()]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signColors' is assigned a value but never used.","line":232,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":232,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endAngle' is assigned a value but never used.","line":260,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":311,"column":94,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":311,"endColumn":111,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[10360,10377],"text":"(planet.retrograde ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[10360,10377],"text":"(planet.retrograde === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":321,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":321,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[10823,10855],"text":"(planetColors[name.toLowerCase()].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[10823,10855],"text":"(planetColors[name.toLowerCase()] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10823,10855],"text":"(Boolean(planetColors[name.toLowerCase()]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":323,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":323,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[10912,10945],"text":"(planetSymbols[name.toLowerCase()].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[10912,10945],"text":"(planetSymbols[name.toLowerCase()] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10912,10945],"text":"(Boolean(planetSymbols[name.toLowerCase()]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":350,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":350,"endColumn":28,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[11944,11961],"text":"planet.retrograde ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[11944,11961],"text":"planet.retrograde === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"no-undef","severity":2,"message":"'index' is not defined.","line":362,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":362,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'index' is not defined.","line":371,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":371,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'index' is not defined.","line":377,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":377,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'index' is not defined.","line":383,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":383,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":394,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":394,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13197,13209],"text":"(data.aspects != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":399,"column":14,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":399,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":399,"column":26,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":399,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":410,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":410,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[13920,13945],"text":"(aspectColors[aspect.type].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[13920,13945],"text":"(aspectColors[aspect.type] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13920,13945],"text":"(Boolean(aspectColors[aspect.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":466,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":466,"endColumn":52,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[15587,15587],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[15587,15587],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":469,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":469,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15660,15679],"text":"(preTransformedData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":476,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":476,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15938,15943],"text":"error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":485,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":485,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16175,16180],"text":"data == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":508,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":508,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16968,16980],"text":"(data.aspects != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, memo, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchChartData, type ChartBirthData, type ChartData as APIChartData } from '../services/api';\nimport { Button } from '@cosmichub/ui';\n\n// Enhanced TypeScript interfaces\ninterface BackendPlanet {\n  position: number;\n  retrograde?: boolean;\n  speed?: number;\n}\n\ninterface BackendHouse {\n  house: number;\n  cusp: number;\n  sign?: string;\n}\n\ninterface Planet {\n  name: string;\n  position: number; // Degree in zodiac (0-360)\n  retrograde?: boolean;\n  speed?: number;\n}\n\ninterface House {\n  house: number;\n  number: number;\n  cusp: number; // Degree position\n  sign: string;\n}\n\ninterface APIAspect {\n  point1: string;\n  point2: string;\n  aspect: string;\n  orb: number;\n}\n\ninterface ChartData {\n  planets: Record<string, Planet>;\n  houses: House[];\n  aspects?: Aspect[];\n  angles?: Record<string, number>;\n}\n\ninterface Aspect {\n  planet1: string;\n  planet2: string;\n  angle: number;\n  orb: number;\n  type: AspectType;\n  applying: boolean;\n}\n\ntype AspectType = 'conjunction' | 'opposition' | 'trine' | 'square' | 'sextile' | 'quincunx';\n\ninterface BackendChartResponse {\n  planets?: Record<string, BackendPlanet>;\n  houses?: Record<string, BackendHouse>;\n  aspects?: APIAspect[];\n  latitude?: number;\n  longitude?: number;\n  timezone?: string;\n  julian_day?: number;\n  angles?: Record<string, number>;\n}\n\ninterface ChartWheelProps {\n  birthData?: ChartBirthData;\n  chartData?: ChartData; // Add pre-transformed chart data prop\n  showAspects?: boolean;\n  showAnimation?: boolean;\n}\n\n// Enhanced ChartWheel component with aspects and animations\nconst ChartWheel: React.FC<ChartWheelProps> = ({ \n  birthData, \n  chartData: preTransformedData,\n  showAspects = true, \n  showAnimation = true \n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  // Fetch chart data from backend using the /calculate endpoint (only if no pre-transformed data)\n  const { data: fetchedData, isLoading, error, refetch } = useQuery<ChartData>({\n    queryKey: ['chartData', birthData],\n    queryFn: async () => {\n      if (!birthData) throw new Error('Birth data required');\n      const response = await fetchChartData(birthData);\n      return transformAPIResponseToChartData(response);\n    },\n    enabled: !!birthData && !preTransformedData,\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n    gcTime: 10 * 60 * 1000, // Keep in cache for 10 minutes\n    retry: 2,\n  });\n\n  // Use pre-transformed data if available, otherwise use fetched data\n  const data = preTransformedData || fetchedData;\n\n  // Transform API response to our internal ChartData format (only used when no pre-transformed data)\n  const transformAPIResponseToChartData = (apiData: APIChartData): ChartData => {\n    // Transform planets\n    const transformedPlanets: Record<string, Planet> = {};\n    Object.entries(apiData.planets ?? {}).forEach(([name, planetData]) => {\n      if (\n        typeof planetData === 'object' &&\n        planetData !== null &&\n        typeof planetData.position === 'number'\n      ) {\n        transformedPlanets[name] = {\n          name,\n          position: planetData.position,\n          retrograde: typeof planetData.retrograde === 'boolean' ? planetData.retrograde : false,\n          speed: typeof planetData.speed === 'number' ? planetData.speed : 0,\n        };\n      }\n    });\n\n    // Transform houses \n    const transformedHouses: House[] = [];\n    Object.entries(apiData.houses ?? {}).forEach(([houseKey, houseData]) => {\n      function isAPIHouse(data: unknown): data is { house: number; cusp: number; sign?: string } {\n        const h = data as { house?: number; cusp?: number; sign?: string };\n        return (\n          typeof data === 'object' &&\n          data !== null &&\n          typeof h.house === 'number' &&\n          typeof h.cusp === 'number'\n        );\n      }\n\n      if (isAPIHouse(houseData)) {\n        transformedHouses.push({\n          house: houseData.house,\n          number: houseData.house,\n          cusp: houseData.cusp,\n          sign: typeof houseData.sign === 'string' ? houseData.sign : '',\n        });\n      }\n    });\n\n    // Transform aspects with proper type handling\n    const transformedAspects: Aspect[] = [];\n    \n    for (const aspect of (apiData.aspects ?? []) as unknown[]) {\n      if (!aspect || typeof aspect !== 'object') continue;\n      \n      const { point1, point2, aspect: aspectType, orb } = aspect as APIAspect;\n      \n      if (typeof point1 !== 'string' || typeof point2 !== 'string' || \n          typeof aspectType !== 'string' || typeof orb !== 'number') continue;\n\n      transformedAspects.push({\n        planet1: point1,\n        planet2: point2,\n        angle: getAspectAngle(aspectType),\n        orb: orb,\n        type: aspectType.toLowerCase() as AspectType,\n        applying: false,\n      });\n    }\n\n    const angles = apiData.angles ? { ...apiData.angles } : undefined;\n\n    return {\n      planets: transformedPlanets,\n      houses: transformedHouses.sort((a, b) => a.number - b.number),\n      aspects: transformedAspects,\n      angles,\n    };\n  };\n\n  // Helper function for aspect angle calculation\n  const getAspectAngle = (aspectType: string): number => {\n    const aspectAngles: Record<string, number> = {\n      'conjunction': 0,\n      'opposition': 180,\n      'trine': 120,\n      'square': 90,\n      'sextile': 60,\n      'quincunx': 150,\n      'semisextile': 30,\n      'semisquare': 45,\n      'sesquiquadrate': 135,\n      'quintile': 72,\n    };\n    return aspectAngles[aspectType.toLowerCase()] || 0;\n  };\n\n  // Memoized constants for performance\n  const chartConstants = useMemo(() => ({\n    width: 800,\n    height: 800,\n    radius: 320,\n    center: { x: 400, y: 400 },\n    signs: [\n      'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n      'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'\n    ],\n    signSymbols: ['♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓'],\n    signColors: [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD',\n      '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9', '#F8C471', '#82E0AA'\n    ],\n    planetSymbols: {\n      sun: '☉', moon: '☽', mercury: '☿', venus: '♀', mars: '♂',\n      jupiter: '♃', saturn: '♄', uranus: '♅', neptune: '♆', pluto: '♇',\n      chiron: '⚷', ceres: '⚳', pallas: '⚴', juno: '⚵', vesta: '⚶'\n    } as Record<string, string>,\n    planetColors: {\n      sun: '#FFD700', moon: '#E8E8E8', mercury: '#87CEEB', venus: '#32CD32', mars: '#FF4500',\n      jupiter: '#FF8C00', saturn: '#DAA520', uranus: '#4FD0E4', neptune: '#6495ED', pluto: '#DA70D6',\n      chiron: '#D2691E', ceres: '#90EE90', pallas: '#DDA0DD', juno: '#FFB6C1', vesta: '#F0E68C'\n    } as Record<string, string>,\n    aspectColors: {\n      conjunction: '#FF0000',\n      opposition: '#0066CC',\n      trine: '#00AA00',\n      square: '#FF6600',\n      sextile: '#9966FF',\n      quincunx: '#666666',\n    } as Record<string, string>\n  }), []);\n\n  useEffect(() => {\n    if (data === undefined || data === null || svgRef.current === null) return;\n\n    const { width, height, radius, center, signs, signSymbols, signColors, planetSymbols, planetColors, aspectColors } = chartConstants;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', `0 0 ${width} ${height}`)\n      .attr('class', 'mx-auto')\n      .attr('role', 'img')\n      .attr('aria-label', 'Astrological natal chart wheel');\n\n    const g = svg.append('g').attr('transform', `translate(${center.x}, ${center.y})`);\n\n    // Define concentric ring radii\n    const outerRadius = radius;\n    const houseNumberRadius = radius - 25;\n    const zodiacSymbolRadius = radius - 50;  // Outermost planet ring\n    const degreeRadius = radius - 80;        // Degree ring\n    const signRadius = radius - 110;         // Sign ring  \n    const retrogradeRadius = radius - 140;   // Innermost retrograde ring\n    const innerRadius = radius - 170;\n\n    // Draw 12 equal house divisions (30 degrees each)\n    for (let i = 0; i < 12; i++) {\n      const startAngle = (i * 30 - 90) * Math.PI / 180;\n      const endAngle = ((i + 1) * 30 - 90) * Math.PI / 180;\n\n      // House division lines (every 30 degrees) - equal houses\n      g.append('line')\n        .attr('x1', Math.cos(startAngle) * innerRadius)\n        .attr('y1', Math.sin(startAngle) * innerRadius)\n        .attr('x2', Math.cos(startAngle) * outerRadius)\n        .attr('y2', Math.sin(startAngle) * outerRadius)\n        .attr('stroke', '#333333')\n        .attr('stroke-width', 2)\n        .attr('stroke-opacity', 0.8)\n        .attr('aria-label', `House ${i + 1} division`);\n    }\n\n    // Draw house numbers in equal 30-degree segments\n    for (let i = 0; i < 12; i++) {\n      const midAngle = (i * 30 + 15 - 90) * Math.PI / 180; // Middle of each 30-degree segment\n      \n      g.append('text')\n        .attr('x', Math.cos(midAngle) * houseNumberRadius)\n        .attr('y', Math.sin(midAngle) * houseNumberRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '16')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#333333')\n        .text((i + 1).toString());\n    }\n\n    // Helper function to get zodiac sign info\n    function getZodiacInfo(position: number) {\n      const signIndex = Math.floor(position / 30);\n      const degreeInSign = Math.floor(position % 30);\n      const minuteInSign = Math.floor((position % 1) * 60);\n      return {\n        signIndex,\n        signName: signs[signIndex],\n        signSymbol: signSymbols[signIndex],\n        degree: degreeInSign,\n        minute: minuteInSign,\n        formatted: `${degreeInSign}°${minuteInSign.toString().padStart(2, '0')}'`\n      };\n    }\n\n    // Draw planets in concentric rings\n    Object.entries(data.planets ?? {}).forEach(([name, planet]: [string, Planet]) => {\n      const angle = (planet.position - 90) * Math.PI / 180;\n      const zodiacInfo = getZodiacInfo(planet.position);\n      \n      const planetGroup = g.append('g')\n        .attr('class', 'planet-group')\n        .attr('aria-label', `Planet ${planet.name} at ${planet.position.toFixed(1)} degrees${planet.retrograde ? ' retrograde' : ''}`);\n\n      // Ring 1: Planet Symbol (outermost) - use planet symbol, not zodiac\n      const planetSymbol = planetGroup.append('text')\n        .attr('x', Math.cos(angle) * zodiacSymbolRadius)\n        .attr('y', Math.sin(angle) * zodiacSymbolRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '18')\n        .attr('font-weight', 'bold')\n        .attr('fill', planetColors[name.toLowerCase()] || '#333333')\n        .attr('opacity', 0)\n        .text(planetSymbols[name.toLowerCase()] || name.slice(0, 2).toUpperCase());\n\n      // Ring 2: Degree\n      const degreeText = planetGroup.append('text')\n        .attr('x', Math.cos(angle) * degreeRadius)\n        .attr('y', Math.sin(angle) * degreeRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '11')\n        .attr('font-weight', 'normal')\n        .attr('fill', '#333333')\n        .attr('opacity', 0)\n        .text(zodiacInfo.formatted);\n\n      // Ring 3: Zodiac Sign Symbol (where the planet is located)\n      const signText = planetGroup.append('text')\n        .attr('x', Math.cos(angle) * signRadius)\n        .attr('y', Math.sin(angle) * signRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '16')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#666666')\n        .attr('opacity', 0)\n        .text(zodiacInfo.signSymbol);\n\n      // Ring 4: Retrograde indicator (innermost)\n      if (planet.retrograde) {\n        planetGroup.append('text')\n          .attr('x', Math.cos(angle) * retrogradeRadius)\n          .attr('y', Math.sin(angle) * retrogradeRadius)\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'middle')\n          .attr('font-size', '12')\n          .attr('font-weight', 'bold')\n          .attr('fill', '#FF0000')\n          .attr('opacity', 0)\n          .text('℞')\n          .transition()\n          .delay(showAnimation ? index * 100 + 600 : 0)\n          .duration(showAnimation ? 300 : 0)\n          .attr('opacity', 1);\n      }\n\n      // Animate elements in sequence\n      if (showAnimation) {\n        planetSymbol\n          .transition()\n          .delay(index * 100)\n          .duration(400)\n          .attr('opacity', 1);\n\n        degreeText\n          .transition()\n          .delay(index * 100 + 150)\n          .duration(400)\n          .attr('opacity', 1);\n\n        signText\n          .transition()\n          .delay(index * 100 + 300)\n          .duration(400)\n          .attr('opacity', 1);\n      } else {\n        planetSymbol.attr('opacity', 1);\n        degreeText.attr('opacity', 1);\n        signText.attr('opacity', 1);\n      }\n    });\n\n    // Draw aspects more subtly\n    if (showAspects && data.aspects) {\n      data.aspects.forEach((aspect, index) => {\n        const planet1 = data.planets[aspect.planet1];\n        const planet2 = data.planets[aspect.planet2];\n        \n        if (!planet1 || !planet2) return;\n\n        const angle1 = (planet1.position - 90) * Math.PI / 180;\n        const angle2 = (planet2.position - 90) * Math.PI / 180;\n        const aspectRadius = innerRadius - 20; // Position aspects in the center area\n\n        const line = g.append('line')\n          .attr('x1', Math.cos(angle1) * aspectRadius)\n          .attr('y1', Math.sin(angle1) * aspectRadius)\n          .attr('x2', Math.cos(angle1) * aspectRadius)\n          .attr('y2', Math.sin(angle1) * aspectRadius)\n          .attr('stroke', aspectColors[aspect.type] || '#666666')\n          .attr('stroke-width', aspect.type === 'conjunction' || aspect.type === 'opposition' ? 2 : 1)\n          .attr('stroke-opacity', 0.4)\n          .attr('stroke-dasharray', aspect.type === 'sextile' || aspect.type === 'quincunx' ? '3,3' : null)\n          .attr('aria-label', `${aspect.type} aspect between ${aspect.planet1} and ${aspect.planet2}`);\n\n        // Animate aspect lines\n        if (showAnimation) {\n          line\n            .transition()\n            .delay(1500 + index * 100)\n            .duration(800)\n            .attr('x2', Math.cos(angle2) * aspectRadius)\n            .attr('y2', Math.sin(angle2) * aspectRadius);\n        } else {\n          line\n            .attr('x2', Math.cos(angle2) * aspectRadius)\n            .attr('y2', Math.sin(angle2) * aspectRadius);\n        }\n      });\n    }\n\n    // Draw chart borders - clean and simple\n    // Outer circle\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', outerRadius)\n      .attr('fill', 'none')\n      .attr('stroke', '#333333')\n      .attr('stroke-width', 3);\n\n    // Inner circle only\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', innerRadius)\n      .attr('fill', '#ffffff')\n      .attr('stroke', '#333333')\n      .attr('stroke-width', 2);\n\n    // Center point\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', 3)\n      .attr('fill', '#333333');\n\n    // Cleanup function\n    return () => {\n      svg.selectAll('*').remove();\n    };\n  }, [data, showAspects, showAnimation, chartConstants]);\n\n  const handleRefresh = () => {\n    setIsAnimating(true);\n    refetch().finally(() => setIsAnimating(false));\n  };\n\n  if (isLoading && !preTransformedData) return (\n    <div className=\"flex items-center justify-center p-8\">\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-cosmic-gold\"></div>\n      <span className=\"ml-2 text-cosmic-silver\">Loading chart...</span>\n    </div>\n  );\n\n  if (error) return (\n    <div className=\"text-center p-8\">\n      <div className=\"text-red-500 mb-4\">Error loading chart</div>\n      <Button onClick={handleRefresh} variant=\"secondary\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  if (!data) return (\n    <div className=\"text-center p-8\">\n      <div className=\"text-cosmic-silver mb-4\">No chart data available</div>\n    </div>\n  );\n\n  return (\n    <div className=\"w-full max-w-5xl mx-auto p-4\">\n      <div className=\"mb-4 flex justify-between items-center\">\n        <h3 className=\"text-xl font-semibold text-cosmic-gold\">Natal Chart</h3>\n        <div className=\"flex gap-2\">\n          <Button onClick={handleRefresh} variant=\"secondary\" disabled={isAnimating}>\n            {isAnimating ? 'Refreshing...' : 'Refresh'}\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"bg-white rounded-lg p-6 border border-gray-300 shadow-lg\">\n        <svg \n          ref={svgRef} \n          className=\"w-full h-auto max-w-[800px] mx-auto\"\n        />\n        \n        {data.aspects && showAspects && (\n          <div className=\"mt-6 text-sm text-gray-700\">\n            <div className=\"font-medium mb-3 text-gray-900\">Major Aspects ({data.aspects.length})</div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 text-xs\">\n              {data.aspects.slice(0, 9).map((aspect, index) => (\n                <div key={index} className=\"flex items-center gap-2 p-2 bg-gray-50 rounded border border-gray-200\">\n                  <span className=\"capitalize font-medium\">{aspect.type}</span>\n                  <span className=\"text-gray-600\">\n                    {aspect.planet1} - {aspect.planet2}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Memoize to prevent unnecessary re-renders\nexport default memo(ChartWheel);","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/ChartWheelInteractive.tsx","messages":[{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":490,"column":63,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":490,"endColumn":65,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[17885,17887],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":492,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":492,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":537,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":537,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[19970,19988],"text":"(planetColors[name].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[19970,19988],"text":"(planetColors[name] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19970,19988],"text":"(Boolean(planetColors[name]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":711,"column":39,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":711,"endColumn":41,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[26055,26057],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":774,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":774,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[28220,28251],"text":"(interactiveState.selectedPlanet != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[28220,28251],"text":"(interactiveState.selectedPlanet ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[28220,28251],"text":"(Boolean(interactiveState.selectedPlanet))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":807,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":807,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[29530,29542],"text":"(data.aspects != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced Interactive Chart Wheel with Real-Time Features\n * Enhanced version with tooltips, animations, and real-time updates\n */\n\nimport React, { useEffect, useRef, memo, useState, useMemo, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchChartData, type ChartBirthData } from '../services/api';\nimport { Button } from '@cosmichub/ui';\nimport styles from './ChartWheelInteractive.module.css';\n\nimport type { AspectType, Planet as APIPlanet, House as APIHouse, Aspect as APIAspect, ChartData as APIChartData } from '../services/api.types';\n\n// Enhanced interfaces for interactivity that extend API types\ninterface Planet extends Omit<APIPlanet, 'dignity' | 'essential_dignity' | 'sign' | 'name'> {\n  name: string;\n  color?: string;\n}\n\ninterface House extends Omit<APIHouse, 'sign'> {\n  sign: string;\n  planets?: string[];\n}\n\ninterface Aspect extends Omit<APIAspect, 'aspect_type' | 'power' | 'planet1' | 'planet2' | 'exact'> {\n  planet1: string;\n  planet2: string;\n  angle: number;\n  type: AspectType;\n  strength: 'strong' | 'medium' | 'weak';\n  exact?: boolean;\n}\n\ninterface ChartData extends Omit<APIChartData, 'planets' | 'houses' | 'aspects' | 'house_system' | 'sidereal'> {\n  planets: Record<string, Planet>;\n  houses: House[];\n  aspects?: Aspect[];\n  transits?: Record<string, Planet>; // Real-time transit positions\n}\n\ninterface InteractiveState {\n  selectedPlanet: string | null;\n  hoveredElement: string | null;\n  showTransits: boolean;\n  highlightedAspects: string[];\n  zoomLevel: number;\n  rotationOffset: number;\n}\n\ninterface ChartWheelInteractiveProps {\n  birthData?: ChartBirthData;\n  chartData?: ChartData;\n  showAspects?: boolean;\n  showAnimation?: boolean;\n  showTransits?: boolean;\n  realTimeUpdates?: boolean;\n  onPlanetSelect?: (planet: string) => void;\n  onAspectSelect?: (aspect: Aspect) => void;\n}\n\nconst ChartWheelInteractive: React.FC<ChartWheelInteractiveProps> = ({\n  birthData,\n  chartData: preTransformedData,\n  showAspects = true,\n  showAnimation = true,\n  showTransits = false,\n  realTimeUpdates = false,\n  onPlanetSelect,\n  onAspectSelect\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [interactiveState, setInteractiveState] = useState<InteractiveState>({\n    selectedPlanet: null,\n    hoveredElement: null,\n    showTransits: showTransits,\n    highlightedAspects: [],\n    zoomLevel: 1,\n    rotationOffset: 0\n  });\n\n  // Fetch natal chart data\n  const { data: fetchedData, isLoading, error, refetch } = useQuery<ChartData>({\n    queryKey: ['chartData', birthData],\n    queryFn: async () => {\n      if (birthData === undefined || birthData === null) throw new Error('Birth data required');\n      const response = await fetchChartData(birthData);\n      return transformAPIResponseToChartData(response);\n    },\n    enabled: birthData !== undefined && birthData !== null && preTransformedData === null,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n    retry: 2,\n  });\n\n  // Fetch real-time transit data\n  const { data: transitData } = useQuery<Record<string, Planet>>({\n    queryKey: ['transitData'],\n    queryFn: async () => {\n      const currentTime = new Date();\n      const transitBirthData: ChartBirthData = {\n        year: currentTime.getFullYear(),\n        month: currentTime.getMonth() + 1,\n        day: currentTime.getDate(),\n        hour: currentTime.getHours(),\n        minute: currentTime.getMinutes(),\n        lat: 0, // Use chart location or default\n        lon: 0,\n        timezone: 'UTC',\n        city: 'Greenwich'\n      };\n      const response = await fetchChartData(transitBirthData);\n      return response.planets ?? {};\n    },\n    enabled: realTimeUpdates === true && interactiveState.showTransits === true,\n    refetchInterval: 60000, // Update every minute\n    staleTime: 30000\n  });\n\n  const data = preTransformedData ?? fetchedData;\n\n  // Transform API response with type-safe handling\n    // Transform API response with proper typing\n  const transformAPIResponseToChartData = (apiData: APIChartData): ChartData => {\n    const transformedPlanets: Record<string, Planet> = {};\n    const planets = apiData.planets ?? {};\n    \n    Object.entries(planets).forEach(([name, planetData]) => {\n      if (planetData === undefined || planetData === null) {\n        return;\n      }\n      \n      const position = typeof planetData.position === 'number' ? planetData.position : 0;\n      const retrograde = planetData.retrograde === true;\n      const speed = typeof planetData.speed === 'number' ? planetData.speed : 0;\n      \n      transformedPlanets[name] = {\n        name,\n        position,\n        retrograde,\n        speed,\n        house: calculateHouseForPlanet(position)\n      };\n    });\n\n    const transformedHouses: House[] = (apiData.houses ?? []).map(houseData => ({\n      number: houseData.number,\n      cusp: houseData.cusp,\n      sign: houseData.sign,\n      planets: []\n    }));\n\n    // Add planets to houses\n    Object.entries(transformedPlanets).forEach(([planetName, planet]) => {\n      const house = transformedHouses.find(h => h.number === planet.house);\n      if (house !== undefined && house !== null) {\n        house.planets ??= [];\n        house.planets.push(planetName);\n      }\n    });\n\n    const transformedAspects = (apiData.aspects ?? []).map(aspect => ({\n      planet1: aspect.planet1,\n      planet2: aspect.planet2,\n      angle: getAspectAngle(aspect.aspect_type),\n      orb: aspect.orb,\n      type: aspect.aspect_type,\n      applying: aspect.applying,\n      strength: getAspectStrength(aspect.orb)\n    }));\n\n    return {\n      planets: transformedPlanets,\n      houses: transformedHouses.sort((a, b) => a.number - b.number),\n      aspects: transformedAspects,\n      angles: apiData.angles,\n      transits: transitData,\n      latitude: apiData.latitude ?? 0,\n      longitude: apiData.longitude ?? 0,\n      timezone: apiData.timezone ?? 'UTC',\n      julian_day: apiData.julian_day ?? 0\n    };\n  };\n\n  // Utility functions\n  const calculateHouseForPlanet = (position: number): number => {\n    if (position === undefined || position === null) return 1;\n    // Simple house calculation - in production, use more accurate method\n    return Math.floor(position / 30) + 1;\n  };\n\n  const getAspectAngle = (aspectType: string): number => {\n    const aspectAngles: Record<string, number> = {\n      'conjunction': 0, 'opposition': 180, 'trine': 120,\n      'square': 90, 'sextile': 60, 'quincunx': 150\n    };\n    const key = aspectType.toLowerCase();\n    return aspectAngles[key] ?? 0;\n  };\n\n  const getAspectStrength = (orb: number): 'strong' | 'medium' | 'weak' => {\n    if (orb !== undefined && orb !== null) {\n      if (orb === 0 || orb <= 2) return 'strong';\n      if (orb > 2 && orb <= 5) return 'medium';\n    }\n    return 'weak';\n  };\n\n  // Interactive event handlers\n  const handlePlanetClick = useCallback((planetName: string) => {\n    setInteractiveState(prev => ({\n      ...prev,\n      selectedPlanet: prev.selectedPlanet === planetName ? null : planetName,\n      highlightedAspects: prev.selectedPlanet === planetName ? [] : \n        (data?.aspects?.filter(a => a.planet1 === planetName || a.planet2 === planetName).map(a => `${a.planet1}-${a.planet2}`) ?? [])\n    }));\n    onPlanetSelect?.(planetName);\n  }, [data?.aspects, onPlanetSelect]);\n\n  const handleAspectClick = useCallback((aspect: Aspect) => {\n    onAspectSelect?.(aspect);\n    setInteractiveState(prev => ({\n      ...prev,\n      highlightedAspects: [`${aspect.planet1}-${aspect.planet2}`]\n    }));\n  }, [onAspectSelect]);\n\n  const showTooltip = useCallback((content: string, event: { pageX: number; pageY: number }) => {\n    if (\n      tooltipRef.current === null || \n      tooltipRef.current === undefined ||\n      typeof content !== 'string' ||\n      content.length === 0 ||\n      typeof event?.pageX !== 'number' ||\n      typeof event?.pageY !== 'number'\n    ) {\n      return;\n    }\n    \n    tooltipRef.current.innerHTML = content;\n    tooltipRef.current.style.display = 'block';\n    tooltipRef.current.style.left = `${event.pageX + 10}px`;\n    tooltipRef.current.style.top = `${event.pageY - 10}px`;\n  }, []);\n\n  const hideTooltip = useCallback(() => {\n    if (tooltipRef.current === null) return;\n    tooltipRef.current.style.display = 'none';\n  }, []);\n\n  // Chart constants with enhanced styling\n  const chartConstants = useMemo(() => ({\n    width: 900,\n    height: 900,\n    radius: 380,\n    center: { x: 450, y: 450 },\n    signs: [\n      'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n      'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'\n    ],\n    signSymbols: ['♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓'],\n    signColors: [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD',\n      '#74B9FF', '#A29BFE', '#FD79A8', '#FDCB6E', '#6C5CE7', '#00B894'\n    ],\n    planetSymbols: {\n      sun: '☉', moon: '☽', mercury: '☿', venus: '♀', mars: '♂',\n      jupiter: '♃', saturn: '♄', uranus: '♅', neptune: '♆', pluto: '♇',\n      chiron: '⚷', ceres: '⚳', pallas: '⚴', juno: '⚵', vesta: '⚶'\n    } as Record<string, string>,\n    planetColors: {\n      sun: '#FFD700', moon: '#E8E8E8', mercury: '#87CEEB', venus: '#32CD32', mars: '#FF4500',\n      jupiter: '#FF8C00', saturn: '#DAA520', uranus: '#4FD0E4', neptune: '#6495ED', pluto: '#DA70D6',\n      chiron: '#D2691E', ceres: '#90EE90', pallas: '#DDA0DD', juno: '#FFB6C1', vesta: '#F0E68C'\n    } as Record<string, string>,\n    aspectColors: {\n      conjunction: '#FF0000', opposition: '#0066CC', trine: '#00AA00',\n      square: '#FF6600', sextile: '#9966FF', quincunx: '#666666'\n    } as Record<string, string>,\n    transitColors: {\n      sun: '#FFD700AA', moon: '#E8E8E8AA', mercury: '#87CEEBAA', venus: '#32CD32AA', mars: '#FF4500AA'\n    } as Record<string, string>\n  }), []);\n\n  // Main chart rendering effect\n  useEffect(() => {\n    if (data === null || data === undefined || svgRef.current === null) {\n      return;\n    }\n\n    const { width, height, radius, center, signs, signSymbols, signColors, planetSymbols, planetColors, aspectColors } = chartConstants;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', `0 0 ${width} ${height}`)\n      .attr('class', 'mx-auto cursor-crosshair')\n      .style('background', 'radial-gradient(circle, #f8f9fa 0%, #e9ecef 100%)')\n      .attr('role', 'img')\n      .attr('aria-label', 'Interactive astrological natal chart wheel');\n\n    const g = svg.append('g')\n      .attr('transform', `translate(${center.x}, ${center.y}) scale(${interactiveState.zoomLevel}) rotate(${interactiveState.rotationOffset})`);\n\n    // Define enhanced ring radii\n    const outerRadius = radius;\n    const signBandRadius = radius - 30;\n    const houseNumberRadius = radius - 60;\n    const planetRadius = radius - 90;\n    const transitRadius = radius - 120;\n    const aspectRadius = radius - 180;\n    const innerRadius = radius - 200;\n\n    // Draw zodiac sign bands with gradients\n    const defs = svg.append('defs');\n    signColors.forEach((color, index) => {\n      const gradient = defs.append('linearGradient')\n        .attr('id', `signGradient${index}`)\n        .attr('x1', '0%').attr('y1', '0%')\n        .attr('x2', '100%').attr('y2', '100%');\n      \n      gradient.append('stop')\n        .attr('offset', '0%')\n        .attr('stop-color', color)\n        .attr('stop-opacity', 0.3);\n      \n      gradient.append('stop')\n        .attr('offset', '100%')\n        .attr('stop-color', color)\n        .attr('stop-opacity', 0.1);\n    });\n\n    // Draw zodiac sign sectors\n    signs.forEach((sign, index) => {\n      const startAngle = (index * 30 - 90) * Math.PI / 180;\n      const endAngle = ((index + 1) * 30 - 90) * Math.PI / 180;\n\n      const arcData = { startAngle, endAngle };\n      const arc = d3.arc<void, typeof arcData>()\n        .innerRadius(signBandRadius)\n        .outerRadius(outerRadius);\n\n      g.append('path')\n        .attr('d', arc(arcData) as string)\n        .attr('fill', `url(#signGradient${index})`)\n        .attr('stroke', '#ffffff')\n        .attr('stroke-width', 1)\n        .style('cursor', 'pointer')\n                .on('mouseover', function(this: SVGPathElement, event: { pageX: number; pageY: number }) {\n          if (sign.length > 0) {\n            d3.select(this).attr('fill-opacity', 0.8);\n            showTooltip(`<strong>${sign}</strong><br/>Element: ${getSignElement(sign)}<br/>Quality: ${getSignQuality(sign)}`, event);\n          }\n        })\n        .on('mouseout', function() {\n          d3.select(this).attr('fill-opacity', 1);\n          hideTooltip();\n        });\n\n      // Sign symbols\n      const midAngle = (index * 30 + 15 - 90) * Math.PI / 180;\n      g.append('text')\n        .attr('x', Math.cos(midAngle) * (signBandRadius + 15))\n        .attr('y', Math.sin(midAngle) * (signBandRadius + 15))\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '24')\n        .attr('font-weight', 'bold')\n        .attr('fill', signColors[index])\n        .attr('stroke', '#ffffff')\n        .attr('stroke-width', 0.5)\n        .text(signSymbols[index])\n        .style('text-shadow', '1px 1px 2px rgba(0,0,0,0.3)');\n    });\n\n    // Draw house divisions and numbers\n    for (let i = 0; i < 12; i++) {\n      const angle = (i * 30 - 90) * Math.PI / 180;\n      \n      // House division lines\n      g.append('line')\n        .attr('x1', Math.cos(angle) * innerRadius)\n        .attr('y1', Math.sin(angle) * innerRadius)\n        .attr('x2', Math.cos(angle) * outerRadius)\n        .attr('y2', Math.sin(angle) * outerRadius)\n        .attr('stroke', '#333333')\n        .attr('stroke-width', i % 3 === 0 ? 3 : 1.5) // Emphasize angular houses\n        .attr('stroke-opacity', 0.7);\n\n      // House numbers\n      const midAngle = (i * 30 + 15 - 90) * Math.PI / 180;\n      const houseData = data.houses.find(h => h.number === i + 1);\n      \n      g.append('text')\n        .attr('x', Math.cos(midAngle) * houseNumberRadius)\n        .attr('y', Math.sin(midAngle) * houseNumberRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', '18')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#2c3e50')\n        .text((i + 1).toString())\n        .style('cursor', 'pointer')\n        .on('mouseover', function(event) {\n          showTooltip(`<strong>House ${i + 1}</strong><br/>Sign: ${houseData?.sign ?? 'Unknown'}<br/>Planets: ${houseData?.planets?.join(', ') ?? 'None'}`, event as unknown as { pageX: number; pageY: number });\n        })\n        .on('mouseout', hideTooltip);\n    }\n\n    // Draw natal planets with enhanced interactivity\n    Object.entries(data.planets).forEach(([name, planet], index) => {\n      const angle = (planet.position - 90) * Math.PI / 180;\n      const isSelected = interactiveState.selectedPlanet === name;\n      const isHighlighted = interactiveState.highlightedAspects.some(aspectId => \n        aspectId.includes(name)\n      );\n\n      const planetGroup = g.append('g')\n        .attr('class', 'planet-group')\n        .style('cursor', 'pointer')\n        .on('click', () => handlePlanetClick(name))\n        .on('mouseover', function(event) {\n          d3.select(this).select('circle').attr('r', 25);\n          const tooltipContent = `\n            <strong>${name.charAt(0).toUpperCase() + name.slice(1)}</strong><br/>\n            Position: ${formatDegree(planet.position)}<br/>\n            House: ${planet.house}<br/>\n            ${planet.retrograde ? '<span style=\"color: red;\">Retrograde ℞</span>' : 'Direct'}\n          `;\n          showTooltip(tooltipContent, event as unknown as { pageX: number; pageY: number });\n        })\n        .on('mouseout', function() {\n          if (!isSelected) {\n            d3.select(this).select('circle').attr('r', 20);\n          }\n          hideTooltip();\n        });\n\n      // Planet background circle\n      planetGroup.append('circle')\n        .attr('cx', Math.cos(angle) * planetRadius)\n        .attr('cy', Math.sin(angle) * planetRadius)\n        .attr('r', isSelected ? 25 : 20)\n        .attr('fill', isSelected ? planetColors[name] : '#ffffff')\n        .attr('stroke', planetColors[name] ?? '#333333')\n        .attr('stroke-width', isHighlighted ? 4 : 2)\n        .attr('fill-opacity', 0.9)\n        .style('filter', isSelected ? 'drop-shadow(0 0 10px rgba(0,0,0,0.5))' : 'none');\n\n      // Planet symbol\n      planetGroup.append('text')\n        .attr('x', Math.cos(angle) * planetRadius)\n        .attr('y', Math.sin(angle) * planetRadius)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', isSelected ? '20' : '16')\n        .attr('font-weight', 'bold')\n        .attr('fill', isSelected ? '#ffffff' : (planetColors[name] ?? '#333333'))\n          .text(planetSymbols[name]?.length > 0 ? planetSymbols[name] : name.slice(0, 2).toUpperCase());      // Retrograde indicator\n      if (planet.retrograde) {\n        planetGroup.append('text')\n          .attr('x', Math.cos(angle) * planetRadius + 15)\n          .attr('y', Math.sin(angle) * planetRadius - 15)\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'middle')\n          .attr('font-size', '12')\n          .attr('font-weight', 'bold')\n          .attr('fill', '#FF0000')\n          .text('℞');\n      }\n\n      // Animation\n      if (showAnimation) {\n        planetGroup\n          .style('opacity', 0)\n          .transition()\n          .delay(index * 100)\n          .duration(600)\n          .style('opacity', 1);\n      }\n    });\n\n    // Draw transits if enabled\n    if (interactiveState.showTransits === true && transitData != null) {\n      Object.entries(transitData).forEach(([name, planet]) => {\n        if (!data.planets[name]) return; // Only show transits for natal planets\n\n        const angle = (planet.position - 90) * Math.PI / 180;\n        \n        const transitGroup = g.append('g')\n          .attr('class', 'transit-group')\n          .style('cursor', 'pointer')\n          .on('mouseover', function(event) {\n            const tooltipContent = `\n              <strong>Transit ${name.charAt(0).toUpperCase() + name.slice(1)}</strong><br/>\n              Current Position: ${formatDegree(planet.position)}<br/>\n              Natal Position: ${formatDegree(data.planets[name].position)}\n            `;\n            showTooltip(tooltipContent, event as unknown as { pageX: number; pageY: number });\n          })\n          .on('mouseout', hideTooltip);\n\n        // Transit planet (hollow circle)\n        transitGroup.append('circle')\n          .attr('cx', Math.cos(angle) * transitRadius)\n          .attr('cy', Math.sin(angle) * transitRadius)\n          .attr('r', 15)\n          .attr('fill', 'none')\n          .attr('stroke', planetColors[name] ?? '#333333')\n          .attr('stroke-width', 2)\n          .attr('stroke-dasharray', '3,3');\n\n        // Transit symbol\n        transitGroup.append('text')\n          .attr('x', Math.cos(angle) * transitRadius)\n          .attr('y', Math.sin(angle) * transitRadius)\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'middle')\n          .attr('font-size', '12')\n          .attr('font-weight', 'bold')\n          .attr('fill', planetColors[name] ?? '#333333')\n          .text(planetSymbols[name] ?? name.slice(0, 1).toUpperCase());\n\n        // Connect transit to natal position\n        const natalAngle = (data.planets[name].position - 90) * Math.PI / 180;\n        g.append('line')\n          .attr('x1', Math.cos(natalAngle) * planetRadius)\n          .attr('y1', Math.sin(natalAngle) * planetRadius)\n          .attr('x2', Math.cos(angle) * transitRadius)\n          .attr('y2', Math.sin(angle) * transitRadius)\n          .attr('stroke', planetColors[name] || '#333333')\n          .attr('stroke-width', 1)\n          .attr('stroke-opacity', 0.3)\n          .attr('stroke-dasharray', '2,2');\n      });\n    }\n\n    // Draw aspects with enhanced interactivity\n    if (showAspects && Array.isArray(data.aspects) && data.aspects.length > 0) {\n      data.aspects.forEach((aspect, index) => {\n        if (\n          typeof aspect.planet1 !== 'string' || \n          typeof aspect.planet2 !== 'string' ||\n          !(aspect.planet1 in data.planets) ||\n          !(aspect.planet2 in data.planets)\n        ) {\n          return;\n        }\n\n        const planet1 = data.planets[aspect.planet1];\n        const planet2 = data.planets[aspect.planet2];\n        \n        if (\n          typeof planet1?.position !== 'number' || \n          typeof planet2?.position !== 'number'\n        ) {\n          return;\n        }\n\n        const angle1 = (planet1.position - 90) * Math.PI / 180;\n        const angle2 = (planet2.position - 90) * Math.PI / 180;\n        const aspectId = `${aspect.planet1}-${aspect.planet2}`;\n        const isHighlighted = Array.isArray(interactiveState.highlightedAspects) && \n          interactiveState.highlightedAspects.includes(aspectId);\n\n        const line = g.append('line')\n          .attr('class', 'aspect-line')\n          .attr('x1', Math.cos(angle1) * aspectRadius)\n          .attr('y1', Math.sin(angle1) * aspectRadius)\n          .attr('x2', Math.cos(angle2) * aspectRadius)\n          .attr('y2', Math.sin(angle2) * aspectRadius)\n          .attr('stroke', aspectColors[aspect.type] ?? '#666666')\n          .attr('stroke-width', isHighlighted ? 3 : (aspect.strength === 'strong' ? 2 : 1))\n          .attr('stroke-opacity', isHighlighted ? 0.8 : 0.4)\n          .attr('stroke-dasharray', getAspectDashArray(aspect.type))\n          .style('cursor', 'pointer')\n          .on('click', () => handleAspectClick(aspect))\n          .on('mouseover', function(event) {\n            d3.select(this).attr('stroke-opacity', 0.8).attr('stroke-width', 3);\n            const tooltipContent = `\n              <strong>${aspect.type.charAt(0).toUpperCase() + aspect.type.slice(1)}</strong><br/>\n              ${aspect.planet1} - ${aspect.planet2}<br/>\n              Orb: ${aspect.orb.toFixed(1)}°<br/>\n              Strength: ${aspect.strength}\n            `;\n            showTooltip(tooltipContent, event as unknown as { pageX: number; pageY: number });\n          })\n          .on('mouseout', function() {\n            if (!isHighlighted) {\n              d3.select(this).attr('stroke-opacity', 0.4).attr('stroke-width', aspect.strength === 'strong' ? 2 : 1);\n            }\n            hideTooltip();\n          });\n\n        // Animation for aspects\n        if (showAnimation) {\n          line\n            .attr('stroke-dashoffset', 100)\n            .transition()\n            .delay(1000 + index * 50)\n            .duration(800)\n            .attr('stroke-dashoffset', 0);\n        }\n      });\n    }\n\n    // Draw chart borders\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', outerRadius)\n      .attr('fill', 'none')\n      .attr('stroke', '#2c3e50')\n      .attr('stroke-width', 4);\n\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', innerRadius)\n      .attr('fill', '#ffffff')\n      .attr('fill-opacity', 0.8)\n      .attr('stroke', '#2c3e50')\n      .attr('stroke-width', 2);\n\n    // Center point\n    g.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', 5)\n      .attr('fill', '#2c3e50');\n\n  }, [data, showAspects, showAnimation, interactiveState, transitData, chartConstants, handlePlanetClick, handleAspectClick, showTooltip, hideTooltip]);\n\n  // Utility functions\n  const formatDegree = (degree: number): string => {\n    const signIndex = Math.floor(degree / 30);\n    const signs = ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n                   'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'];\n    const degreeInSign = Math.floor(degree % 30);\n    const minutes = Math.floor((degree % 1) * 60);\n    return `${degreeInSign}°${minutes.toString().padStart(2, '0')}' ${signs[signIndex]}`;\n  };\n\n  const getSignElement = (sign: string): string => {\n    const elements: Record<string, string> = {\n      Aries: 'Fire', Taurus: 'Earth', Gemini: 'Air', Cancer: 'Water',\n      Leo: 'Fire', Virgo: 'Earth', Libra: 'Air', Scorpio: 'Water',\n      Sagittarius: 'Fire', Capricorn: 'Earth', Aquarius: 'Air', Pisces: 'Water'\n    };\n    return elements[sign] ?? 'Unknown';\n  };\n\n  const getSignQuality = (sign: string): string => {\n    const qualities: Record<string, string> = {\n      Aries: 'Cardinal', Taurus: 'Fixed', Gemini: 'Mutable', Cancer: 'Cardinal',\n      Leo: 'Fixed', Virgo: 'Mutable', Libra: 'Cardinal', Scorpio: 'Fixed',\n      Sagittarius: 'Mutable', Capricorn: 'Cardinal', Aquarius: 'Fixed', Pisces: 'Mutable'\n    };\n    return qualities[sign] ?? 'Unknown';\n  };\n\n  const getAspectDashArray = (aspectType: string): string => {\n              if (aspectType.length === 0) return 'none';\n    switch (aspectType) {\n      case 'conjunction':\n      case 'opposition': return 'none';\n      case 'trine': return '8,2';\n      case 'square': return '4,4';\n      case 'sextile': return '6,3';\n      case 'quincunx': return '3,3';\n      default: return '2,2';\n    }\n  };\n\n  // Control handlers\n  const handleRefresh = () => {\n    setIsAnimating(true);\n    void refetch().finally(() => setIsAnimating(false));\n  };\n\n  const toggleTransits = () => {\n    setInteractiveState(prev => ({ \n      ...prev, \n      showTransits: prev.showTransits === true ? false : true \n    }));\n  };\n\n  const resetSelection = () => {\n    setInteractiveState(prev => ({\n      ...prev,\n      selectedPlanet: null,\n      highlightedAspects: [],\n      zoomLevel: 1,\n      rotationOffset: 0\n    }));\n  };\n\n  const handleZoom = (direction: 'in' | 'out') => {\n    setInteractiveState(prev => ({\n      ...prev,\n      zoomLevel: Math.max(0.5, Math.min(2, prev.zoomLevel + (direction === 'in' ? 0.1 : -0.1)))\n    }));\n  };\n\n  if (isLoading && preTransformedData == null) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-cosmic-gold\"></div>\n        <span className=\"ml-2 text-cosmic-silver\">Loading interactive chart...</span>\n      </div>\n    );\n  }\n\n  if (error !== undefined && error !== null) {\n    return (\n      <div className=\"text-center p-8\">\n        <div className=\"text-red-500 mb-4\">Error loading chart</div>\n        <Button onClick={handleRefresh} variant=\"secondary\">\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  if (data === undefined || data === null) {\n    return (\n      <div className=\"text-center p-8\">\n        <div className=\"text-cosmic-silver mb-4\">No chart data available</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto p-4\">\n      {/* Control Panel */}\n      <div className={styles.controlPanel}>\n        <div className=\"flex flex-wrap items-center justify-between gap-4\">\n          <h3 className=\"text-xl font-semibold text-cosmic-gold\">Interactive Natal Chart</h3>\n          \n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              onClick={toggleTransits} \n              variant={interactiveState.showTransits ? \"primary\" : \"secondary\"}\n              className=\"text-sm\"\n            >\n              {interactiveState.showTransits ? '🔄 Hide Transits' : '🔄 Show Transits'}\n            </Button>\n            \n            <Button onClick={() => handleZoom('in')} variant=\"secondary\" className=\"text-sm\">\n              🔍+\n            </Button>\n            \n            <Button onClick={() => handleZoom('out')} variant=\"secondary\" className=\"text-sm\">\n              🔍-\n            </Button>\n            \n            <Button onClick={resetSelection} variant=\"secondary\" className=\"text-sm\">\n              🔄 Reset\n            </Button>\n            \n            <Button onClick={handleRefresh} variant=\"secondary\" disabled={isAnimating} className=\"text-sm\">\n              {isAnimating ? 'Refreshing...' : '↻ Refresh'}\n            </Button>\n          </div>\n        </div>\n\n        {/* Selection Info */}\n        {interactiveState.selectedPlanet && (\n          <div className={styles.selectionInfo}>\n            <h4 className=\"text-cosmic-gold font-semibold mb-2\">\n              Selected: {interactiveState.selectedPlanet.charAt(0).toUpperCase() + interactiveState.selectedPlanet.slice(1)}\n            </h4>\n            <div className=\"text-cosmic-silver text-sm space-y-1\">\n              <div>Position: {formatDegree(data.planets[interactiveState.selectedPlanet]?.position ?? 0)}</div>\n              <div>House: {data.planets[interactiveState.selectedPlanet]?.house ?? 'Unknown'}</div>\n              {data.planets[interactiveState.selectedPlanet]?.retrograde === true && (\n                <div className=\"text-red-400\">Status: Retrograde ℞</div>\n              )}\n              {interactiveState.highlightedAspects.length > 0 && (\n                <div>Aspects: {interactiveState.highlightedAspects.length} highlighted</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Chart Container */}\n      <div className={styles.chartContainer}>\n        <svg \n          ref={svgRef} \n          className={styles.chartSvg}\n        />\n        \n        {/* Tooltip */}\n        <div\n          ref={tooltipRef}\n          className={styles.chartTooltip}\n        />\n\n        {/* Legend */}\n        {data.aspects && showAspects && (\n          <div className={styles.chartLegend}>\n            <div>\n              <h5 className=\"font-semibold text-gray-800 mb-2\">Major Aspects ({data.aspects.length})</h5>\n              <div className=\"space-y-1\">\n                {Object.entries(chartConstants.aspectColors).map(([type, color]) => (\n                  <div key={type} className=\"flex items-center gap-2\">\n                    <div \n                      className={`${styles.aspectLegendLine} aspect-color-${type}`}\n                      data-aspect-color={color}\n                    />\n                    <span className=\"capitalize text-gray-700\">{type}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {interactiveState.showTransits && (\n              <div>\n                <h5 className=\"font-semibold text-gray-800 mb-2\">Transits</h5>\n                <div className=\"text-gray-600 text-xs\">\n                  Hollow circles show current planetary positions\n                </div>\n              </div>\n            )}\n\n            <div>\n              <h5 className=\"font-semibold text-gray-800 mb-2\">Controls</h5>\n              <div className=\"text-gray-600 text-xs space-y-1\">\n                <div>• Click planets to highlight aspects</div>\n                <div>• Hover for detailed information</div>\n                <div>• Use zoom controls to explore</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ChartWheelInteractive);\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/frequency/AstroFrequencyGenerator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":33,"fix":{"range":[848,851],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[848,851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[848,851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":39,"fix":{"range":[917,920],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":36,"column":80,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":282,"endColumn":3},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentTransits' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":74,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":74,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2408,2418],"text":"chartData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":76,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":65},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":76,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":76,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2468,2493],"text":"(Boolean(chartData.dominantElement))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":76,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":76,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2494,2496],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [dominantElement] resolves to an `any` value.","line":86,"column":69,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":86,"endColumn":84},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":92,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":92,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2949,2964],"text":"selectedPreset == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":116,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":116,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3858,3867],"text":"(chartData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":152,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":152,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5613,5633],"text":"(preset.astrologyData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":177,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":177,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7005,7025],"text":"(preset.astrologyData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":201,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":201,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8012,8026],"text":"(selectedPreset != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":248,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":248,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10246,10274],"text":"(selectedPreset.astrologyData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":258,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":258,"endColumn":35},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":278,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":278,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11293,11307],"text":"(selectedPreset != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo, lazy, Suspense } from 'react';\nimport { devConsole } from '../../config/environment';\nimport { \n  AudioEngine, \n  FrequencyPreset, \n  AudioSettings, \n  PLANETARY_FREQUENCIES,\n  SOLFEGGIO_FREQUENCIES \n} from '@cosmichub/frequency';\nimport * as Slider from '@radix-ui/react-slider';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport { TooltipProvider } from '@radix-ui/react-tooltip';\n\nconst LazyAstroInfo = lazy(() => import('./AstroInfo')); // Lazy load for performance\n\ninterface AstrologyEnhancement {\n  planetaryAlignment: string;\n  transitInfluence: string;\n  recommendedDuration: number;\n  chartHarmonic: number;\n}\n\ninterface AstroFrequencyPreset extends FrequencyPreset {\n  astrologyData?: AstrologyEnhancement;\n}\n\ninterface AstroFrequencyGeneratorProps {\n  chartData?: Record<string, any>; // Strict type if available\n  currentTransits?: Record<string, any>;\n}\n\n/**\n * Astrology-Enhanced Frequency Generator\n * Uses the same shared audio engine as HealWave, but adds astrology-specific features\n */\nexport const AstroFrequencyGenerator: React.FC<AstroFrequencyGeneratorProps> = React.memo(({ \n  chartData, \n  currentTransits \n}) => {\n  const [audioEngine] = useState(() => new AudioEngine());\n  const [selectedPreset, setSelectedPreset] = useState<AstroFrequencyPreset | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [settings, setSettings] = useState<AudioSettings>({\n    volume: 50,\n    duration: 15,\n    fadeIn: 3,\n    fadeOut: 3,\n  });\n\n  // Enhanced presets with astrology context - Memoized\n  const astroEnhancedPresets = useMemo<AstroFrequencyPreset[]>(() => [\n    ...PLANETARY_FREQUENCIES.map((preset) => ({\n      ...preset,\n      astrologyData: {\n        planetaryAlignment: 'Venus trine Jupiter',\n        transitInfluence: 'Harmonious energy for healing',\n        recommendedDuration: 20,\n        chartHarmonic: 5,\n      },\n    })),\n    ...SOLFEGGIO_FREQUENCIES.map((preset) => ({\n      ...preset,\n      astrologyData: {\n        planetaryAlignment: 'Current moon phase alignment',\n        transitInfluence: 'Enhanced by lunar cycle',\n        recommendedDuration: 15,\n        chartHarmonic: 7,\n      },\n    })),\n  ], []);\n\n  // Calculate personalized frequency based on chart data\n  const getPersonalizedFrequency = useCallback((basePreset: AstroFrequencyPreset): AstroFrequencyPreset => {\n    if (!chartData) return basePreset;\n\n    const dominantElement = chartData.dominantElement || 'earth';\n    const elementMultipliers: Record<string, number> = {\n      fire: 1.05,\n      earth: 1.0,\n      air: 1.02,\n      water: 0.98,\n    };\n\n    return {\n      ...basePreset,\n      baseFrequency: basePreset.baseFrequency * (elementMultipliers[dominantElement] ?? 1.0),\n      description: `${basePreset.description} - Personalized for ${dominantElement} dominance`,\n    };\n  }, [chartData]);\n\n  const handlePlay = useCallback(async () => {\n    if (!selectedPreset) return;\n    try {\n      const personalizedPreset = getPersonalizedFrequency(selectedPreset);\n      await audioEngine.startFrequency(personalizedPreset, settings);\n      setIsPlaying(true);\n    } catch (error) {\n      devConsole.error('❌ Failed to start astrology frequency:', error);\n    }\n  }, [audioEngine, selectedPreset, settings, getPersonalizedFrequency]);\n\n  const handleStop = useCallback(() => {\n    audioEngine.stopFrequency();\n    setIsPlaying(false);\n  }, [audioEngine]);\n\n  const updateSettings = useCallback((key: keyof AudioSettings, value: number) => {\n    setSettings((prev) => ({ ...prev, [key]: value }));\n  }, []);\n\n  return (\n    <div className=\"astro-frequency-generator\" role=\"region\" aria-label=\"Astro Frequency Generator\">\n      <h2 className=\"mb-6 text-2xl font-bold\">🌟 Astrology-Enhanced Frequency Therapy</h2>\n      \n      {/* Chart Integration Notice */}\n      {chartData && (\n        <div className=\"p-4 mb-6 border border-purple-200 rounded-lg bg-purple-50\">\n          <h3 className=\"font-semibold text-purple-800\">✨ Personalized for Your Chart</h3>\n          <p className=\"mt-1 text-sm text-purple-700\">\n            Frequencies are automatically adjusted based on your dominant element and current transits\n          </p>\n        </div>\n      )}\n\n      {/* Preset Selection with Astrology Context */}\n      <div className=\"mb-6\">\n        <TooltipProvider>\n          <div\n            className=\"grid grid-cols-1 gap-4 md:grid-cols-2\"\n            role=\"radiogroup\"\n            aria-label=\"Astrology frequency presets\"\n          >\n            {astroEnhancedPresets.map((preset) => {\n              const isSelected = selectedPreset?.id === preset.id;\n              return (\n                <Tooltip.Root key={preset.id}>\n                  <Tooltip.Trigger asChild>\n                    {isSelected ? (\n                      <button\n                        onClick={() => setSelectedPreset(preset)}\n                        className=\"p-4 rounded-lg border text-left transition-colors border-purple-500 bg-purple-50\"\n                        role=\"radio\"\n                        aria-checked=\"true\"\n                        aria-label={`${preset.name} preset (${preset.baseFrequency} Hz)`}\n                        tabIndex={0}\n                      >\n                        <div className=\"font-medium\">{preset.name}</div>\n                        <div className=\"text-sm text-gray-600\">{preset.baseFrequency} Hz</div>\n                        <div className=\"mt-1 text-xs text-gray-500\">{preset.description}</div>\n                        \n                        {/* Astrology Enhancement Info */}\n                        {preset.astrologyData && (\n                          <div className=\"p-2 mt-2 text-xs bg-purple-100 rounded\">\n                            <div className=\"text-purple-700\">\n                              🌙 {preset.astrologyData.planetaryAlignment}\n                            </div>\n                            <div className=\"text-purple-600\">\n                              {preset.astrologyData.transitInfluence}\n                            </div>\n                          </div>\n                        )}\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => setSelectedPreset(preset)}\n                        className=\"p-4 rounded-lg border text-left transition-colors border-gray-200 hover:border-gray-300\"\n                        role=\"radio\"\n                        aria-checked=\"false\"\n                        aria-label={`${preset.name} preset (${preset.baseFrequency} Hz)`}\n                        tabIndex={-1}\n                      >\n                        <div className=\"font-medium\">{preset.name}</div>\n                        <div className=\"text-sm text-gray-600\">{preset.baseFrequency} Hz</div>\n                        <div className=\"mt-1 text-xs text-gray-500\">{preset.description}</div>\n                        \n                        {/* Astrology Enhancement Info */}\n                        {preset.astrologyData && (\n                          <div className=\"p-2 mt-2 text-xs bg-purple-100 rounded\">\n                            <div className=\"text-purple-700\">\n                              🌙 {preset.astrologyData.planetaryAlignment}\n                            </div>\n                            <div className=\"text-purple-600\">\n                              {preset.astrologyData.transitInfluence}\n                            </div>\n                          </div>\n                        )}\n                      </button>\n                    )}\n                  </Tooltip.Trigger>\n                  <Tooltip.Portal>\n                    <Tooltip.Content className=\"p-2 bg-white border rounded shadow\">Premium: Integrate with HealWave for more</Tooltip.Content>\n                  </Tooltip.Portal>\n                </Tooltip.Root>\n              );\n            })}\n            </div>\n          </TooltipProvider>\n        </div>\n\n      {/* Enhanced Controls with Astrology Features */}\n      {selectedPreset && (\n        <div className=\"p-4 mb-6 border border-gray-200 rounded-lg\">\n          <h4 className=\"mb-3 font-semibold\">🎵 Session Settings</h4>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label htmlFor=\"volume-slider\" className=\"block mb-1 text-sm font-medium\">\n                Volume (%)\n              </label>\n              <Slider.Root\n                id=\"volume-slider\"\n                className=\"relative flex items-center w-full h-5\"\n                value={[settings.volume]}\n                min={0}\n                max={100}\n                onValueChange={([value]) => updateSettings('volume', value)}\n                aria-label=\"Volume control\"\n              >\n                <Slider.Track className=\"relative flex-grow h-1 bg-gray-200 rounded-full\">\n                  <Slider.Range className=\"absolute h-1 bg-purple-500 rounded-full\" />\n                </Slider.Track>\n                <Slider.Thumb className=\"block w-4 h-4 bg-white border-2 border-purple-500 rounded-full\" />\n              </Slider.Root>\n              <span className=\"text-sm text-gray-600\">{settings.volume}%</span>\n            </div>\n            \n            <div>\n              <label htmlFor=\"duration-slider\" className=\"block mb-1 text-sm font-medium\">\n                Duration (minutes)\n              </label>\n              <Slider.Root\n                id=\"duration-slider\"\n                className=\"relative flex items-center w-full h-5\"\n                value={[settings.duration]}\n                min={1}\n                max={60}\n                onValueChange={([value]) => updateSettings('duration', value)}\n                aria-label=\"Session duration\"\n              >\n                <Slider.Track className=\"relative flex-grow h-1 bg-gray-200 rounded-full\">\n                  <Slider.Range className=\"absolute h-1 bg-purple-500 rounded-full\" />\n                </Slider.Track>\n                <Slider.Thumb className=\"block w-4 h-4 bg-white border-2 border-purple-500 rounded-full\" />\n              </Slider.Root>\n              <span className=\"text-sm text-gray-600\">{settings.duration} min</span>\n              \n              {/* Astrology Recommendation */}\n              {selectedPreset.astrologyData && (\n                <div className=\"mt-1 text-xs text-purple-600\">\n                  Recommended: {selectedPreset.astrologyData.recommendedDuration} min\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex gap-3 mt-4\">\n            <button\n              onClick={handlePlay}\n              disabled={isPlaying}\n              className=\"px-4 py-2 text-white bg-purple-600 rounded-lg hover:bg-purple-700 disabled:opacity-50\"\n            >\n              {isPlaying ? '🎵 Playing...' : '▶️ Start Astro Session'}\n            </button>\n            \n            <button\n              onClick={handleStop}\n              disabled={!isPlaying}\n              className=\"px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 disabled:opacity-50\"\n            >\n              ⏹️ Stop\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Enhanced Info with Astrology Context - Lazy loaded */}\n      <Suspense fallback={<div>Loading...</div>}>\n        {selectedPreset && <LazyAstroInfo preset={selectedPreset} />}\n      </Suspense>\n    </div>\n  );\n});\n\n// Suggested Vitest test: \n// test('personalizes frequency', () => { ... });","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/frequency/AstroInfo.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":36,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":36,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1237,1255],"text":"(preset.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1237,1255],"text":"(preset.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1237,1255],"text":"(Boolean(preset.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":42,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":42,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1391,1411],"text":"(preset.astrologyData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":59,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2256,2500],"text":"\n          This frequency is enhanced by current astrological conditions to provide optimal therapeutic benefits. \n          The personalized adjustments are based on your natal chart&apos;s dominant elements and current planetary transits.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2256,2500],"text":"\n          This frequency is enhanced by current astrological conditions to provide optimal therapeutic benefits. \n          The personalized adjustments are based on your natal chart&lsquo;s dominant elements and current planetary transits.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2256,2500],"text":"\n          This frequency is enhanced by current astrological conditions to provide optimal therapeutic benefits. \n          The personalized adjustments are based on your natal chart&#39;s dominant elements and current planetary transits.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2256,2500],"text":"\n          This frequency is enhanced by current astrological conditions to provide optimal therapeutic benefits. \n          The personalized adjustments are based on your natal chart&rsquo;s dominant elements and current planetary transits.\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":62,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":62,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2523,2543],"text":"(preset.astrologyData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { FrequencyPreset } from '@cosmichub/frequency';\n\ninterface AstrologyEnhancement {\n  planetaryAlignment: string;\n  transitInfluence: string;\n  recommendedDuration: number;\n  chartHarmonic: number;\n}\n\ninterface AstroFrequencyPreset extends FrequencyPreset {\n  astrologyData?: AstrologyEnhancement;\n}\n\ninterface AstroInfoProps {\n  preset: AstroFrequencyPreset;\n}\n\n/**\n * Displays detailed astrology information for the selected frequency preset\n */\nconst AstroInfo: React.FC<AstroInfoProps> = ({ preset }) => {\n  return (\n    <div className=\"p-4 border border-purple-200 rounded-lg bg-purple-50\" role=\"region\" aria-label=\"Astrology Information\">\n      <h3 className=\"mb-3 text-lg font-semibold text-purple-800\">\n        🌟 Astrology Enhancement Details\n      </h3>\n      \n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div>\n          <h4 className=\"font-medium text-purple-700\">Frequency Information</h4>\n          <ul className=\"mt-2 space-y-1 text-sm text-purple-600\">\n            <li><strong>Name:</strong> {preset.name}</li>\n            <li><strong>Base Frequency:</strong> {preset.baseFrequency} Hz</li>\n            <li><strong>Category:</strong> {preset.category}</li>\n            {preset.description && (\n              <li><strong>Description:</strong> {preset.description}</li>\n            )}\n          </ul>\n        </div>\n\n        {preset.astrologyData && (\n          <div>\n            <h4 className=\"font-medium text-purple-700\">Astrological Context</h4>\n            <ul className=\"mt-2 space-y-1 text-sm text-purple-600\">\n              <li><strong>Planetary Alignment:</strong> {preset.astrologyData.planetaryAlignment}</li>\n              <li><strong>Transit Influence:</strong> {preset.astrologyData.transitInfluence}</li>\n              <li><strong>Recommended Duration:</strong> {preset.astrologyData.recommendedDuration} minutes</li>\n              <li><strong>Chart Harmonic:</strong> {preset.astrologyData.chartHarmonic}</li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      <div className=\"p-3 mt-4 bg-white rounded border-l-4 border-purple-400\">\n        <h4 className=\"font-medium text-purple-800\">Benefits & Usage</h4>\n        <p className=\"mt-1 text-sm text-purple-700\">\n          This frequency is enhanced by current astrological conditions to provide optimal therapeutic benefits. \n          The personalized adjustments are based on your natal chart's dominant elements and current planetary transits.\n        </p>\n        \n        {preset.astrologyData && (\n          <div className=\"mt-2 text-xs text-purple-600\">\n            <strong>Optimal Times:</strong> Sessions are most effective during {preset.astrologyData.planetaryAlignment.toLowerCase()} periods.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AstroInfo;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/HealwavePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatTime' is assigned a value but never used.","line":18,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { useHealwave } from \"./hooks/useHealwave\";\nimport FrequencyControls from \"./components/FrequencyControls\";\nimport AudioPlayer from \"./components/AudioPlayer\";\nimport DurationTimer from \"./components/DurationTimer\";\n\nconst HealwavePage: React.FC = () => {\n  const {\n    currentFrequency,\n    isPlaying,\n    volume,\n    duration,\n    timeRemaining,\n    setFrequency,\n    setVolume,\n    setDuration,\n    togglePlayPause,\n    formatTime\n  } = useHealwave();\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4\">\n          Healwave Frequency Generator\n        </h1>\n        <p className=\"text-xl text-cosmic-silver\">\n          Experience personalized healing frequencies based on your astrological chart\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"space-y-6\">\n          <FrequencyControls\n            onFrequencyChange={setFrequency}\n            onDurationChange={setDuration}\n            onPlayPause={togglePlayPause}\n            isPlaying={isPlaying}\n            currentFrequency={currentFrequency}\n            duration={duration}\n          />\n        </div>\n\n        <div className=\"space-y-6\">\n          <AudioPlayer\n            frequency={currentFrequency}\n            isPlaying={isPlaying}\n            volume={volume}\n            onVolumeChange={setVolume}\n          />\n          \n          <DurationTimer\n            duration={timeRemaining}\n            isRunning={isPlaying}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HealwavePage;","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/AudioPlayer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cleanup', 'initializeAudio', and 'startAudio'. Either include them or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [isPlaying, frequency, isInitialized, initializeAudio, startAudio, cleanup]","fix":{"range":[950,987],"text":"[isPlaying, frequency, isInitialized, initializeAudio, startAudio, cleanup]"}}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":43,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":43,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1019,1038],"text":"gainNodeRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":44,"column":61,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":44,"endColumn":97,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1102,1138],"text":"((audioContextRef.current?.currentTime) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1102,1138],"text":"((audioContextRef.current?.currentTime) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1102,1138],"text":"(Boolean((audioContextRef.current?.currentTime)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":44,"column":98,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":44,"endColumn":100,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1139,1141],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":50,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":50,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":75,"fix":{"range":[1284,1287],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1284,1287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1284,1287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .webkitAudioContext on an `any` value.","line":50,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":95},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":61,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":61,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1721,1745],"text":"(audioContextRef.current == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":61,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":61,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1749,1769],"text":"(gainNodeRef.current == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":64,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":64,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1800,1821],"text":"oscillatorRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":80,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":80,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2359,2380],"text":"oscillatorRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":93,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":93,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2671,2694],"text":"(audioContextRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":94,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":94,"endColumn":39,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2750,2750],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2750,2750],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from 'react';\nimport { devConsole } from '../../../config/environment';\nimport { Card } from '@cosmichub/ui';\nimport styles from './AudioPlayer.module.css';\n\ninterface AudioPlayerProps {\n  frequency: number;\n  isPlaying: boolean;\n  volume: number;\n  onVolumeChange: (volume: number) => void;\n}\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({\n  frequency,\n  isPlaying,\n  volume,\n  onVolumeChange\n}) => {\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const oscillatorRef = useRef<OscillatorNode | null>(null);\n  const gainNodeRef = useRef<GainNode | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    if (!isInitialized && isPlaying) {\n      initializeAudio();\n    }\n\n    if (isInitialized) {\n      if (isPlaying) {\n        startAudio();\n      } else {\n        stopAudio();\n      }\n    }\n\n    return () => {\n      cleanup();\n    };\n  }, [isPlaying, frequency, isInitialized]);\n\n  useEffect(() => {\n    if (gainNodeRef.current) {\n      gainNodeRef.current.gain.setValueAtTime(volume / 100, audioContextRef.current?.currentTime || 0);\n    }\n  }, [volume]);\n\n  const initializeAudio = () => {\n    try {\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n      gainNodeRef.current = audioContextRef.current.createGain();\n      gainNodeRef.current.connect(audioContextRef.current.destination);\n      gainNodeRef.current.gain.setValueAtTime(volume / 100, audioContextRef.current.currentTime);\n      setIsInitialized(true);\n    } catch (error) {\n      devConsole.error('❌ Failed to initialize audio context:', error);\n    }\n  };\n\n  const startAudio = () => {\n    if (!audioContextRef.current || !gainNodeRef.current) return;\n\n    try {\n      if (oscillatorRef.current) {\n        oscillatorRef.current.stop();\n        oscillatorRef.current.disconnect();\n      }\n\n      oscillatorRef.current = audioContextRef.current.createOscillator();\n      oscillatorRef.current.type = 'sine';\n      oscillatorRef.current.frequency.setValueAtTime(frequency, audioContextRef.current.currentTime);\n      oscillatorRef.current.connect(gainNodeRef.current);\n      oscillatorRef.current.start();\n    } catch (error) {\n      devConsole.error('❌ Failed to start audio:', error);\n    }\n  };\n\n  const stopAudio = () => {\n    if (oscillatorRef.current) {\n      try {\n        oscillatorRef.current.stop();\n        oscillatorRef.current.disconnect();\n        oscillatorRef.current = null;\n      } catch (error) {\n        devConsole.error('❌ Failed to stop audio:', error);\n      }\n    }\n  };\n\n  const cleanup = () => {\n    stopAudio();\n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      audioContextRef.current.close();\n    }\n    setIsInitialized(false);\n  };\n\n  return (\n    <Card title=\"Audio Player\" className=\"bg-cosmic-dark/50\">\n      <div className={styles['player-container']}>\n        <div className=\"text-center\">\n          <div className={`${styles['audio-circle']} ${\n            isPlaying \n              ? styles['audio-circle-playing'] \n              : styles['audio-circle-stopped']\n          }`}>\n            <div className={styles['circle-content']}>\n              {isPlaying ? (\n                <div className={styles['audio-bars']}>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-1']}`}></div>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-2']}`}></div>\n                  <div className={`${styles['audio-bar']} ${styles['audio-bar-3']}`}></div>\n                </div>\n              ) : (\n                <div className={styles['play-button']}></div>\n              )}\n            </div>\n          </div>\n          \n          <p className={styles['status-text']}>\n            {isPlaying ? 'Playing' : 'Stopped'} - {frequency} Hz\n          </p>\n        </div>\n\n        <div className={styles['volume-section']}>\n          <label htmlFor=\"volume\" className={styles['volume-label']}>\n            Volume: {volume}%\n          </label>\n          <input\n            id=\"volume\"\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={volume}\n            onChange={(e) => onVolumeChange(Number(e.target.value))}\n            className={styles['volume-slider']}\n            aria-label=\"Volume control\"\n          />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default AudioPlayer;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/DurationTimer.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":35,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":35,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[958,964],"text":"onTick != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":37,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":37,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1045,1064],"text":"intervalRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":38,"column":29,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":38,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1130,1140],"text":"onComplete != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":44,"column":34,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":44,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1320,1339],"text":"(intervalRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":48,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":48,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1440,1459],"text":"intervalRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * DurationTimer component for Healwave sessions\n * Displays and manages countdown timer for audio frequency sessions\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\n\ninterface DurationTimerProps {\n    duration: number; // in seconds\n    isRunning: boolean;\n    onComplete?: () => void;\n    onTick?: (remaining: number) => void;\n    className?: string;\n}\n\nexport const DurationTimer: React.FC<DurationTimerProps> = ({\n    duration,\n    isRunning,\n    onComplete,\n    onTick,\n    className = ''\n}) => {\n    const [remaining, setRemaining] = useState(duration);\n    const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);\n\n    useEffect(() => {\n        setRemaining(duration);\n    }, [duration]);\n\n    useEffect(() => {\n        if (isRunning && remaining > 0) {\n            intervalRef.current = setInterval(() => {\n                setRemaining(prev => {\n                    const next = prev - 1;\n                    if (onTick) onTick(next);\n                    if (next <= 0) {\n                        if (intervalRef.current) clearInterval(intervalRef.current);\n                        if (onComplete) onComplete();\n                        return 0;\n                    }\n                    return next;\n                });\n            }, 1000);\n        } else if (!isRunning && intervalRef.current) {\n            clearInterval(intervalRef.current);\n        }\n        return () => {\n            if (intervalRef.current) clearInterval(intervalRef.current);\n        };\n    }, [isRunning, remaining, onComplete, onTick]);\n\n    // Format seconds to mm:ss\n    const formatTime = (secs: number) => {\n        const m = Math.floor(secs / 60).toString().padStart(2, '0');\n        const s = (secs % 60).toString().padStart(2, '0');\n        return `${m}:${s}`;\n    };\n\n    return (\n        <div className={`flex items-center space-x-2 ${className}`}>\n            <span className=\"font-mono text-lg\">{formatTime(remaining)}</span>\n            {isRunning && <span className=\"text-green-500 animate-pulse\">●</span>}\n        </div>\n    );\n};\n\nexport default DurationTimer;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/components/FrequencyControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/hooks/useHealwave.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":30,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":54},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":75,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":75,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1955,1965],"text":"intervalId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":64,"fix":{"range":[2539,2542],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2539,2542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2539,2542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":96,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2566,2575],"text":"(Boolean(chartData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":49},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":100,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":100,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2784,2803],"text":"(Boolean((chartData.sun?.sign)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sun on an `any` value.","line":100,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":100,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":100,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2804,2806],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":116,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":116,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[3515,3536],"text":"(frequencyMap[sunSign] !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[3515,3536],"text":"(!Number.isNaN(frequencyMap[sunSign]))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3515,3536],"text":"(Boolean(frequencyMap[sunSign]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [sunSign] resolves to an `any` value.","line":116,"column":25,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":116,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":121,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":121,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3605,3615],"text":"intervalId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\n\nexport interface HealwaveSession {\n  id: string;\n  frequency: number;\n  duration: number;\n  startTime: Date;\n  isActive: boolean;\n}\n\nexport interface HealwaveState {\n  currentFrequency: number;\n  isPlaying: boolean;\n  volume: number;\n  duration: number;\n  timeRemaining: number;\n  sessions: HealwaveSession[];\n}\n\nexport const useHealwave = () => {\n  const [state, setState] = useState<HealwaveState>({\n    currentFrequency: 528,\n    isPlaying: false,\n    volume: 50,\n    duration: 10,\n    timeRemaining: 0,\n    sessions: []\n  });\n\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);\n\n  const setFrequency = useCallback((frequency: number) => {\n    setState(prev => ({ ...prev, currentFrequency: frequency }));\n  }, []);\n\n  const setVolume = useCallback((volume: number) => {\n    setState(prev => ({ ...prev, volume }));\n  }, []);\n\n  const setDuration = useCallback((duration: number) => {\n    setState(prev => ({ ...prev, duration, timeRemaining: duration * 60 }));\n  }, []);\n\n  const startSession = useCallback(() => {\n    const sessionId = `session-${Date.now()}`;\n    const newSession: HealwaveSession = {\n      id: sessionId,\n      frequency: state.currentFrequency,\n      duration: state.duration,\n      startTime: new Date(),\n      isActive: true\n    };\n\n    setState(prev => ({\n      ...prev,\n      isPlaying: true,\n      timeRemaining: prev.duration * 60,\n      sessions: [newSession, ...prev.sessions]\n    }));\n\n    const timer = setInterval(() => {\n      setState(prev => {\n        if (prev.timeRemaining <= 1) {\n          return { ...prev, isPlaying: false, timeRemaining: 0 };\n        }\n        return { ...prev, timeRemaining: prev.timeRemaining - 1 };\n      });\n    }, 1000);\n\n    setIntervalId(timer);\n  }, [state.currentFrequency, state.duration]);\n\n  const stopSession = useCallback(() => {\n    setState(prev => ({ ...prev, isPlaying: false }));\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n  }, [intervalId]);\n\n  const togglePlayPause = useCallback(() => {\n    if (state.isPlaying) {\n      stopSession();\n    } else {\n      startSession();\n    }\n  }, [state.isPlaying, startSession, stopSession]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  const getPersonalizedFrequency = useCallback((chartData?: any): number => {\n    if (!chartData) return 528; // Default to 528 Hz (Love frequency)\n    \n    // Simple personalization based on chart data\n    // In a real implementation, this would use complex astrological calculations\n    const sunSign = chartData.sun?.sign || 'Leo';\n    const frequencyMap: Record<string, number> = {\n      'Aries': 741,     // Throat Chakra - Expression\n      'Taurus': 417,    // Sacral Chakra - Creativity\n      'Gemini': 852,    // Third Eye - Communication\n      'Cancer': 639,    // Heart Chakra - Emotions\n      'Leo': 528,       // Solar Plexus - Confidence\n      'Virgo': 396,     // Root Chakra - Grounding\n      'Libra': 639,     // Heart Chakra - Balance\n      'Scorpio': 741,   // Throat Chakra - Transformation\n      'Sagittarius': 963, // Crown Chakra - Wisdom\n      'Capricorn': 396, // Root Chakra - Structure\n      'Aquarius': 852,  // Third Eye - Innovation\n      'Pisces': 963     // Crown Chakra - Spirituality\n    };\n\n    return frequencyMap[sunSign] || 528;\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [intervalId]);\n\n  useEffect(() => {\n    if (state.timeRemaining === 0 && state.isPlaying) {\n      stopSession();\n    }\n  }, [state.timeRemaining, state.isPlaying, stopSession]);\n\n  return {\n    ...state,\n    setFrequency,\n    setVolume,\n    setDuration,\n    startSession,\n    stopSession,\n    togglePlayPause,\n    formatTime,\n    getPersonalizedFrequency\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/features/healwave/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/firebase.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":3,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":3,"endColumn":12,"suggestions":[{"fix":{"range":[88,166],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// firebase.ts - Consolidated Firebase configuration\nexport * from '@cosmichub/config';\nconsole.log('🔥 Using optimized Firebase configuration from packages/config');","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/usePerformance.ts","messages":[{"ruleId":"@typescript-eslint/only-throw-error","severity":2,"message":"Expected an error object to be thrown.","line":107,"column":9,"nodeType":"ObjectExpression","messageId":"object","endLine":107,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":145,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":145,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3682,3691],"text":"operation != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":151,"column":19,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":151,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3903,3908],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3903,3908],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3903,3908],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":193,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":193,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5242,5253],"text":"(op.duration != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5242,5253],"text":"(op.duration ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5242,5253],"text":"(Boolean(op.duration))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":193,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":193,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5254,5256],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":232,"column":38,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":232,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6401,6409],"text":"(fcpEntry != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":241,"column":19,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":241,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":250,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":264,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":264,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":310,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":310,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8506,8517],"text":"perf.memory != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":329,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":329,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8996,9007],"text":"memoryInfo == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\n\ninterface PerformanceMemoryInfo {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n}\n\ninterface PerformanceWithOptionalMemory extends Performance {\n  memory?: PerformanceMemoryInfo;\n}\n\nconst perf: PerformanceWithOptionalMemory = (typeof performance !== 'undefined'\n  ? performance\n  : ({} as Performance)) as PerformanceWithOptionalMemory;\n\nexport interface PerformanceMetrics {\n  duration: number;\n  startTime: number;\n  endTime: number;\n  memory?: number;\n  paintTime?: number;\n  loadTime?: number;\n}\n\nexport interface OperationMetrics {\n  operationId: string;\n  operationName: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  status: 'pending' | 'completed' | 'error';\n  error?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface PagePerformanceMetrics {\n  pageLoadTime: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  firstInputDelay: number;\n  cumulativeLayoutShift: number;\n  navigationTiming: PerformanceTiming;\n}\n\n/**\n * Core performance measurement hook\n */\nexport function usePerformance() {\n  const [isTracking, setIsTracking] = useState(false);\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const startTimeRef = useRef<number>(0);\n\n  const start = useCallback((): void => {\n    startTimeRef.current = performance.now();\n    setIsTracking(true);\n    setMetrics(null);\n  }, []);\n\n  const end = useCallback((): PerformanceMetrics | null => {\n    if (!isTracking) return null;\n\n    const endTime = performance.now();\n    const duration = endTime - startTimeRef.current;\n    \n    const newMetrics: PerformanceMetrics = {\n      duration,\n      startTime: startTimeRef.current,\n      endTime,\n  memory: perf.memory?.usedJSHeapSize,\n    };\n\n    setMetrics(newMetrics);\n    setIsTracking(false);\n    \n    return newMetrics;\n  }, [isTracking]);\n\n  const measure = useCallback(async <T>(\n    _operationName: string,\n    operation: () => Promise<T> | T\n  ): Promise<{ result: T; metrics: PerformanceMetrics }> => {\n    const startTime = performance.now();\n    \n    try {\n      const result = await operation();\n      const endTime = performance.now();\n      \n      const metrics: PerformanceMetrics = {\n        duration: endTime - startTime,\n        startTime,\n        endTime,\n  memory: perf.memory?.usedJSHeapSize,\n      };\n\n      return { result, metrics };\n  } catch (error) {\n      const endTime = performance.now();\n      \n      const metrics: PerformanceMetrics = {\n        duration: endTime - startTime,\n        startTime,\n        endTime,\n  memory: perf.memory?.usedJSHeapSize,\n      };\n\n  throw { error, metrics };\n    }\n  }, []);\n\n  return {\n    isTracking,\n    metrics,\n    start,\n    end,\n    measure,\n  };\n}\n\n/**\n * Hook for tracking multiple operations\n */\nexport function useOperationTracking() {\n  const [operations, setOperations] = useState<Map<string, OperationMetrics>>(new Map());\n\n  const startOperation = useCallback((operationName: string, metadata?: Record<string, unknown>) => {\n    const operationId = `${operationName}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const operation: OperationMetrics = {\n      operationId,\n      operationName,\n      startTime: performance.now(),\n      status: 'pending',\n      metadata,\n    };\n\n    setOperations(prev => new Map(prev).set(operationId, operation));\n    return operationId;\n  }, []);\n\n  const endOperation = useCallback((operationId: string, error?: string) => {\n    setOperations(prev => {\n      const newMap = new Map(prev);\n      const operation = newMap.get(operationId);\n      \n      if (operation) {\n        const endTime = performance.now();\n        const updatedOperation: OperationMetrics = {\n          ...operation,\n          endTime,\n          duration: endTime - operation.startTime,\n          status: error ? 'error' : 'completed',\n          error,\n        };\n        newMap.set(operationId, updatedOperation);\n      }\n      \n      return newMap;\n    });\n  }, []);\n\n  const trackOperation = useCallback(async <T>(\n    operationName: string,\n    operation: () => Promise<T> | T,\n    metadata?: Record<string, unknown>\n  ): Promise<T> => {\n    const operationId = startOperation(operationName, metadata);\n    \n    try {\n      const result = await operation();\n      endOperation(operationId);\n      return result;\n    } catch (error) {\n      endOperation(operationId, error instanceof Error ? error.message : 'Unknown error');\n      throw error;\n    }\n  }, [startOperation, endOperation]);\n\n  const clearOperations = useCallback(() => {\n    setOperations(new Map());\n  }, []);\n\n  const getOperationsByStatus = useCallback((status: OperationMetrics['status']) => {\n    return Array.from(operations.values()).filter(op => op.status === status);\n  }, [operations]);\n\n  const getOperationStats = useCallback(() => {\n    const ops = Array.from(operations.values());\n    const completed = ops.filter(op => op.status === 'completed');\n    const errors = ops.filter(op => op.status === 'error');\n    const pending = ops.filter(op => op.status === 'pending');\n\n    const avgDuration = completed.length > 0\n      ? completed.reduce((sum, op) => sum + (op.duration || 0), 0) / completed.length\n      : 0;\n\n    return {\n      total: ops.length,\n      completed: completed.length,\n      errors: errors.length,\n      pending: pending.length,\n      averageDuration: avgDuration,\n    };\n  }, [operations]);\n\n  return {\n    operations: Array.from(operations.values()),\n    startOperation,\n    endOperation,\n    trackOperation,\n    clearOperations,\n    getOperationsByStatus,\n    getOperationStats,\n  };\n}\n\n/**\n * Hook for page-level performance monitoring\n */\nexport function usePagePerformance() {\n  const [metrics, setMetrics] = useState<Partial<PagePerformanceMetrics>>({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n  const collectMetrics = (): void => {\n      try {\n        const navigationTiming = performance.timing;\n        const pageLoadTime = navigationTiming.loadEventEnd - navigationTiming.navigationStart;\n\n        // Collect paint metrics if available\n        const paintEntries = performance.getEntriesByType('paint') as PerformanceEntry[];\n        const fcpEntry = paintEntries.find(entry => entry.name === 'first-contentful-paint');\n        const firstContentfulPaint = fcpEntry ? fcpEntry.startTime : 0;\n\n        // Collect LCP if available\n        let largestContentfulPaint = 0;\n        if ('PerformanceObserver' in window) {\n          try {\n            const lcpObserver = new PerformanceObserver((entryList) => {\n              const entries = entryList.getEntries();\n              const lastEntry = entries[entries.length - 1];\n              if (lastEntry) {\n                largestContentfulPaint = lastEntry.startTime;\n                setMetrics(prev => ({\n                  ...prev,\n                  largestContentfulPaint,\n                }));\n              }\n            });\n            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n          } catch (e) {\n            // LCP not supported\n          }\n        }\n\n        const pageMetrics: Partial<PagePerformanceMetrics> = {\n          pageLoadTime,\n          firstContentfulPaint,\n          largestContentfulPaint,\n          navigationTiming,\n        };\n\n        setMetrics(pageMetrics);\n        setIsLoading(false);\n  } catch (_error) {\n        setIsLoading(false);\n      }\n    };\n\n    // Collect metrics after page load\n    if (document.readyState === 'complete') {\n      collectMetrics();\n      return () => {}; // Return empty cleanup function\n    } else {\n      window.addEventListener('load', collectMetrics);\n      return () => window.removeEventListener('load', collectMetrics);\n    }\n  }, []);\n\n  const refreshMetrics = useCallback((): void => {\n    setIsLoading(true);\n    // Re-collect metrics\n    const navigationTiming = performance.timing;\n    const pageLoadTime = navigationTiming.loadEventEnd - navigationTiming.navigationStart;\n    \n    setMetrics({\n      pageLoadTime,\n      navigationTiming,\n    });\n    setIsLoading(false);\n  }, []);\n\n  return {\n    metrics,\n    isLoading,\n    refreshMetrics,\n  };\n}\n\n/**\n * Hook for memory usage monitoring\n */\nexport function useMemoryMonitoring() {\n  const [memoryInfo, setMemoryInfo] = useState<{\n    used: number;\n    total: number;\n    limit: number;\n  } | null>(null);\n\n  const updateMemoryInfo = useCallback((): void => {\n    if (perf.memory) {\n      const memory = perf.memory;\n      setMemoryInfo({\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    updateMemoryInfo();\n    \n    // Update every 5 seconds\n    const interval = setInterval(updateMemoryInfo, 5000);\n    return () => clearInterval(interval);\n  }, [updateMemoryInfo]);\n\n  const getMemoryUsagePercentage = useCallback((): number => {\n    if (!memoryInfo) return 0;\n    return (memoryInfo.used / memoryInfo.limit) * 100;\n  }, [memoryInfo]);\n\n  const formatBytes = useCallback((bytes: number): string => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Bytes';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return `${Math.round(bytes / Math.pow(1024, i) * 100) / 100} ${sizes[i]}`;\n  }, []);\n\n  return {\n    memoryInfo,\n    updateMemoryInfo,\n    getMemoryUsagePercentage,\n    formatBytes,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useUpgradeModal.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StripeSession' is defined but never used.","line":3,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":38,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":38,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1339,1344],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":43,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":43,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1454,1468],"text":"stripeService == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { useSubscription, useAuth } from '@cosmichub/auth';\nimport { stripeService, type StripeSession } from '@cosmichub/integrations';\n\nexport interface UseUpgradeModalReturn {\n  isUpgradeModalOpen: boolean;\n  requiredFeature: string | undefined;\n  openUpgradeModal: (feature?: string) => void;\n  closeUpgradeModal: () => void;\n  handleUpgrade: (tier: 'Basic' | 'Pro' | 'Enterprise') => Promise<void>;\n}\n\n/**\n * Hook for managing upgrade modal state and subscription upgrades\n */\ninterface UpgradeModalOptions {\n  onError?: (message: string, error?: unknown) => void;\n  onSuccess?: (tier: string) => void;\n}\n\nexport const useUpgradeModal = (options: UpgradeModalOptions = {}): UseUpgradeModalReturn => {\n  const [isUpgradeModalOpen, setIsUpgradeModalOpen] = useState(false);\n  const [requiredFeature, setRequiredFeature] = useState<string | undefined>();\n  const { userTier } = useSubscription();\n  const { user } = useAuth();\n\n  const openUpgradeModal = useCallback((feature?: string) => {\n    setRequiredFeature(feature);\n    setIsUpgradeModalOpen(true);\n  }, []);\n\n  const closeUpgradeModal = useCallback(() => {\n    setIsUpgradeModalOpen(false);\n    setRequiredFeature(undefined);\n  }, []);\n\n  const handleUpgrade = useCallback(async (tier: 'Basic' | 'Pro' | 'Enterprise') => {\n    if (!user) {\n      options.onError?.('User not authenticated');\n      closeUpgradeModal();\n      return;\n    }\n    if (!stripeService) {\n      options.onError?.('Stripe service not available');\n      closeUpgradeModal();\n      return;\n    }\n    try {\n      const stripeTier = tier === 'Basic' ? 'premium' : tier === 'Pro' ? 'premium' : 'elite';\n      const successUrl = `${window.location.origin}/pricing/success?tier=${stripeTier}`;\n      const cancelUrl = `${window.location.origin}/pricing/cancel`;\n      await stripeService.createCheckoutSession({\n        tier: stripeTier,\n        userId: user.uid,\n        isAnnual: true,\n        successUrl,\n        cancelUrl,\n        feature: requiredFeature,\n        metadata: { sourceComponent: 'useUpgradeModal', originalTier: userTier }\n      });\n      await stripeService.updateUserSubscription(user.uid, stripeTier, true);\n      options.onSuccess?.(stripeTier);\n    } catch (err) {\n      options.onError?.('Upgrade failed', err);\n      closeUpgradeModal();\n    }\n  }, [user, userTier, requiredFeature, closeUpgradeModal, options]);\n\n  return {\n    isUpgradeModalOpen,\n    requiredFeature,\n    openUpgradeModal,\n    closeUpgradeModal,\n    handleUpgrade\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/hooks/useUsageTracking.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":21,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":21,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[580,585],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":49,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":49,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1629,1634],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { isNonEmptyString, safeJsonParse } from '@/utils/typeGuards';\n\ninterface UsageData {\n  chartsThisMonth: number;\n  savedCharts: number;\n  lastReset: string;\n}\n\nexport const useUsageTracking = () => {\n  const { user } = useAuth();\n  const [usage, setUsage] = useState<UsageData>({\n    chartsThisMonth: 0,\n    savedCharts: 0,\n    lastReset: new Date().toISOString().slice(0, 7) // YYYY-MM format\n  });\n\n  // Load usage from localStorage on mount\n  useEffect(() => {\n    if (!user) return;\n\n    const key = `usage_${user.uid}`;\n    const stored = localStorage.getItem(key);\n    if (!isNonEmptyString(stored)) return;\n\n    const parsedUsage = safeJsonParse<Partial<UsageData>>(stored, {});\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const lastReset = isNonEmptyString(parsedUsage.lastReset) ? parsedUsage.lastReset : currentMonth;\n\n    // Build merged usage with sane defaults\n    const merged: UsageData = {\n      chartsThisMonth: typeof parsedUsage.chartsThisMonth === 'number' ? parsedUsage.chartsThisMonth : 0,\n      savedCharts: typeof parsedUsage.savedCharts === 'number' ? parsedUsage.savedCharts : 0,\n      lastReset\n    };\n\n    if (merged.lastReset !== currentMonth) {\n      const resetUsage: UsageData = { ...merged, chartsThisMonth: 0, lastReset: currentMonth };\n      setUsage(resetUsage);\n      localStorage.setItem(key, JSON.stringify(resetUsage));\n    } else {\n      setUsage(merged);\n    }\n  }, [user]);\n\n  // Save usage to localStorage whenever it changes\n  useEffect(() => {\n    if (!user) return;\n    localStorage.setItem(`usage_${user.uid}`, JSON.stringify(usage));\n  }, [usage, user]);\n\n  const incrementChartCalculation = useCallback(() => {\n    setUsage(prev => ({ ...prev, chartsThisMonth: prev.chartsThisMonth + 1 }));\n  }, []);\n\n  const incrementSavedChart = useCallback(() => {\n    setUsage(prev => ({ ...prev, savedCharts: prev.savedCharts + 1 }));\n  }, []);\n\n  const decrementSavedChart = useCallback(() => {\n    setUsage(prev => ({ ...prev, savedCharts: Math.max(0, prev.savedCharts - 1) }));\n  }, []);\n\n  return {\n    usage,\n    incrementChartCalculation,\n    incrementSavedChart,\n    decrementSavedChart\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StrictMode' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":11,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":11,"endColumn":12,"suggestions":[{"fix":{"range":[336,385],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":12,"suggestions":[{"fix":{"range":[386,439],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":12,"suggestions":[{"fix":{"range":[440,494],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":12,"suggestions":[{"fix":{"range":[495,579],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":14,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":14,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[522,550],"text":"(Boolean(import.meta.env.VITE_API_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":14,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":14,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[551,553],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":17,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":17,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[638,650],"text":"rootElement == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":12,"suggestions":[{"fix":{"range":[750,809],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":12,"suggestions":[{"fix":{"range":[967,1017],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":16,"suggestions":[{"fix":{"range":[1139,1188],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":16,"suggestions":[{"fix":{"range":[1204,1255],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":15,"suggestions":[{"fix":{"range":[1284,1346],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createRoot } from 'react-dom/client';\nimport { StrictMode } from 'react';\nimport './index.css';\nimport App from './App';\nimport './pwa';\nimport './pwa-performance';\nimport { initializeNotifications } from './services/notificationManager';\nimport { devConsole } from './config/environment';\n\n// Enhanced browser console logging\nconsole.log('🚀 CosmicHub Frontend Starting...');\nconsole.log('📍 Environment:', import.meta.env.MODE);\nconsole.log('🌐 Base URL:', import.meta.env.BASE_URL);\nconsole.log('⚙️ API URL:', import.meta.env.VITE_API_URL || 'http://localhost:8001');\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  devConsole.error('❌ Root element not found');\n  throw new Error('Root element not found');\n}\n\nconsole.log('✅ Root element found, mounting React app...');\n\nconst root = createRoot(rootElement);\nroot.render(\n  // <StrictMode> // Temporarily disabled to prevent infinite reloads\n    <App />\n  // </StrictMode>\n);\n\nconsole.log('🎉 React app mounted successfully!');\n\n// Initialize push notifications and background sync\ninitializeNotifications().then((success) => {\n  if (success) {\n    console.log('🔔 Push notifications initialized');\n  } else {\n    console.log('📵 Push notifications not available');\n  }\n}).catch((error) => {\n  console.warn('⚠️ Failed to initialize notifications:', error);\n});","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/AIInterpretation.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'auth' is assigned a value but never used.","line":49,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Calculator.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":14,"suggestions":[{"fix":{"range":[409,480],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleChartGeneration' is assigned a value but never used.","line":14,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":16,"suggestions":[{"fix":{"range":[546,602],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":21,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":21,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[783,793],"text":"birthData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":67,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":67,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2844,2853],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":139,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the &quot;Edit\" button on any page.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the &ldquo;Edit\" button on any page.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the &#34;Edit\" button on any page.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the &rdquo;Edit\" button on any page.\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":139,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the \"Edit&quot; button on any page.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the \"Edit&ldquo; button on any page.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the \"Edit&#34; button on any page.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5769,5955],"text":"\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the \"Edit&rdquo; button on any page.\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card } from '@cosmichub/ui';\nimport { SimpleBirthForm } from '../components/SimpleBirthForm';\nimport { useBirthData } from '../contexts/BirthDataContext';\nimport type { ChartBirthData } from '../services/api';\n\nconst Calculator: React.FC = () => {\n  const navigate = useNavigate();\n  const { birthData } = useBirthData();\n\n  console.log('🧮 Calculator page rendered with birth data:', birthData);\n\n  const handleChartGeneration = (data: ChartBirthData) => {\n    console.log('🔮 Generate birth chart with data:', data);\n    // SimpleBirthForm will handle navigation to chart-results\n    // No need to navigate here since form handles it\n  };\n\n  const navigateToSystem = (system: string) => {\n    if (!birthData) {\n      alert('Please enter your birth data first to access chart systems.');\n      return;\n    }\n    navigate(system);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center py-16 bg-gradient-to-br from-cosmic-purple/20 via-cosmic-blue/20 to-cosmic-gold/10 rounded-2xl border border-cosmic-silver/10\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl font-bold text-cosmic-gold mb-6 font-cinzel\">\n            Cosmic Calculator\n          </h1>\n          <p className=\"text-xl text-cosmic-silver/90 mb-8 font-playfair leading-relaxed\">\n            Your gateway to understanding the cosmic forces that shaped your birth moment.<br />\n            <span className=\"text-cosmic-gold\">One form. Multiple astrological systems. Infinite insights.</span>\n          </p>\n          \n          {/* Feature Highlights */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-8\">\n            {[\n              { icon: '🎯', title: 'Western Charts', desc: 'Tropical zodiac & houses' },\n              { icon: '🕉️', title: 'Vedic Analysis', desc: 'Sidereal & traditional' },\n              { icon: '🌌', title: 'Multi-System', desc: 'Compare all traditions' },\n              { icon: '🤖', title: 'AI Insights', desc: 'Intelligent interpretations' }\n            ].map((feature, index) => (\n              <div key={index} className=\"bg-cosmic-dark/30 rounded-lg p-4 border border-cosmic-purple/20\">\n                <div className=\"text-2xl mb-2\">{feature.icon}</div>\n                <h3 className=\"text-cosmic-gold font-semibold text-sm\">{feature.title}</h3>\n                <p className=\"text-cosmic-silver/70 text-xs\">{feature.desc}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Simple Birth Form */}\n      <SimpleBirthForm\n        title=\"Universal Birth Data\"\n        submitButtonText=\"Calculate All Charts\"\n        showSampleButton={true}\n      />\n\n      {/* Quick Navigation - Only show when data exists */}\n      {birthData && (\n        <Card title=\"🚀 Quick Access to Chart Systems\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[\n              {\n                id: \"chart\",\n                title: \"Natal Chart\",\n                description: \"Classic Western astrology wheel with planets and aspects\",\n                icon: \"⭐\",\n                color: \"cosmic-gold\",\n                available: true\n              },\n              {\n                id: \"multi-system\",\n                title: \"Multi-System\",\n                description: \"Compare Western, Vedic, Uranian systems side by side\",\n                icon: \"🌍\",\n                color: \"cosmic-purple\",\n                available: true\n              },\n              {\n                id: \"numerology\",\n                title: \"Numerology\",\n                description: \"Life path, destiny, and personality numbers\",\n                icon: \"🔢\",\n                color: \"cosmic-blue\",\n                available: true\n              },\n              {\n                id: \"human-design\",\n                title: \"Human Design\",\n                description: \"Your energetic blueprint and strategy\",\n                icon: \"🧬\",\n                color: \"cosmic-silver\",\n                available: true\n              }\n            ].map((system) => (\n              <button\n                key={system.id}\n                onClick={() => navigateToSystem(`/${system.id}`)}\n                disabled={!system.available}\n                className={`p-6 rounded-xl border transition-all duration-300 text-left hover:scale-105 ${\n                  system.available\n                    ? `border-${system.color}/30 hover:border-${system.color}/50 bg-${system.color}/5 hover:bg-${system.color}/10`\n                    : 'border-gray-600 bg-gray-800/20 cursor-not-allowed opacity-50'\n                }`}\n              >\n                <div className=\"text-3xl mb-3\">{system.icon}</div>\n                <h3 className={`font-semibold mb-2 ${\n                  system.available ? `text-${system.color}` : 'text-gray-500'\n                }`}>\n                  {system.title}\n                </h3>\n                <p className=\"text-cosmic-silver/70 text-sm leading-relaxed\">\n                  {system.description}\n                </p>\n                {system.available && (\n                  <div className=\"mt-3 text-xs text-cosmic-silver/50\">\n                    ✨ Ready to calculate\n                  </div>\n                )}\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"mt-6 p-4 bg-cosmic-gold/10 rounded-lg border border-cosmic-gold/20\">\n            <div className=\"flex items-center gap-3\">\n              <span className=\"text-2xl\">💡</span>\n              <div>\n                <h4 className=\"text-cosmic-gold font-semibold\">Pro Tip</h4>\n                <p className=\"text-cosmic-silver/80 text-sm\">\n                  Your birth data is automatically saved and shared across all chart systems. \n                  Edit anytime by clicking the \"Edit\" button on any page.\n                </p>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Information Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card title=\"🎯 Precise Calculations\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-gold mt-1\">✦</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Swiss Ephemeris</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Industry-standard astronomical calculations</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-gold mt-1\">✦</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Multiple House Systems</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Placidus, Koch, Equal, Whole Sign options</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-gold mt-1\">✦</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Advanced Aspects</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Major and minor aspects with precise orbs</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <Card title=\"🔮 Integrated Systems\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-purple mt-1\">◆</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Cross-Traditional</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Western, Vedic, and Uranian astrology</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-purple mt-1\">◆</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Synthesis Views</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Combined insights from multiple systems</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-cosmic-purple mt-1\">◆</span>\n              <div>\n                <h4 className=\"text-cosmic-silver font-medium\">Modern Integration</h4>\n                <p className=\"text-cosmic-silver/70 text-sm\">Numerology and Human Design compatibility</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ChartResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ChartWheel.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":282,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":282,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10181,10190],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":303,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":303,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10964,10973],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { Card, Button } from '@cosmichub/ui';\nimport ChartWheel from '../features/ChartWheel';\nimport type { ChartBirthData } from '@cosmichub/types';\n\nconst ChartWheelPage: React.FC = () => {\n  useAuth();\n  const [birthData, setBirthData] = useState<ChartBirthData | null>(null);\n  const [showAspects, setShowAspects] = useState(true);\n  const [showAnimation, setShowAnimation] = useState(true);\n  const [formData, setFormData] = useState({\n    year: '',\n    month: '',\n    day: '',\n    hour: '',\n    minute: '',\n    city: '',\n    lat: '',\n    lon: '',\n    timezone: 'America/New_York'\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = (): void => {\n  const data: ChartBirthData = {\n      year: parseInt(formData.year),\n      month: parseInt(formData.month),\n      day: parseInt(formData.day),\n      hour: parseInt(formData.hour),\n      minute: parseInt(formData.minute),\n      lat: parseFloat(formData.lat),\n      lon: parseFloat(formData.lon),\n      city: formData.city,\n      timezone: formData.timezone\n    };\n\n    setBirthData(data);\n  };\n\n  const loadSampleChart = (): void => {\n  const sampleData: ChartBirthData = {\n      year: 1990,\n      month: 6,\n      day: 21,\n      hour: 12,\n      minute: 0,\n      lat: 40.7128,\n      lon: -74.0060,\n      city: \"New York\",\n      timezone: \"America/New_York\"\n    };\n    setBirthData(sampleData);\n    \n    // Update form data to reflect the sample\n    setFormData({\n      year: '1990',\n      month: '6',\n      day: '21',\n      hour: '12',\n      minute: '0',\n      city: 'New York',\n      lat: '40.7128',\n      lon: '-74.0060',\n      timezone: 'America/New_York'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-7xl mx-auto\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4\">\n          Interactive Chart Wheel\n        </h1>\n        <p className=\"text-xl text-cosmic-silver\">\n          Explore your natal chart with detailed planetary positions and aspects\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Chart Input Form */}\n        <div className=\"lg:col-span-1\">\n          <Card title=\"Birth Information\">\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <label htmlFor=\"month\" className=\"block text-cosmic-silver mb-1 text-sm\">Month</label>\n                  <input\n                    type=\"number\"\n                    id=\"month\"\n                    name=\"month\"\n                    min=\"1\"\n                    max=\"12\"\n                    value={formData.month}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                    placeholder=\"6\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"day\" className=\"block text-cosmic-silver mb-1 text-sm\">Day</label>\n                  <input\n                    type=\"number\"\n                    id=\"day\"\n                    name=\"day\"\n                    min=\"1\"\n                    max=\"31\"\n                    value={formData.day}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                    placeholder=\"21\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"year\" className=\"block text-cosmic-silver mb-1 text-sm\">Year</label>\n                  <input\n                    type=\"number\"\n                    id=\"year\"\n                    name=\"year\"\n                    min=\"1900\"\n                    max=\"2100\"\n                    value={formData.year}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                    placeholder=\"1990\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <label htmlFor=\"hour\" className=\"block text-cosmic-silver mb-1 text-sm\">Hour (24h)</label>\n                  <input\n                    type=\"number\"\n                    id=\"hour\"\n                    name=\"hour\"\n                    min=\"0\"\n                    max=\"23\"\n                    value={formData.hour}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                    placeholder=\"12\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"minute\" className=\"block text-cosmic-silver mb-1 text-sm\">Minute</label>\n                  <input\n                    type=\"number\"\n                    id=\"minute\"\n                    name=\"minute\"\n                    min=\"0\"\n                    max=\"59\"\n                    value={formData.minute}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                    placeholder=\"0\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"city\" className=\"block text-cosmic-silver mb-1 text-sm\">City</label>\n                <input\n                  type=\"text\"\n                  id=\"city\"\n                  name=\"city\"\n                  value={formData.city}\n                  onChange={handleInputChange}\n                  className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                  placeholder=\"New York\"\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <label htmlFor=\"lat\" className=\"block text-cosmic-silver mb-1 text-sm\">Latitude</label>\n                  <input\n                    type=\"number\"\n                    id=\"lat\"\n                    name=\"lat\"\n                    step=\"0.0001\"\n                    value={formData.lat}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                    placeholder=\"40.7128\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"lon\" className=\"block text-cosmic-silver mb-1 text-sm\">Longitude</label>\n                  <input\n                    type=\"number\"\n                    id=\"lon\"\n                    name=\"lon\"\n                    step=\"0.0001\"\n                    value={formData.lon}\n                    onChange={handleInputChange}\n                    className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                    placeholder=\"-74.0060\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"timezone\" className=\"block text-cosmic-silver mb-1 text-sm\">Timezone</label>\n                <select\n                  id=\"timezone\"\n                  name=\"timezone\"\n                  value={formData.timezone}\n                  onChange={handleInputChange}\n                  className=\"w-full p-2 rounded bg-cosmic-dark border border-cosmic-purple text-cosmic-silver\"\n                >\n                  <option value=\"America/New_York\">Eastern Time</option>\n                  <option value=\"America/Chicago\">Central Time</option>\n                  <option value=\"America/Denver\">Mountain Time</option>\n                  <option value=\"America/Los_Angeles\">Pacific Time</option>\n                  <option value=\"Europe/London\">GMT</option>\n                  <option value=\"Europe/Paris\">Central European Time</option>\n                </select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Button variant=\"primary\" className=\"w-full\" onClick={handleSubmit}>\n                  Generate Chart\n                </Button>\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  onClick={loadSampleChart}\n                >\n                  Load Sample Chart\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Chart Options */}\n          <Card title=\"Display Options\" className=\"mt-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <input \n                  type=\"checkbox\" \n                  id=\"showAspects\" \n                  checked={showAspects}\n                  onChange={(e) => setShowAspects(e.target.checked)}\n                  className=\"rounded\"\n                />\n                <label htmlFor=\"showAspects\" className=\"text-cosmic-silver\">\n                  Show Aspects\n                </label>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <input \n                  type=\"checkbox\" \n                  id=\"showAnimation\" \n                  checked={showAnimation}\n                  onChange={(e) => setShowAnimation(e.target.checked)}\n                  className=\"rounded\"\n                />\n                <label htmlFor=\"showAnimation\" className=\"text-cosmic-silver\">\n                  Enable Animations\n                </label>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Chart Display */}\n        <div className=\"lg:col-span-2\">\n          {birthData ? (\n            <ChartWheel \n              birthData={birthData}\n              showAspects={showAspects}\n              showAnimation={showAnimation}\n            />\n          ) : (\n            <Card title=\"Chart Wheel\" className=\"h-96 flex items-center justify-center\">\n              <div className=\"text-center text-cosmic-silver\">\n                <div className=\"text-6xl mb-4\">🌌</div>\n                <p className=\"text-lg\">Enter your birth information to generate your chart</p>\n                <p className=\"text-sm mt-2 text-cosmic-silver/70\">\n                  Or click &quot;Load Sample Chart&quot; to see a demonstration\n                </p>\n              </div>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Chart Information */}\n      {birthData && (\n        <Card title=\"Chart Information\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n            <div>\n              <span className=\"text-cosmic-silver\">Birth Date:</span>\n              <span className=\"text-cosmic-gold ml-2\">\n                {birthData.month}/{birthData.day}/{birthData.year}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-cosmic-silver\">Birth Time:</span>\n              <span className=\"text-cosmic-gold ml-2\">\n                {birthData.hour.toString().padStart(2, '0')}:{birthData.minute.toString().padStart(2, '0')}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-cosmic-silver\">Location:</span>\n              <span className=\"text-cosmic-gold ml-2\">{birthData.city}</span>\n            </div>\n            <div>\n              <span className=\"text-cosmic-silver\">Coordinates:</span>\n              <span className=\"text-cosmic-gold ml-2\">\n                {birthData.lat !== undefined && birthData.lon !== undefined\n                  ? `${birthData.lat.toFixed(4)}, ${birthData.lon.toFixed(4)}`\n                  : 'Coords N/A'}\n              </span>\n            </div>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default ChartWheelPage;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":35,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":35,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1124,1128],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":155,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":155,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7484,7488],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":172,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":172,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8330,8335],"text":"(user == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { isFeatureEnabled } from '@cosmichub/config';\nimport EnvironmentStatus from '../components/EnvironmentStatus';\nimport { PageLoading } from '../components/CosmicLoading';\nimport ChartWheel from '../features/ChartWheel';\n\nconst Dashboard: React.FC = () => {\n  const { user, loading } = useAuth();\n  const [showQuickChart, setShowQuickChart] = useState(false);\n  const [sampleBirthData] = useState({\n    year: 1990,\n    month: 6,\n    day: 21,\n    hour: 12,\n    minute: 0,\n    lat: 40.7128,\n    lon: -74.0060,\n    city: \"New York\",\n    timezone: \"America/New_York\"\n  });\n\n  if (loading) {\n    return <PageLoading />;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-purple/20 to-cosmic-blue/20 rounded-2xl border border-cosmic-silver/10\">\n        <h1 className=\"text-5xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Welcome to CosmicHub\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80 font-playfair\">\n          {user ? `Hello, ${user.email}!` : 'Your cosmic journey begins here'}\n        </p>\n        <div className=\"mt-6 flex justify-center\">\n          <div className=\"w-24 h-1 bg-gradient-to-r from-cosmic-gold to-cosmic-purple rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Feature Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <div className=\"group bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-6 hover:border-cosmic-purple/50 hover:bg-cosmic-purple/10 transition-all duration-300 hover:shadow-lg hover:shadow-cosmic-purple/25\">\n          <div className=\"flex items-center mb-4\">\n            <div className=\"w-12 h-12 bg-cosmic-purple/20 rounded-lg flex items-center justify-center mr-4\">\n              <span className=\"text-2xl\">🌟</span>\n            </div>\n            <h3 className=\"text-xl font-semibold text-cosmic-gold font-playfair\">Birth Chart</h3>\n          </div>\n          <p className=\"text-cosmic-silver/80 mb-6 leading-relaxed\">\n            Generate your personalized astrological birth chart with detailed planetary positions and aspects\n          </p>\n          <div className=\"flex gap-2\">\n            <button \n              onClick={() => window.location.href = '/calculator'}\n              className=\"flex-1 px-4 py-3 bg-gradient-to-r from-cosmic-purple to-cosmic-blue hover:from-cosmic-purple/80 hover:to-cosmic-blue/80 text-white rounded-lg transition-all duration-300 font-semibold\"\n            >\n              Create Chart\n            </button>\n            <button \n              onClick={() => setShowQuickChart(!showQuickChart)}\n              className=\"px-4 py-3 bg-cosmic-silver/20 hover:bg-cosmic-silver/30 text-cosmic-silver rounded-lg transition-all duration-300 font-semibold\"\n            >\n              {showQuickChart ? 'Hide' : 'Preview'}\n            </button>\n          </div>\n        </div>\n\n        {isFeatureEnabled('healwaveIntegration') && (\n          <div className=\"group bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-6 hover:border-cosmic-gold/50 hover:bg-cosmic-gold/5 transition-all duration-300 hover:shadow-lg hover:shadow-cosmic-gold/25\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-cosmic-gold/20 rounded-lg flex items-center justify-center mr-4\">\n                <span className=\"text-2xl\">🎵</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-cosmic-gold font-playfair\">Healwave Integration</h3>\n            </div>\n            <p className=\"text-cosmic-silver/80 mb-6 leading-relaxed\">\n              Access personalized healing frequencies based on your astrological chart\n            </p>\n            <button \n              onClick={() => window.location.href = '/healwave'}\n              className=\"w-full px-6 py-3 bg-gradient-to-r from-cosmic-gold to-cosmic-purple hover:from-cosmic-gold/80 hover:to-cosmic-purple/80 text-white rounded-lg transition-all duration-300 font-semibold group-hover:shadow-lg\"\n            >\n              Explore Healwave\n            </button>\n          </div>\n        )}\n\n        <div className=\"group bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-6 hover:border-cosmic-silver/50 hover:bg-cosmic-silver/5 transition-all duration-300 hover:shadow-lg hover:shadow-cosmic-silver/25\">\n          <div className=\"flex items-center mb-4\">\n            <div className=\"w-12 h-12 bg-cosmic-silver/20 rounded-lg flex items-center justify-center mr-4\">\n              <span className=\"text-2xl\">👤</span>\n            </div>\n            <h3 className=\"text-xl font-semibold text-cosmic-gold font-playfair\">Your Profile</h3>\n          </div>\n          <p className=\"text-cosmic-silver/80 mb-6 leading-relaxed\">\n            Manage your account settings, preferences, and cosmic profile\n          </p>\n          <button \n            onClick={() => window.location.href = '/profile'}\n            className=\"w-full px-6 py-3 bg-gradient-to-r from-cosmic-silver/20 to-cosmic-blue hover:from-cosmic-silver/30 hover:to-cosmic-blue/80 text-white rounded-lg transition-all duration-300 font-semibold group-hover:shadow-lg\"\n          >\n            View Profile\n          </button>\n        </div>\n      </div>\n\n      {/* Chart Wheel Preview Section */}\n      {showQuickChart && (\n        <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-cosmic-purple/20 rounded-lg flex items-center justify-center mr-4\">\n                <span className=\"text-xl\">🌌</span>\n              </div>\n              <h3 className=\"text-2xl font-semibold text-cosmic-gold font-playfair\">Sample Chart Wheel</h3>\n            </div>\n            <button \n              onClick={() => setShowQuickChart(false)}\n              className=\"text-cosmic-silver/60 hover:text-cosmic-silver transition-colors\"\n            >\n              ✕\n            </button>\n          </div>\n          <div className=\"bg-cosmic-dark/50 rounded-lg p-4 border border-cosmic-silver/10\">\n            <ChartWheel \n              birthData={sampleBirthData}\n              showAspects={true}\n              showAnimation={true}\n            />\n            <div className=\"mt-4 text-center\">\n              <p className=\"text-cosmic-silver/70 text-sm mb-3\">\n                This is a sample chart for demonstration. Create your own personalized chart above.\n              </p>\n              <button \n                onClick={() => window.location.href = '/calculator'}\n                className=\"px-6 py-2 bg-cosmic-gold hover:bg-cosmic-gold/80 text-cosmic-dark font-semibold rounded-lg transition-colors duration-300\"\n              >\n                Create Your Chart\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Environment Status Section */}\n      <div className=\"flex justify-center\">\n        <div className=\"w-full max-w-lg\">\n          <EnvironmentStatus className=\"bg-cosmic-blue/20 backdrop-blur-lg border-cosmic-silver/20 hover:border-cosmic-purple/30 transition-colors duration-300\" />\n        </div>\n      </div>\n\n      {/* Recent Activity Section */}\n      {user && (\n        <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n          <div className=\"flex items-center mb-6\">\n            <div className=\"w-10 h-10 bg-cosmic-gold/20 rounded-lg flex items-center justify-center mr-4\">\n              <span className=\"text-xl\">📈</span>\n            </div>\n            <h3 className=\"text-2xl font-semibold text-cosmic-gold font-playfair\">Recent Activity</h3>\n          </div>\n          <div className=\"bg-cosmic-dark/30 rounded-lg p-6 border border-cosmic-silver/10\">\n            <p className=\"text-cosmic-silver/70 text-center italic\">\n              Your recent charts and cosmic sessions will appear here as you explore the cosmos.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Welcome Message for Non-Authenticated Users */}\n      {!user && (\n        <div className=\"bg-gradient-to-r from-cosmic-purple/20 to-cosmic-gold/20 backdrop-blur-lg border border-cosmic-gold/30 rounded-xl p-8 text-center\">\n          <h3 className=\"text-2xl font-bold text-cosmic-gold mb-4 font-playfair\">\n            Begin Your Cosmic Journey\n          </h3>\n          <p className=\"text-cosmic-silver/80 mb-6 leading-relaxed max-w-2xl mx-auto\">\n            Discover the mysteries of the universe through personalized astrology charts, \n            healing frequencies, and cosmic insights tailored just for you.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button \n              onClick={() => window.location.href = '/signup'}\n              className=\"px-8 py-3 bg-cosmic-gold hover:bg-cosmic-gold/80 text-cosmic-dark font-semibold rounded-lg transition-colors duration-300\"\n            >\n              Sign Up\n            </button>\n            <button \n              onClick={() => window.location.href = '/about'}\n              className=\"px-8 py-3 border border-cosmic-silver/30 hover:border-cosmic-silver/50 text-cosmic-silver hover:bg-cosmic-silver/10 font-semibold rounded-lg transition-all duration-300\"\n            >\n              Learn More\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/GeneKeys.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":16,"suggestions":[{"fix":{"range":[634,687],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":30,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":30,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1189,1199],"text":"(birthData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":40,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":40,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1478,1487],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":86,"column":34,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":86,"endColumn":36,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[3712,3714],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":116,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5235,5247],"text":"Life&apos;s Work:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5235,5247],"text":"Life&lsquo;s Work:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5235,5247],"text":"Life&#39;s Work:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5235,5247],"text":"Life&rsquo;s Work:"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card } from '@cosmichub/ui';\nimport { useBirthData } from '../contexts/BirthDataContext';\nimport { SimpleBirthForm } from '../components/SimpleBirthForm';\nimport GeneKeysChart from '../components/GeneKeysChart/GeneKeysChart';\nimport type { ChartBirthData } from '@cosmichub/types';\n\nconst GeneKeys: React.FC = () => {\n  const { birthData, isDataValid, setBirthData } = useBirthData();\n\n  const handleBirthDataSubmit = (data: ChartBirthData): void => {\n    // Birth data is already set in context by SimpleBirthForm\n    // No navigation needed - stay on this page and show the gene keys profile\n    console.log('Gene Keys birth data submitted:', data);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Gene Keys Profile\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80\">\n          Discover your unique genetic blueprint through the Gene Keys system - a contemplative path of consciousness evolution\n        </p>\n      </div>\n\n      {/* Birth Data Input - Only show if no data */}\n      {!birthData && (\n        <SimpleBirthForm\n          title=\"Enter Birth Data for Gene Keys\"\n          submitButtonText=\"Generate Gene Keys Profile\"\n          showSampleButton={true}\n          onSubmit={handleBirthDataSubmit}\n        />\n      )}\n\n      {/* Gene Keys Chart Display */}\n      {birthData && isDataValid && (\n        <div className=\"space-y-6\">\n          {/* Control Panel */}\n          <Card title=\"Chart Controls\">\n            <div className=\"flex flex-wrap gap-6 items-center justify-between\">\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"text-cosmic-silver\">\n                  <span className=\"text-cosmic-gold font-semibold\">Your Profile Type:</span> Gene Keys\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={() => setBirthData(null)}\n                  className=\"px-4 py-2 bg-cosmic-purple/20 border border-cosmic-purple/30 rounded-lg hover:bg-cosmic-purple/30 transition-colors text-cosmic-silver\"\n                >\n                  📝 Edit Birth Data\n                </button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Gene Keys Chart Component */}\n          <GeneKeysChart \n            birthData={birthData}\n            onCalculate={(data) => setBirthData(data)}\n          />\n\n          {/* Birth Information */}\n          <Card title=\"Birth Information\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Date</div>\n                <div className=\"text-cosmic-silver\">{birthData.month}/{birthData.day}/{birthData.year}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Time</div>\n                <div className=\"text-cosmic-silver\">{birthData.hour.toString().padStart(2, '0')}:{birthData.minute.toString().padStart(2, '0')}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Location</div>\n                <div className=\"text-cosmic-silver\">{birthData.city}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Coordinates</div>\n                <div className=\"text-cosmic-silver text-sm\">\n                  {birthData.lat != null ? `${birthData.lat.toFixed(2)}°, ${birthData.lon?.toFixed(2)}°` : 'Auto-detected'}\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Educational Information */}\n          <Card title=\"About Gene Keys\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-cosmic-gold\">The Three Sequences</h3>\n                <div className=\"space-y-2 text-sm text-cosmic-silver\">\n                  <div className=\"flex justify-between\">\n                    <span>• Activation Sequence (IQ)</span>\n                    <span className=\"text-cosmic-gold\">Mental Intelligence</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Venus Sequence (EQ)</span>\n                    <span className=\"text-cosmic-gold\">Emotional Intelligence</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Pearl Sequence (SQ)</span>\n                    <span className=\"text-cosmic-gold\">Spiritual Intelligence</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-cosmic-gold\">Core Components</h3>\n                <div className=\"space-y-2 text-sm text-cosmic-silver\">\n                  <div><span className=\"text-cosmic-gold\">Life's Work:</span> Your primary life purpose</div>\n                  <div><span className=\"text-cosmic-gold\">Evolution:</span> Your greatest challenge and growth</div>\n                  <div><span className=\"text-cosmic-gold\">Radiance:</span> How you attract abundance</div>\n                  <div><span className=\"text-cosmic-gold\">Purpose:</span> Your highest service to humanity</div>\n                  <div><span className=\"text-cosmic-gold\">Shadow → Gift → Siddhi:</span> The transformation spectrum</div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mt-6 p-4 bg-cosmic-purple/20 border border-cosmic-purple/30 rounded-lg\">\n              <h4 className=\"text-lg font-semibold text-cosmic-gold mb-2\">Contemplation Practice</h4>\n              <p className=\"text-cosmic-silver/90\">\n                Gene Keys are designed for deep contemplation over time. Allow weeks or months with each Gene Key, \n                observing how its patterns show up in your life and naturally transform from shadow frequencies \n                into gifts and eventually into the transcendent state of the Siddhi.\n              </p>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GeneKeys;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/HumanDesign.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":16,"suggestions":[{"fix":{"range":[826,882],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":21,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":21,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1116,1126],"text":"birthInfo == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":51,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":51,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2307,2317],"text":"(birthData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":61,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":61,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2603,2612],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":93,"column":16,"nodeType":"ChainExpression","messageId":"conditionErrorNullableObject","endLine":93,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3991,4018],"text":"((humanDesignData?.birth_info) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":136,"column":38,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":136,"endColumn":40,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[6522,6524],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card } from '@cosmichub/ui';\nimport { useBirthData } from '../contexts/BirthDataContext';\nimport { SimpleBirthForm } from '../components/SimpleBirthForm';\nimport HumanDesignChart from '../components/HumanDesignChart/HumanDesignChart';\nimport type { HumanDesignData } from '../components/HumanDesignChart/types';\nimport type { ChartBirthData } from '@cosmichub/types';\n\nconst HumanDesign: React.FC = () => {\n  const { birthData, isDataValid, setBirthData } = useBirthData();\n  const [humanDesignData, setHumanDesignData] = useState<HumanDesignData | null>(null);\n\n  const handleBirthDataSubmit = (data: ChartBirthData): void => {\n    // Birth data is already set in context by SimpleBirthForm\n    // No navigation needed - stay on this page and show the human design chart\n    console.log('Human Design birth data submitted:', data);\n  };\n\n  // Helper function to format birth info from calculation result\n  const formatBirthInfo = (birthInfo: HumanDesignData['birth_info']): { date: string; time: string; coordinates: string; timezone: string; } | null => {\n    if (!birthInfo) return null;\n\n    // Parse the ISO string more carefully to preserve the original date\n    const consciousTime = birthInfo.conscious_time;\n    const [datePart, timePart] = consciousTime.split('T');\n    const [year, month, day] = datePart.split('-').map(Number);\n    const [hour, minute] = timePart.split(':').map(Number);\n    \n    // Use the original input values to avoid timezone conversion issues\n    return {\n      date: `${month}/${day}/${year}`,\n      time: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,\n      coordinates: `${birthInfo.location.latitude.toFixed(2)}°, ${birthInfo.location.longitude.toFixed(2)}°`,\n      timezone: birthInfo.location.timezone\n    };\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Human Design Chart\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80\">\n          Discover your unique energy type, strategy, and life purpose through the Human Design system\n        </p>\n      </div>\n\n      {/* Birth Data Input - Only show if no data */}\n      {!birthData && (\n        <SimpleBirthForm\n          title=\"Enter Birth Data for Human Design\"\n          submitButtonText=\"Generate Human Design Chart\"\n          showSampleButton={true}\n          onSubmit={handleBirthDataSubmit}\n        />\n      )}\n\n      {/* Human Design Chart Display */}\n      {birthData && isDataValid && (\n        <div className=\"space-y-6\">\n          {/* Control Panel */}\n          <Card title=\"Chart Controls\">\n            <div className=\"flex flex-wrap gap-6 items-center justify-between\">\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"text-cosmic-silver\">\n                  <span className=\"text-cosmic-gold font-semibold\">Your Chart Type:</span> Human Design\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={() => setBirthData(null)}\n                  className=\"px-4 py-2 bg-cosmic-purple/20 border border-cosmic-purple/30 rounded-lg hover:bg-cosmic-purple/30 transition-colors text-cosmic-silver\"\n                >\n                  📝 Edit Birth Data\n                </button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Human Design Chart Component */}\n          <HumanDesignChart \n            birthData={birthData}\n            onCalculate={(data: ChartBirthData) => setBirthData(data)}\n            onHumanDesignCalculated={(hdData: HumanDesignData) => setHumanDesignData(hdData)}\n          />\n\n          {/* Birth Information */}\n          <Card title=\"Birth Information\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {humanDesignData?.birth_info ? (\n                // Show birth info from Human Design calculation result\n                (() => {\n                  const birthInfo = formatBirthInfo(humanDesignData.birth_info);\n                  return (\n                    <>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Date</div>\n                        <div className=\"text-cosmic-silver\">{birthInfo?.date}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Time</div>\n                        <div className=\"text-cosmic-silver\">{birthInfo?.time}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Location</div>\n                        <div className=\"text-cosmic-silver\">{humanDesignData.birth_info.location.timezone}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-cosmic-gold font-semibold\">Coordinates</div>\n                        <div className=\"text-cosmic-silver text-sm\">{birthInfo?.coordinates}</div>\n                      </div>\n                    </>\n                  );\n                })()\n              ) : (\n                // Fallback to context birth data (shown before calculation)\n                <>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Date</div>\n                    <div className=\"text-cosmic-silver\">{birthData.month}/{birthData.day}/{birthData.year}</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Time</div>\n                    <div className=\"text-cosmic-silver\">{birthData.hour.toString().padStart(2, '0')}:{birthData.minute.toString().padStart(2, '0')}</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Location</div>\n                    <div className=\"text-cosmic-silver\">{birthData.city}</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-cosmic-gold font-semibold\">Coordinates</div>\n                    <div className=\"text-cosmic-silver text-sm\">\n                      {birthData.lat != null ? `${birthData.lat.toFixed(2)}°, ${birthData.lon?.toFixed(2)}°` : 'Auto-detected'}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </Card>\n\n          {/* Educational Information */}\n          <Card title=\"About Human Design\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-cosmic-gold\">The 5 Energy Types</h3>\n                <div className=\"space-y-2 text-sm text-cosmic-silver\">\n                  <div className=\"flex justify-between\">\n                    <span>• Manifestor (9%)</span>\n                    <span className=\"text-cosmic-gold\">Initiators</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Generator (37%)</span>\n                    <span className=\"text-cosmic-gold\">Builders</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Manifesting Generator (33%)</span>\n                    <span className=\"text-cosmic-gold\">Multi-passionate</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Projector (20%)</span>\n                    <span className=\"text-cosmic-gold\">Guides</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>• Reflector (1%)</span>\n                    <span className=\"text-cosmic-gold\">Evaluators</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-cosmic-gold\">Key Components</h3>\n                <div className=\"space-y-2 text-sm text-cosmic-silver\">\n                  <div><span className=\"text-cosmic-gold\">Strategy:</span> Your decision-making approach</div>\n                  <div><span className=\"text-cosmic-gold\">Authority:</span> Your inner guidance system</div>\n                  <div><span className=\"text-cosmic-gold\">Profile:</span> Your personality theme</div>\n                  <div><span className=\"text-cosmic-gold\">Centers:</span> Energy hubs in your body</div>\n                  <div><span className=\"text-cosmic-gold\">Gates:</span> Specific traits and gifts</div>\n                  <div><span className=\"text-cosmic-gold\">Channels:</span> Consistent life forces</div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HumanDesign;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Login.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":14,"suggestions":[{"fix":{"range":[518,556],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"fix":{"range":[686,742],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":27,"column":9,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":27,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[850,855],"text":"error.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[850,855],"text":"error !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[850,855],"text":"Boolean(error)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":16,"suggestions":[{"fix":{"range":[982,1043],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":18,"suggestions":[{"fix":{"range":[1401,1448],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"fix":{"range":[1507,1542],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":79,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":79,"endColumn":38},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":126,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4771,4808],"text":"\n              Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4771,4808],"text":"\n              Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4771,4808],"text":"\n              Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4771,4808],"text":"\n              Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { logIn } from '@cosmichub/auth';\nimport { devConsole } from '../config/environment';\n\ninterface LoginData {\n  email: string;\n  password: string;\n}\n\nconst Login: React.FC = () => {\n  const [loginData, setLoginData] = useState<LoginData>({\n    email: '',\n    password: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  console.log('🔐 Login page rendered');\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    console.log('📝 Login input changed:', { name, value });\n    setLoginData(prev => ({ ...prev, [name]: value }));\n    // Clear error when user starts typing\n    if (error) setError('');\n  }, [error]);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('🚀 Login form submitted with data:', loginData);\n    setError('');\n    setIsLoading(true);\n\n    try {\n      // Basic validation\n  if (loginData.email === '' || loginData.password === '') {\n        throw new Error('Please enter both email and password');\n      }\n\n      if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(loginData.email)) {\n        throw new Error('Please enter a valid email address');\n      }\n\n      console.log('🔐 Attempting to log in user...');\n  await logIn(loginData.email, loginData.password);\n      console.log('✅ Login successful!');\n      \n      // Navigate to dashboard after successful login\n      navigate('/');\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to sign in';\n  devConsole.error('❌ Login error:', errorMessage);\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [loginData, navigate]);\n\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-purple/20 to-cosmic-blue/20 rounded-2xl border border-cosmic-silver/10 mb-8\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Sign In\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80 font-playfair\">\n          Welcome back to your cosmic journey\n        </p>\n      </div>\n\n      <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n  {error !== '' && (\n          <div className=\"mb-6 p-3 bg-red-500/20 border border-red-500/50 rounded-lg\">\n            <p className=\"text-red-200 text-sm\">{error}</p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-cosmic-silver/80 mb-2\">Email</label>\n            <input \n              id=\"email\"\n              name=\"email\"\n              type=\"email\" \n              value={loginData.email}\n              onChange={handleInputChange}\n              placeholder=\"Enter your email\"\n              className=\"w-full px-4 py-2 bg-cosmic-blue/20 border border-cosmic-silver/30 rounded-lg text-cosmic-silver focus:border-cosmic-purple focus:outline-none\"\n              required\n              autoComplete=\"email\"\n            />\n          </div>\n          <div>\n            <label htmlFor=\"password\" className=\"block text-cosmic-silver/80 mb-2\">Password</label>\n            <input \n              id=\"password\"\n              name=\"password\"\n              type=\"password\" \n              value={loginData.password}\n              onChange={handleInputChange}\n              placeholder=\"Enter your password\"\n              className=\"w-full px-4 py-2 bg-cosmic-blue/20 border border-cosmic-silver/30 rounded-lg text-cosmic-silver focus:border-cosmic-purple focus:outline-none\"\n              required\n              autoComplete=\"current-password\"\n            />\n          </div>\n          \n          <button \n            type=\"submit\"\n            disabled={isLoading || loginData.email === '' || loginData.password === ''}\n            className=\"w-full px-6 py-3 bg-gradient-to-r from-cosmic-purple to-cosmic-blue hover:from-cosmic-purple/80 hover:to-cosmic-blue/80 disabled:from-gray-500 disabled:to-gray-600 text-white rounded-lg transition-all duration-300 font-semibold disabled:cursor-not-allowed\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-5 h-5 mr-2 border-b-2 border-white rounded-full animate-spin\"></div>\n                Signing In...\n              </div>\n            ) : (\n              'Sign In'\n            )}\n          </button>\n\n          <div className=\"text-center\">\n            <p className=\"text-cosmic-silver/70\">\n              Don't have an account?{' '}\n              <a href=\"/signup\" className=\"text-cosmic-gold hover:text-cosmic-gold/80 font-semibold\">\n                Sign Up\n              </a>\n            </p>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/MultiSystemChart.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":16,"suggestions":[{"fix":{"range":[758,820],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":46,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":46,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1859,1869],"text":"(birthData == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":56,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":56,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2166,2175],"text":"(birthData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":135,"column":34,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":135,"endColumn":36,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[5860,5862],"text":"!=="},"desc":"Use '!==' instead of '!='."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { MultiSystemChartDisplay } from '../components/MultiSystemChart';\nimport { useBirthData } from '../contexts/BirthDataContext';\nimport { SimpleBirthForm } from '../components/SimpleBirthForm';\nimport type { ChartBirthData } from '../services/api';\n\nconst MultiSystemChart: React.FC = () => {\n  const { birthData, isDataValid, setBirthData } = useBirthData();\n  const [selectedSystems, setSelectedSystems] = useState<string[]>(['western', 'vedic']);\n\n  const handleBirthDataSubmit = (data: ChartBirthData): void => {\n    // Birth data is already set in context by SimpleBirthForm\n    // No navigation needed - stay on this page and show the multi-system charts\n    console.log('Multi-system chart birth data submitted:', data);\n  };\n\n  const availableSystems = [\n    { id: 'western', name: 'Western Tropical', description: 'Standard Western astrology' },\n    { id: 'vedic', name: 'Vedic Sidereal', description: 'Ancient Indian astrology' },\n    { id: 'uranian', name: 'Uranian System', description: 'Hamburg School astrology' },\n    { id: 'synthesis', name: 'Synthesis', description: 'Combined approach' }\n  ];\n\n  const toggleSystem = (systemId: string): void => {\n    setSelectedSystems(prev => \n      prev.includes(systemId) \n        ? prev.filter(id => id !== systemId)\n        : [...prev, systemId]\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Multi-System Chart Analysis\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80\">\n          Compare your birth chart across different astrological systems\n        </p>\n      </div>\n\n      {/* Birth Data Input - Only show if no data */}\n      {!birthData && (\n        <SimpleBirthForm\n          title=\"Enter Birth Data for Multi-System Analysis\"\n          submitButtonText=\"Generate Multi-System Charts\"\n          showSampleButton={true}\n          onSubmit={handleBirthDataSubmit}\n        />\n      )}\n\n      {/* System Selection and Charts */}\n      {birthData && isDataValid && (\n        <div className=\"space-y-6\">\n          {/* System Selection */}\n          <Card title=\"Astrological Systems\">\n            <div className=\"space-y-4\">\n              <p className=\"text-cosmic-silver/80\">\n                Select which astrological systems to compare:\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {availableSystems.map(system => (\n                  <label\n                    key={system.id}\n                    className={`flex items-center space-x-3 p-4 rounded-lg border cursor-pointer transition-colors ${\n                      selectedSystems.includes(system.id)\n                        ? 'border-cosmic-purple bg-cosmic-purple/10'\n                        : 'border-cosmic-silver/20 hover:border-cosmic-purple/50'\n                    }`}\n                    htmlFor={`system-${system.id}`}\n                    aria-label={`Select ${system.name}`}\n                  >\n                    <input\n                      id={`system-${system.id}`}\n                      type=\"checkbox\"\n                      checked={selectedSystems.includes(system.id)}\n                      onChange={() => toggleSystem(system.id)}\n                      className=\"rounded\"\n                    />\n                    <div>\n                      <div className=\"text-cosmic-gold font-semibold\" id={`label-${system.id}`}>{system.name}</div>\n                      <div className=\"text-cosmic-silver/70 text-sm\" id={`description-${system.id}`}>{system.description}</div>\n                    </div>\n                  </label>\n                ))}\n              </div>\n\n              <div className=\"flex items-center justify-between pt-4 border-t border-cosmic-silver/20\">\n                <div className=\"text-cosmic-silver/70 text-sm\">\n                  {selectedSystems.length} system{selectedSystems.length !== 1 ? 's' : ''} selected\n                </div>\n                <Button \n                  onClick={() => setBirthData(null)} \n                  variant=\"secondary\"\n                  className=\"text-sm\"\n                >\n                  📝 Edit Birth Data\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Chart Comparison */}\n          {selectedSystems.length > 0 && (\n            <Card title=\"Chart Comparison\">\n              <MultiSystemChartDisplay\n                birthData={birthData}\n                showComparison={true}\n              />\n            </Card>\n          )}\n\n          {/* Birth Information Summary */}\n          <Card title=\"Birth Information\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Date</div>\n                <div className=\"text-cosmic-silver\">{birthData.month}/{birthData.day}/{birthData.year}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Time</div>\n                <div className=\"text-cosmic-silver\">{birthData.hour.toString().padStart(2, '0')}:{birthData.minute.toString().padStart(2, '0')}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Location</div>\n                <div className=\"text-cosmic-silver\">{birthData.city}</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-cosmic-gold font-semibold\">Coordinates</div>\n                <div className=\"text-cosmic-silver text-sm\">\n                  {birthData.lat != null ? `${birthData.lat.toFixed(2)}°, ${birthData.lon?.toFixed(2)}°` : 'Auto-detected'}\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* System Insights */}\n          <Card title=\"System Insights\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-cosmic-gold\">Understanding the Differences</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-cosmic-purple/5 border border-cosmic-purple/20 rounded-lg\">\n                    <h4 className=\"text-cosmic-purple font-semibold mb-2\">Western Tropical</h4>\n                    <p className=\"text-cosmic-silver/80 text-sm\">\n                      Based on the seasons and the relationship between Earth and Sun. \n                      Uses the tropical zodiac where Aries begins at the spring equinox.\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-4 bg-cosmic-blue/5 border border-cosmic-blue/20 rounded-lg\">\n                    <h4 className=\"text-cosmic-blue font-semibold mb-2\">Vedic Sidereal</h4>\n                    <p className=\"text-cosmic-silver/80 text-sm\">\n                      Ancient Indian system based on fixed star positions. \n                      Typically shows signs about 24° earlier than Western astrology.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-cosmic-gold/5 border border-cosmic-gold/20 rounded-lg\">\n                    <h4 className=\"text-cosmic-gold font-semibold mb-2\">Uranian System</h4>\n                    <p className=\"text-cosmic-silver/80 text-sm\">\n                      Hamburg School approach using hypothetical planets and midpoints. \n                      Focuses on precise timing and psychological analysis.\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-4 bg-cosmic-green/5 border border-cosmic-green/20 rounded-lg\">\n                    <h4 className=\"text-cosmic-green font-semibold mb-2\">Synthesis</h4>\n                    <p className=\"text-cosmic-silver/80 text-sm\">\n                      Combines elements from multiple systems to provide \n                      a comprehensive and integrated astrological perspective.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MultiSystemChart;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Numerology.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":14,"suggestions":[{"fix":{"range":[510,580],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":16,"suggestions":[{"fix":{"range":[710,771],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":51,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":51,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[1753,1771],"text":"(letterValues[char] !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[1753,1771],"text":"(!Number.isNaN(letterValues[char]))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1753,1771],"text":"(Boolean(letterValues[char]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":67,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":67,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[2263,2280],"text":"(vowelValues[char] !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[2263,2280],"text":"(!Number.isNaN(vowelValues[char]))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2263,2280],"text":"(Boolean(vowelValues[char]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":76,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":76,"endColumn":57,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2527,2533],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":16,"suggestions":[{"fix":{"range":[2545,2616],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":79,"column":10,"nodeType":"CallExpression","messageId":"conditionErrorString","endLine":79,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2630,2661],"text":"(numerologyData.fullName.trim().length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2630,2661],"text":"(numerologyData.fullName.trim() === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2630,2661],"text":"(!Boolean(numerologyData.fullName.trim()))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":79,"column":45,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":79,"endColumn":69,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2665,2690],"text":"(numerologyData.birthDate.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2665,2690],"text":"(numerologyData.birthDate === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2665,2690],"text":"(!Boolean(numerologyData.birthDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":18,"suggestions":[{"fix":{"range":[3147,3234],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":134,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4929,5014],"text":"\n                Your life&apos;s purpose and the path you're meant to walk\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4929,5014],"text":"\n                Your life&lsquo;s purpose and the path you're meant to walk\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4929,5014],"text":"\n                Your life&#39;s purpose and the path you're meant to walk\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4929,5014],"text":"\n                Your life&rsquo;s purpose and the path you're meant to walk\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":134,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4929,5014],"text":"\n                Your life's purpose and the path you&apos;re meant to walk\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4929,5014],"text":"\n                Your life's purpose and the path you&lsquo;re meant to walk\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4929,5014],"text":"\n                Your life's purpose and the path you&#39;re meant to walk\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4929,5014],"text":"\n                Your life's purpose and the path you&rsquo;re meant to walk\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":138,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":138,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5224,5240],"text":"(results.lifePath != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5224,5240],"text":"(results.lifePath ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5224,5240],"text":"(Boolean(results.lifePath))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":138,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":138,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5241,5243],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":146,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5569,5659],"text":"\n                Your natural talents and abilities you&apos;re meant to develop\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5569,5659],"text":"\n                Your natural talents and abilities you&lsquo;re meant to develop\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5569,5659],"text":"\n                Your natural talents and abilities you&#39;re meant to develop\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5569,5659],"text":"\n                Your natural talents and abilities you&rsquo;re meant to develop\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":150,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":150,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5869,5887],"text":"(results.expression != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5869,5887],"text":"(results.expression ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5869,5887],"text":"(Boolean(results.expression))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":150,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":150,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5888,5890],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":158,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6215,6288],"text":"\n                Your heart&apos;s desire and inner motivations\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6215,6288],"text":"\n                Your heart&lsquo;s desire and inner motivations\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6215,6288],"text":"\n                Your heart&#39;s desire and inner motivations\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6215,6288],"text":"\n                Your heart&rsquo;s desire and inner motivations\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":162,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":162,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6498,6514],"text":"(results.soulUrge != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[6498,6514],"text":"(results.soulUrge ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6498,6514],"text":"(Boolean(results.soulUrge))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":162,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":162,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6515,6517],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":207,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":207,"endColumn":47},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":208,"column":39,"nodeType":"CallExpression","messageId":"conditionErrorString","endLine":208,"endColumn":69,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[8491,8522],"text":"(numerologyData.fullName.trim().length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[8491,8522],"text":"(numerologyData.fullName.trim() === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8491,8522],"text":"(!Boolean(numerologyData.fullName.trim()))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":208,"column":74,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":208,"endColumn":98,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[8526,8551],"text":"(numerologyData.birthDate.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[8526,8551],"text":"(numerologyData.birthDate === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8526,8551],"text":"(!Boolean(numerologyData.birthDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { devConsole } from '../config/environment';\n\ninterface NumerologyData {\n  fullName: string;\n  birthDate: string;\n}\n\nconst Numerology: React.FC = () => {\n  const [numerologyData, setNumerologyData] = useState<NumerologyData>({\n    fullName: '',\n    birthDate: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [results, setResults] = useState<{\n    lifePath?: number;\n    expression?: number;\n    soulUrge?: number;\n  }>({});\n\n  console.log('🔢 Numerology page rendered with data:', numerologyData);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    console.log('📝 Numerology input changed:', { name, value });\n    setNumerologyData(prev => ({ ...prev, [name]: value }));\n  }, []);\n\n  const calculateLifePathNumber = useCallback((dateStr: string): number => {\n    const date = new Date(dateStr);\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    \n    let sum = day + month + year;\n    while (sum > 9 && sum !== 11 && sum !== 22 && sum !== 33) {\n      sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    }\n    return sum;\n  }, []);\n\n  const calculateExpressionNumber = useCallback((name: string): number => {\n    const letterValues: { [key: string]: number } = {\n      'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9,\n      'J': 1, 'K': 2, 'L': 3, 'M': 4, 'N': 5, 'O': 6, 'P': 7, 'Q': 8, 'R': 9,\n      'S': 1, 'T': 2, 'U': 3, 'V': 4, 'W': 5, 'X': 6, 'Y': 7, 'Z': 8\n    };\n    \n    let sum = 0;\n    for (const char of name.toUpperCase().replace(/[^A-Z]/g, '')) {\n      sum += letterValues[char] || 0;\n    }\n    \n    while (sum > 9 && sum !== 11 && sum !== 22 && sum !== 33) {\n      sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    }\n    return sum;\n  }, []);\n\n  const calculateSoulUrgeNumber = useCallback((name: string): number => {\n    const vowelValues: { [key: string]: number } = {\n      'A': 1, 'E': 5, 'I': 9, 'O': 6, 'U': 3, 'Y': 7\n    };\n    \n    let sum = 0;\n    for (const char of name.toUpperCase().replace(/[^A-Z]/g, '')) {\n      sum += vowelValues[char] || 0;\n    }\n    \n    while (sum > 9 && sum !== 11 && sum !== 22 && sum !== 33) {\n      sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    }\n    return sum;\n  }, []);\n\n  const handleCalculateNumbers = useCallback(async () => {\n    console.log('🔢 Calculate numbers clicked with data:', numerologyData);\n    \n    if (!numerologyData.fullName.trim() || !numerologyData.birthDate) {\n      alert('Please enter both your full name and birth date.');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const lifePath = calculateLifePathNumber(numerologyData.birthDate);\n      const expression = calculateExpressionNumber(numerologyData.fullName);\n      const soulUrge = calculateSoulUrgeNumber(numerologyData.fullName);\n      \n      setResults({\n        lifePath,\n        expression,\n        soulUrge\n      });\n      \n      console.log('✅ Numerology calculations complete:', { lifePath, expression, soulUrge });\n    } catch (error) {\n      devConsole.error('❌ Error calculating numerology:', error);\n      alert('Error calculating your numbers. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [numerologyData, calculateLifePathNumber, calculateExpressionNumber, calculateSoulUrgeNumber]);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-gold/20 to-cosmic-purple/20 rounded-2xl border border-cosmic-silver/10\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Numerology Calculator\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80 font-playfair\">\n          Discover the mystical meanings behind the numbers in your life\n        </p>\n      </div>\n\n      {/* Numerology Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 bg-cosmic-gold/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-3xl\">📊</span>\n            </div>\n            <h2 className=\"text-2xl font-semibold text-cosmic-gold mb-4 font-playfair\">\n              Core Numbers\n            </h2>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div className=\"bg-cosmic-dark/30 rounded-lg p-4 border border-cosmic-silver/10\">\n              <h3 className=\"text-lg font-semibold text-cosmic-gold mb-2\">Life Path Number</h3>\n              <p className=\"text-cosmic-silver/80 text-sm mb-3\">\n                Your life's purpose and the path you're meant to walk\n              </p>\n              <div className=\"w-12 h-12 bg-cosmic-purple/20 rounded-full flex items-center justify-center mx-auto\">\n                <span className=\"text-xl font-bold text-cosmic-gold\">\n                  {results.lifePath || '?'}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"bg-cosmic-dark/30 rounded-lg p-4 border border-cosmic-silver/10\">\n              <h3 className=\"text-lg font-semibold text-cosmic-gold mb-2\">Expression Number</h3>\n              <p className=\"text-cosmic-silver/80 text-sm mb-3\">\n                Your natural talents and abilities you're meant to develop\n              </p>\n              <div className=\"w-12 h-12 bg-cosmic-purple/20 rounded-full flex items-center justify-center mx-auto\">\n                <span className=\"text-xl font-bold text-cosmic-gold\">\n                  {results.expression || '?'}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"bg-cosmic-dark/30 rounded-lg p-4 border border-cosmic-silver/10\">\n              <h3 className=\"text-lg font-semibold text-cosmic-gold mb-2\">Soul Urge Number</h3>\n              <p className=\"text-cosmic-silver/80 text-sm mb-3\">\n                Your heart's desire and inner motivations\n              </p>\n              <div className=\"w-12 h-12 bg-cosmic-purple/20 rounded-full flex items-center justify-center mx-auto\">\n                <span className=\"text-xl font-bold text-cosmic-gold\">\n                  {results.soulUrge || '?'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 bg-cosmic-purple/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-3xl\">✨</span>\n            </div>\n            <h2 className=\"text-2xl font-semibold text-cosmic-gold mb-4 font-playfair\">\n              Calculate Your Numbers\n            </h2>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"full-name\" className=\"block text-cosmic-silver/80 mb-2\">Full Name at Birth</label>\n              <input \n                id=\"full-name\"\n                name=\"fullName\"\n                type=\"text\" \n                value={numerologyData.fullName}\n                onChange={handleInputChange}\n                placeholder=\"Enter your full birth name\"\n                className=\"w-full px-4 py-2 bg-cosmic-blue/20 border border-cosmic-silver/30 rounded-lg text-cosmic-silver focus:border-cosmic-purple focus:outline-none\"\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"birth-date-numerology\" className=\"block text-cosmic-silver/80 mb-2\">Date of Birth</label>\n              <input \n                id=\"birth-date-numerology\"\n                name=\"birthDate\"\n                type=\"date\" \n                value={numerologyData.birthDate}\n                onChange={handleInputChange}\n                className=\"w-full px-4 py-2 bg-cosmic-blue/20 border border-cosmic-silver/30 rounded-lg text-cosmic-silver focus:border-cosmic-purple focus:outline-none\"\n                required\n              />\n            </div>\n            \n            <button \n              onClick={handleCalculateNumbers}\n              disabled={isLoading || !numerologyData.fullName.trim() || !numerologyData.birthDate}\n              className=\"w-full mt-6 px-6 py-3 bg-gradient-to-r from-cosmic-gold to-cosmic-purple hover:from-cosmic-gold/80 hover:to-cosmic-purple/80 disabled:from-gray-500 disabled:to-gray-600 text-white rounded-lg transition-all duration-300 font-semibold disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"w-5 h-5 mr-2 border-b-2 border-white rounded-full animate-spin\"></div>\n                  Calculating...\n                </div>\n              ) : (\n                'Calculate My Numbers'\n              )}\n            </button>\n\n            <div className=\"mt-6 p-4 bg-cosmic-dark/30 rounded-lg border border-cosmic-silver/10\">\n              <h4 className=\"text-cosmic-gold font-semibold mb-2\">About Numerology</h4>\n              <p className=\"text-cosmic-silver/70 text-sm\">\n                Numerology is the ancient study of numbers and their mystical significance in your life. \n                Each number carries unique vibrations that can reveal insights about your personality, \n                destiny, and life purpose.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Numerology;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/PerformanceMonitoring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Profile.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCog' is defined but never used.","line":5,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaChartLine' is defined but never used.","line":5,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaSave' is defined but never used.","line":5,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCreditCard' is defined but never used.","line":5,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaHistory' is defined but never used.","line":5,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCalendarAlt' is defined but never used.","line":5,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":95},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProgressBar' is defined but never used.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":35,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":35,"endColumn":48,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1247,1253],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":36,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":36,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1269,1278],"text":"(user?.uid) != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1269,1278],"text":"(user?.uid) ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1269,1278],"text":"Boolean((user?.uid))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":42,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":42,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1456,1483],"text":"((user.metadata?.creationTime) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1456,1483],"text":"((user.metadata?.creationTime) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1456,1483],"text":"(Boolean((user.metadata?.creationTime)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":42,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":42,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1484,1486],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":49,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":49,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1621,1621],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1621,1621],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":67,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":67,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2172,2177],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":171,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":171,"endColumn":46}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { Card, Button } from '@cosmichub/ui';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport { FaUser, FaCog, FaChartLine, FaSave, FaCreditCard, FaArrowUp, FaHistory, FaCalendarAlt } from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from '../components/ToastProvider';\nimport ProgressBar from '../components/ProgressBar';\nimport { devConsole } from '../config/environment';\n// (Profile page currently does not use tier details directly; removed local subscription import)\n\n// Lazy load heavy components\nconst ChartPreferences = React.lazy(() => import('../components/ChartPreferences'));\n\ninterface UserStats {\n  totalCharts: number;\n  chartsThisMonth: number;\n  savedCharts: number;\n  joinDate: Date;\n  lastLogin: Date;\n}\n\nconst Profile: React.FC = React.memo(() => {\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [userStats, setUserStats] = useState<UserStats>({\n    totalCharts: 0,\n    chartsThisMonth: 0,\n    savedCharts: 0,\n    joinDate: new Date(),\n    lastLogin: new Date(),\n  });\n\n  const loadUserStats = useCallback(async () => {\n    if (user?.uid) {\n      // Simulate fetching stats from Firestore\n      setUserStats({\n        totalCharts: 50,\n        chartsThisMonth: 10,\n        savedCharts: 5,\n        joinDate: new Date(user.metadata?.creationTime || Date.now()),\n        lastLogin: new Date(),\n      });\n    }\n  }, [user?.uid, user?.metadata?.creationTime]);\n\n  useEffect(() => {\n    loadUserStats();\n  }, [loadUserStats]);\n\n  const handleSignOut = useCallback(async () => {\n    try {\n      await signOut();\n      toast({ description: 'Signed out successfully', status: 'success' });\n      navigate('/login');\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n      devConsole.error('❌ Sign out error:', error);\n      toast({\n        description: `Error signing out: ${errorMessage}`,\n        status: 'error'\n      });\n    }\n  }, [signOut, navigate, toast]);\n\n  if (!user) {\n    return (\n      <div className=\"py-10 text-center\">\n        <div className=\"mx-auto text-4xl text-cosmic-purple animate-spin\" aria-hidden=\"true\">⭐</div>\n        <p className=\"mt-4 text-cosmic-silver\">Please sign in to view your profile</p>\n        <Button onClick={() => navigate('/login')} variant=\"primary\" className=\"mt-4\">\n          Sign In\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl py-8 mx-auto\">\n      <div className=\"cosmic-card p-6 rounded-lg shadow-lg bg-cosmic-dark\">\n        <div className=\"flex flex-col items-center mb-6 space-y-4 sm:flex-row sm:space-y-0 sm:space-x-6\">\n          <div className=\"flex items-center justify-center w-24 h-24 rounded-full bg-cosmic-blue/30\">\n            <FaUser className=\"text-3xl text-cosmic-silver\" aria-hidden=\"true\" />\n          </div>\n          <div className=\"text-center sm:text-left\">\n            <h2 className=\"text-2xl font-bold text-cosmic-gold\">{user.email}</h2>\n            <span className=\"bg-cosmic-purple/20 text-cosmic-purple px-2 py-1 rounded text-sm font-semibold uppercase\">\n              Free Tier\n            </span>\n          </div>\n        </div>\n\n        <Tabs.Root defaultValue=\"overview\" className=\"space-y-6\">\n          <Tabs.List className=\"flex mb-6 border-b border-cosmic-silver/30\" aria-label=\"Profile Tabs\">\n            <Tabs.Trigger\n              value=\"overview\"\n              className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\"\n            >\n              Overview\n            </Tabs.Trigger>\n            <Tabs.Trigger\n              value=\"preferences\"\n              className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\"\n            >\n              Preferences\n            </Tabs.Trigger>\n            <Tabs.Trigger\n              value=\"account\"\n              className=\"px-4 py-2 text-cosmic-silver data-[state=active]:bg-cosmic-purple/20 data-[state=active]:text-cosmic-purple\"\n            >\n              Account\n            </Tabs.Trigger>\n          </Tabs.List>\n\n          <Tabs.Content value=\"overview\">\n            <div className=\"space-y-6\">\n              <Card title=\"Account Overview\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-cosmic-silver\">Email</span>\n                    <span className=\"text-cosmic-gold\">{user.email}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-cosmic-silver\">Account ID</span>\n                    <span className=\"text-cosmic-gold font-mono text-sm\">{user.uid.slice(0, 8)}...</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-cosmic-silver\">Joined</span>\n                    <span className=\"text-cosmic-gold\">{userStats.joinDate.toLocaleDateString()}</span>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card title=\"Activity Summary\">\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n                  <div>\n                    <p className=\"text-cosmic-silver\">Total Charts</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">{userStats.totalCharts}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-cosmic-silver\">Charts This Month</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">{userStats.chartsThisMonth}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-cosmic-silver\">Saved Charts</p>\n                    <p className=\"text-2xl font-bold text-cosmic-gold\">{userStats.savedCharts}</p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"preferences\">\n            <React.Suspense fallback={<div className=\"text-cosmic-silver\">Loading preferences...</div>}>\n              <ChartPreferences />\n            </React.Suspense>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"account\">\n            <Card title=\"Subscription\">\n              <div className=\"text-center space-y-4\">\n                <p className=\"text-cosmic-silver\">You are currently on the Free plan</p>\n                <Button onClick={() => navigate('/upgrade')} variant=\"primary\">\n                  <FaArrowUp className=\"mr-2\" /> Upgrade to Premium\n                </Button>\n              </div>\n            </Card>\n            \n            <div className=\"text-center mt-6\">\n              <Button onClick={handleSignOut} variant=\"secondary\">\n                Sign Out\n              </Button>\n            </div>\n          </Tabs.Content>\n        </Tabs.Root>\n      </div>\n    </div>\n  );\n});\n\nProfile.displayName = 'Profile';\n\nexport default Profile;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/ProfileSimple.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":6,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":40},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":10,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":10,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[298,303],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":53,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":53,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useAuth } from '@cosmichub/auth';\nimport { useNavigate } from 'react-router-dom';\n\nconst ProfileSimple: React.FC = (): JSX.Element => {\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  const handleSignOut = async (): Promise<void> => {\n    await signOut();\n    navigate('/login');\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl space-y-6\">\n      <h1 className=\"text-3xl font-bold text-cosmic-gold\">Profile</h1>\n      \n      <Card title=\"Account Overview\">\n        <div className=\"space-y-4\" role=\"list\" aria-label=\"Account details\">\n          <div className=\"flex justify-between\" role=\"listitem\" aria-labelledby=\"email-label\">\n            <span id=\"email-label\" className=\"text-cosmic-silver\">Email</span>\n            <span className=\"text-cosmic-gold\" aria-label={`User email address: ${user.email}`}>{user.email}</span>\n          </div>\n          <div className=\"flex justify-between\" role=\"listitem\" aria-labelledby=\"account-id-label\">\n            <span id=\"account-id-label\" className=\"text-cosmic-silver\">Account ID</span>\n            <span className=\"text-cosmic-gold font-mono text-sm\" aria-label={`User account ID: ${user.uid.slice(0, 8)}...`}>\n              {user.uid.slice(0, 8)}...\n            </span>\n          </div>\n        </div>\n      </Card>\n\n      <Card title=\"Subscription\">\n        <div className=\"text-center space-y-4\" role=\"status\" aria-label=\"Subscription status\">\n          <p className=\"text-cosmic-silver\">Free Tier</p>\n          <Button \n            onClick={() => navigate('/upgrade')} \n            variant=\"primary\"\n            aria-label=\"Upgrade to Premium subscription for additional features.\"\n          >\n            Upgrade to Premium\n          </Button>\n        </div>\n      </Card>\n      \n      <div className=\"text-center mt-6\">\n        <Button \n          onClick={handleSignOut} \n          variant=\"secondary\"\n          aria-label=\"Sign out of your account and return to the login page.\"\n        >\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileSimple;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SavedCharts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":20,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":20,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[822,827],"text":"(user == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":28,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":28,"endColumn":68,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1000,1000],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1000,1000],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":57,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":57,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1911,1916],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":95,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":95,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3288,3293],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":102,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":102,"endColumn":97},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":110,"column":23,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":110,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3856,3862],"text":"(error == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":149,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":149,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[5958,5968],"text":"(chart.name.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[5958,5968],"text":"(chart.name !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5958,5968],"text":"(Boolean(chart.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":153,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":153,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[6232,6248],"text":"(chart.chart_type.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[6232,6248],"text":"(chart.chart_type !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6232,6248],"text":"(Boolean(chart.chart_type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '@cosmichub/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, Button } from '@cosmichub/ui';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { fetchSavedCharts, deleteChart, type SavedChart } from '../services/api';\nimport type { ChartId } from '../services/api.types';\nimport { CosmicLoading } from '../components/CosmicLoading';\nimport { devConsole } from '../config/environment';\n\nconst SavedCharts: React.FC = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  // Fetch saved charts\n  const { data: charts = [], isLoading, error } = useQuery({\n    queryKey: ['savedCharts'],\n    queryFn: fetchSavedCharts,\n    enabled: !!user,\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  // Delete chart mutation\n  const deleteMutation = useMutation({\n    mutationFn: deleteChart,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['savedCharts'] });\n    },\n    onError: (error) => {\n      devConsole.error('❌ Error deleting chart:', error);\n      alert('Failed to delete chart. Please try again.');\n    },\n  });\n\n  const handleDeleteChart = (chartId: string, chartName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${chartName}\"? This action cannot be undone.`)) {\n      deleteMutation.mutate(chartId as ChartId);\n    }\n  };\n\n  const handleViewChart = (chart: SavedChart) => {\n    // Store chart data and navigate to chart view\n    // You could store in context or session storage\n    sessionStorage.setItem('selectedChart', JSON.stringify(chart));\n    navigate('/chart');\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-blue/20 to-cosmic-purple/20 rounded-2xl border border-cosmic-silver/10\">\n          <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n            Saved Charts\n          </h1>\n          <p className=\"text-xl text-cosmic-silver/80 font-playfair mb-8\">\n            Please sign in to view your saved charts\n          </p>\n          <Button onClick={() => navigate('/login')} className=\"bg-cosmic-purple hover:bg-cosmic-purple/80\">\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-blue/20 to-cosmic-purple/20 rounded-2xl border border-cosmic-silver/10\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Saved Charts\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80 font-playfair\">\n          Access your personal collection of astrological charts\n        </p>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"flex justify-center py-16\">\n          <CosmicLoading size=\"lg\" message=\"Loading your saved charts...\" />\n        </div>\n      )}\n\n      {/* Error State */}\n      {error && (\n        <Card title=\"Error Loading Charts\">\n          <div className=\"text-center py-8\">\n            <div className=\"text-red-400 mb-4\">Failed to load saved charts</div>\n            <p className=\"text-cosmic-silver/70 mb-4\">\n              {error instanceof Error ? error.message : 'An unknown error occurred'}\n            </p>\n            <Button onClick={() => queryClient.invalidateQueries({ queryKey: ['savedCharts'] })}>\n              Retry\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Charts Grid */}\n      {!isLoading && !error && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {charts.length === 0 ? (\n            /* Empty State */\n            <div className=\"md:col-span-2 lg:col-span-3 text-center py-16\">\n              <div className=\"w-24 h-24 bg-cosmic-purple/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-4xl\">📊</span>\n              </div>\n              <h3 className=\"text-2xl font-semibold text-cosmic-gold mb-4 font-playfair\">\n                No Saved Charts Yet\n              </h3>\n              <p className=\"text-cosmic-silver/80 mb-8 max-w-md mx-auto\">\n                Start creating charts to build your personal cosmic library. \n                All your charts will be saved here for easy access.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <button \n                  onClick={() => navigate('/calculator')}\n                  className=\"px-8 py-3 bg-gradient-to-r from-cosmic-purple to-cosmic-blue hover:from-cosmic-purple/80 hover:to-cosmic-blue/80 text-white rounded-lg transition-all duration-300 font-semibold\"\n                >\n                  Create Birth Chart\n                </button>\n                <button \n                  onClick={() => navigate('/numerology')}\n                  className=\"px-8 py-3 border border-cosmic-silver/30 hover:border-cosmic-silver/50 text-cosmic-silver hover:bg-cosmic-silver/10 rounded-lg transition-all duration-300 font-semibold\"\n                >\n                  Calculate Numerology\n                </button>\n              </div>\n            </div>\n          ) : (\n            /* Charts Display */\n            charts.map((chart) => (\n              <Card key={chart.id} title=\"\">\n                <div className=\"space-y-4\">\n                  {/* Chart Header */}\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-cosmic-gold mb-1\">\n                        {chart.name || `${chart.birth_location} Chart`}\n                      </h3>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"px-2 py-1 text-xs bg-cosmic-purple/20 text-cosmic-purple rounded\">\n                          {chart.chart_type || 'Natal'}\n                        </span>\n                        <span className=\"text-cosmic-silver/70 text-sm\">\n                          {formatDate(chart.created_at)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Chart Details */}\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-cosmic-silver/70\">Birth Date:</span>\n                      <span className=\"text-cosmic-silver\">{chart.birth_date}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-cosmic-silver/70\">Birth Time:</span>\n                      <span className=\"text-cosmic-silver\">{chart.birth_time}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-cosmic-silver/70\">Location:</span>\n                      <span className=\"text-cosmic-silver\">{chart.birth_location}</span>\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2 pt-4 border-t border-cosmic-silver/10\">\n                    <Button\n                      onClick={() => handleViewChart(chart)}\n                      className=\"flex-1 bg-cosmic-gold hover:bg-cosmic-gold/80 text-cosmic-dark\"\n                    >\n                      View Chart\n                    </Button>\n                    <Button\n                      onClick={() => handleDeleteChart(chart.id, chart.name)}\n                      variant=\"secondary\"\n                      className=\"text-red-400 hover:text-red-300 hover:bg-red-500/10\"\n                      disabled={deleteMutation.isPending}\n                    >\n                      {deleteMutation.isPending ? '...' : 'Delete'}\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n        <h3 className=\"text-xl font-semibold text-cosmic-gold mb-6 font-playfair flex items-center\">\n          <span className=\"w-8 h-8 bg-cosmic-gold/20 rounded-lg flex items-center justify-center mr-3\">\n            ⚡\n          </span>\n          Quick Actions\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button \n            onClick={() => navigate('/calculator')}\n            className=\"flex items-center p-4 bg-cosmic-dark/30 rounded-lg border border-cosmic-silver/10 hover:border-cosmic-purple/30 transition-colors duration-300 group\"\n          >\n            <div className=\"w-12 h-12 bg-cosmic-purple/20 rounded-lg flex items-center justify-center mr-4 group-hover:bg-cosmic-purple/30 transition-colors duration-300\">\n              <span className=\"text-xl\">🔮</span>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold text-cosmic-gold\">Birth Chart</h4>\n              <p className=\"text-cosmic-silver/70 text-sm\">Create natal chart</p>\n            </div>\n          </button>\n\n          <button \n            onClick={() => navigate('/numerology')}\n            className=\"flex items-center p-4 bg-cosmic-dark/30 rounded-lg border border-cosmic-silver/10 hover:border-cosmic-gold/30 transition-colors duration-300 group\"\n          >\n            <div className=\"w-12 h-12 bg-cosmic-gold/20 rounded-lg flex items-center justify-center mr-4 group-hover:bg-cosmic-gold/30 transition-colors duration-300\">\n              <span className=\"text-xl\">📊</span>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold text-cosmic-gold\">Numerology</h4>\n              <p className=\"text-cosmic-silver/70 text-sm\">Calculate numbers</p>\n            </div>\n          </button>\n\n          <button \n            onClick={() => navigate('/human-design')}\n            className=\"flex items-center p-4 bg-cosmic-dark/30 rounded-lg border border-cosmic-silver/10 hover:border-cosmic-silver/30 transition-colors duration-300 group\"\n          >\n            <div className=\"w-12 h-12 bg-cosmic-silver/20 rounded-lg flex items-center justify-center mr-4 group-hover:bg-cosmic-silver/30 transition-colors duration-300\">\n              <span className=\"text-xl\">🧬</span>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold text-cosmic-gold\">Human Design</h4>\n              <p className=\"text-cosmic-silver/70 text-sm\">Energy blueprint</p>\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SavedCharts;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SignUp.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":14,"suggestions":[{"fix":{"range":[463,528],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":16,"suggestions":[{"fix":{"range":[658,713],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":16,"suggestions":[{"fix":{"range":[875,929],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":32,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":32,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1019,1034],"text":"(formData.email.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1019,1034],"text":"(formData.email === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1019,1034],"text":"(!Boolean(formData.email))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":32,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":32,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1038,1056],"text":"(formData.password.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1038,1056],"text":"(formData.password === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1038,1056],"text":"(!Boolean(formData.password))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":32,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":32,"endColumn":70,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1060,1078],"text":"(formData.fullName.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1060,1078],"text":"(formData.fullName === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1060,1078],"text":"(!Boolean(formData.fullName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"fix":{"range":[1269,1324],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":18,"suggestions":[{"fix":{"range":[1386,1433],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":67,"column":10,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":67,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2333,2338],"text":"(error.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2333,2338],"text":"(error !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2333,2338],"text":"(Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":73,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":73,"endColumn":38}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { signUp } from '@cosmichub/auth';\nimport { devConsole } from '../config/environment';\n\nconst SignUp: React.FC = () => {\n  const [formData, setFormData] = useState({\n    fullName: '',\n    email: '',\n    password: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  console.log('🎨 SignUp page rendered with form data:', formData);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    console.log('📝 Form input changed:', { name, value });\n    setFormData(prev => ({ ...prev, [name]: value }));\n  }, []);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('🚀 Form submitted with data:', formData);\n    setError('');\n    setIsLoading(true);\n\n    try {\n      // Basic validation\n      if (!formData.email || !formData.password || !formData.fullName) {\n        throw new Error('Please fill in all fields');\n      }\n\n      if (formData.password.length < 6) {\n        throw new Error('Password must be at least 6 characters');\n      }\n\n      console.log('🔐 Attempting to create user account...');\n      await signUp(formData.email, formData.password);\n      console.log('✅ Account created successfully!');\n      \n      // Navigate to dashboard or login\n      navigate('/');\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create account';\n  devConsole.error('❌ Signup error:', errorMessage);\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [formData, navigate]);\n\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <div className=\"text-center py-12 bg-gradient-to-r from-cosmic-gold/20 to-cosmic-purple/20 rounded-2xl border border-cosmic-silver/10 mb-8\">\n        <h1 className=\"text-4xl font-bold text-cosmic-gold mb-4 font-cinzel\">\n          Sign Up\n        </h1>\n        <p className=\"text-xl text-cosmic-silver/80 font-playfair\">\n          Begin your cosmic journey today\n        </p>\n      </div>\n\n      <div className=\"bg-cosmic-blue/30 backdrop-blur-lg border border-cosmic-silver/20 rounded-xl p-8\">\n        {error && (\n          <div className=\"mb-6 p-3 bg-red-500/20 border border-red-500/50 rounded-lg\">\n            <p className=\"text-red-200 text-sm\">{error}</p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"fullName\" className=\"block text-cosmic-silver/80 mb-2\">Full Name</label>\n            <input \n              id=\"fullName\"\n              name=\"fullName\"\n              type=\"text\" \n              value={formData.fullName}\n              onChange={handleInputChange}\n              placeholder=\"Enter your full name\"\n              className=\"w-full px-4 py-2 bg-cosmic-blue/20 border border-cosmic-silver/30 rounded-lg text-cosmic-silver focus:border-cosmic-purple focus:outline-none\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"email\" className=\"block text-cosmic-silver/80 mb-2\">Email</label>\n            <input \n              id=\"email\"\n              name=\"email\"\n              type=\"email\" \n              value={formData.email}\n              onChange={handleInputChange}\n              placeholder=\"Enter your email\"\n              className=\"w-full px-4 py-2 bg-cosmic-blue/20 border border-cosmic-silver/30 rounded-lg text-cosmic-silver focus:border-cosmic-purple focus:outline-none\"\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"password\" className=\"block text-cosmic-silver/80 mb-2\">Password</label>\n            <input \n              id=\"password\"\n              name=\"password\"\n              type=\"password\" \n              value={formData.password}\n              onChange={handleInputChange}\n              placeholder=\"Create a password\"\n              className=\"w-full px-4 py-2 bg-cosmic-blue/20 border border-cosmic-silver/30 rounded-lg text-cosmic-silver focus:border-cosmic-purple focus:outline-none\"\n              required\n              minLength={6}\n            />\n          </div>\n          \n          <button \n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full px-6 py-3 bg-gradient-to-r from-cosmic-gold to-cosmic-purple hover:from-cosmic-gold/80 hover:to-cosmic-purple/80 disabled:from-gray-500 disabled:to-gray-600 text-white rounded-lg transition-all duration-300 font-semibold disabled:cursor-not-allowed\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-5 h-5 mr-2 border-b-2 border-white rounded-full animate-spin\"></div>\n                Creating Account...\n              </div>\n            ) : (\n              'Create Account'\n            )}\n          </button>\n\n          <div className=\"text-center\">\n            <p className=\"text-cosmic-silver/70\">\n              Already have an account?{' '}\n              <a href=\"/login\" className=\"text-cosmic-gold hover:text-cosmic-gold/80 font-semibold\">\n                Sign In\n              </a>\n            </p>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionCancel.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":9,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[309,333],"text":"(searchParams.get('tier') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[309,333],"text":"(searchParams.get('tier') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[309,333],"text":"(Boolean(searchParams.get('tier')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":9,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":9,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[334,336],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":15,"column":9,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":15,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[572,576],"text":"tier.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[572,576],"text":"tier !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[572,576],"text":"Boolean(tier)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":16,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[622,629],"text":"feature != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[622,629],"text":"feature ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[622,629],"text":"Boolean(feature)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1451,1458],"text":"(feature != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1451,1458],"text":"(feature ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1451,1458],"text":"(Boolean(feature))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { FaTimesCircle, FaArrowLeft, FaCreditCard } from 'react-icons/fa';\n\nconst SubscriptionCancel: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  \n  const tier = searchParams.get('tier') || 'premium';\n  const feature = searchParams.get('feature');\n\n  const handleRetryCheckout = () => {\n    // Redirect back to pricing page with the same tier pre-selected\n    const url = new URL('/pricing', window.location.origin);\n    if (tier) url.searchParams.set('tier', tier);\n    if (feature) url.searchParams.set('feature', feature);\n    navigate(`/pricing?${url.searchParams.toString()}`);\n  };\n\n  const handleReturnToDashboard = () => {\n    navigate('/', { replace: true });\n  };\n\n  const handleBrowseFeatures = () => {\n    navigate('/upgrade-demo');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\">\n        <FaTimesCircle className=\"w-16 h-16 text-orange-500 mx-auto mb-4\" />\n        \n        <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">\n          Subscription Cancelled\n        </h1>\n        \n        <p className=\"text-cosmic-silver mb-6\">\n          No worries! Your checkout was cancelled and no charges were made to your account.\n        </p>\n\n        {feature && (\n          <div className=\"bg-blue-50 rounded-lg p-4 mb-6\">\n            <p className=\"text-sm text-blue-700\">\n              <span className=\"font-semibold\">{feature}</span> is still waiting for you! \n              You can try upgrading again anytime.\n            </p>\n          </div>\n        )}\n\n        <div className=\"space-y-4\">\n          <button\n            onClick={handleRetryCheckout}\n            className=\"w-full cosmic-button flex items-center justify-center space-x-2\"\n          >\n            <FaCreditCard className=\"w-4 h-4\" />\n            <span>Try Again</span>\n          </button>\n\n          <button\n            onClick={handleBrowseFeatures}\n            className=\"w-full bg-cosmic-purple/10 hover:bg-cosmic-purple/20 text-cosmic-purple py-3 px-4 rounded-lg font-semibold transition-colors\"\n          >\n            Browse Premium Features\n          </button>\n\n          <button\n            onClick={handleReturnToDashboard}\n            className=\"w-full bg-gray-200 hover:bg-gray-300 text-cosmic-dark py-3 px-4 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2\"\n          >\n            <FaArrowLeft className=\"w-4 h-4\" />\n            <span>Return to Dashboard</span>\n          </button>\n        </div>\n\n        <div className=\"mt-8 pt-6 border-t border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-cosmic-dark mb-3\">\n            Why Upgrade to CosmicHub {tier === 'elite' ? 'Elite' : 'Premium'}?\n          </h3>\n          \n          <ul className=\"text-sm text-cosmic-silver space-y-2 text-left\">\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-green-500 mt-0.5\">•</span>\n              <span>Unlimited chart calculations</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-green-500 mt-0.5\">•</span>\n              <span>Advanced AI interpretations</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-green-500 mt-0.5\">•</span>\n              <span>Priority customer support</span>\n            </li>\n            {tier === 'elite' && (\n              <>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500 mt-0.5\">•</span>\n                  <span>Multi-system astrology analysis</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"text-green-500 mt-0.5\">•</span>\n                  <span>Synastry compatibility reports</span>\n                </li>\n              </>\n            )}\n          </ul>\n        </div>\n\n        <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n          <p className=\"text-xs text-gray-600\">\n            Questions about our plans? Contact us at{' '}\n            <a \n              href=\"mailto:support@cosmichub.app\"\n              className=\"text-cosmic-purple hover:text-cosmic-purple-dark underline\"\n            >\n              support@cosmichub.app\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionCancel;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionCancelledPage.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/ui' import is duplicated.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":5,"endColumn":38},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":50,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2440,2665],"text":" You&apos;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2440,2665],"text":" You&lsquo;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2440,2665],"text":" You&#39;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2440,2665],"text":" You&rsquo;ll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":95,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4477,4594],"text":"\n                We&apos;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4477,4594],"text":"\n                We&lsquo;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4477,4594],"text":"\n                We&#39;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4477,4594],"text":"\n                We&rsquo;re sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaTimesCircle, FaArrowLeft, FaCreditCard, FaCommentDots, FaSyncAlt } from 'react-icons/fa';\nimport { Button } from '@cosmichub/ui';\nimport { Card } from '@cosmichub/ui';\n\nexport const SubscriptionCancelledPage: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Cancellation Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 bg-orange-100 rounded-full mb-4\">\n              <FaTimesCircle className=\"w-10 h-10 text-orange-600\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">\n              Subscription Cancelled\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Your subscription has been successfully cancelled\n            </p>\n          </div>\n\n          {/* Cancellation Confirmation */}\n          <Card className=\"mb-8\">\n            <div className=\"bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-t-lg p-6\">\n              <h2 className=\"text-xl text-center\">\n                Your cancellation is now active\n              </h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center py-3 border-b border-gray-100\">\n                  <span className=\"font-medium text-gray-700\">Status:</span>\n                  <span className=\"text-red-600 font-semibold\">Cancelled</span>\n                </div>\n                <div className=\"flex justify-between items-center py-3 border-b border-gray-100\">\n                  <span className=\"font-medium text-gray-700\">Access until:</span>\n                  <span className=\"text-gray-600\">End of billing period</span>\n                </div>\n                <div className=\"flex justify-between items-center py-3\">\n                  <span className=\"font-medium text-gray-700\">Next billing:</span>\n                  <span className=\"text-gray-500\">None</span>\n                </div>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>Good news!</strong> You'll continue to have access to all premium features \n                  until the end of your current billing period. After that, your account will \n                  automatically switch to our free plan.\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Next Steps */}\n          <Card className=\"mb-8\">\n            <div className=\"p-6\">\n              <h2 className=\"flex items-center gap-2 text-xl font-bold text-gray-800 mb-4\">\n                <FaSyncAlt className=\"w-5 h-5 text-blue-500\" />\n                What happens next?\n              </h2>\n              <div className=\"space-y-4\">\n                <Button className=\"w-full h-auto p-6 bg-blue-600 hover:bg-blue-700\">\n                  <Link to=\"/pricing\" className=\"flex items-center gap-3 text-white no-underline\">\n                    <FaCreditCard className=\"w-6 h-6\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">Reactivate Subscription</div>\n                      <div className=\"text-sm opacity-90\">Resume your premium features anytime</div>\n                    </div>\n                  </Link>\n                </Button>\n                <Button variant=\"secondary\" className=\"w-full h-auto p-6\">\n                  <Link to=\"/\" className=\"flex items-center gap-3 text-gray-700 no-underline\">\n                    <FaArrowLeft className=\"w-6 h-6\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">Continue with Free Plan</div>\n                      <div className=\"text-sm opacity-75\">Access basic features for free</div>\n                    </div>\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Feedback Section */}\n          <Card>\n            <div className=\"p-6\">\n              <h3 className=\"text-green-800 text-lg font-bold mb-4\">\n                Help us improve\n              </h3>\n              <p className=\"text-green-700 mb-6\">\n                We're sorry to see you go! Your feedback helps us make CosmicHub better for everyone.\n              </p>\n              \n              <div className=\"space-y-3\">\n                <Button variant=\"secondary\" className=\"w-full\">\n                  <FaCommentDots className=\"w-4 h-4 mr-2\" />\n                  Share feedback\n                </Button>\n                <p className=\"text-xs text-gray-500 text-center\">\n                  Takes less than 2 minutes • Completely optional\n                </p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionCancelledPage;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":17,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[828,852],"text":"(searchParams.get('tier') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[828,852],"text":"(searchParams.get('tier') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[828,852],"text":"(Boolean(searchParams.get('tier')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[853,855],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":21,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[943,953],"text":"sessionId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[944,953],"text":"(sessionId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[943,953],"text":"!Boolean(sessionId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":27,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":27,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1128,1133],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":35,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":35,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1352,1365],"text":"(stripeService != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":59,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":59,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2252,2252],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2252,2252],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":92,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3862,3874],"text":"What&apos;s Next?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3862,3874],"text":"What&lsquo;s Next?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3862,3874],"text":"What&#39;s Next?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3862,3874],"text":"What&rsquo;s Next?"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":129,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5274,5483],"text":"\n                Don&apos;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don&lsquo;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5274,5483],"text":"\n                Don&#39;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don&rsquo;t worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":129,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&apos;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&lsquo;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&#39;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5274,5483],"text":"\n                Don't worry! If your payment went through, we&rsquo;ll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { useAuth, useSubscription } from '@cosmichub/auth';\nimport { stripeService } from '@cosmichub/integrations';\nimport { FaCheckCircle, FaSpinner, FaExclamationTriangle } from 'react-icons/fa';\nimport { devConsole } from '../config/environment';\n\nconst SubscriptionSuccess: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const { refreshSubscription } = useSubscription();\n  const [verificationStatus, setVerificationStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('Verifying your subscription...');\n\n  const sessionId = searchParams.get('session_id');\n  const tier = searchParams.get('tier') || 'premium';\n\n  useEffect(() => {\n    const verifySubscription = async () => {\n      if (!sessionId) {\n        setVerificationStatus('error');\n        setMessage('Missing session information. Please contact support if you were charged.');\n        return;\n      }\n\n      if (!user) {\n        setVerificationStatus('error');\n        setMessage('Please sign in to complete your subscription setup.');\n        return;\n      }\n\n      try {\n        // Verify the checkout session\n        const success = stripeService ? await stripeService.handleCheckoutSuccess(sessionId) : false;\n        \n        if (success) {\n          // Refresh subscription data\n          await refreshSubscription();\n          \n          setVerificationStatus('success');\n          setMessage('Your subscription has been activated successfully!');\n          \n          // Redirect to dashboard after 3 seconds\n          setTimeout(() => {\n            navigate('/', { replace: true });\n          }, 3000);\n        } else {\n          setVerificationStatus('error');\n          setMessage('There was an issue verifying your subscription. Please contact support.');\n        }\n      } catch (error) {\n        devConsole.error('❌ Subscription verification error:', error);\n        setVerificationStatus('error');\n        setMessage('Failed to verify your subscription. Please contact support if you were charged.');\n      }\n    };\n\n    verifySubscription();\n  }, [sessionId, user, refreshSubscription, navigate]);\n\n  const handleReturnToDashboard = () => {\n    navigate('/', { replace: true });\n  };\n\n  const handleContactSupport = () => {\n    // You can implement a support contact method here\n    window.open('mailto:support@cosmichub.app?subject=Subscription Issue&body=I need help with my subscription verification.', '_blank');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\">\n        {verificationStatus === 'loading' && (\n          <>\n            <FaSpinner className=\"w-16 h-16 text-cosmic-purple mx-auto mb-4 animate-spin\" />\n            <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">Processing Your Subscription</h1>\n            <p className=\"text-cosmic-silver mb-6\">{message}</p>\n            <div className=\"bg-cosmic-purple/10 rounded-lg p-4\">\n              <p className=\"text-sm text-cosmic-purple\">Please wait while we confirm your payment...</p>\n            </div>\n          </>\n        )}\n\n        {verificationStatus === 'success' && (\n          <>\n            <FaCheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">Welcome to CosmicHub {tier === 'elite' ? 'Elite' : 'Premium'}!</h1>\n            <p className=\"text-cosmic-silver mb-6\">{message}</p>\n            \n            <div className=\"bg-green-50 rounded-lg p-4 mb-6\">\n              <h3 className=\"text-lg font-semibold text-green-800 mb-2\">What's Next?</h3>\n              <ul className=\"text-sm text-green-700 space-y-1 text-left\">\n                <li>• Access to all premium features</li>\n                <li>• Unlimited chart calculations</li>\n                <li>• Advanced AI interpretations</li>\n                <li>• Priority customer support</li>\n                {tier === 'elite' && (\n                  <>\n                    <li>• Multi-system astrology</li>\n                    <li>• Synastry compatibility</li>\n                    <li>• Transit analysis</li>\n                  </>\n                )}\n              </ul>\n            </div>\n\n            <button\n              onClick={handleReturnToDashboard}\n              className=\"w-full cosmic-button mb-4\"\n            >\n              Continue to Dashboard\n            </button>\n            \n            <p className=\"text-xs text-cosmic-silver\">\n              Redirecting automatically in a few seconds...\n            </p>\n          </>\n        )}\n\n        {verificationStatus === 'error' && (\n          <>\n            <FaExclamationTriangle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-cosmic-dark mb-4\">Subscription Verification Issue</h1>\n            <p className=\"text-cosmic-silver mb-6\">{message}</p>\n            \n            <div className=\"bg-red-50 rounded-lg p-4 mb-6\">\n              <p className=\"text-sm text-red-700\">\n                Don't worry! If your payment went through, we'll activate your subscription shortly. \n                Check your email for a receipt, or contact our support team for assistance.\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <button\n                onClick={handleContactSupport}\n                className=\"w-full bg-cosmic-purple hover:bg-cosmic-purple-dark text-white py-3 px-4 rounded-lg font-semibold transition-colors\"\n              >\n                Contact Support\n              </button>\n              \n              <button\n                onClick={handleReturnToDashboard}\n                className=\"w-full bg-gray-200 hover:bg-gray-300 text-cosmic-dark py-3 px-4 rounded-lg font-semibold transition-colors\"\n              >\n                Return to Dashboard\n              </button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionSuccess;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/SubscriptionSuccessPage.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":31,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":31,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1297,1301],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":78,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":78,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2781,2796],"text":"(tierNames[tier].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2781,2796],"text":"(tierNames[tier] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2781,2796],"text":"(Boolean(tierNames[tier]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":87,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":87,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3040,3052],"text":"(colors[tier].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3040,3052],"text":"(colors[tier] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3040,3052],"text":"(Boolean(colors[tier]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":143,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":143,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5275,5294],"text":"(subscriptionDetails != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":175,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":175,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[6884,6914],"text":"(subscriptionDetails.expires_at.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[6884,6914],"text":"(subscriptionDetails.expires_at !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6884,6914],"text":"(Boolean(subscriptionDetails.expires_at))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useMemo, type JSX as JSXNamespace } from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { FaCheckCircle, FaCrown, FaArrowRight, FaHome, FaCreditCard, FaSpinner } from 'react-icons/fa';\nimport { useAuth, useSubscription } from '@cosmichub/auth';\nimport { useToast } from '../components/ToastProvider';\n\ninterface SubscriptionDetails {\n  tier: string;\n  status: string;\n  features: string[];\n  expires_at: string;\n}\n\nexport const SubscriptionSuccessPage: React.FC = (): JSXNamespace.Element => {\n  const [searchParams] = useSearchParams();\n  const { user } = useAuth();\n  const subscriptionData = useSubscription();\n  const { toast } = useToast();\n  const [subscriptionDetails, setSubscriptionDetails] = useState<SubscriptionDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const sessionId = searchParams.get('session_id');\n  const refreshSubscription: () => Promise<unknown> = useMemo((): (() => Promise<unknown>) => {\n    return typeof subscriptionData?.refreshSubscription === 'function'\n      ? subscriptionData.refreshSubscription\n      : () => Promise.resolve();\n  }, [subscriptionData]);\n\n  useEffect((): void => {\n    const hasSession = typeof sessionId === 'string' && sessionId.length > 0;\n    if (!(user && hasSession)) {\n      if (!hasSession) setLoading(false);\n      return;\n    }\n  void (async (): Promise<void> => {\n      try {\n        const token = await user.getIdToken();\n        const response = await fetch('/api/stripe/subscription-status', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n  if (response.ok) {\n          const details = (await response.json()) as SubscriptionDetails;\n          setSubscriptionDetails(details);\n          await refreshSubscription();\n          toast({\n            title: 'Success',\n            description: 'Subscription activated successfully!',\n            status: 'success',\n            duration: 3000,\n            isClosable: true\n          });\n        } else {\n          throw new Error('Failed to verify subscription');\n        }\n      } catch {\n        toast({\n          title: 'Error',\n            description: 'Unable to verify subscription. Please contact support if issues persist.',\n          status: 'error',\n          duration: 5000,\n          isClosable: true\n        });\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [user, sessionId, refreshSubscription, toast]);\n\n  const getTierDisplayName = (tier: string): string => {\n    const tierNames: Record<string, string> = {\n      'healwave_pro': 'HealWave Pro',\n      'astro_premium': 'Astrology Premium',\n      'cosmic_master': 'Cosmic Master'\n    };\n    return tierNames[tier] || tier;\n  };\n\n  const getTierColor = (tier: string): string => {\n    const colors: Record<string, string> = {\n      'healwave_pro': 'bg-blue-500',\n      'astro_premium': 'bg-purple-500',\n      'cosmic_master': 'bg-gold-500'\n    };\n    return colors[tier] || 'bg-gray-500';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n        <div className=\"text-center\">\n          <FaSpinner className=\"w-12 h-12 mx-auto mb-4 text-green-500 animate-spin\" />\n          <p className=\"text-gray-600\">Verifying your subscription...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!(typeof sessionId === 'string' && sessionId.length > 0)) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-red-50 to-orange-50\">\n        <div className=\"w-full max-w-md p-6 mx-4 bg-white rounded-lg shadow-lg\">\n          <div className=\"text-center\">\n            <h2 className=\"mb-4 text-xl font-bold text-red-600\">Invalid Access</h2>\n          </div>\n          <div className=\"space-y-4 text-center\">\n            <p className=\"text-gray-600\">\n              This page can only be accessed after a successful subscription purchase.\n            </p>\n            <Link\n              to=\"/pricing\"\n              className=\"inline-flex items-center justify-center w-full px-4 py-3 font-semibold text-white transition-colors bg-blue-600 rounded-lg hover:bg-blue-700\"\n            >\n              <FaCreditCard className=\"w-4 h-4 mr-2\" />\n              View Pricing Plans\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50\">\n      <div className=\"container px-4 py-12 mx-auto\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Success Header */}\n          <div className=\"mb-8 text-center\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 mb-4 bg-green-100 rounded-full\">\n              <FaCheckCircle className=\"w-10 h-10 text-green-600\" />\n            </div>\n            <h1 className=\"mb-2 text-3xl font-bold text-gray-900\">\n              Welcome to the Cosmic Family! 🌟\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Your subscription has been activated successfully\n            </p>\n          </div>\n\n          {/* Subscription Details Card */}\n          {subscriptionDetails && (\n            <div className=\"mb-8 bg-white border-2 border-green-200 rounded-lg shadow-lg\">\n              <div className=\"p-6 text-white rounded-t-lg bg-gradient-to-r from-green-500 to-blue-500\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <FaCrown className=\"w-6 h-6\" />\n                    <h2 className=\"text-xl font-bold\">\n                      {getTierDisplayName(subscriptionDetails.tier)}\n                    </h2>\n                  </div>\n                  <span className={`px-3 py-1 rounded-full text-sm font-bold ${getTierColor(subscriptionDetails.tier)} text-white`}>\n                    Active\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"p-6 pt-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"mb-3 font-semibold text-gray-900\">\n                      Your Premium Features:\n                    </h3>\n                    <ul className=\"grid gap-2 sm:grid-cols-2\">\n                      {subscriptionDetails.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center gap-2\">\n                          <FaCheckCircle className=\"flex-shrink-0 w-4 h-4 text-green-500\" />\n                          <span className=\"text-sm text-gray-700\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  {subscriptionDetails.expires_at && (\n                    <div className=\"pt-4 border-t border-gray-200\">\n                      <p className=\"text-sm text-gray-600\">\n                        <strong>Next billing date:</strong>{' '}\n                        {new Date(subscriptionDetails.expires_at).toLocaleDateString('en-US', {\n                          year: 'numeric',\n                          month: 'long', \n                          day: 'numeric'\n                        })}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Next Steps */}\n          <div className=\"p-6 mb-8 bg-white rounded-lg shadow-lg\">\n            <div className=\"mb-4\">\n              <h2 className=\"flex items-center gap-2 text-xl font-bold\">\n                <FaArrowRight className=\"w-5 h-5 text-blue-500\" />\n                What&apos;s Next?\n              </h2>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                <Link\n                  to=\"/\"\n                  className=\"flex flex-col items-center h-auto gap-2 p-4 font-semibold text-white transition-colors bg-blue-600 rounded-lg hover:bg-blue-700\"\n                >\n                  <FaHome className=\"w-6 h-6\" />\n                  <span className=\"font-semibold\">Explore Your Dashboard</span>\n                  <span className=\"text-xs opacity-80\">Start using your premium features</span>\n                </Link>\n                \n                <Link\n                  to=\"/account/subscription\"\n                  className=\"flex flex-col items-center h-auto gap-2 p-4 font-semibold text-gray-900 transition-colors border border-gray-300 rounded-lg hover:bg-gray-50\"\n                >\n                  <FaCreditCard className=\"w-6 h-6\" />\n                  <span className=\"font-semibold\">Manage Subscription</span>\n                  <span className=\"text-xs opacity-80\">Update billing & preferences</span>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          {/* Support Information */}\n          <div className=\"p-6 text-center bg-white border rounded-lg shadow-sm\">\n            <h3 className=\"mb-2 font-semibold text-gray-900\">\n              Need Help Getting Started?\n            </h3>\n            <p className=\"mb-4 text-gray-600\">\n              Our support team is here to help you make the most of your subscription.\n            </p>\n            <div className=\"flex flex-col justify-center gap-3 sm:flex-row\">\n              <Link\n                to=\"/help\"\n                className=\"px-4 py-2 font-medium text-gray-700 transition-colors border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                View Help Center\n              </Link>\n              <a\n                href=\"mailto:support@cosmichub.app\"\n                className=\"px-4 py-2 font-medium text-gray-700 transition-colors border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                Contact Support\n              </a>\n            </div>\n          </div>\n\n          {/* Footer Note */}\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500\">\n              You will receive a confirmation email with your subscription details shortly.\n              <br />\n              Thank you for choosing CosmicHub! ✨\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionSuccessPage;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pages/Synastry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pwa-performance.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Static async method 'preloadCriticalResources' has no 'await' expression.","line":18,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":18,"endColumn":40,"suggestions":[{"messageId":"removeAsync","fix":{"range":[616,663],"text":"preloadCriticalResources(): void"},"desc":"Remove 'async'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":16,"suggestions":[{"fix":{"range":[670,720],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":16,"suggestions":[{"fix":{"range":[867,941],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":16,"suggestions":[{"fix":{"range":[1002,1047],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":34,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1285,1289],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1285,1289],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1285,1289],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":39,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":23,"suggestions":[{"fix":{"range":[1518,1571],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Static async method 'enableResourceHints' has no 'await' expression.","line":49,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":49,"endColumn":35,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1763,1805],"text":"enableResourceHints(): void"},"desc":"Remove 'async'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":16,"suggestions":[{"fix":{"range":[1812,1859],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"fix":{"range":[2866,2913],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":91,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":91,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3110,3127],"text":"(scriptElement.src.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3110,3127],"text":"(scriptElement.src !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3110,3127],"text":"(Boolean(scriptElement.src))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":108,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":108,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3839,3850],"text":"connection == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":18,"suggestions":[{"fix":{"range":[4497,4572],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":18,"suggestions":[{"fix":{"range":[4915,4985],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":155,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":155,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[5458,5475],"text":"(scriptElement.src.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[5458,5475],"text":"(scriptElement.src !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5458,5475],"text":"(Boolean(scriptElement.src))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":19,"suggestions":[{"fix":{"range":[5968,6017],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":16,"suggestions":[{"fix":{"range":[6140,6193],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":22,"suggestions":[{"fix":{"range":[6559,6627],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":22,"suggestions":[{"fix":{"range":[6919,6973],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":24,"suggestions":[{"fix":{"range":[7495,7554],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":26,"suggestions":[{"fix":{"range":[8113,8168],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":22,"suggestions":[{"fix":{"range":[8760,8806],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":45,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":14,"suggestions":[{"fix":{"range":[9303,9366],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":16,"suggestions":[{"fix":{"range":[9983,10041],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-var-requires').","line":296,"column":9,"severity":1,"nodeType":null,"fix":{"range":[10322,10384],"text":" "}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":297,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":297,"endColumn":63},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":297,"column":32,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":297,"endColumn":63},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":297,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":297,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":298,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":298,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":298,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":22,"suggestions":[{"fix":{"range":[10562,10639],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":308,"column":49,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":308,"endColumn":73},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":310,"column":3,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":310,"endColumn":30,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10821,10821],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[10821,10821],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Advanced PWA Performance Enhancements\n * Builds on existing CosmicHub performance optimizations\n */\n\n// Critical Resource Prioritization\nexport class CriticalResourceManager {\n  private static readonly CRITICAL_RESOURCES = [\n    // Removed CSS preloading since Vite handles this automatically\n    // '/src/styles/index.css' - This causes the preload warning\n  ];\n\n  private static readonly FONT_RESOURCES = [\n    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',\n    'https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap'\n  ];\n\n  static async preloadCriticalResources(): Promise<void> {\n    console.log('⚡ Preloading critical resources...');\n\n    // Skip critical resource preloading since Vite handles this efficiently\n    // Removed manual CSS preloading to fix the preload warning\n    console.log('🎯 Critical resource preloading complete (handled by Vite)');\n    return;\n  }\n\n  static optimizeFontLoading(): void {\n    console.log('🔤 Optimizing font loading...');\n\n    // Add font-display: swap to improve loading performance\n    const fontLinks = document.querySelectorAll('link[href*=\"fonts.googleapis.com\"]');\n    fontLinks.forEach(link => {\n      const href = link.getAttribute('href');\n      if (href && !href.includes('display=swap')) {\n        try {\n          const url = new URL(href);\n          url.searchParams.set('display', 'swap');\n          link.setAttribute('href', url.toString());\n        } catch (error) {\n          console.warn('🔤 Invalid font URL, skipping:', href);\n        }\n      }\n    });\n\n    // Note: Removed aggressive font preloading to reduce unused resource warnings\n    // Font files will load naturally through the Google Fonts CSS\n  }\n\n  static async enableResourceHints(): Promise<void> {\n    console.log('🔗 Setting up resource hints...');\n\n    // DNS prefetch for external domains\n    const dnsPrefetchDomains = [\n      'fonts.googleapis.com',\n      'fonts.gstatic.com',\n      'api.cosmichub.com', // Future API domain\n      'cdn.cosmichub.com'  // Future CDN domain\n    ];\n\n    dnsPrefetchDomains.forEach(domain => {\n      const link = document.createElement('link');\n      link.rel = 'dns-prefetch';\n      link.href = `https://${domain}`;\n      document.head.appendChild(link);\n    });\n\n    // Preconnect to critical third-party origins\n    const preconnectDomains = [\n      { href: 'https://fonts.googleapis.com', crossorigin: false },\n      { href: 'https://fonts.gstatic.com', crossorigin: true }\n    ];\n\n    preconnectDomains.forEach(({ href, crossorigin }) => {\n      const link = document.createElement('link');\n      link.rel = 'preconnect';\n      link.href = href;\n      if (crossorigin) {\n        link.crossOrigin = 'anonymous';\n      }\n      document.head.appendChild(link);\n    });\n  }\n\n  static optimizeScriptLoading(): void {\n    console.log('📜 Optimizing script loading...');\n\n    // Defer non-critical scripts\n    const scripts = document.querySelectorAll('script[src]');\n    scripts.forEach(script => {\n      const scriptElement = script as HTMLScriptElement;\n      if (scriptElement.src && !scriptElement.defer && !scriptElement.async) {\n        scriptElement.defer = true;\n      }\n    });\n  }\n}\n\n// Connection-aware loading (builds on existing lazy loading)\nexport class ConnectionAwareLoader {\n  private static getConnection(): NetworkInformation | null {\n    if (typeof navigator === 'undefined') return null;\n    const nav = navigator as unknown as { connection?: NetworkInformation; mozConnection?: NetworkInformation; webkitConnection?: NetworkInformation };\n    return nav.connection ?? nav.mozConnection ?? nav.webkitConnection ?? null;\n  }\n\n  static getConnectionInfo(): { effectiveType: string; downlink: number; saveData: boolean } {\n    const connection = this.getConnection();\n    if (!connection) {\n      return { effectiveType: '4g', downlink: 10, saveData: false };\n    }\n\n    return {\n      effectiveType: connection.effectiveType ?? '4g',\n      downlink: connection.downlink ?? 10,\n      saveData: connection.saveData ?? false,\n    };\n  }\n\n  static shouldOptimizeForSlowConnection(): boolean {\n    const info = this.getConnectionInfo();\n    return info.effectiveType === 'slow-2g' || \n           info.effectiveType === '2g' || \n           info.downlink < 1.5 || \n           info.saveData;\n  }\n\n  static adaptResourceLoading(): void {\n    const shouldOptimize = this.shouldOptimizeForSlowConnection();\n    \n    if (shouldOptimize) {\n      console.log('🐌 Slow connection detected, optimizing resource loading...');\n      \n      // Reduce image quality\n      document.documentElement.style.setProperty('--image-quality', '0.7');\n      \n      // Disable non-critical animations\n      document.documentElement.style.setProperty('--reduce-motion', '1');\n      \n      // Prioritize critical resources only\n      this.prioritizeCriticalOnly();\n    } else {\n      console.log('🚀 Fast connection detected, enabling full features...');\n    }\n  }\n\n  private static prioritizeCriticalOnly(): void {\n    // Cancel non-critical preloads\n    const nonCriticalPreloads = document.querySelectorAll('link[rel=\"preload\"]:not([data-critical])');\n    nonCriticalPreloads.forEach(link => link.remove());\n    \n    // Defer non-critical scripts\n    const scripts = document.querySelectorAll('script:not([data-critical])');\n    scripts.forEach(script => {\n      const scriptElement = script as HTMLScriptElement;\n      if (scriptElement.src && !scriptElement.defer && !scriptElement.async) {\n        scriptElement.defer = true;\n      }\n    });\n  }\n}\n\n// Performance monitoring for PWA\nexport class PWAPerformanceMonitor {\n  private static metrics: Map<string, number> = new Map();\n\n  static startTiming(label: string): void {\n    this.metrics.set(`${label}_start`, performance.now());\n  }\n\n  static endTiming(label: string): number {\n    const startTime = this.metrics.get(`${label}_start`);\n    if (startTime === undefined) {\n      console.warn(`No start time found for ${label}`);\n      return 0;\n    }\n    \n    const duration = performance.now() - startTime;\n    this.metrics.set(label, duration);\n    console.log(`⏱️ ${label}: ${duration.toFixed(2)}ms`);\n    return duration;\n  }\n\n  static measurePWAMetrics(): void {\n    // Measure PWA-specific metrics\n\n    if (typeof navigator !== 'undefined' && 'serviceWorker' in navigator) {\n      void navigator.serviceWorker.ready.then(() => {\n        if (typeof globalThis.performance?.now === 'function') {\n          const swReadyTime = globalThis.performance.now();\n          console.log(`🔧 Service Worker ready: ${swReadyTime.toFixed(2)}ms`);\n        }\n      });\n    }\n\n    // Measure app shell loading\n    if (typeof window !== 'undefined') {\n      window.addEventListener('DOMContentLoaded', () => {\n        if (typeof globalThis.performance?.now === 'function') {\n          const domReady = globalThis.performance.now();\n          console.log(`📄 DOM ready: ${domReady.toFixed(2)}ms`);\n        }\n      });\n    }\n\n    // Measure Core Web Vitals\n    this.observeWebVitals();\n  }\n\n  private static observeWebVitals(): void {\n    // Largest Contentful Paint\n    if (typeof PerformanceObserver !== 'undefined') {\n      try {\n        const lcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1] as PerformanceEntry & { startTime?: number } | undefined;\n          if (lastEntry?.startTime !== undefined) {\n            console.log(`📊 LCP: ${lastEntry.startTime.toFixed(2)}ms`);\n          }\n        });\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n\n        // First Input Delay\n        const fidObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            const e = entry as PerformanceEntry & Record<string, unknown>;\n            const processingStart = e['processingStart'];\n            const startTime = e['startTime'];\n            if (typeof processingStart === 'number' && typeof startTime === 'number') {\n              console.log(`⚡ FID: ${processingStart - startTime}ms`);\n            }\n          });\n        });\n        fidObserver.observe({ entryTypes: ['first-input'] });\n\n        // Cumulative Layout Shift\n        const clsObserver = new PerformanceObserver((list) => {\n          let clsValue = 0;\n          list.getEntries().forEach((entry) => {\n            const e = entry as PerformanceEntry & Record<string, unknown>;\n            const hadRecentInput = e['hadRecentInput'];\n            const value = e['value'];\n            if (hadRecentInput !== true && typeof value === 'number') {\n              clsValue += value;\n            }\n          });\n          console.log(`📐 CLS: ${clsValue.toFixed(4)}`);\n        });\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\n      } catch (err) {\n        // PerformanceObserver may not be supported in some environments\n        if (typeof console !== 'undefined') console.warn('PerformanceObserver not available', err);\n      }\n    }\n  }\n\n  static getMetrics(): Record<string, number> {\n    return Object.fromEntries(this.metrics);\n  }\n}\n\n// Initialize enhanced PWA performance\nexport async function initializePWAPerformance(): Promise<void> {\n  console.log('🚀 Initializing PWA performance enhancements...');\n\n  // Start overall timing\n  PWAPerformanceMonitor.startTiming('pwa_initialization');\n\n  try {\n    // Set up connection-aware loading\n    ConnectionAwareLoader.adaptResourceLoading();\n\n    // Enable resource hints\n    await CriticalResourceManager.enableResourceHints();\n\n    // Optimize font loading\n    CriticalResourceManager.optimizeFontLoading();\n\n    // Preload critical resources\n    await CriticalResourceManager.preloadCriticalResources();\n\n    // Start performance monitoring\n    PWAPerformanceMonitor.measurePWAMetrics();\n\n    // End timing\n    PWAPerformanceMonitor.endTiming('pwa_initialization');\n\n    console.log('✅ PWA performance enhancements initialized');\n\n  } catch (error) {\n    if (typeof console !== 'undefined') {\n      // Use devConsole if available (lazy import pattern avoided for performance file)\n      // Fallback to console.error to ensure visibility\n      try {\n        // Dynamic require to avoid circular imports\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { devConsole } = require('./config/environment');\n        devConsole.error('❌ Failed to initialize PWA performance enhancements:', error);\n      } catch {\n        console.error('❌ Failed to initialize PWA performance enhancements:', error);\n      }\n    }\n  }\n}\n\n// Auto-initialize when imported\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializePWAPerformance);\n} else {\n  initializePWAPerformance();\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/pwa.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":27,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":27,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[961,970],"text":"newWorker != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":29,"column":52,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":29,"endColumn":86,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1085,1119],"text":"(navigator.serviceWorker.controller != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-var-requires').","line":51,"column":9,"severity":1,"nodeType":null,"fix":{"range":[1793,1855],"text":" "}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":63},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":52,"column":32,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":52,"endColumn":63},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":52,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":53,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":53,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":53,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":25},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'initializePWAFeatures' has no 'await' expression.","line":69,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":69,"endColumn":37,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2431,2484],"text":"function initializePWAFeatures(): void"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":92,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":105,"endColumn":6},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":93,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":93,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3233,3247],"text":"deferredPrompt != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":249,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":249,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7933,7946],"text":"installBanner != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":257,"column":51,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":257,"endColumn":72},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":259,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":259,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[8247,8247],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[8247,8247],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":264,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":269,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[8365,8365],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[8365,8365],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":268,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":268,"endColumn":43}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":41,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":43,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":39,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":50,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":45,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":41,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":43,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":20,"suggestions":[{"fix":{"range":[3412,3462],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":20,"suggestions":[{"fix":{"range":[3486,3537],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":23,"suggestions":[{"fix":{"range":[8466,8547],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Service Worker Registration for CosmicHub Astro App\n * Registers the comprehensive service worker system\n */\n\n/* eslint-disable no-console */\n\n// PWA Service Worker Registration\nasync function registerServiceWorker(): Promise<void> {\n  // Only register the service worker in production. Vite HMR + SW in dev can cause reload loops.\n  if (!import.meta.env.PROD) {\n    if (typeof console !== 'undefined') console.warn('⚠️ Skipping Service Worker registration in development to avoid HMR reload loops');\n    return;\n  }\n\n  if (typeof navigator !== 'undefined' && 'serviceWorker' in navigator) {\n    try {\n      if (typeof console !== 'undefined') console.log('🔧 Registering Service Worker...');\n\n      const registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/'\n      });\n      \n      // Handle updates\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        if (newWorker) {\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New content is available, show update notification\n              showUpdateNotification();\n            }\n          });\n        }\n      });\n      \n      // Check for updates periodically (production only)\n      if (typeof globalThis !== 'undefined' && typeof globalThis.setInterval === 'function') {\n        globalThis.setInterval(() => {\n          void registration.update();\n        }, 60000); // Check every minute\n      }\n      \n  if (typeof console !== 'undefined') console.log('✅ Service Worker registered successfully');\n      \n      // Initialize PWA features\n      await initializePWAFeatures();\n      \n    } catch (error) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { devConsole } = require('./config/environment');\n        devConsole.error('❌ Service Worker registration failed:', error);\n      } catch {\n        if (typeof console !== 'undefined') console.error('❌ Service Worker registration failed:', error);\n      }\n    }\n  } else {\n    if (typeof console !== 'undefined') console.warn('⚠️ Service Worker not supported');\n  }\n}\n\n// Initialize PWA features\ninterface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed'; platform?: string }>;\n}\n\nasync function initializePWAFeatures(): Promise<void> {\n  // Install prompt handling\n  let deferredPrompt: BeforeInstallPromptEvent | null = null;\n  \n  if (typeof window !== 'undefined') {\n    window.addEventListener('beforeinstallprompt', (e: Event) => {\n      e.preventDefault();\n      deferredPrompt = e as BeforeInstallPromptEvent;\n      showInstallPrompt();\n    });\n  }\n  \n  // App installed handler\n  if (typeof window !== 'undefined') {\n    window.addEventListener('appinstalled', () => {\n      if (typeof console !== 'undefined') console.log('🎉 CosmicHub PWA installed successfully');\n      hideInstallPrompt();\n      deferredPrompt = null;\n    });\n  }\n  \n  // Handle install button click\n  if (typeof window !== 'undefined') {\n    window.addEventListener('install-app', async () => {\n    if (deferredPrompt) {\n      await deferredPrompt.prompt();\n      const choiceResult = await deferredPrompt.userChoice;\n      \n      if (choiceResult.outcome === 'accepted') {\n        console.log('✅ User accepted the install prompt');\n      } else {\n        console.log('❌ User dismissed the install prompt');\n      }\n      \n      deferredPrompt = null;\n    }\n    });\n  }\n}\n\n// Show update notification\nfunction showUpdateNotification(): void {\n  // Create update notification\n  const updateBanner = document.createElement('div');\n  updateBanner.id = 'pwa-update-banner';\n  updateBanner.innerHTML = `\n    <div style=\"\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: linear-gradient(135deg, #553c9a, #f6ad55);\n      color: white;\n      padding: 12px 20px;\n      text-align: center;\n      z-index: 10000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n      font-family: system-ui, -apple-system, sans-serif;\n    \">\n      <span style=\"margin-right: 15px;\">🌟 New cosmic features available!</span>\n      <button id=\"update-app-btn\" style=\"\n        background: rgba(255,255,255,0.2);\n        border: 1px solid rgba(255,255,255,0.3);\n        color: white;\n        padding: 6px 16px;\n        border-radius: 6px;\n        cursor: pointer;\n        margin-right: 10px;\n        font-weight: 500;\n      \">Update Now</button>\n      <button id=\"dismiss-update-btn\" style=\"\n        background: transparent;\n        border: none;\n        color: white;\n        cursor: pointer;\n        opacity: 0.8;\n      \">✕</button>\n    </div>\n  `;\n  \n  document.body.appendChild(updateBanner);\n  \n  // Handle update button\n  document.getElementById('update-app-btn')?.addEventListener('click', () => {\n    window.location.reload();\n  });\n  \n  // Handle dismiss button\n  document.getElementById('dismiss-update-btn')?.addEventListener('click', () => {\n    updateBanner.remove();\n  });\n}\n\n// Show install prompt\nfunction showInstallPrompt(): void {\n  // Check if already installed\n  if (window.matchMedia('(display-mode: standalone)').matches) {\n    return;\n  }\n  \n  // Create install prompt\n  const installBanner = document.createElement('div');\n  installBanner.id = 'pwa-install-banner';\n  installBanner.innerHTML = `\n    <div style=\"\n      position: fixed;\n      bottom: 20px;\n      left: 20px;\n      right: 20px;\n      background: rgba(26, 26, 46, 0.95);\n      backdrop-filter: blur(10px);\n      -webkit-backdrop-filter: blur(10px);\n      border: 1px solid rgba(85, 60, 154, 0.3);\n      border-radius: 16px;\n      padding: 20px;\n      z-index: 10000;\n      box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n      font-family: system-ui, -apple-system, sans-serif;\n      color: #e2e8f0;\n      max-width: 400px;\n      margin: 0 auto;\n    \">\n      <div style=\"display: flex; align-items: center; gap: 15px;\">\n        <div style=\"\n          width: 48px;\n          height: 48px;\n          background: linear-gradient(135deg, #553c9a, #f6ad55);\n          border-radius: 12px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n        \">🌟</div>\n        <div style=\"flex: 1;\">\n          <h3 style=\"margin: 0 0 5px 0; font-size: 16px; font-weight: 600;\">Install CosmicHub</h3>\n          <p style=\"margin: 0; font-size: 14px; color: #cbd5e1; line-height: 1.4;\">Get the full cosmic experience with faster loading and offline access.</p>\n        </div>\n      </div>\n      <div style=\"display: flex; gap: 10px; margin-top: 15px;\">\n        <button id=\"install-app-btn\" style=\"\n          flex: 1;\n          background: linear-gradient(135deg, #553c9a, #f6ad55);\n          border: none;\n          color: white;\n          padding: 12px 20px;\n          border-radius: 8px;\n          cursor: pointer;\n          font-weight: 600;\n          font-size: 14px;\n        \">Install App</button>\n        <button id=\"dismiss-install-btn\" style=\"\n          background: transparent;\n          border: 1px solid rgba(255,255,255,0.2);\n          color: #cbd5e1;\n          padding: 12px 16px;\n          border-radius: 8px;\n          cursor: pointer;\n          font-size: 14px;\n        \">Not Now</button>\n      </div>\n    </div>\n  `;\n  \n  document.body.appendChild(installBanner);\n  \n  // Handle install button\n  document.getElementById('install-app-btn')?.addEventListener('click', () => {\n    window.dispatchEvent(new CustomEvent('install-app'));\n    installBanner.remove();\n  });\n  \n  // Handle dismiss button\n  document.getElementById('dismiss-install-btn')?.addEventListener('click', () => {\n    installBanner.remove();\n  });\n}\n\n// Hide install prompt\nfunction hideInstallPrompt(): void {\n  const installBanner = document.getElementById('pwa-install-banner');\n  if (installBanner) {\n    installBanner.remove();\n  }\n}\n\n// Register when DOM is loaded (prod) or unregister SW in dev to ensure no stale SW controls the page\nif (import.meta.env.PROD) {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', registerServiceWorker);\n  } else {\n    registerServiceWorker();\n  }\n} else {\n  const unregisterInDev = () => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.getRegistrations().then((regs) => {\n        if (regs.length > 0) {\n          console.warn(`🧹 Unregistering ${regs.length} service worker(s) in development`);\n        }\n        regs.forEach((r) => r.unregister());\n      });\n    }\n  };\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', unregisterInDev);\n  } else {\n    unregisterInDev();\n  }\n}\n\nexport { registerServiceWorker };\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/routes/lazy-routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/__tests__/notificationManager.unified.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/api.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,31],"text":" "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiResponse' is defined but never used.","line":9,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiErrorResponse' is defined but never used.","line":10,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":58,"column":31,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":58,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1993,1998],"text":"(user == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":63,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":63,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2099,2104],"text":"user == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":451,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":451,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17060,17070],"text":"rawPlanets != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":497,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":497,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[18759,18768],"text":"(anglesRaw != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable no-console */\nimport axios from 'axios';\nimport { devConsole } from '../config/environment';\nimport { toUnifiedBirthData, type AnyBirthInput, type ChartBirthData } from '@cosmichub/types';\nimport { auth } from '@cosmichub/config/firebase';\nimport type { GeneKeysData } from '../components/GeneKeysChart/types';\nimport type { HumanDesignData } from '../components/HumanDesignChart/types';\nimport {\n  type ApiResponse,\n  type ApiErrorResponse,\n  type ChartId,\n  type UserId,\n  type InterpretationId,\n  type SavedChart,\n  type SavedChartsResponse,\n  type SaveChartRequest,\n  type SaveChartResponse,\n  type Interpretation,\n  type InterpretationRequest,\n  type InterpretationResponse,\n  // Import ChartData as ChartDataType to avoid conflict\n  type ChartData as ChartDataType,\n  AuthenticationError,\n  NotFoundError,\n  ValidationError\n} from './api.types';\n\n// Re-export types from api.types\nexport * from './api.types';\n\n// Narrow import.meta.env access to avoid implicit any\nconst rawApiUrl: string | undefined =\n  typeof import.meta.env?.VITE_API_URL === 'string'\n    ? import.meta.env.VITE_API_URL\n    : undefined;\nlet resolvedApi = '';\nif (typeof rawApiUrl === 'string') {\n  const trimmed = rawApiUrl.trim();\n  if (trimmed.length > 0) {\n    resolvedApi = trimmed;\n  }\n}\nconst BACKEND_URL: string = resolvedApi !== '' ? resolvedApi : 'http://localhost:8000';\n\ndevConsole.log?.('🔗 API Service initializing...');\ndevConsole.log?.('🌐 Backend URL:', BACKEND_URL);\n\n// Helper function to get current auth token\n// Lightweight auth shape to avoid relying on any typed firebase re-export\n// Firebase user surface we rely on (declared for documentation; value via import)\n// interface AuthLikeUser { getIdToken(forceRefresh?: boolean): Promise<string>; }\n\nexport const getAuthToken = async (): Promise<string | null> => {\n  devConsole.log?.('🔑 Getting auth token...');\n  const user = auth.currentUser;\n  \n  // In development, allow mock authentication\n  if (import.meta.env.DEV && !user) {\n  devConsole.log?.('🧪 Using development mock token');\n    return 'mock-dev-token';\n  }\n  \n  if (!user) {\n  devConsole.warn?.('⚠️ No authenticated user found');\n    return null;\n  }\n  \n  try {\n  devConsole.log?.('🔄 Refreshing auth token...');\n    // Force refresh token to ensure it's valid\n    const token = await user.getIdToken(true);\n  devConsole.log?.('✅ Auth token obtained successfully');\n    return token;\n  } catch (error) {\n  devConsole.error('❌ Error getting auth token:', error);\n    return null;\n  }\n};\n\n// Helper function to create authorized headers\ntype AuthHeaders = Record<string, string>;\nconst getAuthHeaders = async (): Promise<AuthHeaders> => {\n  devConsole.log?.('📝 Creating auth headers...');\n  const token = await getAuthToken();\n  if (token === null) {\n  devConsole.error('❌ Authentication required but no token available');\n    throw new AuthenticationError('Authentication required');\n  }\n  devConsole.log?.('✅ Auth headers created');\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n};\n\n// API Functions for Saved Charts\nexport const fetchSavedCharts = async (): Promise<SavedChart[]> => {\n  devConsole.log?.('📊 Fetching saved charts...');\n  \n  try {\n    const headers = await getAuthHeaders();\n    const { data } = await axios.get<SavedChartsResponse>(`${BACKEND_URL}/api/charts/`, { headers });\n  devConsole.log?.('✅ Saved charts fetched successfully:', data);\n    return Array.isArray(data.charts) ? data.charts : [];\n  } catch (error) {\n  devConsole.error('❌ Error fetching saved charts:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to view saved charts');\n    }\n    throw new Error('Failed to fetch saved charts');\n  }\n};\n\nexport const saveChart = async (chartData: SaveChartRequest): Promise<SaveChartResponse> => {\n  devConsole.log?.('💾 Saving chart...', chartData);\n  \n  try {\n    const headers = await getAuthHeaders();\n    const { data } = await axios.post<SaveChartResponse>(`${BACKEND_URL}/api/charts/save-chart`, chartData, { headers });\n  devConsole.log?.('✅ Chart saved successfully:', data);\n    return data;\n  } catch (error) {\n  devConsole.error('❌ Error saving chart:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to save charts');\n    }\n    throw new Error('Failed to save chart');\n  }\n};\n\nexport const deleteChart = async (chartId: ChartId): Promise<void> => {\n  devConsole.log?.(`🗑️ Deleting chart: ${chartId}`);\n  \n  try {\n    const headers = await getAuthHeaders();\n    await axios.delete(`${BACKEND_URL}/api/charts/${chartId}`, {\n      headers\n    });\n    \n  devConsole.log?.('✅ Chart deleted successfully');\n  } catch (error) {\n  devConsole.error('❌ Error deleting chart:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to delete charts');\n    }\n    throw new Error('Failed to delete chart');\n  }\n};\n\nexport const apiClient = {\n  get: async <T = unknown>(endpoint: string): Promise<T> => {\n  devConsole.log?.('📡 API GET request:', endpoint);\n    const url = `${BACKEND_URL}${endpoint}`;\n  devConsole.log?.('🌐 Full URL:', url);\n    \n    try {\n      const response = await fetch(url);\n  devConsole.log?.('📥 Response status:', response.status);\n      \n      if (!response.ok) {\n  devConsole.error('❌ HTTP error:', response.status, response.statusText);\n        \n        // Map HTTP status code to appropriate error\n        if (response.status === 401) {\n          throw new AuthenticationError();\n        } else if (response.status === 404) {\n          throw new NotFoundError('Resource', endpoint);\n        } else {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n      \n      const data: unknown = await response.json();\n  devConsole.log?.('✅ GET response data:', data);\n      return data as T;\n    } catch (error) {\n  devConsole.error('❌ GET request failed:', error);\n      throw error;\n    }\n  },\n  \n  post: async <T = unknown>(endpoint: string, body: unknown): Promise<T> => {\n  devConsole.log?.('📡 API POST request:', endpoint);\n  devConsole.log?.('📤 Request data:', body);\n    const url = `${BACKEND_URL}${endpoint}`;\n  devConsole.log?.('🌐 Full URL:', url);\n    \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n      \n  devConsole.log?.('📥 Response status:', response.status);\n      \n      if (!response.ok) {\n  devConsole.error('❌ HTTP error:', response.status, response.statusText);\n        \n        // Map HTTP status code to appropriate error\n        if (response.status === 401) {\n          throw new AuthenticationError();\n        } else if (response.status === 404) {\n          throw new NotFoundError('Resource', endpoint);\n        } else if (response.status === 400) {\n          throw new ValidationError('Invalid request data', {});\n        } else {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n      \n      const responseData: unknown = await response.json();\n  devConsole.log?.('✅ POST response data:', responseData);\n      return responseData as T;\n    } catch (error) {\n  devConsole.error('❌ POST request failed:', error);\n      throw error;\n    }\n  }\n};\n\nexport const fetchChart = async (data: Record<string, unknown>): Promise<unknown> => {\n  devConsole.log?.('🔮 Fetching chart data...');\n  devConsole.log?.('📊 Chart data input:', data);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making chart request to /calculate-multi-system');\n    const response = await axios.post(`${BACKEND_URL}/calculate-multi-system`, data, { headers });\n  devConsole.log?.('✅ Chart response received:', response.data);\n    return response;\n  } catch (error) {\n  devConsole.error('❌ Error fetching chart:', error);\n    throw error;\n  }\n};\n\nexport const fetchPersonalityAnalysis = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('🧠 Fetching personality analysis for user:', userId);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making personality analysis request to /api/analyze/personality/');\n    const response = await axios.get(`${BACKEND_URL}/api/analyze/personality/${userId}`, { headers });\n  devConsole.log?.('✅ Personality analysis response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching personality analysis:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access personality analysis');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('PersonalityAnalysis', String(userId));\n    }\n    throw new Error('Failed to fetch personality analysis');\n  }\n};\n\nexport const fetchNumerology = async (data: Record<string, unknown>): Promise<unknown> => {\n  devConsole.log?.('🔢 Fetching numerology data...');\n  devConsole.log?.('📊 Numerology data input:', data);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making numerology request to /calculate-numerology');\n    const response = await axios.post(`${BACKEND_URL}/calculate-numerology`, data, { headers });\n  devConsole.log?.('✅ Numerology response received:', response.data);\n    return response;\n  } catch (error) {\n  devConsole.error('❌ Error fetching numerology:', error);\n    throw error;\n  }\n};\n\nexport const calculateHumanDesign = async (data: AnyBirthInput): Promise<{ human_design: HumanDesignData }> => {\n  devConsole.log?.('🧬 Calculating Human Design chart...');\n  devConsole.log?.('📊 Human Design input:', data);\n\n  try {\n    const unifiedData = toUnifiedBirthData(data);\n    const headers = await getAuthHeaders();\n    const response = await axios.post<{ human_design: HumanDesignData }>(\n      `${BACKEND_URL}/api/human-design/calculate`, \n      unifiedData, \n      { headers }\n    );\n    \n  devConsole.log?.('✅ Human Design calculation successful:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error calculating Human Design chart:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to calculate Human Design chart');\n    } else if (axios.isAxiosError(error) && error.response?.status === 400) {\n  throw new ValidationError('Invalid birth data for Human Design calculation', {});\n    }\n    throw new Error('Failed to calculate Human Design chart');\n  }\n};\n\nexport const getHumanDesignProfile = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('🧬 Fetching Human Design profile for user:', userId);\n\n  try {\n    const headers = await getAuthHeaders();\n    const response = await axios.get(`${BACKEND_URL}/api/human-design/profile/${userId}`, { headers });\n    \n  devConsole.log?.('✅ Human Design profile retrieved:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching Human Design profile:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access Human Design profile');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('HumanDesignProfile', String(userId));\n    }\n    throw new Error('Failed to fetch Human Design profile');\n  }\n};\n\nexport const calculateGeneKeys = async (data: AnyBirthInput): Promise<GeneKeysData> => {\n  devConsole.log?.('🧬 Calculating Gene Keys...');\n  try {\n    const unifiedData = toUnifiedBirthData(data);\n  devConsole.log?.('📊 Gene Keys input:', unifiedData);\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making Gene Keys request to /gene-keys/calculate');\n    const response = await axios.post<GeneKeysData>(`${BACKEND_URL}/api/gene-keys/calculate`, unifiedData, { headers });\n  devConsole.log?.('✅ Gene Keys response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error calculating Gene Keys:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to calculate Gene Keys');\n    } else if (axios.isAxiosError(error) && error.response?.status === 400) {\n  throw new ValidationError('Invalid birth data for Gene Keys calculation', {});\n    }\n    throw new Error('Failed to calculate Gene Keys');\n  }\n};\n\nexport const getGeneKeysProfile = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('�️ Getting Gene Keys profile for user:', userId);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making Gene Keys profile request to /gene-keys/profile/');\n    const response = await axios.get(`${BACKEND_URL}/api/gene-keys/profile/${userId}`, { headers });\n  devConsole.log?.('✅ Gene Keys profile response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching Gene Keys profile:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access Gene Keys profile');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('GeneKeysProfile', String(userId));\n    }\n    throw new Error('Failed to fetch Gene Keys profile');\n  }\n};\n\nexport const getContemplationProgress = async (userId: UserId): Promise<unknown> => {\n  devConsole.log?.('🧘 Getting contemplation progress for user:', userId);\n  try {\n    const headers = await getAuthHeaders();\n  devConsole.log?.('📡 Making contemplation progress request to /gene-keys/contemplation/');\n    const response = await axios.get(`${BACKEND_URL}/api/gene-keys/contemplation/${userId}`, { headers });\n  devConsole.log?.('✅ Contemplation progress response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching contemplation progress:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to access contemplation progress');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('ContemplationProgress', String(userId));\n    }\n    throw new Error('Failed to fetch contemplation progress');\n  }\n};\n\n// Chart data interfaces for type safety\n// ChartBirthData now sourced from shared UnifiedBirthData (re-exported as ChartBirthData)\n\nexport interface Planet {\n  name: string;\n  position: number; // Degree in zodiac (0-360)\n  retrograde?: boolean;\n  speed?: number;\n}\n\nexport interface House {\n  number: number;\n  cusp: number; // Degree position\n  sign: string;\n}\n\n// Use the imported ChartDataType as ChartData to avoid conflicts\nexport type ChartData = ChartDataType;\n\n// Enhanced chart fetching function that hits the /calculate endpoint\nexport const fetchChartData = async (birthData: ChartBirthData): Promise<ChartData> => {\n  devConsole.log?.('🔮 Fetching chart data from /calculate endpoint...');\n  devConsole.log?.('📊 Chart data input:', birthData);\n  \n  try {\n    const response = await apiClient.post('/calculate', birthData);\n  devConsole.log?.('✅ Chart response received:', response);\n    \n    // Transform backend response to frontend format\n    const transformedData = transformBackendResponse(response);\n  devConsole.log?.('🔄 Transformed chart data:', transformedData);\n    \n    return transformedData;\n  } catch (error) {\n  devConsole.error('❌ Error fetching chart data:', error);\n    throw error;\n  }\n};\n\n// Re-export core types for backward compatibility\nexport type { ChartBirthData };\n\n// Transform backend response to match ChartData interface safely\ninterface BackendPlanetLike {\n  position?: unknown;\n  longitude?: unknown;\n  retrograde?: unknown;\n  speed?: unknown;\n}\n\ntype BackendPlanets = Record<string, unknown> | undefined;\n\ntype BackendHouses = Record<string, unknown> | unknown[] | undefined; // backend may return array or keyed object\n\nconst isObject = (v: unknown): v is Record<string, unknown> => typeof v === 'object' && v !== null;\n\nconst coerceNumber = (v: unknown, fallback = 0): number => (typeof v === 'number' && Number.isFinite(v) ? v : fallback);\n\nconst transformBackendResponse = (backendResponse: unknown): ChartData => {\n  if (!isObject(backendResponse)) {\n    return {\n      planets: {},\n      houses: [],\n      aspects: [],\n      angles: { ascendant: 0, midheaven: 0, descendant: 180, imumcoeli: 180 }\n    };\n  }\n\n  const raw = backendResponse;\n\n  // Planets\n  const planets: Record<string, Planet> = {};\n  const rawPlanets: BackendPlanets = isObject(raw.planets) ? (raw.planets) : undefined;\n  if (rawPlanets) {\n    for (const [name, value] of Object.entries(rawPlanets)) {\n      const p = isObject(value) ? (value as BackendPlanetLike) : {};\n      const position = typeof p.position === 'number'\n        ? p.position\n        : (typeof p.longitude === 'number' ? p.longitude : 0);\n      planets[name] = {\n        name,\n        position,\n        retrograde: Boolean(p.retrograde),\n        speed: typeof p.speed === 'number' ? p.speed : 0\n      };\n    }\n  }\n\n  // Houses\n  const houses: House[] = [];\n  const rawHouses: BackendHouses = raw.houses as BackendHouses;\n  if (isObject(rawHouses)) {\n    for (const [houseKey, houseValue] of Object.entries(rawHouses)) {\n      const houseNumber = houseKey.includes('house_') ? parseInt(houseKey.replace('house_', '')) : parseInt(houseKey, 10);\n      if (Number.isNaN(houseNumber)) continue;\n      let cusp = 0;\n      let sign = '';\n      if (typeof houseValue === 'number') {\n        cusp = houseValue;\n      } else if (isObject(houseValue)) {\n        cusp = coerceNumber((houseValue).cusp, 0);\n        const signVal = (houseValue).sign;\n        if (typeof signVal === 'string') sign = signVal;\n      }\n      houses.push({ number: houseNumber, cusp, sign });\n    }\n  } else if (Array.isArray(rawHouses)) {\n    // If backend returns array of numbers\n    rawHouses.forEach((hv, idx) => {\n      const cusp = coerceNumber(hv, 0);\n      houses.push({ number: idx + 1, cusp, sign: '' });\n    });\n  }\n\n  const aspects: unknown[] = Array.isArray(raw.aspects) ? (raw.aspects as unknown[]) : [];\n\n  const defaultAsc = houses[0]?.cusp ?? 0;\n  const defaultMc = houses[9]?.cusp ?? 0;\n  const anglesRaw = isObject(raw.angles) ? raw.angles : undefined;\n  const angles = anglesRaw &&\n    typeof anglesRaw.ascendant === 'number' &&\n    typeof anglesRaw.midheaven === 'number' &&\n    typeof anglesRaw.descendant === 'number' &&\n    typeof anglesRaw.imumcoeli === 'number'\n    ? anglesRaw as { ascendant: number; midheaven: number; descendant: number; imumcoeli: number }\n    : {\n        ascendant: defaultAsc,\n        midheaven: defaultMc,\n        descendant: defaultAsc + 180,\n        imumcoeli: defaultMc + 180\n      };\n\n  return {\n    planets,\n    houses: houses.sort((a, b) => a.number - b.number),\n    aspects,\n    angles,\n    latitude: typeof raw.latitude === 'number' ? raw.latitude : undefined,\n    longitude: typeof raw.longitude === 'number' ? raw.longitude : undefined,\n    timezone: typeof raw.timezone === 'string' ? raw.timezone : undefined,\n    julian_day: typeof raw.julian_day === 'number' ? raw.julian_day : undefined\n  };\n};\n\nexport const fetchNatalChart = async (birthData: Record<string, unknown>): Promise<unknown> => {\n  devConsole.log?.('🌟 Fetching natal chart...');\n  devConsole.log?.('📊 Natal chart data input:', birthData);\n  const response = await apiClient.post('/natal-chart', birthData);\n  devConsole.log?.('✅ Natal chart response received:', response);\n  return response;\n};\n\nexport const fetchSynastryAnalysis = async (person1: Record<string, unknown>, person2: Record<string, unknown>): Promise<unknown> => {\n  devConsole.log?.('💑 Fetching synastry analysis...');\n  devConsole.log?.('📊 Person 1 data:', person1);\n  devConsole.log?.('📊 Person 2 data:', person2);\n  // Unified backend route: /api/synastry/calculate-synastry (router mounted at /api)\n  const response = await apiClient.post('/synastry/calculate-synastry', { person1, person2 });\n  devConsole.log?.('✅ Synastry analysis response received:', response);\n  return response;\n};\n\n// AI Interpretation API Functions\nexport const fetchAIInterpretations = async (chartId: ChartId, userId: UserId): Promise<InterpretationResponse> => {\n  devConsole.log?.('🤖 Fetching AI interpretations...');\n  devConsole.log?.('📊 Chart ID:', chartId, 'User ID:', userId);\n  \n  try {\n    const headers = await getAuthHeaders();\n    const response = await axios.post<InterpretationResponse>(`${BACKEND_URL}/api/interpretations`, {\n      chartId,\n      userId\n    }, { headers });\n    \n  devConsole.log?.('✅ AI interpretations response received:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching AI interpretations:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to view interpretations');\n    }\n    throw new Error('Failed to fetch AI interpretations');\n  }\n};\n\nexport const generateAIInterpretation = async (request: InterpretationRequest): Promise<InterpretationResponse> => {\n  devConsole.log?.('🔮 Generating AI interpretation...');\n  devConsole.log?.('📊 Request data:', request);\n  \n  try {\n    const headers = await getAuthHeaders();\n    const response = await axios.post<InterpretationResponse>(`${BACKEND_URL}/api/interpretations/generate`, request, { headers });\n    \n  devConsole.log?.('✅ AI interpretation generated:', response.data);\n    return response.data;\n  } catch (error) {\n  devConsole.error('❌ Error generating AI interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to generate interpretations');\n    }\n    throw new Error('Failed to generate AI interpretation');\n  }\n};\n\nexport const fetchInterpretationById = async (interpretationId: InterpretationId): Promise<Interpretation> => {\n  devConsole.log?.('🔍 Fetching interpretation by ID:', interpretationId);\n  \n  try {\n    const headers = await getAuthHeaders();\n    interface InterpretationByIdResponse { data: Interpretation; success?: boolean }\n    const response = await axios.get<InterpretationByIdResponse>(`${BACKEND_URL}/api/interpretations/${interpretationId}`, { headers });\n    \n  devConsole.log?.('✅ Interpretation fetched:', response.data);\n    return response.data.data;\n  } catch (error) {\n  devConsole.error('❌ Error fetching interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to view interpretation');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('Interpretation', String(interpretationId));\n    }\n    throw new Error('Failed to fetch interpretation');\n  }\n};\n\nexport const deleteInterpretation = async (interpretationId: InterpretationId): Promise<void> => {\n  devConsole.log?.('🗑️ Deleting interpretation:', interpretationId);\n  \n  try {\n    const headers = await getAuthHeaders();\n    await axios.delete(`${BACKEND_URL}/api/interpretations/${interpretationId}`, { headers });\n    \n  devConsole.log?.('✅ Interpretation deleted successfully');\n  } catch (error) {\n  devConsole.error('❌ Error deleting interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to delete interpretation');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('Interpretation', String(interpretationId));\n    }\n    throw new Error('Failed to delete interpretation');\n  }\n};\n\nexport const updateInterpretation = async (\n  interpretationId: InterpretationId, \n  updates: Partial<Interpretation>\n): Promise<Interpretation> => {\n  devConsole.log?.('📝 Updating interpretation:', interpretationId, updates);\n  \n  try {\n    const headers = await getAuthHeaders();\n    interface InterpretationByIdResponse { data: Interpretation; success?: boolean }\n    const response = await axios.patch<InterpretationByIdResponse>(\n      `${BACKEND_URL}/api/interpretations/${interpretationId}`, \n      updates, \n      { headers }\n    );\n    \n  devConsole.log?.('✅ Interpretation updated:', response.data);\n    return response.data.data;\n  } catch (error) {\n  devConsole.error('❌ Error updating interpretation:', error);\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      throw new AuthenticationError('Authentication required to update interpretation');\n    } else if (axios.isAxiosError(error) && error.response?.status === 404) {\n  throw new NotFoundError('Interpretation', String(interpretationId));\n    } else if (axios.isAxiosError(error) && error.response?.status === 400) {\n  throw new ValidationError('Invalid interpretation update data', {});\n    }\n    throw new Error('Failed to update interpretation');\n  }\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/astrologyService.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":10,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":10,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[415,419],"text":"(user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// apps/astro/src/services/astrologyService.ts\n\nimport { getAuth } from 'firebase/auth';\nimport { ChartData, ChartType } from '@/types/astrology.types';\nimport { config } from '@cosmichub/config'; // Shared API config from packages/config\n\nexport const fetchChartData = async (userId: string, chartType: ChartType): Promise<ChartData> => {\n  const auth = getAuth();\n  const user = auth.currentUser;\n  const token = user ? await user.getIdToken() : null;\n  if (token === null || token === undefined || token === '') {\n    throw new Error('Authentication required');\n  }\n\n  const response = await fetch(`${config.api.baseUrl}/api/charts/${chartType}/${userId}`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to fetch chart data: ${response.statusText}`);\n  }\n\n  const data = (await response.json()) as ChartData;\n  return data;\n};","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/chartAnalyticsService.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":85,"column":33,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":85,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2459,2470],"text":"(transitData != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":104,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":104,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":104,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":105,"column":46,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":105,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":115,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":115,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":115,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":116,"column":47,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":116,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":126,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":126,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .angles on an `error` typed value.","line":126,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":127,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":127,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":148,"column":19,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":148,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":148,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":149,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":149,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":165,"column":19,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":165,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":165,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":166,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":166,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":183,"column":20,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":183,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":183,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":187,"column":89,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":187,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":192,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":192,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .aspects on an `error` typed value.","line":192,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .orb on an `any` value.","line":197,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .orb on an `any` value.","line":198,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":218,"column":43,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":218,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":218,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":218,"column":71,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":218,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":223,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":223,"endColumn":75},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":223,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":223,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7310,7332],"text":"(Boolean(planetPositions[i + 1]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":223,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":223,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7333,7335],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":275,"column":20,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":275,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":275,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":275,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":276,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":276,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [planet.house] resolves to an `error` typed value.","line":281,"column":21,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":281,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [planet.house] resolves to an `error` typed value.","line":282,"column":21,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":282,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":326,"column":36,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":326,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":326,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":326,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":335,"column":33,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":335,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":335,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":335,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":335,"column":69,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":335,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":336,"column":57,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":336,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":359,"column":36,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":359,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .planets on an `error` typed value.","line":359,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":368,"column":30,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":368,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":368,"column":48,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":368,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":368,"column":66,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":368,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":391,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":391,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":401,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":401,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":461,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":461,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[15088,15102],"text":"(elements[sign].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[15088,15102],"text":"(elements[sign] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15088,15102],"text":"(Boolean(elements[sign]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":481,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":481,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[15730,15745],"text":"(qualities[sign].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[15730,15745],"text":"(qualities[sign] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15730,15745],"text":"(Boolean(qualities[sign]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":487,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":487,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":493,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":493,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":499,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":499,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":505,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":505,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":513,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":513,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":521,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":521,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":529,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":529,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":541,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":541,"endColumn":33}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":391,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":391,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":401,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":401,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":487,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":487,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":493,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":493,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":499,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":499,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_natalChart' is assigned a value but never used.","line":505,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":505,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transits' is assigned a value but never used.","line":507,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":507,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":513,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":513,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transitData' is assigned a value but never used.","line":515,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":515,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":521,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":521,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transitData' is assigned a value but never used.","line":523,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":523,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":529,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":529,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transitData' is assigned a value but never used.","line":531,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":531,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_chartData' is assigned a value but never used.","line":541,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":541,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":557,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":557,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":563,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":563,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":569,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":569,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":575,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":575,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sign' is assigned a value but never used.","line":581,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":581,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":57,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced Chart Analytics and Interpretation Service\n * Provides real-time astrological insights and pattern recognition\n */\n\nimport { ChartData, Planet } from './chartSyncService';\n\ninterface AspectData {\n  planet1?: string;\n  planet2?: string;\n  transitPlanet?: string;\n  natalPlanet?: string;\n  orb: number;\n}\n\nexport interface ChartPattern {\n  id: string;\n  name: string;\n  type: 'stellium' | 'grand-trine' | 'grand-cross' | 't-square' | 'yod' | 'kite' | 'mystic-rectangle';\n  planets: string[];\n  houses?: number[];\n  signs?: string[];\n  strength: number; // 0-100\n  interpretation: string;\n  keywords: string[];\n}\n\nexport interface ChartAnalysis {\n  chartId: string;\n  dominantElement: string;\n  dominantQuality: string;\n  dominantPlanet: string;\n  chartShape: string;\n  patterns: ChartPattern[];\n  strengths: string[];\n  challenges: string[];\n  lifeThemes: string[];\n  currentTransitHighlights: string[];\n  upcomingEvents: UpcomingEvent[];\n  energyLevel: number; // 0-100\n  emotionalClimate: string;\n  recommendations: string[];\n  lastAnalyzed: Date;\n}\n\nexport interface UpcomingEvent {\n  date: Date;\n  type: 'transit' | 'progression' | 'return';\n  description: string;\n  significance: 'low' | 'medium' | 'high' | 'critical';\n  affectedAreas: string[];\n  advice: string;\n}\n\nexport interface PersonalityInsight {\n  trait: string;\n  strength: number; // 0-100\n  source: string; // Which planets/aspects contribute\n  description: string;\n  development: string; // How to develop this trait\n}\n\nclass ChartAnalyticsService {\n  private analysisCache: Map<string, ChartAnalysis> = new Map();\n  private patternRecognizers: Map<string, (chart: ChartData) => ChartPattern[]> = new Map();\n\n  constructor() {\n    this.initializePatternRecognizers();\n  }\n\n  /**\n   * Perform comprehensive chart analysis\n   */\n  analyzeChart(chartId: string, chartData: ChartData, transitData?: Record<string, Planet>): ChartAnalysis {\n    const analysis: ChartAnalysis = {\n      chartId,\n      dominantElement: this.calculateDominantElement(chartData),\n      dominantQuality: this.calculateDominantQuality(chartData),\n      dominantPlanet: this.calculateDominantPlanet(chartData),\n      chartShape: this.determineChartShape(chartData),\n      patterns: this.detectPatterns(chartData),\n      strengths: this.identifyStrengths(chartData),\n      challenges: this.identifyChallenges(chartData),\n      lifeThemes: this.extractLifeThemes(chartData),\n      currentTransitHighlights: transitData ? this.analyzeCurrentTransits(chartData, transitData) : [],\n      upcomingEvents: [], // Would be populated with ephemeris calculations\n      energyLevel: this.calculateEnergyLevel(chartData, transitData),\n      emotionalClimate: this.assessEmotionalClimate(chartData, transitData),\n      recommendations: this.generateRecommendations(chartData, transitData),\n      lastAnalyzed: new Date()\n    };\n\n    this.analysisCache.set(chartId, analysis);\n    return analysis;\n  }\n\n  /**\n   * Get personality insights from chart\n   */\n  getPersonalityInsights(chartData: ChartData): PersonalityInsight[] {\n    const insights: PersonalityInsight[] = [];\n\n    // Sun sign insights\n    const sunPosition = chartData.planets.sun?.position ?? 0;\n    const sunSign = this.getSignFromPosition(sunPosition);\n    insights.push({\n      trait: `${sunSign} Core Identity`,\n      strength: 85,\n      source: 'Sun',\n      description: this.getSunSignDescription(sunSign),\n      development: this.getSunSignDevelopment(sunSign)\n    });\n\n    // Moon sign insights\n    const moonPosition = chartData.planets.moon?.position ?? 0;\n    const moonSign = this.getSignFromPosition(moonPosition);\n    insights.push({\n      trait: `${moonSign} Emotional Nature`,\n      strength: 80,\n      source: 'Moon',\n      description: this.getMoonSignDescription(moonSign),\n      development: this.getMoonSignDevelopment(moonSign)\n    });\n\n    // Rising sign insights\n    const ascendant = chartData.angles?.ascendant ?? 0;\n    const risingSign = this.getSignFromPosition(ascendant);\n    insights.push({\n      trait: `${risingSign} Outer Persona`,\n      strength: 75,\n      source: 'Ascendant',\n      description: this.getRisingSignDescription(risingSign),\n      development: this.getRisingSignDevelopment(risingSign)\n    });\n\n    // Add more insights based on planetary placements and aspects\n    insights.push(...this.analyzePlanetaryInsights(chartData));\n\n    return insights.sort((a, b) => b.strength - a.strength);\n  }\n\n  /**\n   * Calculate dominant element (Fire, Earth, Air, Water)\n   */\n  private calculateDominantElement(chartData: ChartData): string {\n    const elementCounts = { Fire: 0, Earth: 0, Air: 0, Water: 0 };\n    \n    Object.values(chartData.planets).forEach(planet => {\n      const sign = this.getSignFromPosition(planet.position);\n      const element = this.getElementFromSign(sign);\n      elementCounts[element as keyof typeof elementCounts]++;\n    });\n\n    return Object.entries(elementCounts).reduce((a, b) => \n      elementCounts[a[0] as keyof typeof elementCounts] > elementCounts[b[0] as keyof typeof elementCounts] ? a : b\n    )[0];\n  }\n\n  /**\n   * Calculate dominant quality (Cardinal, Fixed, Mutable)\n   */\n  private calculateDominantQuality(chartData: ChartData): string {\n    const qualityCounts = { Cardinal: 0, Fixed: 0, Mutable: 0 };\n    \n    Object.values(chartData.planets).forEach(planet => {\n      const sign = this.getSignFromPosition(planet.position);\n      const quality = this.getQualityFromSign(sign);\n      qualityCounts[quality as keyof typeof qualityCounts]++;\n    });\n\n    return Object.entries(qualityCounts).reduce((a, b) => \n      qualityCounts[a[0] as keyof typeof qualityCounts] > qualityCounts[b[0] as keyof typeof qualityCounts] ? a : b\n    )[0];\n  }\n\n  /**\n   * Determine the most prominent planet\n   */\n  private calculateDominantPlanet(chartData: ChartData): string {\n    const planetScores: Record<string, number> = {};\n\n    // Score planets based on various factors\n    Object.entries(chartData.planets).forEach(([name, planet]) => {\n      let score = 0;\n\n      // Angular houses get higher scores\n      if (planet.house !== null && planet.house !== undefined && [1, 4, 7, 10].includes(planet.house)) {\n        score += 3;\n      }\n\n      // Exact aspects add to score\n      chartData.aspects?.forEach(aspect => {\n        const aspectData = aspect as AspectData;\n        const p1 = aspectData.planet1 ?? aspectData.transitPlanet;\n        const p2 = aspectData.planet2 ?? aspectData.natalPlanet;\n        if (p1 === name || p2 === name) {\n          if (aspect.orb < 1) score += 2;\n          else if (aspect.orb < 3) score += 1;\n        }\n      });\n\n      // Personal planets get base scores\n      const personalPlanets = ['sun', 'moon', 'mercury', 'venus', 'mars'];\n      if (personalPlanets.includes(name)) {\n        score += 2;\n      }\n\n      planetScores[name] = score;\n    });\n\n    return Object.entries(planetScores).reduce((a, b) => a[1] > b[1] ? a : b)[0];\n  }\n\n  /**\n   * Determine overall chart shape/pattern\n   */\n  private determineChartShape(chartData: ChartData): string {\n    const planetPositions = Object.values(chartData.planets).map(p => p.position).sort((a, b) => a - b);\n    \n    if (planetPositions.length < 2) return 'undefined';\n\n    const spans = planetPositions.map((pos, i) => {\n      const nextPos = planetPositions[i + 1] || (planetPositions[0] + 360);\n      return nextPos - pos;\n    });\n\n    const maxSpan = Math.max(...spans);\n    const totalSpan = planetPositions[planetPositions.length - 1] - planetPositions[0];\n\n    if (maxSpan > 120) return 'Bundle';\n    if (totalSpan <= 120) return 'Bundle';\n    if (totalSpan <= 240) return 'Bowl';\n    if (maxSpan > 60) return 'Locomotive';\n    return 'Splash';\n  }\n\n  /**\n   * Initialize pattern recognition algorithms\n   */\n  private initializePatternRecognizers(): void {\n    this.patternRecognizers.set('stellium', this.detectStelliums.bind(this));\n    this.patternRecognizers.set('grand-trine', this.detectGrandTrines.bind(this));\n    this.patternRecognizers.set('t-square', this.detectTSquares.bind(this));\n    this.patternRecognizers.set('grand-cross', this.detectGrandCrosses.bind(this));\n    this.patternRecognizers.set('yod', this.detectYods.bind(this));\n  }\n\n  /**\n   * Detect all patterns in a chart\n   */\n  private detectPatterns(chartData: ChartData): ChartPattern[] {\n    const patterns: ChartPattern[] = [];\n\n    this.patternRecognizers.forEach((recognizer) => {\n      try {\n        const detectedPatterns = recognizer(chartData);\n        patterns.push(...detectedPatterns);\n      } catch {\n        // TODO: Replace with structured logging\n      }\n    });\n\n    return patterns.sort((a, b) => b.strength - a.strength);\n  }\n\n  /**\n   * Detect stelliums (3+ planets in same sign/house)\n   */\n  private detectStelliums(chartData: ChartData): ChartPattern[] {\n    const patterns: ChartPattern[] = [];\n    const signGroups: Record<string, string[]> = {};\n    const houseGroups: Record<number, string[]> = {};\n\n    // Group planets by sign and house\n    Object.entries(chartData.planets).forEach(([name, planet]) => {\n      const sign = this.getSignFromPosition(planet.position);\n      signGroups[sign] ??= [];\n      signGroups[sign].push(name);\n\n      if (planet.house !== null && planet.house !== undefined) {\n        houseGroups[planet.house] ??= [];\n        houseGroups[planet.house].push(name);\n      }\n    });\n\n    // Check for sign stelliums\n    Object.entries(signGroups).forEach(([sign, planets]) => {\n      if (planets.length >= 3) {\n        patterns.push({\n          id: `stellium-${sign}`,\n          name: `${sign} Stellium`,\n          type: 'stellium',\n          planets,\n          signs: [sign],\n          strength: Math.min(100, planets.length * 20),\n          interpretation: `Strong emphasis on ${sign} energy and characteristics`,\n          keywords: [`${sign} focus`, 'concentrated energy', 'specialization']\n        });\n      }\n    });\n\n    // Check for house stelliums\n    Object.entries(houseGroups).forEach(([house, planets]) => {\n      if (planets.length >= 3) {\n        patterns.push({\n          id: `stellium-house-${house}`,\n          name: `House ${house} Stellium`,\n          type: 'stellium',\n          planets,\n          houses: [parseInt(house)],\n          strength: Math.min(100, planets.length * 20),\n          interpretation: `Major life focus in House ${house} themes`,\n          keywords: [`House ${house} emphasis`, 'life theme concentration']\n        });\n      }\n    });\n\n    return patterns;\n  }\n\n  /**\n   * Detect grand trines\n   */\n  private detectGrandTrines(chartData: ChartData): ChartPattern[] {\n    const patterns: ChartPattern[] = [];\n    const planets = Object.entries(chartData.planets);\n\n    for (let i = 0; i < planets.length; i++) {\n      for (let j = i + 1; j < planets.length; j++) {\n        for (let k = j + 1; k < planets.length; k++) {\n          const [name1, planet1] = planets[i];\n          const [name2, planet2] = planets[j];\n          const [name3, planet3] = planets[k];\n\n          if (this.isGrandTrine(planet1.position, planet2.position, planet3.position)) {\n            const element = this.getElementFromPosition(planet1.position);\n            patterns.push({\n              id: `grand-trine-${name1}-${name2}-${name3}`,\n              name: `${element} Grand Trine`,\n              type: 'grand-trine',\n              planets: [name1, name2, name3],\n              strength: 85,\n              interpretation: `Natural talent and easy flow of ${element} energy`,\n              keywords: [`${element} harmony`, 'natural gifts', 'easy flow']\n            });\n          }\n        }\n      }\n    }\n\n    return patterns;\n  }\n\n  /**\n   * Detect T-Squares\n   */\n  private detectTSquares(chartData: ChartData): ChartPattern[] {\n    const patterns: ChartPattern[] = [];\n    const planets = Object.entries(chartData.planets);\n\n    for (let i = 0; i < planets.length; i++) {\n      for (let j = i + 1; j < planets.length; j++) {\n        for (let k = j + 1; k < planets.length; k++) {\n          const [name1, planet1] = planets[i];\n          const [name2, planet2] = planets[j];\n          const [name3, planet3] = planets[k];\n\n          if (this.isTSquare(planet1.position, planet2.position, planet3.position)) {\n            patterns.push({\n              id: `t-square-${name1}-${name2}-${name3}`,\n              name: 'T-Square',\n              type: 't-square',\n              planets: [name1, name2, name3],\n              strength: 80,\n              interpretation: 'Dynamic tension that creates motivation and drive',\n              keywords: ['tension', 'motivation', 'achievement drive', 'challenge']\n            });\n          }\n        }\n      }\n    }\n\n    return patterns;\n  }\n\n  /**\n   * Detect Grand Crosses\n   */\n  private detectGrandCrosses(chartData: ChartData): ChartPattern[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    // Implementation for grand cross detection\n    return [];\n  }\n\n  /**\n   * Detect Yods (Finger of God)\n   */\n  private detectYods(chartData: ChartData): ChartPattern[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    // Implementation for yod detection\n    return [];\n  }\n\n  /**\n   * Helper method to check if three planets form a grand trine\n   */\n  private isGrandTrine(pos1: number, pos2: number, pos3: number, orb = 8): boolean {\n    const angles = [\n      this.normalizeAngle(Math.abs(pos1 - pos2)),\n      this.normalizeAngle(Math.abs(pos2 - pos3)),\n      this.normalizeAngle(Math.abs(pos3 - pos1))\n    ];\n\n    return angles.every(angle => Math.abs(angle - 120) <= orb || Math.abs(angle - 240) <= orb);\n  }\n\n  /**\n   * Helper method to check if three planets form a T-square\n   */\n  private isTSquare(pos1: number, pos2: number, pos3: number, orb = 8): boolean {\n    const angles = [\n      this.normalizeAngle(Math.abs(pos1 - pos2)),\n      this.normalizeAngle(Math.abs(pos2 - pos3)),\n      this.normalizeAngle(Math.abs(pos3 - pos1))\n    ];\n\n    const hasOpposition = angles.some(angle => Math.abs(angle - 180) <= orb);\n    const hasSquares = angles.filter(angle => Math.abs(angle - 90) <= orb).length >= 2;\n\n    return hasOpposition && hasSquares;\n  }\n\n  /**\n   * Normalize angle to 0-180 range\n   */\n  private normalizeAngle(angle: number): number {\n    angle = angle % 360;\n    return angle > 180 ? 360 - angle : angle;\n  }\n\n  /**\n   * Get zodiac sign from position\n   */\n  private getSignFromPosition(position: number): string {\n    const signs = ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',\n                   'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'];\n    return signs[Math.floor(position / 30)];\n  }\n\n  /**\n   * Get element from sign\n   */\n  private getElementFromSign(sign: string): string {\n    const elements: Record<string, string> = {\n      Aries: 'Fire', Taurus: 'Earth', Gemini: 'Air', Cancer: 'Water',\n      Leo: 'Fire', Virgo: 'Earth', Libra: 'Air', Scorpio: 'Water',\n      Sagittarius: 'Fire', Capricorn: 'Earth', Aquarius: 'Air', Pisces: 'Water'\n    };\n    return elements[sign] || 'Unknown';\n  }\n\n  /**\n   * Get element from position\n   */\n  private getElementFromPosition(position: number): string {\n    const sign = this.getSignFromPosition(position);\n    return this.getElementFromSign(sign);\n  }\n\n  /**\n   * Get quality from sign\n   */\n  private getQualityFromSign(sign: string): string {\n    const qualities: Record<string, string> = {\n      Aries: 'Cardinal', Taurus: 'Fixed', Gemini: 'Mutable', Cancer: 'Cardinal',\n      Leo: 'Fixed', Virgo: 'Mutable', Libra: 'Cardinal', Scorpio: 'Fixed',\n      Sagittarius: 'Mutable', Capricorn: 'Cardinal', Aquarius: 'Fixed', Pisces: 'Mutable'\n    };\n    return qualities[sign] || 'Unknown';\n  }\n\n  // Additional methods for analysis (implementations would be expanded)\n  private identifyStrengths(chartData: ChartData): string[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    return ['Leadership abilities', 'Creative expression', 'Emotional intelligence'];\n  }\n\n  private identifyChallenges(chartData: ChartData): string[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    return ['Impatience with details', 'Tendency to overthink', 'Need for more self-confidence'];\n  }\n\n  private extractLifeThemes(chartData: ChartData): string[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    return ['Personal transformation', 'Creative self-expression', 'Service to others'];\n  }\n\n  private analyzeCurrentTransits(natalChart: ChartData, transits: Record<string, Planet>): string[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _natalChart = natalChart;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _transits = transits;\n    return ['Jupiter enhancing optimism', 'Saturn encouraging discipline', 'Mercury improving communication'];\n  }\n\n  private calculateEnergyLevel(chartData: ChartData, transitData?: Record<string, Planet>): number {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _transitData = transitData;\n    return 75; // Placeholder - would calculate based on current planetary energies\n  }\n\n  private assessEmotionalClimate(chartData: ChartData, transitData?: Record<string, Planet>): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _transitData = transitData;\n    return 'Optimistic with creative potential';\n  }\n\n  private generateRecommendations(chartData: ChartData, transitData?: Record<string, Planet>): string[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _transitData = transitData;\n    return [\n      'Focus on creative projects this month',\n      'Practice patience in communications',\n      'Take time for self-reflection and meditation'\n    ];\n  }\n\n  private analyzePlanetaryInsights(chartData: ChartData): PersonalityInsight[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _chartData = chartData;\n    // Placeholder - would analyze each planet's placement and aspects\n    return [];\n  }\n\n  private getSunSignDescription(sign: string): string {\n    const descriptions: Record<string, string> = {\n      Aries: 'Bold, pioneering, and naturally inclined to lead',\n      Taurus: 'Stable, practical, and appreciates beauty and comfort',\n      // Add all signs...\n    };\n    return descriptions[sign] ?? 'Unique cosmic signature';\n  }\n\n  private getSunSignDevelopment(sign: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _sign = sign;\n    return 'Focus on authentic self-expression and leadership development';\n  }\n\n  private getMoonSignDescription(sign: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _sign = sign;\n    return 'Your emotional nature and inner world tendencies';\n  }\n\n  private getMoonSignDevelopment(sign: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _sign = sign;\n    return 'Develop emotional intelligence and intuitive abilities';\n  }\n\n  private getRisingSignDescription(sign: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _sign = sign;\n    return 'Your natural approach to life and first impressions';\n  }\n\n  private getRisingSignDevelopment(sign: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _sign = sign;\n    return 'Cultivate your natural presentation and social skills';\n  }\n\n  /**\n   * Get cached analysis\n   */\n  getCachedAnalysis(chartId: string): ChartAnalysis | undefined {\n    return this.analysisCache.get(chartId);\n  }\n\n  /**\n   * Clear analysis cache\n   */\n  clearCache(): void {\n    this.analysisCache.clear();\n  }\n}\n\n// Singleton instance\nlet chartAnalyticsService: ChartAnalyticsService | null = null;\n\nexport const getChartAnalyticsService = (): ChartAnalyticsService => {\n  chartAnalyticsService ??= new ChartAnalyticsService();\n  return chartAnalyticsService;\n};\n\nexport default ChartAnalyticsService;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/chartSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ZodiacSign' is defined but never used.","line":13,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"@typescript-eslint/consistent-type-definitions","severity":2,"message":"Use an `interface` instead of a `type`.","line":71,"column":6,"nodeType":"Identifier","messageId":"interfaceOverType","endLine":71,"endColumn":14,"fix":{"range":[1719,2265],"text":"interface EventMap {\n  'chart-update': ChartUpdateEvent;\n  'sync-error': ChartSyncError;\n  'aspect-alert': AspectEvent;\n  'connection-lost': undefined;\n  'connection-restored': undefined;\n  'chart-registered': { chartId: ChartId; chartSync: ChartDataSync };\n  'chart-synced': { chartId: ChartId; chartData: ChartDataSync };\n  'chart-unregistered': { chartId: ChartId };\n  'all-charts-refreshed': undefined;\n  'transit-update': { chartId: ChartId; transits: Record<PlanetName, Planet> };\n  'aspect-event': { chartId: ChartId; event: AspectEvent };\n}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":70,"fix":{"range":[2406,2409],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2406,2409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2406,2409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":91,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":91,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2517,2539],"text":"this.listeners[event] == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":129,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":129,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3700,3700],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3700,3700],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":140,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":151,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":205,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":211,"endColumn":10},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":205,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":205,"endColumn":49,"suggestions":[{"messageId":"removeAsync","fix":{"range":[6034,6040],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":242,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":242,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7055,7065],"text":"chartData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":250,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":250,"endColumn":39,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7213,7241],"text":"options.enableTransitUpdates ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7213,7241],"text":"options.enableTransitUpdates === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":260,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":260,"endColumn":33,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7535,7555],"text":"(options.aspectAlerts ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7535,7555],"text":"(options.aspectAlerts === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":268,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":268,"endColumn":37,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7776,7802],"text":"options.enableProgressions ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7776,7802],"text":"options.enableProgressions === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":314,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":314,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9254,9264],"text":"chartData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":358,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":358,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":381,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":381,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":413,"column":17,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":413,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":483,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":483,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[15318,15331],"text":"(transit.speed !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[15318,15331],"text":"(!Number.isNaN(transit.speed))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15318,15331],"text":"(Boolean(transit.speed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":509,"column":10,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":509,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[16066,16077],"text":"aspectType.length === 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[16066,16077],"text":"aspectType === \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16066,16077],"text":"!Boolean(aspectType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'chartData' is defined but never used.","line":561,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":561,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pendingDate' is assigned a value but never used.","line":583,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":583,"endColumn":37},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'syncChart' has no 'await' expression.","line":608,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":608,"endColumn":18,"suggestions":[{"messageId":"removeAsync","fix":{"range":[18444,18499],"text":"syncChart(chartData: ChartData): ChartId"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":627,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":627,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[19095,19113],"text":"(chartData.latitude !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[19095,19113],"text":"(!Number.isNaN(chartData.latitude))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19095,19113],"text":"(Boolean(chartData.latitude))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":628,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":628,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[19135,19154],"text":"(chartData.longitude !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[19135,19154],"text":"(!Number.isNaN(chartData.longitude))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19135,19154],"text":"(Boolean(chartData.longitude))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":629,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":629,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[19181,19199],"text":"(chartData.timezone.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[19181,19199],"text":"(chartData.timezone !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19181,19199],"text":"(Boolean(chartData.timezone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":671,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":671,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[20228,20236],"text":"interval != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'daysAhead' is assigned a value but never used.","line":700,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":700,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":703,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":703,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[21075,21085],"text":"chartData == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":714,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":714,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[21337,21363],"text":"this.transitUpdateInterval != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":730,"column":3,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":732,"endColumn":4,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[21762,21837],"text":"chartSyncService ??= new ChartSyncService();"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":730,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":730,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[21766,21783],"text":"chartSyncService == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * Real-Time Chart Synchronization Service\n * Manages live updates, transit tracking, and cross-app chart sharing\n */\nimport { Logger } from '../utils/logger';\nimport { \n  type ChartData, \n  type Planet, \n  type PlanetName,\n  type House,\n  type Aspect,\n  type ChartId,\n  type ZodiacSign,\n  type AspectType\n} from './api.types';\nimport { isValidChartData, hasRequiredPlanets } from './validation';\nimport { fetchChartData, type ChartBirthData } from './api';\n\n// Utility function to convert string to ChartId\nfunction toChartId(id: string): ChartId {\n  // This cast is safe because ChartId is a branded type of string\n  return id as unknown as ChartId;\n}\n\n// Event payload types for strong typing\nexport interface ChartUpdateEvent {\n  chartId: ChartId;\n  timestamp: string;\n  changes: {\n    planets?: Partial<Record<PlanetName, Planet>>;\n    houses?: House[];\n    aspects?: Aspect[];\n    angles?: Partial<ChartData['angles']>;\n  };\n}\n\nexport interface ChartSyncError {\n  chartId: ChartId;\n  errorCode: string;\n  message: string;\n  timestamp: string;\n  retryCount: number;\n}\n\nexport interface AspectEvent {\n  type: 'aspect-forming' | 'aspect-separating';\n  transitPlanet: PlanetName;\n  natalPlanet: PlanetName;\n  aspectType: AspectType;\n  orb: number;\n  exactDate: Date;\n  strength: 'strong' | 'medium' | 'weak';\n}\n\nexport interface ChartDataSync {\n  birthData: ChartBirthData;\n  currentData: ChartData;\n  lastUpdate: Date;\n  pendingUpdates: ChartUpdateEvent[];\n  transitData: Record<PlanetName, Planet>;\n  settings: {\n    updateInterval: number;\n    transitTracking: boolean;\n    aspectAlerts: boolean;\n    progressionTracking: boolean;\n  };\n  progressionData?: Record<PlanetName, Planet>;\n}\n\n// Typed event emitter\ntype EventMap = {\n  'chart-update': ChartUpdateEvent;\n  'sync-error': ChartSyncError;\n  'aspect-alert': AspectEvent;\n  'connection-lost': undefined;\n  'connection-restored': undefined;\n  'chart-registered': { chartId: ChartId; chartSync: ChartDataSync };\n  'chart-synced': { chartId: ChartId; chartData: ChartDataSync };\n  'chart-unregistered': { chartId: ChartId };\n  'all-charts-refreshed': undefined;\n  'transit-update': { chartId: ChartId; transits: Record<PlanetName, Planet> };\n  'aspect-event': { chartId: ChartId; event: AspectEvent };\n};\n\ntype EventCallback<T> = (payload: T) => void;\n\nclass TypedEventEmitter {\n  private listeners: Partial<Record<keyof EventMap, EventCallback<any>[]>> = {};\n\n  on<K extends keyof EventMap>(event: K, callback: EventCallback<EventMap[K]>): void {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event]?.push(callback);\n  }\n\n  off<K extends keyof EventMap>(event: K, callback: EventCallback<EventMap[K]>): void {\n    this.listeners[event] = this.listeners[event]?.filter(cb => cb !== callback);\n  }\n\n  emit<K extends keyof EventMap>(event: K, payload: EventMap[K]): void {\n    this.listeners[event]?.forEach(callback => callback(payload));\n  }\n\n  removeAllListeners(): void {\n    this.listeners = {};\n  }\n}\n\n// Using imported types from api.types.ts\n\nclass ChartSyncService extends TypedEventEmitter {\n  private charts: Map<ChartId, ChartDataSync> = new Map();\n  private syncIntervals: Map<ChartId, ReturnType<typeof setInterval>> = new Map();\n  private transitUpdateInterval: ReturnType<typeof setInterval> | null = null;\n  private isOnline = navigator.onLine;\n  private pendingUpdates: Map<ChartId, Date> = new Map();\n\n  constructor() {\n    super();\n    this.setupNetworkHandlers();\n    this.startGlobalTransitUpdates();\n  }\n\n  private setupNetworkHandlers() {\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.emit('connection-restored', undefined);\n      this.processPendingUpdates();\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.emit('connection-lost', undefined);\n    });\n  }\n\n  private startGlobalTransitUpdates() {\n    // Update transits every minute\n    this.transitUpdateInterval = setInterval(async () => {\n      if (!this.isOnline) return;\n      \n      try {\n        const currentTransits = await this.fetchCurrentTransits();\n        this.charts.forEach((chartData, chartId) => {\n          void this.updateTransits(chartId, currentTransits);\n        });\n      } catch (error) {\n        Logger.error('Failed to update global transits', error);\n      }\n    }, 60000); // 1 minute\n  }\n\n  /**\n   * Register a chart for real-time synchronization\n   */\n  async registerChart(rawChartId: string, birthData: ChartBirthData, options: {\n    enableTransitUpdates?: boolean;\n    enableProgressions?: boolean;\n    aspectAlerts?: boolean;\n    updateInterval?: number; // minutes\n  } = {}): Promise<ChartDataSync> {\n    try {\n      const chartId = toChartId(rawChartId);\n      const {\n        enableTransitUpdates = true,\n        enableProgressions = false,\n        aspectAlerts = true,\n        updateInterval = 5\n      } = options;\n\n      // Fetch initial chart data\n      const chartData = await fetchChartData(birthData);\n      \n      if (!isValidChartData(chartData)) {\n        throw new Error('Invalid chart data received');\n      }\n\n      if (!hasRequiredPlanets(chartData.planets)) {\n        throw new Error('Missing required planets in chart data');\n      }\n\n      const transitData = enableTransitUpdates ? await this.fetchCurrentTransits() : this.createEmptyTransitData();\n      const progressionData = enableProgressions ? await this.fetchProgressions(birthData) : undefined;\n\n      const chartSync: ChartDataSync = {\n        birthData,\n        currentData: chartData,\n        lastUpdate: new Date(),\n        pendingUpdates: [],\n        transitData,\n        settings: {\n          updateInterval,\n          transitTracking: enableTransitUpdates,\n          aspectAlerts,\n          progressionTracking: enableProgressions\n        },\n        progressionData\n      };\n\n      this.charts.set(chartId, chartSync);\n\n      // Set up periodic updates\n      if (enableTransitUpdates || enableProgressions) {\n        const interval = setInterval(async () => {\n          void this.updateChart(chartId, { \n            enableTransitUpdates, \n            enableProgressions, \n            aspectAlerts \n          });\n        }, updateInterval * 60000);\n        \n        this.syncIntervals.set(chartId, interval);\n      }\n\n      this.emit('chart-registered', { chartId, chartSync });\n      return chartSync;\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      Logger.error('Failed to register chart', error);\n      throw new Error(`Failed to register chart: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Update a specific chart\n   */\n  private async updateChart(rawChartId: string, options: {\n    enableTransitUpdates?: boolean;\n    enableProgressions?: boolean;\n    aspectAlerts?: boolean;\n  }): Promise<void> {\n    const chartId = toChartId(rawChartId);\n    \n    if (!this.isOnline) {\n      this.pendingUpdates.set(chartId, new Date());\n      return;\n    }\n\n    const chartData = this.charts.get(chartId);\n    if (!chartData) return;\n\n    try {\n      const updates: Partial<ChartDataSync> = {\n        lastUpdate: new Date(),\n        pendingUpdates: []\n      };\n\n      if (options.enableTransitUpdates) {\n        const newTransits = await this.fetchCurrentTransits();\n        const aspectEvents = this.detectAspectChanges(\n          chartData.currentData,\n          chartData.transitData,\n          newTransits\n        );\n        \n        updates.transitData = newTransits;\n        \n        if (options.aspectAlerts && aspectEvents.length > 0) {\n          aspectEvents.forEach(event => {\n            this.emit('aspect-alert', event);\n            this.emit('aspect-event', { chartId, event });\n          });\n        }\n      }\n\n      if (options.enableProgressions) {\n        // Update progressions (slower moving, update less frequently)\n        const now = new Date();\n        const hoursSinceLastUpdate = (now.getTime() - chartData.lastUpdate.getTime()) / (1000 * 60 * 60);\n        \n        if (hoursSinceLastUpdate >= 24) { // Update progressions daily\n          updates.progressionData = await this.fetchProgressions(chartData.birthData);\n        }\n      }\n\n      // Create new chart data with updates\n      const updatedChartData: ChartDataSync = {\n        ...chartData,\n        ...updates\n      };\n\n      this.charts.set(chartId, updatedChartData);\n\n      this.emit('chart-update', {\n        chartId,\n        timestamp: new Date().toISOString(),\n        changes: {\n          planets: updates.transitData,\n          aspects: []  // Add aspects if needed\n        }\n      });\n\n    } catch (error) {\n      const syncError: ChartSyncError = {\n        chartId,\n        errorCode: 'UPDATE_FAILED',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        retryCount: 0\n      };\n      this.emit('sync-error', syncError);\n      Logger.error(`Failed to update chart ${rawChartId}`, error);\n    }\n  }\n\n  /**\n   * Update transits for a specific chart\n   */\n  private updateTransits(rawChartId: string, newTransits: Record<PlanetName, Planet>): void {\n    const chartId = toChartId(rawChartId);\n    const chartData = this.charts.get(chartId);\n    if (!chartData) return;\n\n    const aspectEvents = this.detectAspectChanges(\n      chartData.currentData,\n      chartData.transitData,\n      newTransits\n    );\n    \n    // Create updated chart data\n    const updatedChartData: ChartDataSync = {\n      ...chartData,\n      transitData: newTransits,\n      lastUpdate: new Date()\n    };\n    \n    this.charts.set(chartId, updatedChartData);\n    \n    this.emit('transit-update', { chartId, transits: newTransits });\n    \n    if (aspectEvents.length > 0) {\n      aspectEvents.forEach(event => {\n        this.emit('aspect-alert', event);\n      });\n    }\n  }\n\n  /**\n   * Fetch current planetary positions for transits\n   */\n  private async fetchCurrentTransits(): Promise<Record<string, Planet>> {\n    const now = new Date();\n    const transitBirthData: ChartBirthData = {\n      year: now.getFullYear(),\n      month: now.getMonth() + 1,\n      day: now.getDate(),\n      hour: now.getHours(),\n      minute: now.getMinutes(),\n      lat: 0, // Greenwich\n      lon: 0,\n      timezone: 'UTC',\n      city: 'Greenwich'\n    };\n\n    const response = await fetchChartData(transitBirthData);\n    return response.planets || {};\n  }\n\n  /**\n   * Fetch progressed chart positions\n   */\n  private async fetchProgressions(birthData: ChartBirthData): Promise<Record<string, Planet>> {\n    // Calculate progressed positions (1 day = 1 year progression)\n    const birthDate = new Date(birthData.year, birthData.month - 1, birthData.day);\n    const now = new Date();\n    const ageInYears = (now.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24 * 365.25);\n    \n    const progressedDate = new Date(birthDate);\n    progressedDate.setDate(progressedDate.getDate() + Math.floor(ageInYears));\n\n    const progressedBirthData: ChartBirthData = {\n      ...birthData,\n      year: progressedDate.getFullYear(),\n      month: progressedDate.getMonth() + 1,\n      day: progressedDate.getDate()\n    };\n\n    const response = await fetchChartData(progressedBirthData);\n    return response.planets || {};\n  }\n\n  /**\n   * Detect forming and separating aspects\n   */\n  private detectAspectChanges(\n    natal: ChartData,\n    oldTransits: Record<PlanetName, Planet>,\n    newTransits: Record<PlanetName, Planet>\n  ): AspectEvent[] {\n    const events: AspectEvent[] = [];\n    const aspectAngles = [0, 60, 90, 120, 150, 180]; // Major aspects\n    const maxOrb = 8; // Maximum orb to consider\n\n    const transitPlanetNames = Object.keys(newTransits) as PlanetName[];\n    const natalPlanetNames = Object.keys(natal.planets) as PlanetName[];\n\n    transitPlanetNames.forEach(transitPlanet => {\n      const transitData = newTransits[transitPlanet];\n      natalPlanetNames.forEach(natalPlanet => {\n        const natalData = natal.planets[natalPlanet];\n        aspectAngles.forEach(aspectAngle => {\n          const currentAngle = Math.abs(transitData.position - natalData.position) % 360;\n          const currentOrb = Math.min(\n            Math.abs(currentAngle - aspectAngle),\n            Math.abs(currentAngle - (aspectAngle + 360)),\n            Math.abs((currentAngle + 360) - aspectAngle)\n          );\n\n          if (currentOrb <= maxOrb) {\n            const oldTransitData = oldTransits[transitPlanet];\n            if (oldTransitData) {\n              const oldAngle = Math.abs(oldTransitData.position - natalData.position) % 360;\n              const oldOrb = Math.min(\n                Math.abs(oldAngle - aspectAngle),\n                Math.abs(oldAngle - (aspectAngle + 360)),\n                Math.abs((oldAngle + 360) - aspectAngle)\n              );\n\n              try {\n                // Detect if aspect is forming (orb decreasing) or separating (orb increasing)\n                if (currentOrb < oldOrb && currentOrb <= 1) {\n                  events.push({\n                    type: 'aspect-forming',\n                    transitPlanet,\n                    natalPlanet,\n                    aspectType: this.getAspectType(aspectAngle),\n                    orb: currentOrb,\n                    exactDate: this.calculateExactAspectDate(transitData, natalData, aspectAngle),\n                    strength: this.getAspectStrengthFromOrb(currentOrb),\n                    isApplying: true,\n                    significance: this.getAspectStrength(transitPlanet, natalPlanet, aspectAngle)\n                  });\n                } else if (currentOrb > oldOrb && oldOrb <= 1) {\n                  events.push({\n                    type: 'aspect-separating',\n                    transitPlanet,\n                    natalPlanet,\n                    aspectType: this.getAspectType(aspectAngle),\n                    orb: currentOrb,\n                    exactDate: new Date(), // Just passed\n                    strength: this.getAspectStrengthFromOrb(currentOrb),\n                    isApplying: false,\n                    significance: this.getAspectStrength(transitPlanet, natalPlanet, aspectAngle)\n                  });\n                }\n              } catch (error) {\n                Logger.error(`Failed to process aspect: ${transitPlanet} to ${natalPlanet} at ${aspectAngle}°`, error);\n                return; // Skip this aspect calculation \n              }\n            }\n          }\n        });\n      });\n    });\n    return events;\n  }\n\n  private getAspectStrength(\n    transitPlanet: PlanetName,\n    natalPlanet: PlanetName,\n    aspectAngle: number\n  ): 'major' | 'minor' {\n    // Major aspects involving luminaries or personal planets are considered major\n    const majorPlanets: PlanetName[] = ['sun', 'moon', 'mercury', 'venus', 'mars'];\n    const majorAspects = [0, 90, 120, 180]; // conjunction, square, trine, opposition\n\n    if (\n      majorAspects.includes(aspectAngle) &&\n      (majorPlanets.includes(transitPlanet) || majorPlanets.includes(natalPlanet))\n    ) {\n      return 'major';\n    }\n    return 'minor';\n  }\n\n  /**\n   * Calculate when an aspect will be exact\n   */\n  private calculateExactAspectDate(transit: Planet, natal: Planet, aspectAngle: number): Date {\n    // Simplified calculation - in production, use more accurate ephemeris math\n    const speed = transit.speed || 1; // degrees per day\n    const currentAngle = Math.abs(transit.position - natal.position) % 360;\n    const targetAngle = aspectAngle;\n    const angleDifference = Math.abs(currentAngle - targetAngle);\n    \n    const daysToExact = angleDifference / Math.abs(speed);\n    const exactDate = new Date();\n    exactDate.setDate(exactDate.getDate() + daysToExact);\n    \n    return exactDate;\n  }\n\n  /**\n   * Get aspect type from angle\n   */\n  private getAspectType(angle: number): AspectType {\n    const aspectMap: Record<number, AspectType> = {\n      0: 'conjunction',\n      60: 'sextile',\n      90: 'square',\n      120: 'trine',\n      150: 'quincunx',\n      180: 'opposition'\n    };\n    \n    const aspectType = aspectMap[angle];\n    if (!aspectType) {\n      throw new Error(`Invalid aspect angle: ${angle}`);\n    }\n    return aspectType;\n  }\n\n  /**\n   * Get aspect strength from orb\n   */\n  private getAspectStrengthFromOrb(orb: number): 'strong' | 'medium' | 'weak' {\n    if (orb <= 1) return 'strong';\n    if (orb <= 3) return 'medium';\n    return 'weak';\n  }\n\n  /**\n   * Transform unknown data to ChartData format with validation\n   */\n  private transformChartData(data: unknown): ChartData {\n    if (isValidChartData(data)) {\n      return data;\n    }\n    \n    throw new Error('Invalid chart data format');\n  }\n\n  /**\n   * Create empty transit data\n   */\n  private createEmptyTransitData(): Record<PlanetName, Planet> {\n    const planetNames: PlanetName[] = [\n      'sun', 'moon', 'mercury', 'venus', 'mars',\n      'jupiter', 'saturn', 'uranus', 'neptune',\n      'pluto', 'chiron', 'north_node', 'south_node'\n    ];\n\n    return planetNames.reduce((acc, name) => {\n      acc[name] = {\n        name,\n        position: 0,\n        sign: 'aries', // Default\n        house: 1,\n        retrograde: false,\n        speed: 0\n      };\n      return acc;\n    }, {} as Record<PlanetName, Planet>);\n  }\n\n  /**\n   * Extract birth data from chart (reverse transformation)\n   */\n  private getBirthDataFromChart(chartData: ChartData): ChartBirthData {\n    // This would extract birth data from chart metadata\n    // For now, return a placeholder\n    return {\n      year: 1990,\n      month: 1,\n      day: 1,\n      hour: 12,\n      minute: 0,\n      lat: 0,\n      lon: 0,\n      timezone: 'UTC',\n      city: 'Unknown'\n    };\n  }\n\n  /**\n   * Process pending updates when connection is restored\n   */\n  private async processPendingUpdates() {\n    if (!this.isOnline) return;\n\n    for (const [chartId, pendingDate] of this.pendingUpdates.entries()) {\n      try {\n        await this.updateChart(chartId, {\n          enableTransitUpdates: true,\n          enableProgressions: true,\n          aspectAlerts: true\n        });\n        this.pendingUpdates.delete(chartId);\n      } catch (error) {\n        Logger.error(`Failed to process pending update for chart ${chartId}`, error);\n      }\n    }\n  }\n\n  /**\n   * Get chart data\n   */\n  getChart(rawChartId: string): ChartDataSync | undefined {\n    const chartId = toChartId(rawChartId);\n    return this.charts.get(chartId);\n  }\n\n  /**\n   * Sync chart data to Firestore (for one-off saves)\n   */\n  async syncChart(chartData: ChartData): Promise<ChartId> {\n    try {\n      // Generate a unique chart ID\n      const chartId = toChartId(\n        `chart_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      );\n      \n      if (!isValidChartData(chartData)) {\n        throw new Error('Invalid chart data');\n      }\n      \n      // Create a ChartDataSync object\n      const chartSync: ChartDataSync = {\n        birthData: {\n          year: new Date().getFullYear(),\n          month: new Date().getMonth() + 1,\n          day: new Date().getDate(),\n          hour: new Date().getHours(),\n          minute: new Date().getMinutes(),\n          lat: chartData.latitude || 0,\n          lon: chartData.longitude || 0,\n          timezone: chartData.timezone || 'UTC',\n          city: 'Unknown'\n        },\n        currentData: chartData,\n        lastUpdate: new Date(),\n        pendingUpdates: [],\n        transitData: this.createEmptyTransitData(),\n        settings: {\n          updateInterval: 5,\n          transitTracking: false,\n          aspectAlerts: false,\n          progressionTracking: false\n        }\n      };\n\n      // Store in memory\n      this.charts.set(chartId, chartSync);\n      \n      this.emit('chart-synced', { chartId, chartData: chartSync });\n      \n      Logger.info(`Chart synced successfully with ID: ${chartId}`);\n      return chartId;\n      \n    } catch (error) {\n      Logger.error('Failed to sync chart', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all registered charts\n   */\n  getAllCharts(): Map<ChartId, ChartDataSync> {\n    return new Map(this.charts);\n  }\n\n  /**\n   * Unregister a chart\n   */\n  unregisterChart(rawChartId: string): void {\n    const chartId = toChartId(rawChartId);\n    const interval = this.syncIntervals.get(chartId);\n    if (interval) {\n      clearInterval(interval);\n      this.syncIntervals.delete(chartId);\n    }\n    \n    this.charts.delete(chartId);\n    this.pendingUpdates.delete(chartId);\n    this.emit('chart-unregistered', { chartId });\n  }\n\n  /**\n   * Force refresh all charts\n   */\n  async refreshAllCharts(): Promise<void> {\n    const promises = Array.from(this.charts.keys()).map(chartId =>\n      this.updateChart(chartId, {\n        enableTransitUpdates: true,\n        enableProgressions: true,\n        aspectAlerts: true\n      })\n    );\n    \n    await Promise.allSettled(promises);\n    this.emit('all-charts-refreshed', undefined);\n  }\n\n  /**\n   * Get upcoming aspects for a chart\n   */\n  getUpcomingAspects(rawChartId: string, daysAhead = 7): AspectEvent[] {\n    const chartId = toChartId(rawChartId);\n    const chartData = this.charts.get(chartId);\n    if (!chartData) return [];\n\n    // This would calculate upcoming aspects within the specified timeframe\n    // For now, return empty array - would implement full calculation in production\n    return [];\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    if (this.transitUpdateInterval) {\n      clearInterval(this.transitUpdateInterval);\n    }\n    \n    this.syncIntervals.forEach(interval => clearInterval(interval));\n    this.syncIntervals.clear();\n    this.charts.clear();\n    this.pendingUpdates.clear();\n  this.removeAllListeners();\n  }\n}\n\n// Singleton instance\nlet chartSyncService: ChartSyncService | null = null;\n\nexport const getChartSyncService = (): ChartSyncService => {\n  if (!chartSyncService) {\n    chartSyncService = new ChartSyncService();\n  }\n  return chartSyncService;\n};\n\nexport default ChartSyncService;\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/ephemeris-performance.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":150,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":150,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4059,4069],"text":"(checkCache != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance monitoring for ephemeris operations.\n * \n * This module provides utilities to monitor cache hit rates, latency,\n * and other performance metrics for the ephemeris service.\n */\n\nimport * as React from 'react';\nimport { devConsole, loggingConfig } from '../config/environment';\n\ninterface PerformanceMetrics {\n  cacheHitRate: number;\n  averageLatency: number;\n  totalRequests: number;\n  cacheHits: number;\n  cacheMisses: number;\n  errors: number;\n  lastUpdated: Date;\n}\n\ninterface PerformanceEntry {\n  timestamp: Date;\n  operation: string;\n  latency: number;\n  cacheHit: boolean;\n  success: boolean;\n  error?: string;\n}\n\nclass EphemerisPerformanceMonitor {\n  private entries: PerformanceEntry[] = [];\n  private maxEntries = 1000; // Keep last 1000 entries\n\n  /**\n   * Record a performance entry for an ephemeris operation.\n   */\n  recordOperation(\n    operation: string,\n    latency: number,\n    cacheHit: boolean,\n    success: boolean,\n    error?: string\n  ): void {\n    const entry: PerformanceEntry = {\n      timestamp: new Date(),\n      operation,\n      latency,\n      cacheHit,\n      success,\n      error,\n    };\n\n    this.entries.push(entry);\n\n    // Keep only the most recent entries\n    if (this.entries.length > this.maxEntries) {\n      this.entries = this.entries.slice(-this.maxEntries);\n    }\n\n    // Development logging routed through devConsole to respect global logging policy\n    if (loggingConfig.enableConsole && loggingConfig.level === 'debug') {\n      devConsole.log?.(`[Ephemeris] ${operation}: ${latency}ms (cache: ${cacheHit ? 'hit' : 'miss'})`);\n    }\n  }\n\n  /**\n   * Get current performance metrics.\n   */\n  getMetrics(): PerformanceMetrics {\n    const now = new Date();\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n    \n    // Filter to last hour for more relevant metrics\n    const recentEntries = this.entries.filter(\n      entry => entry.timestamp >= oneHourAgo\n    );\n\n    const totalRequests = recentEntries.length;\n    const cacheHits = recentEntries.filter(entry => entry.cacheHit).length;\n    const cacheMisses = totalRequests - cacheHits;\n    const errors = recentEntries.filter(entry => !entry.success).length;\n    \n    const totalLatency = recentEntries.reduce((sum, entry) => sum + entry.latency, 0);\n    const averageLatency = totalRequests > 0 ? totalLatency / totalRequests : 0;\n    \n    const cacheHitRate = totalRequests > 0 ? (cacheHits / totalRequests) * 100 : 0;\n\n    return {\n      cacheHitRate,\n      averageLatency,\n      totalRequests,\n      cacheHits,\n      cacheMisses,\n      errors,\n      lastUpdated: now,\n    };\n  }\n\n  /**\n   * Get entries for a specific operation.\n   */\n  getOperationEntries(operation: string): PerformanceEntry[] {\n    return this.entries.filter(entry => entry.operation === operation);\n  }\n\n  /**\n   * Clear all performance data.\n   */\n  clear(): void {\n    this.entries = [];\n  }\n\n  /**\n   * Get performance summary as a formatted string.\n   */\n  getSummary(): string {\n    const metrics = this.getMetrics();\n    \n    return [\n      `Ephemeris Performance Summary:`,\n      `  Total requests: ${metrics.totalRequests}`,\n      `  Cache hit rate: ${metrics.cacheHitRate.toFixed(1)}%`,\n      `  Average latency: ${metrics.averageLatency.toFixed(0)}ms`,\n      `  Errors: ${metrics.errors}`,\n      `  Last updated: ${metrics.lastUpdated.toISOString()}`,\n    ].join('\\n');\n  }\n\n  /**\n   * Log current performance summary to console.\n   */\n  logSummary(): void {\n    devConsole.log?.(this.getSummary());\n  }\n}\n\n// Global performance monitor instance\nexport const ephemerisMonitor = new EphemerisPerformanceMonitor();\n\n/**\n * Higher-order function to wrap ephemeris operations with performance monitoring.\n */\nexport function withPerformanceMonitoring<TArgs extends unknown[], TResult>(\n  operation: string,\n  fn: (...args: TArgs) => Promise<TResult>,\n  checkCache?: (...args: TArgs) => boolean\n): (...args: TArgs) => Promise<TResult> {\n  return async (...args: TArgs): Promise<TResult> => {\n    const startTime = performance.now();\n    const cacheHit = checkCache ? checkCache(...args) : false;\n    try {\n      const result = await fn(...args);\n      const endTime = performance.now();\n      const latency = endTime - startTime;\n      ephemerisMonitor.recordOperation(operation, latency, cacheHit, true);\n      return result;\n    } catch (error) {\n      const endTime = performance.now();\n      const latency = endTime - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      ephemerisMonitor.recordOperation(operation, latency, cacheHit, false, errorMessage);\n      throw error;\n    }\n  };\n}\n\n/**\n * React hook to get real-time performance metrics.\n */\nexport function useEphemerisPerformanceMetrics() {\n  const [metrics, setMetrics] = React.useState<PerformanceMetrics>(() => \n    ephemerisMonitor.getMetrics()\n  );\n\n  React.useEffect(() => {\n    const updateMetrics = () => {\n      setMetrics(ephemerisMonitor.getMetrics());\n    };\n\n    // Update metrics every 30 seconds\n    const interval = setInterval(updateMetrics, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const refreshMetrics = React.useCallback(() => {\n    setMetrics(ephemerisMonitor.getMetrics());\n  }, []);\n\n  return {\n    metrics,\n    refreshMetrics,\n    logSummary: ephemerisMonitor.logSummary.bind(ephemerisMonitor),\n  };\n}\n\n// Export performance monitor for external use\nexport { ephemerisMonitor as default };\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/ephemeris.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'@cosmichub/integrations' import is duplicated.","line":18,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":22,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":70},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":85,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":85,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2817,2821],"text":"(date != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":88,"column":15,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":88,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2986,2995],"text":"(julianDay != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2986,2995],"text":"(julianDay ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2986,2995],"text":"(Boolean(julianDay))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":90,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":90,"endColumn":23,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[3090,3092],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":107,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":107,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3611,3615],"text":"(date != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":108,"column":44,"nodeType":"ChainExpression","messageId":"conditionErrorNullableObject","endLine":108,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3691,3707],"text":"((options?.planets) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":113,"column":15,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":113,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4016,4025],"text":"(julianDay != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4016,4025],"text":"(julianDay ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4016,4025],"text":"(Boolean(julianDay))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":115,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":115,"endColumn":23,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[4119,4121],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":156,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":156,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'uniquePlanets' is assigned a value but never used.","line":186,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":24}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Ephemeris service for the astro frontend application.\n * \n * This service provides lazy-loaded, cached access to ephemeris data\n * via the backend API, which proxies to the dedicated ephemeris server.\n */\n\nimport { useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient, type UseQueryResult, type UseMutationResult } from '@tanstack/react-query';\nimport {\n  createEphemerisClient,\n  type EphemerisConfig,\n  type PlanetPosition,\n  type PlanetName,\n  dateToJulianDay,\n  SUPPORTED_PLANETS\n} from '@cosmichub/integrations';\nimport type {\n  CalculationResponse,\n  BatchCalculationResponse,\n  EphemerisHealthResponse\n} from '@cosmichub/integrations';\n\n// Configuration for the ephemeris client\nconst getEphemerisConfig = (): EphemerisConfig => ({\n  // Use the backend API base (frontend talks to backend, which proxies ephemeris)\n  apiBaseUrl: import.meta.env.VITE_API_URL ?? 'http://localhost:8000',\n  timeout: 30000,\n  // API key handled by backend authentication, not needed here\n});\n\n// Query keys for React Query\nexport const ephemerisKeys = {\n  all: ['ephemeris'] as const,\n  health: () => [...ephemerisKeys.all, 'health'] as const,\n  planets: () => [...ephemerisKeys.all, 'planets'] as const,\n  calculation: (julianDay: number, planet: string) => \n    [...ephemerisKeys.all, 'calculation', julianDay, planet] as const,\n  allPositions: (julianDay: number) => \n    [...ephemerisKeys.all, 'positions', julianDay] as const,\n};\n\n/**\n * Hook to get a configured ephemeris client instance\n */\nexport const useEphemerisClient = (): ReturnType<typeof createEphemerisClient> =>\n  useMemo(() => createEphemerisClient(getEphemerisConfig()), []);\n\n/**\n * Hook to check ephemeris service health\n */\nexport const useEphemerisHealth = (): UseQueryResult<EphemerisHealthResponse, Error> => {\n  const client = useEphemerisClient();\n  return useQuery<EphemerisHealthResponse, Error>({\n    queryKey: ephemerisKeys.health(),\n    queryFn: () => client.healthCheck(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 3,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000)\n  });\n};\n\n/**\n * Hook to get supported planets list\n */\nexport const useSupportedPlanets = (): UseQueryResult<PlanetName[], Error> => {\n  const client = useEphemerisClient();\n  return useQuery<PlanetName[], Error>({\n    queryKey: ephemerisKeys.planets(),\n    queryFn: () => client.getSupportedPlanets(),\n    staleTime: 24 * 60 * 60 * 1000, // 24 hours - rarely changes\n    gcTime: 24 * 60 * 60 * 1000\n  });\n};\n\n/**\n * Hook to calculate planetary position for a specific date and planet\n */\nexport const usePlanetaryPosition = (\n  date: Date | null,\n  planet: PlanetName,\n  options?: { enabled?: boolean }\n): UseQueryResult<CalculationResponse, Error> => {\n  const client = useEphemerisClient();\n  const julianDay = date ? dateToJulianDay(date) : null;\n  const isEnabled = options?.enabled !== false && julianDay !== null;\n  return useQuery<CalculationResponse, Error>({\n    queryKey: julianDay ? ephemerisKeys.calculation(julianDay, planet) : [],\n    queryFn: () => {\n      if (julianDay == null) throw new Error('Date is required');\n      return client.calculatePosition(julianDay, planet);\n    },\n    enabled: isEnabled,\n    staleTime: 60 * 60 * 1000,\n    gcTime: 24 * 60 * 60 * 1000\n  });\n};\n\n/**\n * Hook to get all planetary positions for a specific date\n */\nexport const useAllPlanetaryPositions = (\n  date: Date | null,\n  options?: { enabled?: boolean; planets?: PlanetName[] }\n): UseQueryResult<Record<PlanetName, PlanetPosition>, Error> => {\n  const client = useEphemerisClient();\n  const julianDay = date ? dateToJulianDay(date) : null;\n  const planetsToCalculate: PlanetName[] = options?.planets && options.planets.length > 0\n    ? [...new Set(options.planets)] // dedupe if caller passes duplicates\n    : [...SUPPORTED_PLANETS]; // spread to mutable array\n  const isEnabled = options?.enabled !== false && julianDay !== null;\n  return useQuery<Record<PlanetName, PlanetPosition>, Error>({\n    queryKey: julianDay ? ephemerisKeys.allPositions(julianDay) : [],\n    queryFn: async () => {\n      if (julianDay == null) throw new Error('Date is required');\n      const calculations = planetsToCalculate.map((planet) => ({\n        julian_day: julianDay,\n        planet\n      }));\n      const response = await client.calculateBatchPositions(calculations);\n      const positions: Partial<Record<PlanetName, PlanetPosition>> = {};\n      for (const result of response.results) {\n        const planetName = result.planet as PlanetName;\n        positions[planetName] = result.position;\n      }\n      return positions as Record<PlanetName, PlanetPosition>;\n    },\n    enabled: isEnabled,\n    staleTime: 60 * 60 * 1000,\n    gcTime: 24 * 60 * 60 * 1000\n  });\n};\n\n/**\n * Hook to batch calculate multiple planetary positions\n */\nexport const useBatchPlanetaryCalculation = (): UseMutationResult<\n  BatchCalculationResponse,\n  Error,\n  Array<{ date: Date; planet: PlanetName }>,\n  unknown\n> => {\n  const client = useEphemerisClient();\n  const queryClient = useQueryClient();\n  return useMutation<BatchCalculationResponse, Error, Array<{ date: Date; planet: PlanetName }>>({\n    mutationFn: async (requests) => {\n      const calculations = requests.map((req) => ({\n        julian_day: dateToJulianDay(req.date),\n        planet: req.planet\n      }));\n      return client.calculateBatchPositions(calculations);\n    },\n    onSuccess: (data, variables) => {\n      data.results.forEach((result, index) => {\n        const request = variables[index];\n        if (request) {\n          const julianDay = dateToJulianDay(request.date);\n          // Cache the full calculation response for the single planet/date\n          queryClient.setQueryData(\n            ephemerisKeys.calculation(julianDay, request.planet),\n            result\n          );\n        }\n      });\n    }\n  });\n};\n\n/**\n * Utility hook to preload planetary positions for a date range\n */\nexport const usePrefetchPlanetaryPositions = (): { prefetchPositions: (\n  startDate: Date,\n  endDate: Date,\n  planets?: PlanetName[]\n) => Promise<void> } => {\n  const queryClient = useQueryClient();\n  const client = useEphemerisClient();\n\n  const prefetchPositions = async (\n    startDate: Date,\n    endDate: Date,\n    planets: PlanetName[] = [...SUPPORTED_PLANETS]\n  ): Promise<void> => {\n    if (endDate < startDate) return; // no-op on invalid range\n    const uniquePlanets = [...new Set(planets)];\n    const dates: Date[] = [];\n    const currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n      dates.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    const batchSize = 10;\n    for (let i = 0; i < dates.length; i += batchSize) {\n      const batch = dates.slice(i, i + batchSize);\n      await Promise.all(\n        batch.map((date) => {\n          const julianDay = dateToJulianDay(date);\n          return queryClient.prefetchQuery({\n            queryKey: ephemerisKeys.allPositions(julianDay),\n            queryFn: () => client.getAllPlanetaryPositions(julianDay),\n            staleTime: 60 * 60 * 1000\n          });\n        })\n      );\n    }\n  };\n\n  return { prefetchPositions };\n};\n\n/**\n * Hook to invalidate ephemeris cache (useful for forcing refresh)\n */\nexport const useInvalidateEphemerisCache = (): {\n  invalidateAll: () => void;\n  invalidateCalculation: (julianDay: number, planet: PlanetName) => void;\n  invalidateAllPositions: (julianDay: number) => void;\n} => {\n  const queryClient = useQueryClient();\n  const invalidateAll = (): void => {\n    void queryClient.invalidateQueries({ queryKey: ephemerisKeys.all });\n  };\n  const invalidateCalculation = (julianDay: number, planet: PlanetName): void => {\n    void queryClient.invalidateQueries({\n      queryKey: ephemerisKeys.calculation(julianDay, planet)\n    });\n  };\n  const invalidateAllPositions = (julianDay: number): void => {\n    void queryClient.invalidateQueries({\n      queryKey: ephemerisKeys.allPositions(julianDay)\n    });\n  };\n  return { invalidateAll, invalidateCalculation, invalidateAllPositions };\n};\n\n// Export utility functions for direct use\nexport {\n  dateToJulianDay,\n  julianDayToDate,\n  formatPlanetPosition,\n  getAstrologicalSign,\n  SUPPORTED_PLANETS,\n} from '@cosmichub/integrations';\n\n// Export types for convenience\nexport type {\n  PlanetPosition,\n  PlanetName,\n  CalculationResponse,\n  BatchCalculationResponse,\n  EphemerisHealthResponse,\n} from '@cosmichub/integrations';\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.new.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/notificationManager.unified.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":18,"suggestions":[{"fix":{"range":[1121,1153],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":15,"suggestions":[{"fix":{"range":[1243,1274],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/services/validation.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":19,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":19,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[313,316],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":40,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":40,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[874,877],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":58,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":58,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1295,1298],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":75,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1768,1771],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":90,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":90,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2178,2181],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in array predicate return type. The condition is always true.","line":150,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorObject","endLine":150,"endColumn":57,"suggestions":[{"messageId":"explicitBooleanReturnType","fix":{"range":[4043,4049],"text":"(planet): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'planet' is defined but never used.","line":169,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":42}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Validation utilities for chart data and API responses\n */\nimport type {\n  ChartData,\n  Planet,\n  House,\n  Aspect,\n  PlanetName,\n  ZodiacSign,\n  AspectType,\n  ChartAngles,\n} from './api.types';\n\n/**\n * Type guard for validating planet data\n */\nexport function isPlanet(obj: unknown): obj is Planet {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const planet = obj as Planet;\n  return (\n    typeof planet.name === 'string' &&\n    typeof planet.position === 'number' &&\n    planet.position >= 0 &&\n    planet.position < 360 &&\n    typeof planet.sign === 'string' &&\n    typeof planet.house === 'number' &&\n    planet.house >= 1 &&\n    planet.house <= 12 &&\n    typeof planet.retrograde === 'boolean' &&\n    typeof planet.speed === 'number'\n  );\n}\n\n/**\n * Type guard for validating house data\n */\nexport function isHouse(obj: unknown): obj is House {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const house = obj as House;\n  return (\n    typeof house.number === 'number' &&\n    house.number >= 1 &&\n    house.number <= 12 &&\n    typeof house.cusp === 'number' &&\n    house.cusp >= 0 &&\n    house.cusp < 360 &&\n    typeof house.sign === 'string'\n  );\n}\n\n/**\n * Type guard for validating aspect data\n */\nexport function isAspect(obj: unknown): obj is Aspect {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const aspect = obj as Aspect;\n  return (\n    typeof aspect.aspect_type === 'string' &&\n    typeof aspect.planet1 === 'string' &&\n    typeof aspect.planet2 === 'string' &&\n    typeof aspect.orb === 'number' &&\n    typeof aspect.applying === 'boolean' &&\n    typeof aspect.exact === 'boolean'\n  );\n}\n\n/**\n * Type guard for validating chart angles\n */\nexport function isChartAngles(obj: unknown): obj is ChartAngles {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const angles = obj as ChartAngles;\n  return (\n    typeof angles.ascendant === 'number' &&\n    typeof angles.midheaven === 'number' &&\n    typeof angles.descendant === 'number' &&\n    typeof angles.imumcoeli === 'number'\n  );\n}\n\n/**\n * Type guard for validating complete chart data\n */\nexport function isValidChartData(obj: unknown): obj is ChartData {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const chart = obj as ChartData;\n  return (\n    typeof chart.planets === 'object' &&\n    Object.values(chart.planets).every(isPlanet) &&\n    Array.isArray(chart.houses) &&\n    chart.houses.every(isHouse) &&\n    Array.isArray(chart.aspects) &&\n    chart.aspects.every(isAspect) &&\n    isChartAngles(chart.angles) &&\n    typeof chart.latitude === 'number' &&\n    typeof chart.longitude === 'number' &&\n    typeof chart.timezone === 'string' &&\n    typeof chart.julian_day === 'number' &&\n    typeof chart.house_system === 'string'\n  );\n}\n\n/**\n * Type guard for zodiac signs\n */\nexport function isZodiacSign(value: string): value is ZodiacSign {\n  const validSigns: ZodiacSign[] = [\n    'aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo',\n    'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'\n  ];\n  return validSigns.includes(value as ZodiacSign);\n}\n\n/**\n * Type guard for planet names\n */\nexport function isPlanetName(value: string): value is PlanetName {\n  const validPlanets: PlanetName[] = [\n    'sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn',\n    'uranus', 'neptune', 'pluto', 'chiron', 'north_node', 'south_node'\n  ];\n  return validPlanets.includes(value as PlanetName);\n}\n\n/**\n * Type guard for aspect types\n */\nexport function isAspectType(value: string): value is AspectType {\n  const validAspects: AspectType[] = [\n    'conjunction', 'opposition', 'trine', 'square',\n    'sextile', 'quincunx', 'semisextile'\n  ];\n  return validAspects.includes(value as AspectType);\n}\n\n/**\n * Validates all required planets are present in chart data\n */\nexport function hasRequiredPlanets(planets: Record<PlanetName, Planet>): boolean {\n  const requiredPlanets: PlanetName[] = [\n    'sun', 'moon', 'mercury', 'venus', 'mars',\n    'jupiter', 'saturn'\n  ];\n  return requiredPlanets.every(planet => planets[planet]);\n}\n\n/**\n * Validates house system is supported\n */\nexport function isValidHouseSystem(\n  system: string\n): system is 'placidus' | 'koch' | 'equal' | 'whole_sign' | 'regiomontanus' | 'campanus' | 'porphyry' {\n  const validSystems = [\n    'placidus', 'koch', 'equal', 'whole_sign',\n    'regiomontanus', 'campanus', 'porphyry'\n  ];\n  return validSystems.includes(system);\n}\n\n/**\n * Calculates dignities for a planet\n */\nexport function calculateDignities(planet: Planet): Planet['dignity'] {\n  // Implement dignity calculation logic\n  return undefined; // Placeholder\n}\n\n/**\n * Validates and normalizes aspect orbs\n */\nexport function normalizeAspectOrb(orb: number, aspectType: AspectType): number {\n  const maxOrbs: Record<AspectType, number> = {\n    conjunction: 10,\n    opposition: 10,\n    trine: 8,\n    square: 8,\n    sextile: 6,\n    quincunx: 3,\n    semisextile: 3\n  };\n  \n  return Math.min(Math.abs(orb), maxOrbs[aspectType]);\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/shared/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/test-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/test/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { vi } from 'vitest';\n\n// Mock Web Audio API for testing\n(globalThis as typeof globalThis & { AudioContext: typeof AudioContext }).AudioContext = vi.fn().mockImplementation(() => ({\n  createOscillator: vi.fn(() => ({\n    frequency: { setValueAtTime: vi.fn() },\n    type: 'sine',\n    connect: vi.fn(),\n    start: vi.fn(),\n    stop: vi.fn(),\n    disconnect: vi.fn(),\n  })),\n  createGain: vi.fn(() => ({\n    gain: { \n      setValueAtTime: vi.fn(),\n      linearRampToValueAtTime: vi.fn(),\n      exponentialRampToValueAtTime: vi.fn(),\n    },\n    connect: vi.fn(),\n    disconnect: vi.fn(),\n  })),\n  destination: {},\n  currentTime: 0,\n  state: 'running',\n  resume: vi.fn().mockResolvedValue(undefined),\n}));\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(), // deprecated\n    removeListener: vi.fn(), // deprecated\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n\n// Mock ResizeObserver\n(globalThis as typeof globalThis & { ResizeObserver: typeof ResizeObserver }).ResizeObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\n// Mock IntersectionObserver\n(globalThis as typeof globalThis & { IntersectionObserver: typeof IntersectionObserver }).IntersectionObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/astrology.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/birth-data.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":17,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[380,385],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":48,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1265,1270],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UnifiedBirthData } from '@cosmichub/types';\n\nexport interface ChartBirthData extends UnifiedBirthData {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  city: string;\n  lat: number;\n  lon: number;\n  timezone: string;\n}\n\n// Type guard for ChartBirthData\nexport function isChartBirthData(value: unknown): value is ChartBirthData {\n  if (!value || typeof value !== 'object') return false;\n  \n  const data = value as Partial<ChartBirthData>;\n  return (\n    typeof data.year === 'number' &&\n    typeof data.month === 'number' &&\n    typeof data.day === 'number' &&\n    typeof data.hour === 'number' &&\n    typeof data.minute === 'number' &&\n    typeof data.city === 'string' &&\n    typeof data.lat === 'number' &&\n    typeof data.lon === 'number' &&\n    typeof data.timezone === 'string' &&\n    data.month >= 1 && data.month <= 12 &&\n    data.day >= 1 && data.day <= 31 &&\n    data.hour >= 0 && data.hour <= 23 &&\n    data.minute >= 0 && data.minute <= 59\n  );\n}\n\nexport interface StoredBirthData {\n  date: string;\n  time: string;\n  location: string;\n  lat?: number;\n  lon?: number;\n  timezone?: string;\n}\n\n// Type guard for StoredBirthData\nexport function isStoredBirthData(value: unknown): value is StoredBirthData {\n  if (!value || typeof value !== 'object') return false;\n  \n  const data = value as Partial<StoredBirthData>;\n  return (\n    typeof data.date === 'string' &&\n    typeof data.time === 'string' &&\n    typeof data.location === 'string' &&\n    (data.lat === undefined || typeof data.lat === 'number') &&\n    (data.lon === undefined || typeof data.lon === 'number') &&\n    (data.timezone === undefined || typeof data.timezone === 'string')\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/cosmichub-auth.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":22,"fix":{"range":[718,721],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[718,721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[718,721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":26,"column":19,"nodeType":"TSAnyKeyword","messageId":"overrides","endLine":26,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Type declarations for @cosmichub/auth package\ndeclare module '@cosmichub/auth' {\n  import { ReactNode, FC } from 'react';\n  import { User } from 'firebase/auth';\n\n  export interface AuthState {\n    user: User | null;\n    loading: boolean;\n    signOut: () => Promise<void>;\n  }\n\n  export const useAuth: () => AuthState;\n\n  export interface AuthProviderProps {\n    children: ReactNode;\n    appName?: string;\n  }\n\n  export const AuthProvider: FC<AuthProviderProps>;\n\n  export const logIn: (email: string, password: string) => Promise<User>;\n  export const signUp: (email: string, password: string) => Promise<User>;\n  export const logOut: () => Promise<void>;\n\n  export interface SubscriptionState {\n    subscription: any | null;\n    userTier: string;\n    tier: string; // Alias for userTier for compatibility\n    isLoading: boolean;\n    hasFeature: (feature: string, app?: 'astro' | 'healwave') => boolean;\n    upgradeRequired: (feature: string) => void;\n    refreshSubscription: () => Promise<void>;\n    checkUsageLimit?: (limitType: string) => { allowed: boolean; current: number; limit: number };\n  }\n\n  export const useSubscription: () => SubscriptionState;\n\n  export interface SubscriptionProviderProps {\n    children: ReactNode;\n    appType: string;\n  }\n\n  export const SubscriptionProvider: FC<SubscriptionProviderProps>;\n\n  export * from 'firebase/auth';\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/eslint-js.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":66,"fix":{"range":[230,233],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Type declarations for @eslint/js module\n * This provides TypeScript support for ESLint configuration\n */\n\ndeclare module '@eslint/js' {\n  interface ESLintRule {\n    [key: string]: string | number | boolean | object | Array<any>;\n  }\n\n  interface ESLintConfig {\n    rules: Record<string, ESLintRule>;\n  }\n\n  interface ESLintConfigs {\n    recommended: ESLintConfig;\n    all: ESLintConfig;\n  }\n\n  const js: {\n    configs: ESLintConfigs;\n  };\n\n  export = js;\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/eslint-plugin-jsx-a11y.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":20,"fix":{"range":[264,267],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[264,267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[264,267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Minimal ambient declaration for eslint-plugin-jsx-a11y so TS stops complaining.\n// If official types become available, remove this file and install them.\ndeclare module 'eslint-plugin-jsx-a11y' {\n  // Plugin object shape is intentionally loose.\n  const plugin: any;\n  export = plugin;\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/house-cusp.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":24,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":24,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[596,599],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Strongly-typed definitions for house cusp data in chart calculations\n */\n\nexport interface HouseCusp {\n  /** House number (1-12) */\n  house?: number;\n  /** Alternative field for house number */\n  number?: number;\n  /** Zodiac sign of the house cusp */\n  sign?: string;\n  /** Absolute position in degrees (0-360) */\n  cusp?: number;\n  /** Degree within the sign (0-30) */\n  degree?: number | string;\n  /** Ruling planet of the sign */\n  ruler?: string;\n}\n\n/**\n * Type guard to check if an object is a valid HouseCusp\n */\nexport function isHouseCusp(obj: unknown): obj is HouseCusp {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const houseCusp = obj as HouseCusp;\n  return (\n    (typeof houseCusp.house === 'number' || typeof houseCusp.number === 'number') &&\n    (typeof houseCusp.cusp === 'number' || \n     typeof houseCusp.degree === 'number' || \n     typeof houseCusp.degree === 'string')\n  );\n}\n\n/**\n * Type guard to check if an array contains valid HouseCusps\n */\nexport function isHouseCuspArray(arr: unknown[]): arr is HouseCusp[] {\n  return arr.length > 0 && isHouseCusp(arr[0]);\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/preferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/processed-chart.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AspectData' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AngleData' is defined but never used.","line":4,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":57},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":94,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":94,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2795,2798],"text":"(Boolean(obj))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Strongly-typed definitions for processed chart data used in displays\n */\nimport { AspectData, PlanetData, AsteroidData, AngleData, HouseData } from './astrology.types';\n\n/**\n * Processed planet data with formatted degree for display\n */\nexport interface ProcessedPlanetData extends Omit<PlanetData, 'degree'> {\n  /** Formatted degree string with decimal precision */\n  degree: string;\n  /** Whether the planet is in retrograde motion */\n  retrograde?: boolean;\n  /** Position in degrees (0-360) */\n  position?: number;\n}\n\n/**\n * Processed asteroid data with formatted degree and aspects for display\n */\nexport interface ProcessedAsteroidData extends Omit<AsteroidData, 'degree' | 'aspects'> {\n  /** Formatted degree string with decimal precision */\n  degree: string;\n  /** Formatted aspect string describing aspects to other points */\n  aspects: string;\n  /** Position in degrees (0-360) */\n  position?: number;\n}\n\n/**\n * Processed angle data with formatted degree for display\n */\nexport interface ProcessedAngleData {\n  /** Name of the angle (e.g., \"Ascendant\", \"Midheaven\") */\n  name: string;\n  /** Zodiac sign of the angle */\n  sign: string;\n  /** Formatted degree string with decimal precision */\n  degree: string;\n  /** Position in degrees (0-360) */\n  position?: number;\n}\n\n/**\n * Processed house data with formatted cusp degree for display\n */\nexport interface ProcessedHouseData extends HouseData {\n  /** Formatted cusp degree string with decimal precision */\n  cuspDegree: string;\n  /** List of planets in this house as a formatted string */\n  planetsInHouse: string;\n  /** House number as string (e.g., \"1st\", \"2nd\") */\n  house: string;\n  /** Original house data for reference */\n  originalHouse?: Record<string, unknown>;\n}\n\n/**\n * Processed aspect data with formatted orb and status for display\n */\nexport interface ProcessedAspectData {\n  /** Name of the first planet/point */\n  planet1: string;\n  /** Name of the second planet/point */\n  planet2: string;\n  /** Type of aspect (e.g., \"Conjunction\", \"Trine\") */\n  type: string;\n  /** Formatted orb string with decimal precision */\n  orb: string;\n  /** Status of the aspect (e.g., \"Applying\", \"Separating\", \"Exact\") */\n  applying: string;\n}\n\n/**\n * Collection of all processed chart sections\n */\nexport interface ProcessedChartSections {\n  /** Processed planet data */\n  planets: ProcessedPlanetData[];\n  /** Processed asteroid data */\n  asteroids: ProcessedAsteroidData[];\n  /** Processed angle data */\n  angles: ProcessedAngleData[];\n  /** Processed house data */\n  houses: ProcessedHouseData[];\n  /** Processed aspect data */\n  aspects: ProcessedAspectData[];\n}\n\n/**\n * Type guard to check if an object is a valid ProcessedAngleData\n */\nexport function isProcessedAngleData(obj: unknown): obj is ProcessedAngleData {\n  if (!obj || typeof obj !== 'object') return false;\n  \n  const angle = obj as ProcessedAngleData;\n  return (\n    typeof angle.name === 'string' &&\n    typeof angle.sign === 'string' &&\n    typeof angle.degree === 'string'\n  );\n}\n\n/**\n * Type guard to check if an array contains valid ProcessedAngleData\n */\nexport function isProcessedAngleDataArray(arr: unknown[]): arr is ProcessedAngleData[] {\n  return arr.length > 0 && isProcessedAngleData(arr[0]);\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/pwa.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/types/subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/chart-validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/chart-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/componentLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/exportUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/guards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/logger.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":7,"column":64,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":7,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[274,278],"text":"(Boolean(data))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":11,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'unknown' overrides all other types in this union type.","line":27,"column":49,"nodeType":"TSUnknownKeyword","messageId":"overrides","endLine":27,"endColumn":56}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":20,"suggestions":[{"fix":{"range":[479,537],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":17,"suggestions":[{"fix":{"range":[651,707],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":17,"suggestions":[{"fix":{"range":[815,871],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":18,"suggestions":[{"fix":{"range":[989,1183],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Structured logging utility for CosmicHub\n */\nexport class Logger {\n  private static formatMessage(level: string, message: string, data?: unknown): string {\n    const timestamp = new Date().toISOString();\n    return `[${timestamp}] ${level.toUpperCase()}: ${message}${data ? ` - ${JSON.stringify(data)}` : ''}`;\n  }\n\n  static debug(message: string, data?: unknown): void {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.debug(this.formatMessage('debug', message, data));\n    }\n  }\n\n  static info(message: string, data?: unknown): void {\n    // eslint-disable-next-line no-console\n    console.info(this.formatMessage('info', message, data));\n  }\n\n  static warn(message: string, data?: unknown): void {\n    // eslint-disable-next-line no-console\n    console.warn(this.formatMessage('warn', message, data));\n  }\n\n  static error(message: string, error?: Error | unknown): void {\n    // eslint-disable-next-line no-console\n    console.error(this.formatMessage('error', message, {\n      message: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined\n    }));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/typeGuards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/upgradeEvents.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-var-requires').","line":31,"column":11,"severity":1,"nodeType":null,"fix":{"range":[804,866],"text":" "}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":66},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":32,"column":34,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":32,"endColumn":66},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":32,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":33,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":33,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":33,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":47,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":60}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Event system for triggering upgrade modal from anywhere in the app\n */\n\nexport interface UpgradeRequiredEvent {\n  feature: string;\n}\n\nclass UpgradeEventManager {\n  private listeners: Array<(event: UpgradeRequiredEvent) => void> = [];\n\n  subscribe(listener: (event: UpgradeRequiredEvent) => void): () => void {\n    this.listeners.push(listener);\n    \n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  emit(event: UpgradeRequiredEvent): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener(event);\n      } catch (error) {\n        // Lazy import to avoid cyclic dependency and keep this utility lightweight\n        try {\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\n          const { devConsole } = require('../config/environment');\n          devConsole.error('❌ Error in upgrade event listener:', error);\n        } catch {\n          if (typeof console !== 'undefined') console.error('Error in upgrade event listener:', error);\n        }\n      }\n    });\n  }\n\n  triggerUpgradeRequired(feature: string): void {\n    this.emit({ feature });\n  }\n}\n\n// Export singleton instance\nexport const upgradeEventManager = new UpgradeEventManager();\n","usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"/Users/Chris/Projects/CosmicHub/apps/astro/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]}]
