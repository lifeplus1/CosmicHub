# Multi-stage optimized build for healwave app
FROM node:20-alpine AS deps
WORKDIR /app

# Install system dependencies
RUN corepack enable && apk add --no-cache git

# Copy package manifests first for optimal caching
COPY package*.json turbo.json tsconfig*.json ./
COPY packages/ui/package.json packages/ui/
COPY packages/auth/package.json packages/auth/
COPY packages/config/package.json packages/config/
COPY apps/healwave/package.json apps/healwave/

# Install dependencies with npm cache mount
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.cache \
    npm ci --only=production=false

FROM node:20-alpine AS builder
WORKDIR /app
RUN corepack enable

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./
COPY --from=deps /app/turbo.json ./
COPY --from=deps /app/tsconfig*.json ./

# Copy only essential package sources
COPY packages/ui/ packages/ui/
COPY packages/auth/ packages/auth/
COPY packages/config/ packages/config/
COPY apps/healwave/ apps/healwave/

# Build packages in parallel using turbo (skip UI for now due to config issues)
RUN --mount=type=cache,target=/root/.cache/turbo \
    npm run build --workspace=@cosmichub/auth --workspace=@cosmichub/config || echo "Skipping package builds - using direct imports"

FROM builder AS development
WORKDIR /app/apps/healwave
EXPOSE 3000
ENV NODE_ENV=development
CMD ["npm", "run", "dev"]

FROM builder AS build-stage
RUN --mount=type=cache,target=/root/.cache/turbo \
    npm run build --workspace=healwave

FROM node:20-alpine AS production
WORKDIR /app
RUN npm install -g serve
COPY --from=build-stage /app/apps/healwave/dist ./dist
EXPOSE 3000
CMD ["serve", "-s", "dist", "-p", "3000"]
