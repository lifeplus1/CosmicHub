# Multi-stage optimized build for astro app
FROM node:20-alpine AS deps
WORKDIR /app

# Install system dependencies
RUN corepack enable && apk add --no-cache git

# Copy package manifests first for optimal caching
COPY package*.json turbo.json ./
COPY packages/auth/package.json packages/auth/
COPY packages/integrations/package.json packages/integrations/
COPY packages/config/package.json packages/config/
COPY packages/ui/package.json packages/ui/
COPY apps/astro/package.json apps/astro/

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.cache \
    npm ci --only=production=false

FROM node:20-alpine AS builder
WORKDIR /app
RUN corepack enable

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./
COPY --from=deps /app/turbo.json ./

# Copy only essential sources
COPY packages/auth/ packages/auth/
COPY packages/integrations/ packages/integrations/
COPY packages/config/ packages/config/
COPY packages/ui/ packages/ui/
COPY shared/ shared/
COPY apps/astro/ apps/astro/

# Build packages in parallel using turbo
RUN --mount=type=cache,target=/root/.cache/turbo \
    npm run build --workspace=@cosmichub/integrations --workspace=@cosmichub/auth --workspace=@cosmichub/config --workspace=@cosmichub/ui

FROM builder AS development
WORKDIR /app/apps/astro
EXPOSE 3000
ENV NODE_ENV=development
ENV VITE_CONFIG_FILE=vite.config.js
CMD ["npm", "run", "dev"]

FROM builder AS build-stage
RUN --mount=type=cache,target=/root/.cache/turbo \
    npm run build --workspace=astro

FROM node:20-alpine AS production
WORKDIR /app
RUN npm install -g serve
COPY --from=build-stage /app/apps/astro/dist ./dist
EXPOSE 3000
CMD ["serve", "-s", "dist", "-p", "3000"]
